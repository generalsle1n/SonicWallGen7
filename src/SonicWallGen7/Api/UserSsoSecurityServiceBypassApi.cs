/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using SonicWallGen7.Client;
using SonicWallGen7.Model;

namespace SonicWallGen7.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserSsoSecurityServiceBypassApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE SSO security service bypass.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDRGRPNAME">Group address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEDelete(string ADDRGRPNAME, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE SSO security service bypass.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDRGRPNAME">Group address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEDeleteWithHttpInfo(string ADDRGRPNAME, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDRGRPNAME">Group address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserSsoSecurityServiceBypassCollection</returns>
        UserSsoSecurityServiceBypassCollection UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEGet(string ADDRGRPNAME, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDRGRPNAME">Group address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserSsoSecurityServiceBypassCollection</returns>
        ApiResponse<UserSsoSecurityServiceBypassCollection> UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEGetWithHttpInfo(string ADDRGRPNAME, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDRGRPNAME">Group address object name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEPut(string ADDRGRPNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDRGRPNAME">Group address object name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEPutWithHttpInfo(string ADDRGRPNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE SSO security service bypass.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDROBJNAME">Security service bypass IP name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus UserSsoSecurityServicesBypassAddressNameADDROBJNAMEDelete(string ADDROBJNAME, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE SSO security service bypass.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDROBJNAME">Security service bypass IP name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> UserSsoSecurityServicesBypassAddressNameADDROBJNAMEDeleteWithHttpInfo(string ADDROBJNAME, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDROBJNAME">Security service bypass IP name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserSsoSecurityServiceBypassCollection</returns>
        UserSsoSecurityServiceBypassCollection UserSsoSecurityServicesBypassAddressNameADDROBJNAMEGet(string ADDROBJNAME, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDROBJNAME">Security service bypass IP name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserSsoSecurityServiceBypassCollection</returns>
        ApiResponse<UserSsoSecurityServiceBypassCollection> UserSsoSecurityServicesBypassAddressNameADDROBJNAMEGetWithHttpInfo(string ADDROBJNAME, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDROBJNAME">Security service bypass IP name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus UserSsoSecurityServicesBypassAddressNameADDROBJNAMEPut(string ADDROBJNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDROBJNAME">Security service bypass IP name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> UserSsoSecurityServicesBypassAddressNameADDROBJNAMEPutWithHttpInfo(string ADDROBJNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserSsoSecurityServiceBypassCollection</returns>
        UserSsoSecurityServiceBypassCollection UserSsoSecurityServicesBypassGet(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserSsoSecurityServiceBypassCollection</returns>
        ApiResponse<UserSsoSecurityServiceBypassCollection> UserSsoSecurityServicesBypassGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create user SSO security service bypass.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus UserSsoSecurityServicesBypassPost(UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create user SSO security service bypass.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> UserSsoSecurityServicesBypassPostWithHttpInfo(UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus UserSsoSecurityServicesBypassPut(UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> UserSsoSecurityServicesBypassPutWithHttpInfo(UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE SSO security service bypass.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="BLTNAME">SSO bypass built-in object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEDelete(string BLTNAME, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE SSO security service bypass.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="BLTNAME">SSO bypass built-in object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEDeleteWithHttpInfo(string BLTNAME, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="BLTNAME">SSO bypass built-in object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserSsoSecurityServiceBypassCollection</returns>
        UserSsoSecurityServiceBypassCollection UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEGet(string BLTNAME, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="BLTNAME">SSO bypass built-in object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserSsoSecurityServiceBypassCollection</returns>
        ApiResponse<UserSsoSecurityServiceBypassCollection> UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEGetWithHttpInfo(string BLTNAME, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="BLTNAME">SSO bypass built-in object name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEPut(string BLTNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="BLTNAME">SSO bypass built-in object name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEPutWithHttpInfo(string BLTNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE SSO security service bypass.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GRPNAME">Service object group name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus UserSsoSecurityServicesBypassServiceGroupGRPNAMEDelete(string GRPNAME, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE SSO security service bypass.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GRPNAME">Service object group name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> UserSsoSecurityServicesBypassServiceGroupGRPNAMEDeleteWithHttpInfo(string GRPNAME, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GRPNAME">Service object group name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserSsoSecurityServiceBypassCollection</returns>
        UserSsoSecurityServiceBypassCollection UserSsoSecurityServicesBypassServiceGroupGRPNAMEGet(string GRPNAME, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GRPNAME">Service object group name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserSsoSecurityServiceBypassCollection</returns>
        ApiResponse<UserSsoSecurityServiceBypassCollection> UserSsoSecurityServicesBypassServiceGroupGRPNAMEGetWithHttpInfo(string GRPNAME, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GRPNAME">Service object group name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus UserSsoSecurityServicesBypassServiceGroupGRPNAMEPut(string GRPNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GRPNAME">Service object group name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> UserSsoSecurityServicesBypassServiceGroupGRPNAMEPutWithHttpInfo(string GRPNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE SSO security service bypass.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="OBJNAME">SSO bypass rule service name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus UserSsoSecurityServicesBypassServiceNameOBJNAMEDelete(string OBJNAME, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE SSO security service bypass.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="OBJNAME">SSO bypass rule service name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> UserSsoSecurityServicesBypassServiceNameOBJNAMEDeleteWithHttpInfo(string OBJNAME, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="OBJNAME">SSO bypass rule service name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserSsoSecurityServiceBypassCollection</returns>
        UserSsoSecurityServiceBypassCollection UserSsoSecurityServicesBypassServiceNameOBJNAMEGet(string OBJNAME, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="OBJNAME">SSO bypass rule service name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserSsoSecurityServiceBypassCollection</returns>
        ApiResponse<UserSsoSecurityServiceBypassCollection> UserSsoSecurityServicesBypassServiceNameOBJNAMEGetWithHttpInfo(string OBJNAME, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="OBJNAME">SSO bypass rule service name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus UserSsoSecurityServicesBypassServiceNameOBJNAMEPut(string OBJNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="OBJNAME">SSO bypass rule service name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> UserSsoSecurityServicesBypassServiceNameOBJNAMEPutWithHttpInfo(string OBJNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserSsoSecurityServiceBypassApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE SSO security service bypass.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDRGRPNAME">Group address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEDeleteAsync(string ADDRGRPNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE SSO security service bypass.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDRGRPNAME">Group address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEDeleteWithHttpInfoAsync(string ADDRGRPNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDRGRPNAME">Group address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserSsoSecurityServiceBypassCollection</returns>
        System.Threading.Tasks.Task<UserSsoSecurityServiceBypassCollection> UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEGetAsync(string ADDRGRPNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDRGRPNAME">Group address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserSsoSecurityServiceBypassCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSsoSecurityServiceBypassCollection>> UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEGetWithHttpInfoAsync(string ADDRGRPNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDRGRPNAME">Group address object name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEPutAsync(string ADDRGRPNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDRGRPNAME">Group address object name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEPutWithHttpInfoAsync(string ADDRGRPNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE SSO security service bypass.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDROBJNAME">Security service bypass IP name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> UserSsoSecurityServicesBypassAddressNameADDROBJNAMEDeleteAsync(string ADDROBJNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE SSO security service bypass.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDROBJNAME">Security service bypass IP name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> UserSsoSecurityServicesBypassAddressNameADDROBJNAMEDeleteWithHttpInfoAsync(string ADDROBJNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDROBJNAME">Security service bypass IP name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserSsoSecurityServiceBypassCollection</returns>
        System.Threading.Tasks.Task<UserSsoSecurityServiceBypassCollection> UserSsoSecurityServicesBypassAddressNameADDROBJNAMEGetAsync(string ADDROBJNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDROBJNAME">Security service bypass IP name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserSsoSecurityServiceBypassCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSsoSecurityServiceBypassCollection>> UserSsoSecurityServicesBypassAddressNameADDROBJNAMEGetWithHttpInfoAsync(string ADDROBJNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDROBJNAME">Security service bypass IP name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> UserSsoSecurityServicesBypassAddressNameADDROBJNAMEPutAsync(string ADDROBJNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDROBJNAME">Security service bypass IP name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> UserSsoSecurityServicesBypassAddressNameADDROBJNAMEPutWithHttpInfoAsync(string ADDROBJNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserSsoSecurityServiceBypassCollection</returns>
        System.Threading.Tasks.Task<UserSsoSecurityServiceBypassCollection> UserSsoSecurityServicesBypassGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserSsoSecurityServiceBypassCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSsoSecurityServiceBypassCollection>> UserSsoSecurityServicesBypassGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create user SSO security service bypass.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> UserSsoSecurityServicesBypassPostAsync(UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create user SSO security service bypass.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> UserSsoSecurityServicesBypassPostWithHttpInfoAsync(UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> UserSsoSecurityServicesBypassPutAsync(UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> UserSsoSecurityServicesBypassPutWithHttpInfoAsync(UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE SSO security service bypass.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="BLTNAME">SSO bypass built-in object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEDeleteAsync(string BLTNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE SSO security service bypass.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="BLTNAME">SSO bypass built-in object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEDeleteWithHttpInfoAsync(string BLTNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="BLTNAME">SSO bypass built-in object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserSsoSecurityServiceBypassCollection</returns>
        System.Threading.Tasks.Task<UserSsoSecurityServiceBypassCollection> UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEGetAsync(string BLTNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="BLTNAME">SSO bypass built-in object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserSsoSecurityServiceBypassCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSsoSecurityServiceBypassCollection>> UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEGetWithHttpInfoAsync(string BLTNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="BLTNAME">SSO bypass built-in object name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEPutAsync(string BLTNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="BLTNAME">SSO bypass built-in object name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEPutWithHttpInfoAsync(string BLTNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE SSO security service bypass.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GRPNAME">Service object group name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> UserSsoSecurityServicesBypassServiceGroupGRPNAMEDeleteAsync(string GRPNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE SSO security service bypass.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GRPNAME">Service object group name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> UserSsoSecurityServicesBypassServiceGroupGRPNAMEDeleteWithHttpInfoAsync(string GRPNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GRPNAME">Service object group name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserSsoSecurityServiceBypassCollection</returns>
        System.Threading.Tasks.Task<UserSsoSecurityServiceBypassCollection> UserSsoSecurityServicesBypassServiceGroupGRPNAMEGetAsync(string GRPNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GRPNAME">Service object group name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserSsoSecurityServiceBypassCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSsoSecurityServiceBypassCollection>> UserSsoSecurityServicesBypassServiceGroupGRPNAMEGetWithHttpInfoAsync(string GRPNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GRPNAME">Service object group name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> UserSsoSecurityServicesBypassServiceGroupGRPNAMEPutAsync(string GRPNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GRPNAME">Service object group name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> UserSsoSecurityServicesBypassServiceGroupGRPNAMEPutWithHttpInfoAsync(string GRPNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE SSO security service bypass.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="OBJNAME">SSO bypass rule service name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> UserSsoSecurityServicesBypassServiceNameOBJNAMEDeleteAsync(string OBJNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE SSO security service bypass.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="OBJNAME">SSO bypass rule service name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> UserSsoSecurityServicesBypassServiceNameOBJNAMEDeleteWithHttpInfoAsync(string OBJNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="OBJNAME">SSO bypass rule service name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserSsoSecurityServiceBypassCollection</returns>
        System.Threading.Tasks.Task<UserSsoSecurityServiceBypassCollection> UserSsoSecurityServicesBypassServiceNameOBJNAMEGetAsync(string OBJNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="OBJNAME">SSO bypass rule service name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserSsoSecurityServiceBypassCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSsoSecurityServiceBypassCollection>> UserSsoSecurityServicesBypassServiceNameOBJNAMEGetWithHttpInfoAsync(string OBJNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="OBJNAME">SSO bypass rule service name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> UserSsoSecurityServicesBypassServiceNameOBJNAMEPutAsync(string OBJNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user SSO security service bypass configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="OBJNAME">SSO bypass rule service name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> UserSsoSecurityServicesBypassServiceNameOBJNAMEPutWithHttpInfoAsync(string OBJNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserSsoSecurityServiceBypassApi : IUserSsoSecurityServiceBypassApiSync, IUserSsoSecurityServiceBypassApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserSsoSecurityServiceBypassApi : IUserSsoSecurityServiceBypassApi
    {
        private SonicWallGen7.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserSsoSecurityServiceBypassApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserSsoSecurityServiceBypassApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserSsoSecurityServiceBypassApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserSsoSecurityServiceBypassApi(string basePath)
        {
            this.Configuration = SonicWallGen7.Client.Configuration.MergeConfigurations(
                SonicWallGen7.Client.GlobalConfiguration.Instance,
                new SonicWallGen7.Client.Configuration { BasePath = basePath }
            );
            this.Client = new SonicWallGen7.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SonicWallGen7.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = SonicWallGen7.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserSsoSecurityServiceBypassApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserSsoSecurityServiceBypassApi(SonicWallGen7.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SonicWallGen7.Client.Configuration.MergeConfigurations(
                SonicWallGen7.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new SonicWallGen7.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SonicWallGen7.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = SonicWallGen7.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserSsoSecurityServiceBypassApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UserSsoSecurityServiceBypassApi(SonicWallGen7.Client.ISynchronousClient client, SonicWallGen7.Client.IAsynchronousClient asyncClient, SonicWallGen7.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SonicWallGen7.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SonicWallGen7.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SonicWallGen7.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SonicWallGen7.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SonicWallGen7.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  DELETE SSO security service bypass.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDRGRPNAME">Group address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEDelete(string ADDRGRPNAME, int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEDeleteWithHttpInfo(ADDRGRPNAME);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  DELETE SSO security service bypass.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDRGRPNAME">Group address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEDeleteWithHttpInfo(string ADDRGRPNAME, int operationIndex = 0)
        {
            // verify the required parameter 'ADDRGRPNAME' is set
            if (ADDRGRPNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'ADDRGRPNAME' when calling UserSsoSecurityServiceBypassApi->UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEDelete");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ADDRGRPNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(ADDRGRPNAME)); // path parameter

            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiStatus>("/user/sso/security-services-bypass/address/group/{ADDRGRPNAME}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  DELETE SSO security service bypass.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDRGRPNAME">Group address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEDeleteAsync(string ADDRGRPNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEDeleteWithHttpInfoAsync(ADDRGRPNAME, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  DELETE SSO security service bypass.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDRGRPNAME">Group address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEDeleteWithHttpInfoAsync(string ADDRGRPNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ADDRGRPNAME' is set
            if (ADDRGRPNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'ADDRGRPNAME' when calling UserSsoSecurityServiceBypassApi->UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEDelete");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ADDRGRPNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(ADDRGRPNAME)); // path parameter

            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiStatus>("/user/sso/security-services-bypass/address/group/{ADDRGRPNAME}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDRGRPNAME">Group address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserSsoSecurityServiceBypassCollection</returns>
        public UserSsoSecurityServiceBypassCollection UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEGet(string ADDRGRPNAME, int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<UserSsoSecurityServiceBypassCollection> localVarResponse = UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEGetWithHttpInfo(ADDRGRPNAME);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDRGRPNAME">Group address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserSsoSecurityServiceBypassCollection</returns>
        public SonicWallGen7.Client.ApiResponse<UserSsoSecurityServiceBypassCollection> UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEGetWithHttpInfo(string ADDRGRPNAME, int operationIndex = 0)
        {
            // verify the required parameter 'ADDRGRPNAME' is set
            if (ADDRGRPNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'ADDRGRPNAME' when calling UserSsoSecurityServiceBypassApi->UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEGet");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ADDRGRPNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(ADDRGRPNAME)); // path parameter

            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserSsoSecurityServiceBypassCollection>("/user/sso/security-services-bypass/address/group/{ADDRGRPNAME}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDRGRPNAME">Group address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserSsoSecurityServiceBypassCollection</returns>
        public async System.Threading.Tasks.Task<UserSsoSecurityServiceBypassCollection> UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEGetAsync(string ADDRGRPNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<UserSsoSecurityServiceBypassCollection> localVarResponse = await UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEGetWithHttpInfoAsync(ADDRGRPNAME, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDRGRPNAME">Group address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserSsoSecurityServiceBypassCollection)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<UserSsoSecurityServiceBypassCollection>> UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEGetWithHttpInfoAsync(string ADDRGRPNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ADDRGRPNAME' is set
            if (ADDRGRPNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'ADDRGRPNAME' when calling UserSsoSecurityServiceBypassApi->UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEGet");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ADDRGRPNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(ADDRGRPNAME)); // path parameter

            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserSsoSecurityServiceBypassCollection>("/user/sso/security-services-bypass/address/group/{ADDRGRPNAME}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDRGRPNAME">Group address object name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEPut(string ADDRGRPNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEPutWithHttpInfo(ADDRGRPNAME, userSsoSecurityServiceBypassCollection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDRGRPNAME">Group address object name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEPutWithHttpInfo(string ADDRGRPNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0)
        {
            // verify the required parameter 'ADDRGRPNAME' is set
            if (ADDRGRPNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'ADDRGRPNAME' when calling UserSsoSecurityServiceBypassApi->UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEPut");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ADDRGRPNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(ADDRGRPNAME)); // path parameter
            localVarRequestOptions.Data = userSsoSecurityServiceBypassCollection;

            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApiStatus>("/user/sso/security-services-bypass/address/group/{ADDRGRPNAME}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDRGRPNAME">Group address object name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEPutAsync(string ADDRGRPNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEPutWithHttpInfoAsync(ADDRGRPNAME, userSsoSecurityServiceBypassCollection, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDRGRPNAME">Group address object name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEPutWithHttpInfoAsync(string ADDRGRPNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ADDRGRPNAME' is set
            if (ADDRGRPNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'ADDRGRPNAME' when calling UserSsoSecurityServiceBypassApi->UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEPut");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ADDRGRPNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(ADDRGRPNAME)); // path parameter
            localVarRequestOptions.Data = userSsoSecurityServiceBypassCollection;

            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ApiStatus>("/user/sso/security-services-bypass/address/group/{ADDRGRPNAME}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  DELETE SSO security service bypass.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDROBJNAME">Security service bypass IP name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus UserSsoSecurityServicesBypassAddressNameADDROBJNAMEDelete(string ADDROBJNAME, int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = UserSsoSecurityServicesBypassAddressNameADDROBJNAMEDeleteWithHttpInfo(ADDROBJNAME);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  DELETE SSO security service bypass.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDROBJNAME">Security service bypass IP name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> UserSsoSecurityServicesBypassAddressNameADDROBJNAMEDeleteWithHttpInfo(string ADDROBJNAME, int operationIndex = 0)
        {
            // verify the required parameter 'ADDROBJNAME' is set
            if (ADDROBJNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'ADDROBJNAME' when calling UserSsoSecurityServiceBypassApi->UserSsoSecurityServicesBypassAddressNameADDROBJNAMEDelete");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ADDROBJNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(ADDROBJNAME)); // path parameter

            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassAddressNameADDROBJNAMEDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiStatus>("/user/sso/security-services-bypass/address/name/{ADDROBJNAME}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassAddressNameADDROBJNAMEDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  DELETE SSO security service bypass.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDROBJNAME">Security service bypass IP name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> UserSsoSecurityServicesBypassAddressNameADDROBJNAMEDeleteAsync(string ADDROBJNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await UserSsoSecurityServicesBypassAddressNameADDROBJNAMEDeleteWithHttpInfoAsync(ADDROBJNAME, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  DELETE SSO security service bypass.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDROBJNAME">Security service bypass IP name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> UserSsoSecurityServicesBypassAddressNameADDROBJNAMEDeleteWithHttpInfoAsync(string ADDROBJNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ADDROBJNAME' is set
            if (ADDROBJNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'ADDROBJNAME' when calling UserSsoSecurityServiceBypassApi->UserSsoSecurityServicesBypassAddressNameADDROBJNAMEDelete");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ADDROBJNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(ADDROBJNAME)); // path parameter

            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassAddressNameADDROBJNAMEDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiStatus>("/user/sso/security-services-bypass/address/name/{ADDROBJNAME}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassAddressNameADDROBJNAMEDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDROBJNAME">Security service bypass IP name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserSsoSecurityServiceBypassCollection</returns>
        public UserSsoSecurityServiceBypassCollection UserSsoSecurityServicesBypassAddressNameADDROBJNAMEGet(string ADDROBJNAME, int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<UserSsoSecurityServiceBypassCollection> localVarResponse = UserSsoSecurityServicesBypassAddressNameADDROBJNAMEGetWithHttpInfo(ADDROBJNAME);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDROBJNAME">Security service bypass IP name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserSsoSecurityServiceBypassCollection</returns>
        public SonicWallGen7.Client.ApiResponse<UserSsoSecurityServiceBypassCollection> UserSsoSecurityServicesBypassAddressNameADDROBJNAMEGetWithHttpInfo(string ADDROBJNAME, int operationIndex = 0)
        {
            // verify the required parameter 'ADDROBJNAME' is set
            if (ADDROBJNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'ADDROBJNAME' when calling UserSsoSecurityServiceBypassApi->UserSsoSecurityServicesBypassAddressNameADDROBJNAMEGet");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ADDROBJNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(ADDROBJNAME)); // path parameter

            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassAddressNameADDROBJNAMEGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserSsoSecurityServiceBypassCollection>("/user/sso/security-services-bypass/address/name/{ADDROBJNAME}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassAddressNameADDROBJNAMEGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDROBJNAME">Security service bypass IP name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserSsoSecurityServiceBypassCollection</returns>
        public async System.Threading.Tasks.Task<UserSsoSecurityServiceBypassCollection> UserSsoSecurityServicesBypassAddressNameADDROBJNAMEGetAsync(string ADDROBJNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<UserSsoSecurityServiceBypassCollection> localVarResponse = await UserSsoSecurityServicesBypassAddressNameADDROBJNAMEGetWithHttpInfoAsync(ADDROBJNAME, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDROBJNAME">Security service bypass IP name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserSsoSecurityServiceBypassCollection)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<UserSsoSecurityServiceBypassCollection>> UserSsoSecurityServicesBypassAddressNameADDROBJNAMEGetWithHttpInfoAsync(string ADDROBJNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ADDROBJNAME' is set
            if (ADDROBJNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'ADDROBJNAME' when calling UserSsoSecurityServiceBypassApi->UserSsoSecurityServicesBypassAddressNameADDROBJNAMEGet");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ADDROBJNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(ADDROBJNAME)); // path parameter

            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassAddressNameADDROBJNAMEGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserSsoSecurityServiceBypassCollection>("/user/sso/security-services-bypass/address/name/{ADDROBJNAME}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassAddressNameADDROBJNAMEGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDROBJNAME">Security service bypass IP name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus UserSsoSecurityServicesBypassAddressNameADDROBJNAMEPut(string ADDROBJNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = UserSsoSecurityServicesBypassAddressNameADDROBJNAMEPutWithHttpInfo(ADDROBJNAME, userSsoSecurityServiceBypassCollection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDROBJNAME">Security service bypass IP name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> UserSsoSecurityServicesBypassAddressNameADDROBJNAMEPutWithHttpInfo(string ADDROBJNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0)
        {
            // verify the required parameter 'ADDROBJNAME' is set
            if (ADDROBJNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'ADDROBJNAME' when calling UserSsoSecurityServiceBypassApi->UserSsoSecurityServicesBypassAddressNameADDROBJNAMEPut");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ADDROBJNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(ADDROBJNAME)); // path parameter
            localVarRequestOptions.Data = userSsoSecurityServiceBypassCollection;

            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassAddressNameADDROBJNAMEPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApiStatus>("/user/sso/security-services-bypass/address/name/{ADDROBJNAME}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassAddressNameADDROBJNAMEPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDROBJNAME">Security service bypass IP name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> UserSsoSecurityServicesBypassAddressNameADDROBJNAMEPutAsync(string ADDROBJNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await UserSsoSecurityServicesBypassAddressNameADDROBJNAMEPutWithHttpInfoAsync(ADDROBJNAME, userSsoSecurityServiceBypassCollection, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ADDROBJNAME">Security service bypass IP name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> UserSsoSecurityServicesBypassAddressNameADDROBJNAMEPutWithHttpInfoAsync(string ADDROBJNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ADDROBJNAME' is set
            if (ADDROBJNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'ADDROBJNAME' when calling UserSsoSecurityServiceBypassApi->UserSsoSecurityServicesBypassAddressNameADDROBJNAMEPut");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ADDROBJNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(ADDROBJNAME)); // path parameter
            localVarRequestOptions.Data = userSsoSecurityServiceBypassCollection;

            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassAddressNameADDROBJNAMEPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ApiStatus>("/user/sso/security-services-bypass/address/name/{ADDROBJNAME}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassAddressNameADDROBJNAMEPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserSsoSecurityServiceBypassCollection</returns>
        public UserSsoSecurityServiceBypassCollection UserSsoSecurityServicesBypassGet(int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<UserSsoSecurityServiceBypassCollection> localVarResponse = UserSsoSecurityServicesBypassGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserSsoSecurityServiceBypassCollection</returns>
        public SonicWallGen7.Client.ApiResponse<UserSsoSecurityServiceBypassCollection> UserSsoSecurityServicesBypassGetWithHttpInfo(int operationIndex = 0)
        {
            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserSsoSecurityServiceBypassCollection>("/user/sso/security-services-bypass", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserSsoSecurityServiceBypassCollection</returns>
        public async System.Threading.Tasks.Task<UserSsoSecurityServiceBypassCollection> UserSsoSecurityServicesBypassGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<UserSsoSecurityServiceBypassCollection> localVarResponse = await UserSsoSecurityServicesBypassGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserSsoSecurityServiceBypassCollection)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<UserSsoSecurityServiceBypassCollection>> UserSsoSecurityServicesBypassGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserSsoSecurityServiceBypassCollection>("/user/sso/security-services-bypass", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create user SSO security service bypass.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus UserSsoSecurityServicesBypassPost(UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = UserSsoSecurityServicesBypassPostWithHttpInfo(userSsoSecurityServiceBypassCollection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create user SSO security service bypass.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> UserSsoSecurityServicesBypassPostWithHttpInfo(UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = userSsoSecurityServiceBypassCollection;

            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiStatus>("/user/sso/security-services-bypass", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create user SSO security service bypass.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> UserSsoSecurityServicesBypassPostAsync(UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await UserSsoSecurityServicesBypassPostWithHttpInfoAsync(userSsoSecurityServiceBypassCollection, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create user SSO security service bypass.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> UserSsoSecurityServicesBypassPostWithHttpInfoAsync(UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = userSsoSecurityServiceBypassCollection;

            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiStatus>("/user/sso/security-services-bypass", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus UserSsoSecurityServicesBypassPut(UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = UserSsoSecurityServicesBypassPutWithHttpInfo(userSsoSecurityServiceBypassCollection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> UserSsoSecurityServicesBypassPutWithHttpInfo(UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = userSsoSecurityServiceBypassCollection;

            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApiStatus>("/user/sso/security-services-bypass", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> UserSsoSecurityServicesBypassPutAsync(UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await UserSsoSecurityServicesBypassPutWithHttpInfoAsync(userSsoSecurityServiceBypassCollection, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> UserSsoSecurityServicesBypassPutWithHttpInfoAsync(UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = userSsoSecurityServiceBypassCollection;

            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ApiStatus>("/user/sso/security-services-bypass", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  DELETE SSO security service bypass.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="BLTNAME">SSO bypass built-in object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEDelete(string BLTNAME, int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEDeleteWithHttpInfo(BLTNAME);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  DELETE SSO security service bypass.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="BLTNAME">SSO bypass built-in object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEDeleteWithHttpInfo(string BLTNAME, int operationIndex = 0)
        {
            // verify the required parameter 'BLTNAME' is set
            if (BLTNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'BLTNAME' when calling UserSsoSecurityServiceBypassApi->UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEDelete");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BLTNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(BLTNAME)); // path parameter

            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiStatus>("/user/sso/security-services-bypass/service/built-in/{BLTNAME}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  DELETE SSO security service bypass.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="BLTNAME">SSO bypass built-in object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEDeleteAsync(string BLTNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEDeleteWithHttpInfoAsync(BLTNAME, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  DELETE SSO security service bypass.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="BLTNAME">SSO bypass built-in object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEDeleteWithHttpInfoAsync(string BLTNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'BLTNAME' is set
            if (BLTNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'BLTNAME' when calling UserSsoSecurityServiceBypassApi->UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEDelete");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BLTNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(BLTNAME)); // path parameter

            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiStatus>("/user/sso/security-services-bypass/service/built-in/{BLTNAME}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="BLTNAME">SSO bypass built-in object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserSsoSecurityServiceBypassCollection</returns>
        public UserSsoSecurityServiceBypassCollection UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEGet(string BLTNAME, int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<UserSsoSecurityServiceBypassCollection> localVarResponse = UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEGetWithHttpInfo(BLTNAME);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="BLTNAME">SSO bypass built-in object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserSsoSecurityServiceBypassCollection</returns>
        public SonicWallGen7.Client.ApiResponse<UserSsoSecurityServiceBypassCollection> UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEGetWithHttpInfo(string BLTNAME, int operationIndex = 0)
        {
            // verify the required parameter 'BLTNAME' is set
            if (BLTNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'BLTNAME' when calling UserSsoSecurityServiceBypassApi->UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEGet");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BLTNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(BLTNAME)); // path parameter

            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserSsoSecurityServiceBypassCollection>("/user/sso/security-services-bypass/service/built-in/{BLTNAME}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="BLTNAME">SSO bypass built-in object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserSsoSecurityServiceBypassCollection</returns>
        public async System.Threading.Tasks.Task<UserSsoSecurityServiceBypassCollection> UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEGetAsync(string BLTNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<UserSsoSecurityServiceBypassCollection> localVarResponse = await UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEGetWithHttpInfoAsync(BLTNAME, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="BLTNAME">SSO bypass built-in object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserSsoSecurityServiceBypassCollection)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<UserSsoSecurityServiceBypassCollection>> UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEGetWithHttpInfoAsync(string BLTNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'BLTNAME' is set
            if (BLTNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'BLTNAME' when calling UserSsoSecurityServiceBypassApi->UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEGet");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BLTNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(BLTNAME)); // path parameter

            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserSsoSecurityServiceBypassCollection>("/user/sso/security-services-bypass/service/built-in/{BLTNAME}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="BLTNAME">SSO bypass built-in object name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEPut(string BLTNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEPutWithHttpInfo(BLTNAME, userSsoSecurityServiceBypassCollection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="BLTNAME">SSO bypass built-in object name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEPutWithHttpInfo(string BLTNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0)
        {
            // verify the required parameter 'BLTNAME' is set
            if (BLTNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'BLTNAME' when calling UserSsoSecurityServiceBypassApi->UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEPut");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BLTNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(BLTNAME)); // path parameter
            localVarRequestOptions.Data = userSsoSecurityServiceBypassCollection;

            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApiStatus>("/user/sso/security-services-bypass/service/built-in/{BLTNAME}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="BLTNAME">SSO bypass built-in object name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEPutAsync(string BLTNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEPutWithHttpInfoAsync(BLTNAME, userSsoSecurityServiceBypassCollection, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="BLTNAME">SSO bypass built-in object name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEPutWithHttpInfoAsync(string BLTNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'BLTNAME' is set
            if (BLTNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'BLTNAME' when calling UserSsoSecurityServiceBypassApi->UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEPut");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BLTNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(BLTNAME)); // path parameter
            localVarRequestOptions.Data = userSsoSecurityServiceBypassCollection;

            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ApiStatus>("/user/sso/security-services-bypass/service/built-in/{BLTNAME}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  DELETE SSO security service bypass.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GRPNAME">Service object group name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus UserSsoSecurityServicesBypassServiceGroupGRPNAMEDelete(string GRPNAME, int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = UserSsoSecurityServicesBypassServiceGroupGRPNAMEDeleteWithHttpInfo(GRPNAME);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  DELETE SSO security service bypass.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GRPNAME">Service object group name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> UserSsoSecurityServicesBypassServiceGroupGRPNAMEDeleteWithHttpInfo(string GRPNAME, int operationIndex = 0)
        {
            // verify the required parameter 'GRPNAME' is set
            if (GRPNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'GRPNAME' when calling UserSsoSecurityServiceBypassApi->UserSsoSecurityServicesBypassServiceGroupGRPNAMEDelete");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("GRPNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(GRPNAME)); // path parameter

            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassServiceGroupGRPNAMEDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiStatus>("/user/sso/security-services-bypass/service/group/{GRPNAME}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassServiceGroupGRPNAMEDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  DELETE SSO security service bypass.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GRPNAME">Service object group name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> UserSsoSecurityServicesBypassServiceGroupGRPNAMEDeleteAsync(string GRPNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await UserSsoSecurityServicesBypassServiceGroupGRPNAMEDeleteWithHttpInfoAsync(GRPNAME, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  DELETE SSO security service bypass.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GRPNAME">Service object group name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> UserSsoSecurityServicesBypassServiceGroupGRPNAMEDeleteWithHttpInfoAsync(string GRPNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'GRPNAME' is set
            if (GRPNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'GRPNAME' when calling UserSsoSecurityServiceBypassApi->UserSsoSecurityServicesBypassServiceGroupGRPNAMEDelete");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("GRPNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(GRPNAME)); // path parameter

            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassServiceGroupGRPNAMEDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiStatus>("/user/sso/security-services-bypass/service/group/{GRPNAME}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassServiceGroupGRPNAMEDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GRPNAME">Service object group name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserSsoSecurityServiceBypassCollection</returns>
        public UserSsoSecurityServiceBypassCollection UserSsoSecurityServicesBypassServiceGroupGRPNAMEGet(string GRPNAME, int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<UserSsoSecurityServiceBypassCollection> localVarResponse = UserSsoSecurityServicesBypassServiceGroupGRPNAMEGetWithHttpInfo(GRPNAME);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GRPNAME">Service object group name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserSsoSecurityServiceBypassCollection</returns>
        public SonicWallGen7.Client.ApiResponse<UserSsoSecurityServiceBypassCollection> UserSsoSecurityServicesBypassServiceGroupGRPNAMEGetWithHttpInfo(string GRPNAME, int operationIndex = 0)
        {
            // verify the required parameter 'GRPNAME' is set
            if (GRPNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'GRPNAME' when calling UserSsoSecurityServiceBypassApi->UserSsoSecurityServicesBypassServiceGroupGRPNAMEGet");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("GRPNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(GRPNAME)); // path parameter

            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassServiceGroupGRPNAMEGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserSsoSecurityServiceBypassCollection>("/user/sso/security-services-bypass/service/group/{GRPNAME}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassServiceGroupGRPNAMEGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GRPNAME">Service object group name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserSsoSecurityServiceBypassCollection</returns>
        public async System.Threading.Tasks.Task<UserSsoSecurityServiceBypassCollection> UserSsoSecurityServicesBypassServiceGroupGRPNAMEGetAsync(string GRPNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<UserSsoSecurityServiceBypassCollection> localVarResponse = await UserSsoSecurityServicesBypassServiceGroupGRPNAMEGetWithHttpInfoAsync(GRPNAME, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GRPNAME">Service object group name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserSsoSecurityServiceBypassCollection)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<UserSsoSecurityServiceBypassCollection>> UserSsoSecurityServicesBypassServiceGroupGRPNAMEGetWithHttpInfoAsync(string GRPNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'GRPNAME' is set
            if (GRPNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'GRPNAME' when calling UserSsoSecurityServiceBypassApi->UserSsoSecurityServicesBypassServiceGroupGRPNAMEGet");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("GRPNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(GRPNAME)); // path parameter

            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassServiceGroupGRPNAMEGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserSsoSecurityServiceBypassCollection>("/user/sso/security-services-bypass/service/group/{GRPNAME}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassServiceGroupGRPNAMEGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GRPNAME">Service object group name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus UserSsoSecurityServicesBypassServiceGroupGRPNAMEPut(string GRPNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = UserSsoSecurityServicesBypassServiceGroupGRPNAMEPutWithHttpInfo(GRPNAME, userSsoSecurityServiceBypassCollection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GRPNAME">Service object group name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> UserSsoSecurityServicesBypassServiceGroupGRPNAMEPutWithHttpInfo(string GRPNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0)
        {
            // verify the required parameter 'GRPNAME' is set
            if (GRPNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'GRPNAME' when calling UserSsoSecurityServiceBypassApi->UserSsoSecurityServicesBypassServiceGroupGRPNAMEPut");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("GRPNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(GRPNAME)); // path parameter
            localVarRequestOptions.Data = userSsoSecurityServiceBypassCollection;

            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassServiceGroupGRPNAMEPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApiStatus>("/user/sso/security-services-bypass/service/group/{GRPNAME}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassServiceGroupGRPNAMEPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GRPNAME">Service object group name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> UserSsoSecurityServicesBypassServiceGroupGRPNAMEPutAsync(string GRPNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await UserSsoSecurityServicesBypassServiceGroupGRPNAMEPutWithHttpInfoAsync(GRPNAME, userSsoSecurityServiceBypassCollection, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GRPNAME">Service object group name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> UserSsoSecurityServicesBypassServiceGroupGRPNAMEPutWithHttpInfoAsync(string GRPNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'GRPNAME' is set
            if (GRPNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'GRPNAME' when calling UserSsoSecurityServiceBypassApi->UserSsoSecurityServicesBypassServiceGroupGRPNAMEPut");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("GRPNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(GRPNAME)); // path parameter
            localVarRequestOptions.Data = userSsoSecurityServiceBypassCollection;

            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassServiceGroupGRPNAMEPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ApiStatus>("/user/sso/security-services-bypass/service/group/{GRPNAME}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassServiceGroupGRPNAMEPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  DELETE SSO security service bypass.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="OBJNAME">SSO bypass rule service name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus UserSsoSecurityServicesBypassServiceNameOBJNAMEDelete(string OBJNAME, int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = UserSsoSecurityServicesBypassServiceNameOBJNAMEDeleteWithHttpInfo(OBJNAME);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  DELETE SSO security service bypass.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="OBJNAME">SSO bypass rule service name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> UserSsoSecurityServicesBypassServiceNameOBJNAMEDeleteWithHttpInfo(string OBJNAME, int operationIndex = 0)
        {
            // verify the required parameter 'OBJNAME' is set
            if (OBJNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'OBJNAME' when calling UserSsoSecurityServiceBypassApi->UserSsoSecurityServicesBypassServiceNameOBJNAMEDelete");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("OBJNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(OBJNAME)); // path parameter

            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassServiceNameOBJNAMEDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiStatus>("/user/sso/security-services-bypass/service/name/{OBJNAME}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassServiceNameOBJNAMEDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  DELETE SSO security service bypass.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="OBJNAME">SSO bypass rule service name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> UserSsoSecurityServicesBypassServiceNameOBJNAMEDeleteAsync(string OBJNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await UserSsoSecurityServicesBypassServiceNameOBJNAMEDeleteWithHttpInfoAsync(OBJNAME, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  DELETE SSO security service bypass.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="OBJNAME">SSO bypass rule service name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> UserSsoSecurityServicesBypassServiceNameOBJNAMEDeleteWithHttpInfoAsync(string OBJNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'OBJNAME' is set
            if (OBJNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'OBJNAME' when calling UserSsoSecurityServiceBypassApi->UserSsoSecurityServicesBypassServiceNameOBJNAMEDelete");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("OBJNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(OBJNAME)); // path parameter

            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassServiceNameOBJNAMEDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiStatus>("/user/sso/security-services-bypass/service/name/{OBJNAME}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassServiceNameOBJNAMEDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="OBJNAME">SSO bypass rule service name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserSsoSecurityServiceBypassCollection</returns>
        public UserSsoSecurityServiceBypassCollection UserSsoSecurityServicesBypassServiceNameOBJNAMEGet(string OBJNAME, int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<UserSsoSecurityServiceBypassCollection> localVarResponse = UserSsoSecurityServicesBypassServiceNameOBJNAMEGetWithHttpInfo(OBJNAME);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="OBJNAME">SSO bypass rule service name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserSsoSecurityServiceBypassCollection</returns>
        public SonicWallGen7.Client.ApiResponse<UserSsoSecurityServiceBypassCollection> UserSsoSecurityServicesBypassServiceNameOBJNAMEGetWithHttpInfo(string OBJNAME, int operationIndex = 0)
        {
            // verify the required parameter 'OBJNAME' is set
            if (OBJNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'OBJNAME' when calling UserSsoSecurityServiceBypassApi->UserSsoSecurityServicesBypassServiceNameOBJNAMEGet");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("OBJNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(OBJNAME)); // path parameter

            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassServiceNameOBJNAMEGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserSsoSecurityServiceBypassCollection>("/user/sso/security-services-bypass/service/name/{OBJNAME}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassServiceNameOBJNAMEGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="OBJNAME">SSO bypass rule service name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserSsoSecurityServiceBypassCollection</returns>
        public async System.Threading.Tasks.Task<UserSsoSecurityServiceBypassCollection> UserSsoSecurityServicesBypassServiceNameOBJNAMEGetAsync(string OBJNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<UserSsoSecurityServiceBypassCollection> localVarResponse = await UserSsoSecurityServicesBypassServiceNameOBJNAMEGetWithHttpInfoAsync(OBJNAME, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="OBJNAME">SSO bypass rule service name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserSsoSecurityServiceBypassCollection)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<UserSsoSecurityServiceBypassCollection>> UserSsoSecurityServicesBypassServiceNameOBJNAMEGetWithHttpInfoAsync(string OBJNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'OBJNAME' is set
            if (OBJNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'OBJNAME' when calling UserSsoSecurityServiceBypassApi->UserSsoSecurityServicesBypassServiceNameOBJNAMEGet");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("OBJNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(OBJNAME)); // path parameter

            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassServiceNameOBJNAMEGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserSsoSecurityServiceBypassCollection>("/user/sso/security-services-bypass/service/name/{OBJNAME}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassServiceNameOBJNAMEGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="OBJNAME">SSO bypass rule service name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus UserSsoSecurityServicesBypassServiceNameOBJNAMEPut(string OBJNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = UserSsoSecurityServicesBypassServiceNameOBJNAMEPutWithHttpInfo(OBJNAME, userSsoSecurityServiceBypassCollection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="OBJNAME">SSO bypass rule service name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> UserSsoSecurityServicesBypassServiceNameOBJNAMEPutWithHttpInfo(string OBJNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0)
        {
            // verify the required parameter 'OBJNAME' is set
            if (OBJNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'OBJNAME' when calling UserSsoSecurityServiceBypassApi->UserSsoSecurityServicesBypassServiceNameOBJNAMEPut");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("OBJNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(OBJNAME)); // path parameter
            localVarRequestOptions.Data = userSsoSecurityServiceBypassCollection;

            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassServiceNameOBJNAMEPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApiStatus>("/user/sso/security-services-bypass/service/name/{OBJNAME}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassServiceNameOBJNAMEPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="OBJNAME">SSO bypass rule service name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> UserSsoSecurityServicesBypassServiceNameOBJNAMEPutAsync(string OBJNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await UserSsoSecurityServicesBypassServiceNameOBJNAMEPutWithHttpInfoAsync(OBJNAME, userSsoSecurityServiceBypassCollection, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update user SSO security service bypass configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="OBJNAME">SSO bypass rule service name.</param>
        /// <param name="userSsoSecurityServiceBypassCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> UserSsoSecurityServicesBypassServiceNameOBJNAMEPutWithHttpInfoAsync(string OBJNAME, UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = default(UserSsoSecurityServiceBypassCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'OBJNAME' is set
            if (OBJNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'OBJNAME' when calling UserSsoSecurityServiceBypassApi->UserSsoSecurityServicesBypassServiceNameOBJNAMEPut");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("OBJNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(OBJNAME)); // path parameter
            localVarRequestOptions.Data = userSsoSecurityServiceBypassCollection;

            localVarRequestOptions.Operation = "UserSsoSecurityServiceBypassApi.UserSsoSecurityServicesBypassServiceNameOBJNAMEPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ApiStatus>("/user/sso/security-services-bypass/service/name/{OBJNAME}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoSecurityServicesBypassServiceNameOBJNAMEPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
