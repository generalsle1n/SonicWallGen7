/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using SonicWallGen7.Client;
using SonicWallGen7.Model;

namespace SonicWallGen7.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserSsoRadiusUserNameExclusionApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user SSO configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserSsoRadiusUserNameExclusionCollection</returns>
        UserSsoRadiusUserNameExclusionCollection UserSsoRadiusUserNameExclusionsGet(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user SSO configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserSsoRadiusUserNameExclusionCollection</returns>
        ApiResponse<UserSsoRadiusUserNameExclusionCollection> UserSsoRadiusUserNameExclusionsGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE RADIUS accounting user name exclusion.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="NAME">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="TYPE">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEDelete(string NAME, string TYPE, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE RADIUS accounting user name exclusion.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="NAME">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="TYPE">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEDeleteWithHttpInfo(string NAME, string TYPE, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user SSO configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="NAME">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="TYPE">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserSsoRadiusUserNameExclusionCollection</returns>
        UserSsoRadiusUserNameExclusionCollection UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEGet(string NAME, string TYPE, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user SSO configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="NAME">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="TYPE">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserSsoRadiusUserNameExclusionCollection</returns>
        ApiResponse<UserSsoRadiusUserNameExclusionCollection> UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEGetWithHttpInfo(string NAME, string TYPE, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch user SSO configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="NAME">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="TYPE">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPatch(string NAME, string TYPE, UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch user SSO configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="NAME">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="TYPE">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPatchWithHttpInfo(string NAME, string TYPE, UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user SSO configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="NAME">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="TYPE">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPut(string NAME, string TYPE, UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user SSO configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="NAME">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="TYPE">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPutWithHttpInfo(string NAME, string TYPE, UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch user SSO configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus UserSsoRadiusUserNameExclusionsPatch(UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch user SSO configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> UserSsoRadiusUserNameExclusionsPatchWithHttpInfo(UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add RADIUS accounting user name exclusion.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus UserSsoRadiusUserNameExclusionsPost(UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add RADIUS accounting user name exclusion.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> UserSsoRadiusUserNameExclusionsPostWithHttpInfo(UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user SSO configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus UserSsoRadiusUserNameExclusionsPut(UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user SSO configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> UserSsoRadiusUserNameExclusionsPutWithHttpInfo(UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserSsoRadiusUserNameExclusionApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user SSO configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserSsoRadiusUserNameExclusionCollection</returns>
        System.Threading.Tasks.Task<UserSsoRadiusUserNameExclusionCollection> UserSsoRadiusUserNameExclusionsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user SSO configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserSsoRadiusUserNameExclusionCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSsoRadiusUserNameExclusionCollection>> UserSsoRadiusUserNameExclusionsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE RADIUS accounting user name exclusion.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="NAME">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="TYPE">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEDeleteAsync(string NAME, string TYPE, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE RADIUS accounting user name exclusion.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="NAME">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="TYPE">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEDeleteWithHttpInfoAsync(string NAME, string TYPE, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user SSO configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="NAME">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="TYPE">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserSsoRadiusUserNameExclusionCollection</returns>
        System.Threading.Tasks.Task<UserSsoRadiusUserNameExclusionCollection> UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEGetAsync(string NAME, string TYPE, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user SSO configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="NAME">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="TYPE">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserSsoRadiusUserNameExclusionCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSsoRadiusUserNameExclusionCollection>> UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEGetWithHttpInfoAsync(string NAME, string TYPE, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch user SSO configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="NAME">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="TYPE">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPatchAsync(string NAME, string TYPE, UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch user SSO configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="NAME">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="TYPE">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPatchWithHttpInfoAsync(string NAME, string TYPE, UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user SSO configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="NAME">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="TYPE">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPutAsync(string NAME, string TYPE, UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user SSO configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="NAME">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="TYPE">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPutWithHttpInfoAsync(string NAME, string TYPE, UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch user SSO configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> UserSsoRadiusUserNameExclusionsPatchAsync(UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch user SSO configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> UserSsoRadiusUserNameExclusionsPatchWithHttpInfoAsync(UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add RADIUS accounting user name exclusion.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> UserSsoRadiusUserNameExclusionsPostAsync(UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add RADIUS accounting user name exclusion.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> UserSsoRadiusUserNameExclusionsPostWithHttpInfoAsync(UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user SSO configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> UserSsoRadiusUserNameExclusionsPutAsync(UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update user SSO configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> UserSsoRadiusUserNameExclusionsPutWithHttpInfoAsync(UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserSsoRadiusUserNameExclusionApi : IUserSsoRadiusUserNameExclusionApiSync, IUserSsoRadiusUserNameExclusionApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserSsoRadiusUserNameExclusionApi : IUserSsoRadiusUserNameExclusionApi
    {
        private SonicWallGen7.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserSsoRadiusUserNameExclusionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserSsoRadiusUserNameExclusionApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserSsoRadiusUserNameExclusionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserSsoRadiusUserNameExclusionApi(string basePath)
        {
            this.Configuration = SonicWallGen7.Client.Configuration.MergeConfigurations(
                SonicWallGen7.Client.GlobalConfiguration.Instance,
                new SonicWallGen7.Client.Configuration { BasePath = basePath }
            );
            this.Client = new SonicWallGen7.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SonicWallGen7.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = SonicWallGen7.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserSsoRadiusUserNameExclusionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserSsoRadiusUserNameExclusionApi(SonicWallGen7.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SonicWallGen7.Client.Configuration.MergeConfigurations(
                SonicWallGen7.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new SonicWallGen7.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SonicWallGen7.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = SonicWallGen7.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserSsoRadiusUserNameExclusionApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UserSsoRadiusUserNameExclusionApi(SonicWallGen7.Client.ISynchronousClient client, SonicWallGen7.Client.IAsynchronousClient asyncClient, SonicWallGen7.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SonicWallGen7.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SonicWallGen7.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SonicWallGen7.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SonicWallGen7.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SonicWallGen7.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Retrieve user SSO configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserSsoRadiusUserNameExclusionCollection</returns>
        public UserSsoRadiusUserNameExclusionCollection UserSsoRadiusUserNameExclusionsGet(int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<UserSsoRadiusUserNameExclusionCollection> localVarResponse = UserSsoRadiusUserNameExclusionsGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve user SSO configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserSsoRadiusUserNameExclusionCollection</returns>
        public SonicWallGen7.Client.ApiResponse<UserSsoRadiusUserNameExclusionCollection> UserSsoRadiusUserNameExclusionsGetWithHttpInfo(int operationIndex = 0)
        {
            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UserSsoRadiusUserNameExclusionApi.UserSsoRadiusUserNameExclusionsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserSsoRadiusUserNameExclusionCollection>("/user/sso/radius-user-name-exclusions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoRadiusUserNameExclusionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve user SSO configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserSsoRadiusUserNameExclusionCollection</returns>
        public async System.Threading.Tasks.Task<UserSsoRadiusUserNameExclusionCollection> UserSsoRadiusUserNameExclusionsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<UserSsoRadiusUserNameExclusionCollection> localVarResponse = await UserSsoRadiusUserNameExclusionsGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve user SSO configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserSsoRadiusUserNameExclusionCollection)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<UserSsoRadiusUserNameExclusionCollection>> UserSsoRadiusUserNameExclusionsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UserSsoRadiusUserNameExclusionApi.UserSsoRadiusUserNameExclusionsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserSsoRadiusUserNameExclusionCollection>("/user/sso/radius-user-name-exclusions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoRadiusUserNameExclusionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  DELETE RADIUS accounting user name exclusion.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="NAME">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="TYPE">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEDelete(string NAME, string TYPE, int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEDeleteWithHttpInfo(NAME, TYPE);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  DELETE RADIUS accounting user name exclusion.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="NAME">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="TYPE">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEDeleteWithHttpInfo(string NAME, string TYPE, int operationIndex = 0)
        {
            // verify the required parameter 'NAME' is set
            if (NAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'NAME' when calling UserSsoRadiusUserNameExclusionApi->UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEDelete");
            }

            // verify the required parameter 'TYPE' is set
            if (TYPE == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'TYPE' when calling UserSsoRadiusUserNameExclusionApi->UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEDelete");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("NAME", SonicWallGen7.Client.ClientUtils.ParameterToString(NAME)); // path parameter
            localVarRequestOptions.PathParameters.Add("TYPE", SonicWallGen7.Client.ClientUtils.ParameterToString(TYPE)); // path parameter

            localVarRequestOptions.Operation = "UserSsoRadiusUserNameExclusionApi.UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiStatus>("/user/sso/radius-user-name-exclusions/name/{NAME}/type/{TYPE}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  DELETE RADIUS accounting user name exclusion.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="NAME">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="TYPE">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEDeleteAsync(string NAME, string TYPE, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEDeleteWithHttpInfoAsync(NAME, TYPE, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  DELETE RADIUS accounting user name exclusion.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="NAME">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="TYPE">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEDeleteWithHttpInfoAsync(string NAME, string TYPE, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'NAME' is set
            if (NAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'NAME' when calling UserSsoRadiusUserNameExclusionApi->UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEDelete");
            }

            // verify the required parameter 'TYPE' is set
            if (TYPE == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'TYPE' when calling UserSsoRadiusUserNameExclusionApi->UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEDelete");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("NAME", SonicWallGen7.Client.ClientUtils.ParameterToString(NAME)); // path parameter
            localVarRequestOptions.PathParameters.Add("TYPE", SonicWallGen7.Client.ClientUtils.ParameterToString(TYPE)); // path parameter

            localVarRequestOptions.Operation = "UserSsoRadiusUserNameExclusionApi.UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiStatus>("/user/sso/radius-user-name-exclusions/name/{NAME}/type/{TYPE}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve user SSO configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="NAME">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="TYPE">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserSsoRadiusUserNameExclusionCollection</returns>
        public UserSsoRadiusUserNameExclusionCollection UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEGet(string NAME, string TYPE, int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<UserSsoRadiusUserNameExclusionCollection> localVarResponse = UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEGetWithHttpInfo(NAME, TYPE);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve user SSO configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="NAME">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="TYPE">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserSsoRadiusUserNameExclusionCollection</returns>
        public SonicWallGen7.Client.ApiResponse<UserSsoRadiusUserNameExclusionCollection> UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEGetWithHttpInfo(string NAME, string TYPE, int operationIndex = 0)
        {
            // verify the required parameter 'NAME' is set
            if (NAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'NAME' when calling UserSsoRadiusUserNameExclusionApi->UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEGet");
            }

            // verify the required parameter 'TYPE' is set
            if (TYPE == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'TYPE' when calling UserSsoRadiusUserNameExclusionApi->UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEGet");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("NAME", SonicWallGen7.Client.ClientUtils.ParameterToString(NAME)); // path parameter
            localVarRequestOptions.PathParameters.Add("TYPE", SonicWallGen7.Client.ClientUtils.ParameterToString(TYPE)); // path parameter

            localVarRequestOptions.Operation = "UserSsoRadiusUserNameExclusionApi.UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserSsoRadiusUserNameExclusionCollection>("/user/sso/radius-user-name-exclusions/name/{NAME}/type/{TYPE}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve user SSO configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="NAME">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="TYPE">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserSsoRadiusUserNameExclusionCollection</returns>
        public async System.Threading.Tasks.Task<UserSsoRadiusUserNameExclusionCollection> UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEGetAsync(string NAME, string TYPE, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<UserSsoRadiusUserNameExclusionCollection> localVarResponse = await UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEGetWithHttpInfoAsync(NAME, TYPE, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve user SSO configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="NAME">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="TYPE">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserSsoRadiusUserNameExclusionCollection)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<UserSsoRadiusUserNameExclusionCollection>> UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEGetWithHttpInfoAsync(string NAME, string TYPE, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'NAME' is set
            if (NAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'NAME' when calling UserSsoRadiusUserNameExclusionApi->UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEGet");
            }

            // verify the required parameter 'TYPE' is set
            if (TYPE == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'TYPE' when calling UserSsoRadiusUserNameExclusionApi->UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEGet");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("NAME", SonicWallGen7.Client.ClientUtils.ParameterToString(NAME)); // path parameter
            localVarRequestOptions.PathParameters.Add("TYPE", SonicWallGen7.Client.ClientUtils.ParameterToString(TYPE)); // path parameter

            localVarRequestOptions.Operation = "UserSsoRadiusUserNameExclusionApi.UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserSsoRadiusUserNameExclusionCollection>("/user/sso/radius-user-name-exclusions/name/{NAME}/type/{TYPE}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Patch user SSO configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="NAME">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="TYPE">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPatch(string NAME, string TYPE, UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPatchWithHttpInfo(NAME, TYPE, userSsoRadiusUserNameExclusionCollection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Patch user SSO configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="NAME">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="TYPE">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPatchWithHttpInfo(string NAME, string TYPE, UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0)
        {
            // verify the required parameter 'NAME' is set
            if (NAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'NAME' when calling UserSsoRadiusUserNameExclusionApi->UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPatch");
            }

            // verify the required parameter 'TYPE' is set
            if (TYPE == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'TYPE' when calling UserSsoRadiusUserNameExclusionApi->UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPatch");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("NAME", SonicWallGen7.Client.ClientUtils.ParameterToString(NAME)); // path parameter
            localVarRequestOptions.PathParameters.Add("TYPE", SonicWallGen7.Client.ClientUtils.ParameterToString(TYPE)); // path parameter
            localVarRequestOptions.Data = userSsoRadiusUserNameExclusionCollection;

            localVarRequestOptions.Operation = "UserSsoRadiusUserNameExclusionApi.UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ApiStatus>("/user/sso/radius-user-name-exclusions/name/{NAME}/type/{TYPE}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Patch user SSO configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="NAME">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="TYPE">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPatchAsync(string NAME, string TYPE, UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPatchWithHttpInfoAsync(NAME, TYPE, userSsoRadiusUserNameExclusionCollection, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Patch user SSO configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="NAME">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="TYPE">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPatchWithHttpInfoAsync(string NAME, string TYPE, UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'NAME' is set
            if (NAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'NAME' when calling UserSsoRadiusUserNameExclusionApi->UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPatch");
            }

            // verify the required parameter 'TYPE' is set
            if (TYPE == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'TYPE' when calling UserSsoRadiusUserNameExclusionApi->UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPatch");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("NAME", SonicWallGen7.Client.ClientUtils.ParameterToString(NAME)); // path parameter
            localVarRequestOptions.PathParameters.Add("TYPE", SonicWallGen7.Client.ClientUtils.ParameterToString(TYPE)); // path parameter
            localVarRequestOptions.Data = userSsoRadiusUserNameExclusionCollection;

            localVarRequestOptions.Operation = "UserSsoRadiusUserNameExclusionApi.UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ApiStatus>("/user/sso/radius-user-name-exclusions/name/{NAME}/type/{TYPE}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update user SSO configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="NAME">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="TYPE">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPut(string NAME, string TYPE, UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPutWithHttpInfo(NAME, TYPE, userSsoRadiusUserNameExclusionCollection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update user SSO configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="NAME">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="TYPE">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPutWithHttpInfo(string NAME, string TYPE, UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0)
        {
            // verify the required parameter 'NAME' is set
            if (NAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'NAME' when calling UserSsoRadiusUserNameExclusionApi->UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPut");
            }

            // verify the required parameter 'TYPE' is set
            if (TYPE == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'TYPE' when calling UserSsoRadiusUserNameExclusionApi->UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPut");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("NAME", SonicWallGen7.Client.ClientUtils.ParameterToString(NAME)); // path parameter
            localVarRequestOptions.PathParameters.Add("TYPE", SonicWallGen7.Client.ClientUtils.ParameterToString(TYPE)); // path parameter
            localVarRequestOptions.Data = userSsoRadiusUserNameExclusionCollection;

            localVarRequestOptions.Operation = "UserSsoRadiusUserNameExclusionApi.UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApiStatus>("/user/sso/radius-user-name-exclusions/name/{NAME}/type/{TYPE}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update user SSO configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="NAME">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="TYPE">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPutAsync(string NAME, string TYPE, UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPutWithHttpInfoAsync(NAME, TYPE, userSsoRadiusUserNameExclusionCollection, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update user SSO configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="NAME">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="TYPE">Word in the form: WORD or \&quot;QUOTED STRING\&quot;</param>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPutWithHttpInfoAsync(string NAME, string TYPE, UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'NAME' is set
            if (NAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'NAME' when calling UserSsoRadiusUserNameExclusionApi->UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPut");
            }

            // verify the required parameter 'TYPE' is set
            if (TYPE == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'TYPE' when calling UserSsoRadiusUserNameExclusionApi->UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPut");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("NAME", SonicWallGen7.Client.ClientUtils.ParameterToString(NAME)); // path parameter
            localVarRequestOptions.PathParameters.Add("TYPE", SonicWallGen7.Client.ClientUtils.ParameterToString(TYPE)); // path parameter
            localVarRequestOptions.Data = userSsoRadiusUserNameExclusionCollection;

            localVarRequestOptions.Operation = "UserSsoRadiusUserNameExclusionApi.UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ApiStatus>("/user/sso/radius-user-name-exclusions/name/{NAME}/type/{TYPE}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoRadiusUserNameExclusionsNameNAMETypeTYPEPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Patch user SSO configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus UserSsoRadiusUserNameExclusionsPatch(UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = UserSsoRadiusUserNameExclusionsPatchWithHttpInfo(userSsoRadiusUserNameExclusionCollection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Patch user SSO configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> UserSsoRadiusUserNameExclusionsPatchWithHttpInfo(UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = userSsoRadiusUserNameExclusionCollection;

            localVarRequestOptions.Operation = "UserSsoRadiusUserNameExclusionApi.UserSsoRadiusUserNameExclusionsPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ApiStatus>("/user/sso/radius-user-name-exclusions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoRadiusUserNameExclusionsPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Patch user SSO configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> UserSsoRadiusUserNameExclusionsPatchAsync(UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await UserSsoRadiusUserNameExclusionsPatchWithHttpInfoAsync(userSsoRadiusUserNameExclusionCollection, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Patch user SSO configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> UserSsoRadiusUserNameExclusionsPatchWithHttpInfoAsync(UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = userSsoRadiusUserNameExclusionCollection;

            localVarRequestOptions.Operation = "UserSsoRadiusUserNameExclusionApi.UserSsoRadiusUserNameExclusionsPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ApiStatus>("/user/sso/radius-user-name-exclusions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoRadiusUserNameExclusionsPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Add RADIUS accounting user name exclusion.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus UserSsoRadiusUserNameExclusionsPost(UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = UserSsoRadiusUserNameExclusionsPostWithHttpInfo(userSsoRadiusUserNameExclusionCollection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Add RADIUS accounting user name exclusion.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> UserSsoRadiusUserNameExclusionsPostWithHttpInfo(UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = userSsoRadiusUserNameExclusionCollection;

            localVarRequestOptions.Operation = "UserSsoRadiusUserNameExclusionApi.UserSsoRadiusUserNameExclusionsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiStatus>("/user/sso/radius-user-name-exclusions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoRadiusUserNameExclusionsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Add RADIUS accounting user name exclusion.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> UserSsoRadiusUserNameExclusionsPostAsync(UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await UserSsoRadiusUserNameExclusionsPostWithHttpInfoAsync(userSsoRadiusUserNameExclusionCollection, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Add RADIUS accounting user name exclusion.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> UserSsoRadiusUserNameExclusionsPostWithHttpInfoAsync(UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = userSsoRadiusUserNameExclusionCollection;

            localVarRequestOptions.Operation = "UserSsoRadiusUserNameExclusionApi.UserSsoRadiusUserNameExclusionsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiStatus>("/user/sso/radius-user-name-exclusions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoRadiusUserNameExclusionsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update user SSO configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus UserSsoRadiusUserNameExclusionsPut(UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = UserSsoRadiusUserNameExclusionsPutWithHttpInfo(userSsoRadiusUserNameExclusionCollection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update user SSO configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> UserSsoRadiusUserNameExclusionsPutWithHttpInfo(UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = userSsoRadiusUserNameExclusionCollection;

            localVarRequestOptions.Operation = "UserSsoRadiusUserNameExclusionApi.UserSsoRadiusUserNameExclusionsPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApiStatus>("/user/sso/radius-user-name-exclusions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoRadiusUserNameExclusionsPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update user SSO configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> UserSsoRadiusUserNameExclusionsPutAsync(UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await UserSsoRadiusUserNameExclusionsPutWithHttpInfoAsync(userSsoRadiusUserNameExclusionCollection, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update user SSO configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSsoRadiusUserNameExclusionCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> UserSsoRadiusUserNameExclusionsPutWithHttpInfoAsync(UserSsoRadiusUserNameExclusionCollection? userSsoRadiusUserNameExclusionCollection = default(UserSsoRadiusUserNameExclusionCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = userSsoRadiusUserNameExclusionCollection;

            localVarRequestOptions.Operation = "UserSsoRadiusUserNameExclusionApi.UserSsoRadiusUserNameExclusionsPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ApiStatus>("/user/sso/radius-user-name-exclusions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSsoRadiusUserNameExclusionsPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
