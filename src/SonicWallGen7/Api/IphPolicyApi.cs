/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using SonicWallGen7.Client;
using SonicWallGen7.Model;

namespace SonicWallGen7.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIphPolicyApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IphPolicyCollection</returns>
        IphPolicyCollection IpHelperPoliciesGet(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IphPolicyCollection</returns>
        ApiResponse<IphPolicyCollection> IpHelperPoliciesGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus IpHelperPoliciesPatch(IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> IpHelperPoliciesPatchWithHttpInfo(IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new IP helper policy object.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus IpHelperPoliciesPost(IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new IP helper policy object.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> IpHelperPoliciesPostWithHttpInfo(IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE IP helper policy objects.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus IpHelperPoliciesProtocolPROTOCOLSourceDelete(string PROTOCOL, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE IP helper policy objects.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceDeleteWithHttpInfo(string PROTOCOL, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IphPolicyCollection</returns>
        IphPolicyCollection IpHelperPoliciesProtocolPROTOCOLSourceGet(string PROTOCOL, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IphPolicyCollection</returns>
        ApiResponse<IphPolicyCollection> IpHelperPoliciesProtocolPROTOCOLSourceGetWithHttpInfo(string PROTOCOL, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE IP helper policy objects.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="GROUPNAME">Group address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEDelete(string PROTOCOL, string GROUPNAME, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE IP helper policy objects.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="GROUPNAME">Group address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEDeleteWithHttpInfo(string PROTOCOL, string GROUPNAME, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="GROUPNAME">Group address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IphPolicyCollection</returns>
        IphPolicyCollection IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEGet(string PROTOCOL, string GROUPNAME, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="GROUPNAME">Group address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IphPolicyCollection</returns>
        ApiResponse<IphPolicyCollection> IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEGetWithHttpInfo(string PROTOCOL, string GROUPNAME, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="GROUPNAME">Group address object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPatch(string PROTOCOL, string GROUPNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="GROUPNAME">Group address object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPatchWithHttpInfo(string PROTOCOL, string GROUPNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="GROUPNAME">Group address object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPut(string PROTOCOL, string GROUPNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="GROUPNAME">Group address object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPutWithHttpInfo(string PROTOCOL, string GROUPNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE IP helper policy objects.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="IFNAME">IP helper interface name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEDelete(string PROTOCOL, string IFNAME, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE IP helper policy objects.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="IFNAME">IP helper interface name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEDeleteWithHttpInfo(string PROTOCOL, string IFNAME, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="IFNAME">IP helper interface name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IphPolicyCollection</returns>
        IphPolicyCollection IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEGet(string PROTOCOL, string IFNAME, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="IFNAME">IP helper interface name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IphPolicyCollection</returns>
        ApiResponse<IphPolicyCollection> IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEGetWithHttpInfo(string PROTOCOL, string IFNAME, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="IFNAME">IP helper interface name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPatch(string PROTOCOL, string IFNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="IFNAME">IP helper interface name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPatchWithHttpInfo(string PROTOCOL, string IFNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="IFNAME">IP helper interface name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPut(string PROTOCOL, string IFNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="IFNAME">IP helper interface name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPutWithHttpInfo(string PROTOCOL, string IFNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE IP helper policy objects.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="NETWORKNAME">Network address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEDelete(string PROTOCOL, string NETWORKNAME, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE IP helper policy objects.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="NETWORKNAME">Network address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEDeleteWithHttpInfo(string PROTOCOL, string NETWORKNAME, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="NETWORKNAME">Network address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IphPolicyCollection</returns>
        IphPolicyCollection IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEGet(string PROTOCOL, string NETWORKNAME, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="NETWORKNAME">Network address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IphPolicyCollection</returns>
        ApiResponse<IphPolicyCollection> IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEGetWithHttpInfo(string PROTOCOL, string NETWORKNAME, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="NETWORKNAME">Network address object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPatch(string PROTOCOL, string NETWORKNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="NETWORKNAME">Network address object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPatchWithHttpInfo(string PROTOCOL, string NETWORKNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="NETWORKNAME">Network address object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPut(string PROTOCOL, string NETWORKNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="NETWORKNAME">Network address object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPutWithHttpInfo(string PROTOCOL, string NETWORKNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus IpHelperPoliciesProtocolPROTOCOLSourcePatch(string PROTOCOL, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourcePatchWithHttpInfo(string PROTOCOL, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus IpHelperPoliciesProtocolPROTOCOLSourcePut(string PROTOCOL, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourcePutWithHttpInfo(string PROTOCOL, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE IP helper policy objects.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="ZONENAME">Zone object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEDelete(string PROTOCOL, string ZONENAME, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE IP helper policy objects.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="ZONENAME">Zone object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEDeleteWithHttpInfo(string PROTOCOL, string ZONENAME, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="ZONENAME">Zone object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IphPolicyCollection</returns>
        IphPolicyCollection IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEGet(string PROTOCOL, string ZONENAME, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="ZONENAME">Zone object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IphPolicyCollection</returns>
        ApiResponse<IphPolicyCollection> IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEGetWithHttpInfo(string PROTOCOL, string ZONENAME, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="ZONENAME">Zone object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPatch(string PROTOCOL, string ZONENAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="ZONENAME">Zone object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPatchWithHttpInfo(string PROTOCOL, string ZONENAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="ZONENAME">Zone object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPut(string PROTOCOL, string ZONENAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="ZONENAME">Zone object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPutWithHttpInfo(string PROTOCOL, string ZONENAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus IpHelperPoliciesPut(IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> IpHelperPoliciesPutWithHttpInfo(IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIphPolicyApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IphPolicyCollection</returns>
        System.Threading.Tasks.Task<IphPolicyCollection> IpHelperPoliciesGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IphPolicyCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<IphPolicyCollection>> IpHelperPoliciesGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesPatchAsync(IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> IpHelperPoliciesPatchWithHttpInfoAsync(IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new IP helper policy object.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesPostAsync(IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new IP helper policy object.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> IpHelperPoliciesPostWithHttpInfoAsync(IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE IP helper policy objects.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceDeleteAsync(string PROTOCOL, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE IP helper policy objects.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> IpHelperPoliciesProtocolPROTOCOLSourceDeleteWithHttpInfoAsync(string PROTOCOL, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IphPolicyCollection</returns>
        System.Threading.Tasks.Task<IphPolicyCollection> IpHelperPoliciesProtocolPROTOCOLSourceGetAsync(string PROTOCOL, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IphPolicyCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<IphPolicyCollection>> IpHelperPoliciesProtocolPROTOCOLSourceGetWithHttpInfoAsync(string PROTOCOL, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE IP helper policy objects.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="GROUPNAME">Group address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEDeleteAsync(string PROTOCOL, string GROUPNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE IP helper policy objects.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="GROUPNAME">Group address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEDeleteWithHttpInfoAsync(string PROTOCOL, string GROUPNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="GROUPNAME">Group address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IphPolicyCollection</returns>
        System.Threading.Tasks.Task<IphPolicyCollection> IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEGetAsync(string PROTOCOL, string GROUPNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="GROUPNAME">Group address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IphPolicyCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<IphPolicyCollection>> IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEGetWithHttpInfoAsync(string PROTOCOL, string GROUPNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="GROUPNAME">Group address object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPatchAsync(string PROTOCOL, string GROUPNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="GROUPNAME">Group address object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPatchWithHttpInfoAsync(string PROTOCOL, string GROUPNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="GROUPNAME">Group address object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPutAsync(string PROTOCOL, string GROUPNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="GROUPNAME">Group address object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPutWithHttpInfoAsync(string PROTOCOL, string GROUPNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE IP helper policy objects.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="IFNAME">IP helper interface name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEDeleteAsync(string PROTOCOL, string IFNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE IP helper policy objects.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="IFNAME">IP helper interface name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEDeleteWithHttpInfoAsync(string PROTOCOL, string IFNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="IFNAME">IP helper interface name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IphPolicyCollection</returns>
        System.Threading.Tasks.Task<IphPolicyCollection> IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEGetAsync(string PROTOCOL, string IFNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="IFNAME">IP helper interface name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IphPolicyCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<IphPolicyCollection>> IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEGetWithHttpInfoAsync(string PROTOCOL, string IFNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="IFNAME">IP helper interface name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPatchAsync(string PROTOCOL, string IFNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="IFNAME">IP helper interface name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPatchWithHttpInfoAsync(string PROTOCOL, string IFNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="IFNAME">IP helper interface name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPutAsync(string PROTOCOL, string IFNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="IFNAME">IP helper interface name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPutWithHttpInfoAsync(string PROTOCOL, string IFNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE IP helper policy objects.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="NETWORKNAME">Network address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEDeleteAsync(string PROTOCOL, string NETWORKNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE IP helper policy objects.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="NETWORKNAME">Network address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEDeleteWithHttpInfoAsync(string PROTOCOL, string NETWORKNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="NETWORKNAME">Network address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IphPolicyCollection</returns>
        System.Threading.Tasks.Task<IphPolicyCollection> IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEGetAsync(string PROTOCOL, string NETWORKNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="NETWORKNAME">Network address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IphPolicyCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<IphPolicyCollection>> IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEGetWithHttpInfoAsync(string PROTOCOL, string NETWORKNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="NETWORKNAME">Network address object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPatchAsync(string PROTOCOL, string NETWORKNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="NETWORKNAME">Network address object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPatchWithHttpInfoAsync(string PROTOCOL, string NETWORKNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="NETWORKNAME">Network address object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPutAsync(string PROTOCOL, string NETWORKNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="NETWORKNAME">Network address object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPutWithHttpInfoAsync(string PROTOCOL, string NETWORKNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourcePatchAsync(string PROTOCOL, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> IpHelperPoliciesProtocolPROTOCOLSourcePatchWithHttpInfoAsync(string PROTOCOL, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourcePutAsync(string PROTOCOL, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> IpHelperPoliciesProtocolPROTOCOLSourcePutWithHttpInfoAsync(string PROTOCOL, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE IP helper policy objects.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="ZONENAME">Zone object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEDeleteAsync(string PROTOCOL, string ZONENAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DELETE IP helper policy objects.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="ZONENAME">Zone object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEDeleteWithHttpInfoAsync(string PROTOCOL, string ZONENAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="ZONENAME">Zone object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IphPolicyCollection</returns>
        System.Threading.Tasks.Task<IphPolicyCollection> IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEGetAsync(string PROTOCOL, string ZONENAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="ZONENAME">Zone object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IphPolicyCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<IphPolicyCollection>> IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEGetWithHttpInfoAsync(string PROTOCOL, string ZONENAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="ZONENAME">Zone object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPatchAsync(string PROTOCOL, string ZONENAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="ZONENAME">Zone object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPatchWithHttpInfoAsync(string PROTOCOL, string ZONENAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="ZONENAME">Zone object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPutAsync(string PROTOCOL, string ZONENAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="ZONENAME">Zone object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPutWithHttpInfoAsync(string PROTOCOL, string ZONENAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesPutAsync(IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update IP helper policies configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> IpHelperPoliciesPutWithHttpInfoAsync(IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIphPolicyApi : IIphPolicyApiSync, IIphPolicyApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IphPolicyApi : IIphPolicyApi
    {
        private SonicWallGen7.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IphPolicyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IphPolicyApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IphPolicyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IphPolicyApi(string basePath)
        {
            this.Configuration = SonicWallGen7.Client.Configuration.MergeConfigurations(
                SonicWallGen7.Client.GlobalConfiguration.Instance,
                new SonicWallGen7.Client.Configuration { BasePath = basePath }
            );
            this.Client = new SonicWallGen7.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SonicWallGen7.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = SonicWallGen7.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IphPolicyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IphPolicyApi(SonicWallGen7.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SonicWallGen7.Client.Configuration.MergeConfigurations(
                SonicWallGen7.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new SonicWallGen7.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SonicWallGen7.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = SonicWallGen7.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IphPolicyApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IphPolicyApi(SonicWallGen7.Client.ISynchronousClient client, SonicWallGen7.Client.IAsynchronousClient asyncClient, SonicWallGen7.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SonicWallGen7.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SonicWallGen7.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SonicWallGen7.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SonicWallGen7.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SonicWallGen7.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Retrieve IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IphPolicyCollection</returns>
        public IphPolicyCollection IpHelperPoliciesGet(int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<IphPolicyCollection> localVarResponse = IpHelperPoliciesGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IphPolicyCollection</returns>
        public SonicWallGen7.Client.ApiResponse<IphPolicyCollection> IpHelperPoliciesGetWithHttpInfo(int operationIndex = 0)
        {
            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<IphPolicyCollection>("/ip-helper/policies", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IphPolicyCollection</returns>
        public async System.Threading.Tasks.Task<IphPolicyCollection> IpHelperPoliciesGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<IphPolicyCollection> localVarResponse = await IpHelperPoliciesGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IphPolicyCollection)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<IphPolicyCollection>> IpHelperPoliciesGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IphPolicyCollection>("/ip-helper/policies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Patch IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus IpHelperPoliciesPatch(IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = IpHelperPoliciesPatchWithHttpInfo(iphPolicyCollection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Patch IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> IpHelperPoliciesPatchWithHttpInfo(IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = iphPolicyCollection;

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ApiStatus>("/ip-helper/policies", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Patch IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesPatchAsync(IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await IpHelperPoliciesPatchWithHttpInfoAsync(iphPolicyCollection, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Patch IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> IpHelperPoliciesPatchWithHttpInfoAsync(IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = iphPolicyCollection;

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ApiStatus>("/ip-helper/policies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create a new IP helper policy object.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus IpHelperPoliciesPost(IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = IpHelperPoliciesPostWithHttpInfo(iphPolicyCollection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new IP helper policy object.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> IpHelperPoliciesPostWithHttpInfo(IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = iphPolicyCollection;

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiStatus>("/ip-helper/policies", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create a new IP helper policy object.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesPostAsync(IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await IpHelperPoliciesPostWithHttpInfoAsync(iphPolicyCollection, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new IP helper policy object.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> IpHelperPoliciesPostWithHttpInfoAsync(IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = iphPolicyCollection;

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiStatus>("/ip-helper/policies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  DELETE IP helper policy objects.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus IpHelperPoliciesProtocolPROTOCOLSourceDelete(string PROTOCOL, int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = IpHelperPoliciesProtocolPROTOCOLSourceDeleteWithHttpInfo(PROTOCOL);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  DELETE IP helper policy objects.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceDeleteWithHttpInfo(string PROTOCOL, int operationIndex = 0)
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceDelete");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiStatus>("/ip-helper/policies/protocol/{PROTOCOL}/source", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  DELETE IP helper policy objects.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceDeleteAsync(string PROTOCOL, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await IpHelperPoliciesProtocolPROTOCOLSourceDeleteWithHttpInfoAsync(PROTOCOL, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  DELETE IP helper policy objects.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> IpHelperPoliciesProtocolPROTOCOLSourceDeleteWithHttpInfoAsync(string PROTOCOL, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceDelete");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiStatus>("/ip-helper/policies/protocol/{PROTOCOL}/source", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IphPolicyCollection</returns>
        public IphPolicyCollection IpHelperPoliciesProtocolPROTOCOLSourceGet(string PROTOCOL, int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<IphPolicyCollection> localVarResponse = IpHelperPoliciesProtocolPROTOCOLSourceGetWithHttpInfo(PROTOCOL);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IphPolicyCollection</returns>
        public SonicWallGen7.Client.ApiResponse<IphPolicyCollection> IpHelperPoliciesProtocolPROTOCOLSourceGetWithHttpInfo(string PROTOCOL, int operationIndex = 0)
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceGet");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<IphPolicyCollection>("/ip-helper/policies/protocol/{PROTOCOL}/source", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IphPolicyCollection</returns>
        public async System.Threading.Tasks.Task<IphPolicyCollection> IpHelperPoliciesProtocolPROTOCOLSourceGetAsync(string PROTOCOL, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<IphPolicyCollection> localVarResponse = await IpHelperPoliciesProtocolPROTOCOLSourceGetWithHttpInfoAsync(PROTOCOL, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IphPolicyCollection)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<IphPolicyCollection>> IpHelperPoliciesProtocolPROTOCOLSourceGetWithHttpInfoAsync(string PROTOCOL, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceGet");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IphPolicyCollection>("/ip-helper/policies/protocol/{PROTOCOL}/source", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  DELETE IP helper policy objects.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="GROUPNAME">Group address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEDelete(string PROTOCOL, string GROUPNAME, int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEDeleteWithHttpInfo(PROTOCOL, GROUPNAME);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  DELETE IP helper policy objects.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="GROUPNAME">Group address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEDeleteWithHttpInfo(string PROTOCOL, string GROUPNAME, int operationIndex = 0)
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEDelete");
            }

            // verify the required parameter 'GROUPNAME' is set
            if (GROUPNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'GROUPNAME' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEDelete");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.PathParameters.Add("GROUPNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(GROUPNAME)); // path parameter

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiStatus>("/ip-helper/policies/protocol/{PROTOCOL}/source/group/{GROUPNAME}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  DELETE IP helper policy objects.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="GROUPNAME">Group address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEDeleteAsync(string PROTOCOL, string GROUPNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEDeleteWithHttpInfoAsync(PROTOCOL, GROUPNAME, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  DELETE IP helper policy objects.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="GROUPNAME">Group address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEDeleteWithHttpInfoAsync(string PROTOCOL, string GROUPNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEDelete");
            }

            // verify the required parameter 'GROUPNAME' is set
            if (GROUPNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'GROUPNAME' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEDelete");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.PathParameters.Add("GROUPNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(GROUPNAME)); // path parameter

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiStatus>("/ip-helper/policies/protocol/{PROTOCOL}/source/group/{GROUPNAME}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="GROUPNAME">Group address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IphPolicyCollection</returns>
        public IphPolicyCollection IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEGet(string PROTOCOL, string GROUPNAME, int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<IphPolicyCollection> localVarResponse = IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEGetWithHttpInfo(PROTOCOL, GROUPNAME);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="GROUPNAME">Group address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IphPolicyCollection</returns>
        public SonicWallGen7.Client.ApiResponse<IphPolicyCollection> IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEGetWithHttpInfo(string PROTOCOL, string GROUPNAME, int operationIndex = 0)
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEGet");
            }

            // verify the required parameter 'GROUPNAME' is set
            if (GROUPNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'GROUPNAME' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEGet");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.PathParameters.Add("GROUPNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(GROUPNAME)); // path parameter

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<IphPolicyCollection>("/ip-helper/policies/protocol/{PROTOCOL}/source/group/{GROUPNAME}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="GROUPNAME">Group address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IphPolicyCollection</returns>
        public async System.Threading.Tasks.Task<IphPolicyCollection> IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEGetAsync(string PROTOCOL, string GROUPNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<IphPolicyCollection> localVarResponse = await IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEGetWithHttpInfoAsync(PROTOCOL, GROUPNAME, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="GROUPNAME">Group address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IphPolicyCollection)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<IphPolicyCollection>> IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEGetWithHttpInfoAsync(string PROTOCOL, string GROUPNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEGet");
            }

            // verify the required parameter 'GROUPNAME' is set
            if (GROUPNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'GROUPNAME' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEGet");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.PathParameters.Add("GROUPNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(GROUPNAME)); // path parameter

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IphPolicyCollection>("/ip-helper/policies/protocol/{PROTOCOL}/source/group/{GROUPNAME}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Patch IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="GROUPNAME">Group address object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPatch(string PROTOCOL, string GROUPNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPatchWithHttpInfo(PROTOCOL, GROUPNAME, iphPolicyCollection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Patch IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="GROUPNAME">Group address object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPatchWithHttpInfo(string PROTOCOL, string GROUPNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0)
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPatch");
            }

            // verify the required parameter 'GROUPNAME' is set
            if (GROUPNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'GROUPNAME' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPatch");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.PathParameters.Add("GROUPNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(GROUPNAME)); // path parameter
            localVarRequestOptions.Data = iphPolicyCollection;

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ApiStatus>("/ip-helper/policies/protocol/{PROTOCOL}/source/group/{GROUPNAME}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Patch IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="GROUPNAME">Group address object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPatchAsync(string PROTOCOL, string GROUPNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPatchWithHttpInfoAsync(PROTOCOL, GROUPNAME, iphPolicyCollection, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Patch IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="GROUPNAME">Group address object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPatchWithHttpInfoAsync(string PROTOCOL, string GROUPNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPatch");
            }

            // verify the required parameter 'GROUPNAME' is set
            if (GROUPNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'GROUPNAME' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPatch");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.PathParameters.Add("GROUPNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(GROUPNAME)); // path parameter
            localVarRequestOptions.Data = iphPolicyCollection;

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ApiStatus>("/ip-helper/policies/protocol/{PROTOCOL}/source/group/{GROUPNAME}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="GROUPNAME">Group address object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPut(string PROTOCOL, string GROUPNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPutWithHttpInfo(PROTOCOL, GROUPNAME, iphPolicyCollection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="GROUPNAME">Group address object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPutWithHttpInfo(string PROTOCOL, string GROUPNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0)
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPut");
            }

            // verify the required parameter 'GROUPNAME' is set
            if (GROUPNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'GROUPNAME' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPut");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.PathParameters.Add("GROUPNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(GROUPNAME)); // path parameter
            localVarRequestOptions.Data = iphPolicyCollection;

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApiStatus>("/ip-helper/policies/protocol/{PROTOCOL}/source/group/{GROUPNAME}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="GROUPNAME">Group address object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPutAsync(string PROTOCOL, string GROUPNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPutWithHttpInfoAsync(PROTOCOL, GROUPNAME, iphPolicyCollection, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="GROUPNAME">Group address object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPutWithHttpInfoAsync(string PROTOCOL, string GROUPNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPut");
            }

            // verify the required parameter 'GROUPNAME' is set
            if (GROUPNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'GROUPNAME' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPut");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.PathParameters.Add("GROUPNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(GROUPNAME)); // path parameter
            localVarRequestOptions.Data = iphPolicyCollection;

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ApiStatus>("/ip-helper/policies/protocol/{PROTOCOL}/source/group/{GROUPNAME}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  DELETE IP helper policy objects.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="IFNAME">IP helper interface name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEDelete(string PROTOCOL, string IFNAME, int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEDeleteWithHttpInfo(PROTOCOL, IFNAME);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  DELETE IP helper policy objects.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="IFNAME">IP helper interface name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEDeleteWithHttpInfo(string PROTOCOL, string IFNAME, int operationIndex = 0)
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEDelete");
            }

            // verify the required parameter 'IFNAME' is set
            if (IFNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'IFNAME' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEDelete");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.PathParameters.Add("IFNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(IFNAME)); // path parameter

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiStatus>("/ip-helper/policies/protocol/{PROTOCOL}/source/interface/{IFNAME}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  DELETE IP helper policy objects.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="IFNAME">IP helper interface name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEDeleteAsync(string PROTOCOL, string IFNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEDeleteWithHttpInfoAsync(PROTOCOL, IFNAME, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  DELETE IP helper policy objects.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="IFNAME">IP helper interface name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEDeleteWithHttpInfoAsync(string PROTOCOL, string IFNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEDelete");
            }

            // verify the required parameter 'IFNAME' is set
            if (IFNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'IFNAME' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEDelete");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.PathParameters.Add("IFNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(IFNAME)); // path parameter

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiStatus>("/ip-helper/policies/protocol/{PROTOCOL}/source/interface/{IFNAME}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="IFNAME">IP helper interface name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IphPolicyCollection</returns>
        public IphPolicyCollection IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEGet(string PROTOCOL, string IFNAME, int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<IphPolicyCollection> localVarResponse = IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEGetWithHttpInfo(PROTOCOL, IFNAME);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="IFNAME">IP helper interface name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IphPolicyCollection</returns>
        public SonicWallGen7.Client.ApiResponse<IphPolicyCollection> IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEGetWithHttpInfo(string PROTOCOL, string IFNAME, int operationIndex = 0)
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEGet");
            }

            // verify the required parameter 'IFNAME' is set
            if (IFNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'IFNAME' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEGet");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.PathParameters.Add("IFNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(IFNAME)); // path parameter

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<IphPolicyCollection>("/ip-helper/policies/protocol/{PROTOCOL}/source/interface/{IFNAME}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="IFNAME">IP helper interface name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IphPolicyCollection</returns>
        public async System.Threading.Tasks.Task<IphPolicyCollection> IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEGetAsync(string PROTOCOL, string IFNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<IphPolicyCollection> localVarResponse = await IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEGetWithHttpInfoAsync(PROTOCOL, IFNAME, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="IFNAME">IP helper interface name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IphPolicyCollection)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<IphPolicyCollection>> IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEGetWithHttpInfoAsync(string PROTOCOL, string IFNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEGet");
            }

            // verify the required parameter 'IFNAME' is set
            if (IFNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'IFNAME' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEGet");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.PathParameters.Add("IFNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(IFNAME)); // path parameter

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IphPolicyCollection>("/ip-helper/policies/protocol/{PROTOCOL}/source/interface/{IFNAME}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Patch IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="IFNAME">IP helper interface name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPatch(string PROTOCOL, string IFNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPatchWithHttpInfo(PROTOCOL, IFNAME, iphPolicyCollection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Patch IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="IFNAME">IP helper interface name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPatchWithHttpInfo(string PROTOCOL, string IFNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0)
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPatch");
            }

            // verify the required parameter 'IFNAME' is set
            if (IFNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'IFNAME' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPatch");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.PathParameters.Add("IFNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(IFNAME)); // path parameter
            localVarRequestOptions.Data = iphPolicyCollection;

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ApiStatus>("/ip-helper/policies/protocol/{PROTOCOL}/source/interface/{IFNAME}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Patch IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="IFNAME">IP helper interface name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPatchAsync(string PROTOCOL, string IFNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPatchWithHttpInfoAsync(PROTOCOL, IFNAME, iphPolicyCollection, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Patch IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="IFNAME">IP helper interface name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPatchWithHttpInfoAsync(string PROTOCOL, string IFNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPatch");
            }

            // verify the required parameter 'IFNAME' is set
            if (IFNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'IFNAME' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPatch");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.PathParameters.Add("IFNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(IFNAME)); // path parameter
            localVarRequestOptions.Data = iphPolicyCollection;

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ApiStatus>("/ip-helper/policies/protocol/{PROTOCOL}/source/interface/{IFNAME}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="IFNAME">IP helper interface name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPut(string PROTOCOL, string IFNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPutWithHttpInfo(PROTOCOL, IFNAME, iphPolicyCollection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="IFNAME">IP helper interface name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPutWithHttpInfo(string PROTOCOL, string IFNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0)
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPut");
            }

            // verify the required parameter 'IFNAME' is set
            if (IFNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'IFNAME' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPut");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.PathParameters.Add("IFNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(IFNAME)); // path parameter
            localVarRequestOptions.Data = iphPolicyCollection;

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApiStatus>("/ip-helper/policies/protocol/{PROTOCOL}/source/interface/{IFNAME}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="IFNAME">IP helper interface name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPutAsync(string PROTOCOL, string IFNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPutWithHttpInfoAsync(PROTOCOL, IFNAME, iphPolicyCollection, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="IFNAME">IP helper interface name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPutWithHttpInfoAsync(string PROTOCOL, string IFNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPut");
            }

            // verify the required parameter 'IFNAME' is set
            if (IFNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'IFNAME' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPut");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.PathParameters.Add("IFNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(IFNAME)); // path parameter
            localVarRequestOptions.Data = iphPolicyCollection;

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ApiStatus>("/ip-helper/policies/protocol/{PROTOCOL}/source/interface/{IFNAME}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  DELETE IP helper policy objects.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="NETWORKNAME">Network address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEDelete(string PROTOCOL, string NETWORKNAME, int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEDeleteWithHttpInfo(PROTOCOL, NETWORKNAME);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  DELETE IP helper policy objects.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="NETWORKNAME">Network address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEDeleteWithHttpInfo(string PROTOCOL, string NETWORKNAME, int operationIndex = 0)
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEDelete");
            }

            // verify the required parameter 'NETWORKNAME' is set
            if (NETWORKNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'NETWORKNAME' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEDelete");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.PathParameters.Add("NETWORKNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(NETWORKNAME)); // path parameter

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiStatus>("/ip-helper/policies/protocol/{PROTOCOL}/source/name/{NETWORKNAME}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  DELETE IP helper policy objects.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="NETWORKNAME">Network address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEDeleteAsync(string PROTOCOL, string NETWORKNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEDeleteWithHttpInfoAsync(PROTOCOL, NETWORKNAME, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  DELETE IP helper policy objects.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="NETWORKNAME">Network address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEDeleteWithHttpInfoAsync(string PROTOCOL, string NETWORKNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEDelete");
            }

            // verify the required parameter 'NETWORKNAME' is set
            if (NETWORKNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'NETWORKNAME' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEDelete");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.PathParameters.Add("NETWORKNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(NETWORKNAME)); // path parameter

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiStatus>("/ip-helper/policies/protocol/{PROTOCOL}/source/name/{NETWORKNAME}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="NETWORKNAME">Network address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IphPolicyCollection</returns>
        public IphPolicyCollection IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEGet(string PROTOCOL, string NETWORKNAME, int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<IphPolicyCollection> localVarResponse = IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEGetWithHttpInfo(PROTOCOL, NETWORKNAME);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="NETWORKNAME">Network address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IphPolicyCollection</returns>
        public SonicWallGen7.Client.ApiResponse<IphPolicyCollection> IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEGetWithHttpInfo(string PROTOCOL, string NETWORKNAME, int operationIndex = 0)
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEGet");
            }

            // verify the required parameter 'NETWORKNAME' is set
            if (NETWORKNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'NETWORKNAME' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEGet");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.PathParameters.Add("NETWORKNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(NETWORKNAME)); // path parameter

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<IphPolicyCollection>("/ip-helper/policies/protocol/{PROTOCOL}/source/name/{NETWORKNAME}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="NETWORKNAME">Network address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IphPolicyCollection</returns>
        public async System.Threading.Tasks.Task<IphPolicyCollection> IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEGetAsync(string PROTOCOL, string NETWORKNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<IphPolicyCollection> localVarResponse = await IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEGetWithHttpInfoAsync(PROTOCOL, NETWORKNAME, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="NETWORKNAME">Network address object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IphPolicyCollection)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<IphPolicyCollection>> IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEGetWithHttpInfoAsync(string PROTOCOL, string NETWORKNAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEGet");
            }

            // verify the required parameter 'NETWORKNAME' is set
            if (NETWORKNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'NETWORKNAME' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEGet");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.PathParameters.Add("NETWORKNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(NETWORKNAME)); // path parameter

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IphPolicyCollection>("/ip-helper/policies/protocol/{PROTOCOL}/source/name/{NETWORKNAME}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Patch IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="NETWORKNAME">Network address object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPatch(string PROTOCOL, string NETWORKNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPatchWithHttpInfo(PROTOCOL, NETWORKNAME, iphPolicyCollection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Patch IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="NETWORKNAME">Network address object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPatchWithHttpInfo(string PROTOCOL, string NETWORKNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0)
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPatch");
            }

            // verify the required parameter 'NETWORKNAME' is set
            if (NETWORKNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'NETWORKNAME' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPatch");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.PathParameters.Add("NETWORKNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(NETWORKNAME)); // path parameter
            localVarRequestOptions.Data = iphPolicyCollection;

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ApiStatus>("/ip-helper/policies/protocol/{PROTOCOL}/source/name/{NETWORKNAME}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Patch IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="NETWORKNAME">Network address object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPatchAsync(string PROTOCOL, string NETWORKNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPatchWithHttpInfoAsync(PROTOCOL, NETWORKNAME, iphPolicyCollection, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Patch IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="NETWORKNAME">Network address object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPatchWithHttpInfoAsync(string PROTOCOL, string NETWORKNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPatch");
            }

            // verify the required parameter 'NETWORKNAME' is set
            if (NETWORKNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'NETWORKNAME' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPatch");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.PathParameters.Add("NETWORKNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(NETWORKNAME)); // path parameter
            localVarRequestOptions.Data = iphPolicyCollection;

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ApiStatus>("/ip-helper/policies/protocol/{PROTOCOL}/source/name/{NETWORKNAME}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="NETWORKNAME">Network address object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPut(string PROTOCOL, string NETWORKNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPutWithHttpInfo(PROTOCOL, NETWORKNAME, iphPolicyCollection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="NETWORKNAME">Network address object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPutWithHttpInfo(string PROTOCOL, string NETWORKNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0)
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPut");
            }

            // verify the required parameter 'NETWORKNAME' is set
            if (NETWORKNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'NETWORKNAME' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPut");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.PathParameters.Add("NETWORKNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(NETWORKNAME)); // path parameter
            localVarRequestOptions.Data = iphPolicyCollection;

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApiStatus>("/ip-helper/policies/protocol/{PROTOCOL}/source/name/{NETWORKNAME}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="NETWORKNAME">Network address object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPutAsync(string PROTOCOL, string NETWORKNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPutWithHttpInfoAsync(PROTOCOL, NETWORKNAME, iphPolicyCollection, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="NETWORKNAME">Network address object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPutWithHttpInfoAsync(string PROTOCOL, string NETWORKNAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPut");
            }

            // verify the required parameter 'NETWORKNAME' is set
            if (NETWORKNAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'NETWORKNAME' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPut");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.PathParameters.Add("NETWORKNAME", SonicWallGen7.Client.ClientUtils.ParameterToString(NETWORKNAME)); // path parameter
            localVarRequestOptions.Data = iphPolicyCollection;

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ApiStatus>("/ip-helper/policies/protocol/{PROTOCOL}/source/name/{NETWORKNAME}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Patch IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus IpHelperPoliciesProtocolPROTOCOLSourcePatch(string PROTOCOL, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = IpHelperPoliciesProtocolPROTOCOLSourcePatchWithHttpInfo(PROTOCOL, iphPolicyCollection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Patch IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourcePatchWithHttpInfo(string PROTOCOL, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0)
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourcePatch");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.Data = iphPolicyCollection;

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourcePatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ApiStatus>("/ip-helper/policies/protocol/{PROTOCOL}/source", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourcePatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Patch IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourcePatchAsync(string PROTOCOL, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await IpHelperPoliciesProtocolPROTOCOLSourcePatchWithHttpInfoAsync(PROTOCOL, iphPolicyCollection, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Patch IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> IpHelperPoliciesProtocolPROTOCOLSourcePatchWithHttpInfoAsync(string PROTOCOL, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourcePatch");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.Data = iphPolicyCollection;

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourcePatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ApiStatus>("/ip-helper/policies/protocol/{PROTOCOL}/source", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourcePatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus IpHelperPoliciesProtocolPROTOCOLSourcePut(string PROTOCOL, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = IpHelperPoliciesProtocolPROTOCOLSourcePutWithHttpInfo(PROTOCOL, iphPolicyCollection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourcePutWithHttpInfo(string PROTOCOL, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0)
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourcePut");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.Data = iphPolicyCollection;

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourcePut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApiStatus>("/ip-helper/policies/protocol/{PROTOCOL}/source", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourcePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourcePutAsync(string PROTOCOL, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await IpHelperPoliciesProtocolPROTOCOLSourcePutWithHttpInfoAsync(PROTOCOL, iphPolicyCollection, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> IpHelperPoliciesProtocolPROTOCOLSourcePutWithHttpInfoAsync(string PROTOCOL, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourcePut");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.Data = iphPolicyCollection;

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourcePut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ApiStatus>("/ip-helper/policies/protocol/{PROTOCOL}/source", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourcePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  DELETE IP helper policy objects.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="ZONENAME">Zone object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEDelete(string PROTOCOL, string ZONENAME, int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEDeleteWithHttpInfo(PROTOCOL, ZONENAME);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  DELETE IP helper policy objects.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="ZONENAME">Zone object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEDeleteWithHttpInfo(string PROTOCOL, string ZONENAME, int operationIndex = 0)
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEDelete");
            }

            // verify the required parameter 'ZONENAME' is set
            if (ZONENAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'ZONENAME' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEDelete");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.PathParameters.Add("ZONENAME", SonicWallGen7.Client.ClientUtils.ParameterToString(ZONENAME)); // path parameter

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiStatus>("/ip-helper/policies/protocol/{PROTOCOL}/source/zone/{ZONENAME}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  DELETE IP helper policy objects.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="ZONENAME">Zone object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEDeleteAsync(string PROTOCOL, string ZONENAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEDeleteWithHttpInfoAsync(PROTOCOL, ZONENAME, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  DELETE IP helper policy objects.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="ZONENAME">Zone object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEDeleteWithHttpInfoAsync(string PROTOCOL, string ZONENAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEDelete");
            }

            // verify the required parameter 'ZONENAME' is set
            if (ZONENAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'ZONENAME' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEDelete");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.PathParameters.Add("ZONENAME", SonicWallGen7.Client.ClientUtils.ParameterToString(ZONENAME)); // path parameter

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiStatus>("/ip-helper/policies/protocol/{PROTOCOL}/source/zone/{ZONENAME}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="ZONENAME">Zone object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IphPolicyCollection</returns>
        public IphPolicyCollection IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEGet(string PROTOCOL, string ZONENAME, int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<IphPolicyCollection> localVarResponse = IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEGetWithHttpInfo(PROTOCOL, ZONENAME);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="ZONENAME">Zone object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IphPolicyCollection</returns>
        public SonicWallGen7.Client.ApiResponse<IphPolicyCollection> IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEGetWithHttpInfo(string PROTOCOL, string ZONENAME, int operationIndex = 0)
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEGet");
            }

            // verify the required parameter 'ZONENAME' is set
            if (ZONENAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'ZONENAME' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEGet");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.PathParameters.Add("ZONENAME", SonicWallGen7.Client.ClientUtils.ParameterToString(ZONENAME)); // path parameter

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<IphPolicyCollection>("/ip-helper/policies/protocol/{PROTOCOL}/source/zone/{ZONENAME}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="ZONENAME">Zone object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IphPolicyCollection</returns>
        public async System.Threading.Tasks.Task<IphPolicyCollection> IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEGetAsync(string PROTOCOL, string ZONENAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<IphPolicyCollection> localVarResponse = await IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEGetWithHttpInfoAsync(PROTOCOL, ZONENAME, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="ZONENAME">Zone object name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IphPolicyCollection)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<IphPolicyCollection>> IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEGetWithHttpInfoAsync(string PROTOCOL, string ZONENAME, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEGet");
            }

            // verify the required parameter 'ZONENAME' is set
            if (ZONENAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'ZONENAME' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEGet");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.PathParameters.Add("ZONENAME", SonicWallGen7.Client.ClientUtils.ParameterToString(ZONENAME)); // path parameter

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IphPolicyCollection>("/ip-helper/policies/protocol/{PROTOCOL}/source/zone/{ZONENAME}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Patch IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="ZONENAME">Zone object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPatch(string PROTOCOL, string ZONENAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPatchWithHttpInfo(PROTOCOL, ZONENAME, iphPolicyCollection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Patch IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="ZONENAME">Zone object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPatchWithHttpInfo(string PROTOCOL, string ZONENAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0)
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPatch");
            }

            // verify the required parameter 'ZONENAME' is set
            if (ZONENAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'ZONENAME' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPatch");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.PathParameters.Add("ZONENAME", SonicWallGen7.Client.ClientUtils.ParameterToString(ZONENAME)); // path parameter
            localVarRequestOptions.Data = iphPolicyCollection;

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ApiStatus>("/ip-helper/policies/protocol/{PROTOCOL}/source/zone/{ZONENAME}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Patch IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="ZONENAME">Zone object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPatchAsync(string PROTOCOL, string ZONENAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPatchWithHttpInfoAsync(PROTOCOL, ZONENAME, iphPolicyCollection, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Patch IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="ZONENAME">Zone object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPatchWithHttpInfoAsync(string PROTOCOL, string ZONENAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPatch");
            }

            // verify the required parameter 'ZONENAME' is set
            if (ZONENAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'ZONENAME' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPatch");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.PathParameters.Add("ZONENAME", SonicWallGen7.Client.ClientUtils.ParameterToString(ZONENAME)); // path parameter
            localVarRequestOptions.Data = iphPolicyCollection;

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ApiStatus>("/ip-helper/policies/protocol/{PROTOCOL}/source/zone/{ZONENAME}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="ZONENAME">Zone object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPut(string PROTOCOL, string ZONENAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPutWithHttpInfo(PROTOCOL, ZONENAME, iphPolicyCollection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="ZONENAME">Zone object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPutWithHttpInfo(string PROTOCOL, string ZONENAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0)
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPut");
            }

            // verify the required parameter 'ZONENAME' is set
            if (ZONENAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'ZONENAME' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPut");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.PathParameters.Add("ZONENAME", SonicWallGen7.Client.ClientUtils.ParameterToString(ZONENAME)); // path parameter
            localVarRequestOptions.Data = iphPolicyCollection;

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApiStatus>("/ip-helper/policies/protocol/{PROTOCOL}/source/zone/{ZONENAME}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="ZONENAME">Zone object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPutAsync(string PROTOCOL, string ZONENAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPutWithHttpInfoAsync(PROTOCOL, ZONENAME, iphPolicyCollection, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PROTOCOL">IP Helper relay protocol name.</param>
        /// <param name="ZONENAME">Zone object name.</param>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPutWithHttpInfoAsync(string PROTOCOL, string ZONENAME, IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'PROTOCOL' is set
            if (PROTOCOL == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'PROTOCOL' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPut");
            }

            // verify the required parameter 'ZONENAME' is set
            if (ZONENAME == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'ZONENAME' when calling IphPolicyApi->IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPut");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PROTOCOL", SonicWallGen7.Client.ClientUtils.ParameterToString(PROTOCOL)); // path parameter
            localVarRequestOptions.PathParameters.Add("ZONENAME", SonicWallGen7.Client.ClientUtils.ParameterToString(ZONENAME)); // path parameter
            localVarRequestOptions.Data = iphPolicyCollection;

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ApiStatus>("/ip-helper/policies/protocol/{PROTOCOL}/source/zone/{ZONENAME}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus IpHelperPoliciesPut(IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = IpHelperPoliciesPutWithHttpInfo(iphPolicyCollection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> IpHelperPoliciesPutWithHttpInfo(IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = iphPolicyCollection;

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApiStatus>("/ip-helper/policies", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> IpHelperPoliciesPutAsync(IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await IpHelperPoliciesPutWithHttpInfoAsync(iphPolicyCollection, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update IP helper policies configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iphPolicyCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> IpHelperPoliciesPutWithHttpInfoAsync(IphPolicyCollection? iphPolicyCollection = default(IphPolicyCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = iphPolicyCollection;

            localVarRequestOptions.Operation = "IphPolicyApi.IpHelperPoliciesPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ApiStatus>("/ip-helper/policies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IpHelperPoliciesPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
