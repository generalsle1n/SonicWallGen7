/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using SonicWallGen7.Client;
using SonicWallGen7.Model;

namespace SonicWallGen7.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVlanTranslationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve vlan translation configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VlanTranslationCollection</returns>
        VlanTranslationCollection VlanTranslationsGet(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve vlan translation configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VlanTranslationCollection</returns>
        ApiResponse<VlanTranslationCollection> VlanTranslationsGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a vlan translation.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INGRESSIF">Ingress interface name.</param>
        /// <param name="INGRESSID">Interface VLAN id.</param>
        /// <param name="EGRESSIF">Egress interface name.</param>
        /// <param name="EGRESSID">Interface VLAN id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDDelete(string INGRESSIF, decimal INGRESSID, string EGRESSIF, decimal EGRESSID, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a vlan translation.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INGRESSIF">Ingress interface name.</param>
        /// <param name="INGRESSID">Interface VLAN id.</param>
        /// <param name="EGRESSIF">Egress interface name.</param>
        /// <param name="EGRESSID">Interface VLAN id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDDeleteWithHttpInfo(string INGRESSIF, decimal INGRESSID, string EGRESSIF, decimal EGRESSID, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve vlan translation configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INGRESSIF">Ingress interface name.</param>
        /// <param name="INGRESSID">Interface VLAN id.</param>
        /// <param name="EGRESSIF">Egress interface name.</param>
        /// <param name="EGRESSID">Interface VLAN id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VlanTranslationCollection</returns>
        VlanTranslationCollection VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDGet(string INGRESSIF, decimal INGRESSID, string EGRESSIF, decimal EGRESSID, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve vlan translation configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INGRESSIF">Ingress interface name.</param>
        /// <param name="INGRESSID">Interface VLAN id.</param>
        /// <param name="EGRESSIF">Egress interface name.</param>
        /// <param name="EGRESSID">Interface VLAN id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VlanTranslationCollection</returns>
        ApiResponse<VlanTranslationCollection> VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDGetWithHttpInfo(string INGRESSIF, decimal INGRESSID, string EGRESSIF, decimal EGRESSID, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch vlan translation configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INGRESSIF">Ingress interface name.</param>
        /// <param name="INGRESSID">Interface VLAN id.</param>
        /// <param name="EGRESSIF">Egress interface name.</param>
        /// <param name="EGRESSID">Interface VLAN id.</param>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPatch(string INGRESSIF, decimal INGRESSID, string EGRESSIF, decimal EGRESSID, VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch vlan translation configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INGRESSIF">Ingress interface name.</param>
        /// <param name="INGRESSID">Interface VLAN id.</param>
        /// <param name="EGRESSIF">Egress interface name.</param>
        /// <param name="EGRESSID">Interface VLAN id.</param>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPatchWithHttpInfo(string INGRESSIF, decimal INGRESSID, string EGRESSIF, decimal EGRESSID, VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit vlan translation configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INGRESSIF">Ingress interface name.</param>
        /// <param name="INGRESSID">Interface VLAN id.</param>
        /// <param name="EGRESSIF">Egress interface name.</param>
        /// <param name="EGRESSID">Interface VLAN id.</param>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPut(string INGRESSIF, decimal INGRESSID, string EGRESSIF, decimal EGRESSID, VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit vlan translation configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INGRESSIF">Ingress interface name.</param>
        /// <param name="INGRESSID">Interface VLAN id.</param>
        /// <param name="EGRESSIF">Egress interface name.</param>
        /// <param name="EGRESSID">Interface VLAN id.</param>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPutWithHttpInfo(string INGRESSIF, decimal INGRESSID, string EGRESSIF, decimal EGRESSID, VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch vlan translation configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus VlanTranslationsPatch(VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch vlan translation configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> VlanTranslationsPatchWithHttpInfo(VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new vlan translation.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus VlanTranslationsPost(VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new vlan translation.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> VlanTranslationsPostWithHttpInfo(VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit vlan translation configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        ApiStatus VlanTranslationsPut(VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit vlan translation configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        ApiResponse<ApiStatus> VlanTranslationsPutWithHttpInfo(VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVlanTranslationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve vlan translation configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VlanTranslationCollection</returns>
        System.Threading.Tasks.Task<VlanTranslationCollection> VlanTranslationsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve vlan translation configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VlanTranslationCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<VlanTranslationCollection>> VlanTranslationsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a vlan translation.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INGRESSIF">Ingress interface name.</param>
        /// <param name="INGRESSID">Interface VLAN id.</param>
        /// <param name="EGRESSIF">Egress interface name.</param>
        /// <param name="EGRESSID">Interface VLAN id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDDeleteAsync(string INGRESSIF, decimal INGRESSID, string EGRESSIF, decimal EGRESSID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a vlan translation.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INGRESSIF">Ingress interface name.</param>
        /// <param name="INGRESSID">Interface VLAN id.</param>
        /// <param name="EGRESSIF">Egress interface name.</param>
        /// <param name="EGRESSID">Interface VLAN id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDDeleteWithHttpInfoAsync(string INGRESSIF, decimal INGRESSID, string EGRESSIF, decimal EGRESSID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve vlan translation configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INGRESSIF">Ingress interface name.</param>
        /// <param name="INGRESSID">Interface VLAN id.</param>
        /// <param name="EGRESSIF">Egress interface name.</param>
        /// <param name="EGRESSID">Interface VLAN id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VlanTranslationCollection</returns>
        System.Threading.Tasks.Task<VlanTranslationCollection> VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDGetAsync(string INGRESSIF, decimal INGRESSID, string EGRESSIF, decimal EGRESSID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve vlan translation configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INGRESSIF">Ingress interface name.</param>
        /// <param name="INGRESSID">Interface VLAN id.</param>
        /// <param name="EGRESSIF">Egress interface name.</param>
        /// <param name="EGRESSID">Interface VLAN id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VlanTranslationCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<VlanTranslationCollection>> VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDGetWithHttpInfoAsync(string INGRESSIF, decimal INGRESSID, string EGRESSIF, decimal EGRESSID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch vlan translation configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INGRESSIF">Ingress interface name.</param>
        /// <param name="INGRESSID">Interface VLAN id.</param>
        /// <param name="EGRESSIF">Egress interface name.</param>
        /// <param name="EGRESSID">Interface VLAN id.</param>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPatchAsync(string INGRESSIF, decimal INGRESSID, string EGRESSIF, decimal EGRESSID, VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch vlan translation configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INGRESSIF">Ingress interface name.</param>
        /// <param name="INGRESSID">Interface VLAN id.</param>
        /// <param name="EGRESSIF">Egress interface name.</param>
        /// <param name="EGRESSID">Interface VLAN id.</param>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPatchWithHttpInfoAsync(string INGRESSIF, decimal INGRESSID, string EGRESSIF, decimal EGRESSID, VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit vlan translation configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INGRESSIF">Ingress interface name.</param>
        /// <param name="INGRESSID">Interface VLAN id.</param>
        /// <param name="EGRESSIF">Egress interface name.</param>
        /// <param name="EGRESSID">Interface VLAN id.</param>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPutAsync(string INGRESSIF, decimal INGRESSID, string EGRESSIF, decimal EGRESSID, VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit vlan translation configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INGRESSIF">Ingress interface name.</param>
        /// <param name="INGRESSID">Interface VLAN id.</param>
        /// <param name="EGRESSIF">Egress interface name.</param>
        /// <param name="EGRESSID">Interface VLAN id.</param>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPutWithHttpInfoAsync(string INGRESSIF, decimal INGRESSID, string EGRESSIF, decimal EGRESSID, VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch vlan translation configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> VlanTranslationsPatchAsync(VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Patch vlan translation configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> VlanTranslationsPatchWithHttpInfoAsync(VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new vlan translation.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> VlanTranslationsPostAsync(VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new vlan translation.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> VlanTranslationsPostWithHttpInfoAsync(VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit vlan translation configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        System.Threading.Tasks.Task<ApiStatus> VlanTranslationsPutAsync(VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit vlan translation configuration.
        /// </remarks>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiStatus>> VlanTranslationsPutWithHttpInfoAsync(VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVlanTranslationApi : IVlanTranslationApiSync, IVlanTranslationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VlanTranslationApi : IVlanTranslationApi
    {
        private SonicWallGen7.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VlanTranslationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VlanTranslationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VlanTranslationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VlanTranslationApi(string basePath)
        {
            this.Configuration = SonicWallGen7.Client.Configuration.MergeConfigurations(
                SonicWallGen7.Client.GlobalConfiguration.Instance,
                new SonicWallGen7.Client.Configuration { BasePath = basePath }
            );
            this.Client = new SonicWallGen7.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SonicWallGen7.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = SonicWallGen7.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VlanTranslationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VlanTranslationApi(SonicWallGen7.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SonicWallGen7.Client.Configuration.MergeConfigurations(
                SonicWallGen7.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new SonicWallGen7.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SonicWallGen7.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = SonicWallGen7.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VlanTranslationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public VlanTranslationApi(SonicWallGen7.Client.ISynchronousClient client, SonicWallGen7.Client.IAsynchronousClient asyncClient, SonicWallGen7.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SonicWallGen7.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SonicWallGen7.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SonicWallGen7.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SonicWallGen7.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SonicWallGen7.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Retrieve vlan translation configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VlanTranslationCollection</returns>
        public VlanTranslationCollection VlanTranslationsGet(int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<VlanTranslationCollection> localVarResponse = VlanTranslationsGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve vlan translation configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VlanTranslationCollection</returns>
        public SonicWallGen7.Client.ApiResponse<VlanTranslationCollection> VlanTranslationsGetWithHttpInfo(int operationIndex = 0)
        {
            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "VlanTranslationApi.VlanTranslationsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<VlanTranslationCollection>("/vlan-translations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VlanTranslationsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve vlan translation configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VlanTranslationCollection</returns>
        public async System.Threading.Tasks.Task<VlanTranslationCollection> VlanTranslationsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<VlanTranslationCollection> localVarResponse = await VlanTranslationsGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve vlan translation configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VlanTranslationCollection)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<VlanTranslationCollection>> VlanTranslationsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "VlanTranslationApi.VlanTranslationsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VlanTranslationCollection>("/vlan-translations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VlanTranslationsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete a vlan translation.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INGRESSIF">Ingress interface name.</param>
        /// <param name="INGRESSID">Interface VLAN id.</param>
        /// <param name="EGRESSIF">Egress interface name.</param>
        /// <param name="EGRESSID">Interface VLAN id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDDelete(string INGRESSIF, decimal INGRESSID, string EGRESSIF, decimal EGRESSID, int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDDeleteWithHttpInfo(INGRESSIF, INGRESSID, EGRESSIF, EGRESSID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Delete a vlan translation.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INGRESSIF">Ingress interface name.</param>
        /// <param name="INGRESSID">Interface VLAN id.</param>
        /// <param name="EGRESSIF">Egress interface name.</param>
        /// <param name="EGRESSID">Interface VLAN id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDDeleteWithHttpInfo(string INGRESSIF, decimal INGRESSID, string EGRESSIF, decimal EGRESSID, int operationIndex = 0)
        {
            // verify the required parameter 'INGRESSIF' is set
            if (INGRESSIF == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'INGRESSIF' when calling VlanTranslationApi->VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDDelete");
            }

            // verify the required parameter 'EGRESSIF' is set
            if (EGRESSIF == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'EGRESSIF' when calling VlanTranslationApi->VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDDelete");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("INGRESSIF", SonicWallGen7.Client.ClientUtils.ParameterToString(INGRESSIF)); // path parameter
            localVarRequestOptions.PathParameters.Add("INGRESSID", SonicWallGen7.Client.ClientUtils.ParameterToString(INGRESSID)); // path parameter
            localVarRequestOptions.PathParameters.Add("EGRESSIF", SonicWallGen7.Client.ClientUtils.ParameterToString(EGRESSIF)); // path parameter
            localVarRequestOptions.PathParameters.Add("EGRESSID", SonicWallGen7.Client.ClientUtils.ParameterToString(EGRESSID)); // path parameter

            localVarRequestOptions.Operation = "VlanTranslationApi.VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiStatus>("/vlan-translations/ingress/interface/{INGRESSIF}/vlan/{INGRESSID}/egress/interface/{EGRESSIF}/vlan/{EGRESSID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete a vlan translation.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INGRESSIF">Ingress interface name.</param>
        /// <param name="INGRESSID">Interface VLAN id.</param>
        /// <param name="EGRESSIF">Egress interface name.</param>
        /// <param name="EGRESSID">Interface VLAN id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDDeleteAsync(string INGRESSIF, decimal INGRESSID, string EGRESSIF, decimal EGRESSID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDDeleteWithHttpInfoAsync(INGRESSIF, INGRESSID, EGRESSIF, EGRESSID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Delete a vlan translation.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INGRESSIF">Ingress interface name.</param>
        /// <param name="INGRESSID">Interface VLAN id.</param>
        /// <param name="EGRESSIF">Egress interface name.</param>
        /// <param name="EGRESSID">Interface VLAN id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDDeleteWithHttpInfoAsync(string INGRESSIF, decimal INGRESSID, string EGRESSIF, decimal EGRESSID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'INGRESSIF' is set
            if (INGRESSIF == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'INGRESSIF' when calling VlanTranslationApi->VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDDelete");
            }

            // verify the required parameter 'EGRESSIF' is set
            if (EGRESSIF == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'EGRESSIF' when calling VlanTranslationApi->VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDDelete");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("INGRESSIF", SonicWallGen7.Client.ClientUtils.ParameterToString(INGRESSIF)); // path parameter
            localVarRequestOptions.PathParameters.Add("INGRESSID", SonicWallGen7.Client.ClientUtils.ParameterToString(INGRESSID)); // path parameter
            localVarRequestOptions.PathParameters.Add("EGRESSIF", SonicWallGen7.Client.ClientUtils.ParameterToString(EGRESSIF)); // path parameter
            localVarRequestOptions.PathParameters.Add("EGRESSID", SonicWallGen7.Client.ClientUtils.ParameterToString(EGRESSID)); // path parameter

            localVarRequestOptions.Operation = "VlanTranslationApi.VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiStatus>("/vlan-translations/ingress/interface/{INGRESSIF}/vlan/{INGRESSID}/egress/interface/{EGRESSIF}/vlan/{EGRESSID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve vlan translation configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INGRESSIF">Ingress interface name.</param>
        /// <param name="INGRESSID">Interface VLAN id.</param>
        /// <param name="EGRESSIF">Egress interface name.</param>
        /// <param name="EGRESSID">Interface VLAN id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VlanTranslationCollection</returns>
        public VlanTranslationCollection VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDGet(string INGRESSIF, decimal INGRESSID, string EGRESSIF, decimal EGRESSID, int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<VlanTranslationCollection> localVarResponse = VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDGetWithHttpInfo(INGRESSIF, INGRESSID, EGRESSIF, EGRESSID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve vlan translation configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INGRESSIF">Ingress interface name.</param>
        /// <param name="INGRESSID">Interface VLAN id.</param>
        /// <param name="EGRESSIF">Egress interface name.</param>
        /// <param name="EGRESSID">Interface VLAN id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VlanTranslationCollection</returns>
        public SonicWallGen7.Client.ApiResponse<VlanTranslationCollection> VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDGetWithHttpInfo(string INGRESSIF, decimal INGRESSID, string EGRESSIF, decimal EGRESSID, int operationIndex = 0)
        {
            // verify the required parameter 'INGRESSIF' is set
            if (INGRESSIF == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'INGRESSIF' when calling VlanTranslationApi->VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDGet");
            }

            // verify the required parameter 'EGRESSIF' is set
            if (EGRESSIF == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'EGRESSIF' when calling VlanTranslationApi->VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDGet");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("INGRESSIF", SonicWallGen7.Client.ClientUtils.ParameterToString(INGRESSIF)); // path parameter
            localVarRequestOptions.PathParameters.Add("INGRESSID", SonicWallGen7.Client.ClientUtils.ParameterToString(INGRESSID)); // path parameter
            localVarRequestOptions.PathParameters.Add("EGRESSIF", SonicWallGen7.Client.ClientUtils.ParameterToString(EGRESSIF)); // path parameter
            localVarRequestOptions.PathParameters.Add("EGRESSID", SonicWallGen7.Client.ClientUtils.ParameterToString(EGRESSID)); // path parameter

            localVarRequestOptions.Operation = "VlanTranslationApi.VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<VlanTranslationCollection>("/vlan-translations/ingress/interface/{INGRESSIF}/vlan/{INGRESSID}/egress/interface/{EGRESSIF}/vlan/{EGRESSID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve vlan translation configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INGRESSIF">Ingress interface name.</param>
        /// <param name="INGRESSID">Interface VLAN id.</param>
        /// <param name="EGRESSIF">Egress interface name.</param>
        /// <param name="EGRESSID">Interface VLAN id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VlanTranslationCollection</returns>
        public async System.Threading.Tasks.Task<VlanTranslationCollection> VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDGetAsync(string INGRESSIF, decimal INGRESSID, string EGRESSIF, decimal EGRESSID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<VlanTranslationCollection> localVarResponse = await VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDGetWithHttpInfoAsync(INGRESSIF, INGRESSID, EGRESSIF, EGRESSID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve vlan translation configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INGRESSIF">Ingress interface name.</param>
        /// <param name="INGRESSID">Interface VLAN id.</param>
        /// <param name="EGRESSIF">Egress interface name.</param>
        /// <param name="EGRESSID">Interface VLAN id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VlanTranslationCollection)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<VlanTranslationCollection>> VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDGetWithHttpInfoAsync(string INGRESSIF, decimal INGRESSID, string EGRESSIF, decimal EGRESSID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'INGRESSIF' is set
            if (INGRESSIF == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'INGRESSIF' when calling VlanTranslationApi->VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDGet");
            }

            // verify the required parameter 'EGRESSIF' is set
            if (EGRESSIF == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'EGRESSIF' when calling VlanTranslationApi->VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDGet");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("INGRESSIF", SonicWallGen7.Client.ClientUtils.ParameterToString(INGRESSIF)); // path parameter
            localVarRequestOptions.PathParameters.Add("INGRESSID", SonicWallGen7.Client.ClientUtils.ParameterToString(INGRESSID)); // path parameter
            localVarRequestOptions.PathParameters.Add("EGRESSIF", SonicWallGen7.Client.ClientUtils.ParameterToString(EGRESSIF)); // path parameter
            localVarRequestOptions.PathParameters.Add("EGRESSID", SonicWallGen7.Client.ClientUtils.ParameterToString(EGRESSID)); // path parameter

            localVarRequestOptions.Operation = "VlanTranslationApi.VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VlanTranslationCollection>("/vlan-translations/ingress/interface/{INGRESSIF}/vlan/{INGRESSID}/egress/interface/{EGRESSIF}/vlan/{EGRESSID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Patch vlan translation configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INGRESSIF">Ingress interface name.</param>
        /// <param name="INGRESSID">Interface VLAN id.</param>
        /// <param name="EGRESSIF">Egress interface name.</param>
        /// <param name="EGRESSID">Interface VLAN id.</param>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPatch(string INGRESSIF, decimal INGRESSID, string EGRESSIF, decimal EGRESSID, VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPatchWithHttpInfo(INGRESSIF, INGRESSID, EGRESSIF, EGRESSID, vlanTranslationCollection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Patch vlan translation configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INGRESSIF">Ingress interface name.</param>
        /// <param name="INGRESSID">Interface VLAN id.</param>
        /// <param name="EGRESSIF">Egress interface name.</param>
        /// <param name="EGRESSID">Interface VLAN id.</param>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPatchWithHttpInfo(string INGRESSIF, decimal INGRESSID, string EGRESSIF, decimal EGRESSID, VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0)
        {
            // verify the required parameter 'INGRESSIF' is set
            if (INGRESSIF == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'INGRESSIF' when calling VlanTranslationApi->VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPatch");
            }

            // verify the required parameter 'EGRESSIF' is set
            if (EGRESSIF == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'EGRESSIF' when calling VlanTranslationApi->VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPatch");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("INGRESSIF", SonicWallGen7.Client.ClientUtils.ParameterToString(INGRESSIF)); // path parameter
            localVarRequestOptions.PathParameters.Add("INGRESSID", SonicWallGen7.Client.ClientUtils.ParameterToString(INGRESSID)); // path parameter
            localVarRequestOptions.PathParameters.Add("EGRESSIF", SonicWallGen7.Client.ClientUtils.ParameterToString(EGRESSIF)); // path parameter
            localVarRequestOptions.PathParameters.Add("EGRESSID", SonicWallGen7.Client.ClientUtils.ParameterToString(EGRESSID)); // path parameter
            localVarRequestOptions.Data = vlanTranslationCollection;

            localVarRequestOptions.Operation = "VlanTranslationApi.VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ApiStatus>("/vlan-translations/ingress/interface/{INGRESSIF}/vlan/{INGRESSID}/egress/interface/{EGRESSIF}/vlan/{EGRESSID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Patch vlan translation configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INGRESSIF">Ingress interface name.</param>
        /// <param name="INGRESSID">Interface VLAN id.</param>
        /// <param name="EGRESSIF">Egress interface name.</param>
        /// <param name="EGRESSID">Interface VLAN id.</param>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPatchAsync(string INGRESSIF, decimal INGRESSID, string EGRESSIF, decimal EGRESSID, VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPatchWithHttpInfoAsync(INGRESSIF, INGRESSID, EGRESSIF, EGRESSID, vlanTranslationCollection, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Patch vlan translation configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INGRESSIF">Ingress interface name.</param>
        /// <param name="INGRESSID">Interface VLAN id.</param>
        /// <param name="EGRESSIF">Egress interface name.</param>
        /// <param name="EGRESSID">Interface VLAN id.</param>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPatchWithHttpInfoAsync(string INGRESSIF, decimal INGRESSID, string EGRESSIF, decimal EGRESSID, VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'INGRESSIF' is set
            if (INGRESSIF == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'INGRESSIF' when calling VlanTranslationApi->VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPatch");
            }

            // verify the required parameter 'EGRESSIF' is set
            if (EGRESSIF == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'EGRESSIF' when calling VlanTranslationApi->VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPatch");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("INGRESSIF", SonicWallGen7.Client.ClientUtils.ParameterToString(INGRESSIF)); // path parameter
            localVarRequestOptions.PathParameters.Add("INGRESSID", SonicWallGen7.Client.ClientUtils.ParameterToString(INGRESSID)); // path parameter
            localVarRequestOptions.PathParameters.Add("EGRESSIF", SonicWallGen7.Client.ClientUtils.ParameterToString(EGRESSIF)); // path parameter
            localVarRequestOptions.PathParameters.Add("EGRESSID", SonicWallGen7.Client.ClientUtils.ParameterToString(EGRESSID)); // path parameter
            localVarRequestOptions.Data = vlanTranslationCollection;

            localVarRequestOptions.Operation = "VlanTranslationApi.VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ApiStatus>("/vlan-translations/ingress/interface/{INGRESSIF}/vlan/{INGRESSID}/egress/interface/{EGRESSIF}/vlan/{EGRESSID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Edit vlan translation configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INGRESSIF">Ingress interface name.</param>
        /// <param name="INGRESSID">Interface VLAN id.</param>
        /// <param name="EGRESSIF">Egress interface name.</param>
        /// <param name="EGRESSID">Interface VLAN id.</param>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPut(string INGRESSIF, decimal INGRESSID, string EGRESSIF, decimal EGRESSID, VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPutWithHttpInfo(INGRESSIF, INGRESSID, EGRESSIF, EGRESSID, vlanTranslationCollection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Edit vlan translation configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INGRESSIF">Ingress interface name.</param>
        /// <param name="INGRESSID">Interface VLAN id.</param>
        /// <param name="EGRESSIF">Egress interface name.</param>
        /// <param name="EGRESSID">Interface VLAN id.</param>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPutWithHttpInfo(string INGRESSIF, decimal INGRESSID, string EGRESSIF, decimal EGRESSID, VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0)
        {
            // verify the required parameter 'INGRESSIF' is set
            if (INGRESSIF == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'INGRESSIF' when calling VlanTranslationApi->VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPut");
            }

            // verify the required parameter 'EGRESSIF' is set
            if (EGRESSIF == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'EGRESSIF' when calling VlanTranslationApi->VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPut");
            }

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("INGRESSIF", SonicWallGen7.Client.ClientUtils.ParameterToString(INGRESSIF)); // path parameter
            localVarRequestOptions.PathParameters.Add("INGRESSID", SonicWallGen7.Client.ClientUtils.ParameterToString(INGRESSID)); // path parameter
            localVarRequestOptions.PathParameters.Add("EGRESSIF", SonicWallGen7.Client.ClientUtils.ParameterToString(EGRESSIF)); // path parameter
            localVarRequestOptions.PathParameters.Add("EGRESSID", SonicWallGen7.Client.ClientUtils.ParameterToString(EGRESSID)); // path parameter
            localVarRequestOptions.Data = vlanTranslationCollection;

            localVarRequestOptions.Operation = "VlanTranslationApi.VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApiStatus>("/vlan-translations/ingress/interface/{INGRESSIF}/vlan/{INGRESSID}/egress/interface/{EGRESSIF}/vlan/{EGRESSID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Edit vlan translation configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INGRESSIF">Ingress interface name.</param>
        /// <param name="INGRESSID">Interface VLAN id.</param>
        /// <param name="EGRESSIF">Egress interface name.</param>
        /// <param name="EGRESSID">Interface VLAN id.</param>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPutAsync(string INGRESSIF, decimal INGRESSID, string EGRESSIF, decimal EGRESSID, VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPutWithHttpInfoAsync(INGRESSIF, INGRESSID, EGRESSIF, EGRESSID, vlanTranslationCollection, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Edit vlan translation configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INGRESSIF">Ingress interface name.</param>
        /// <param name="INGRESSID">Interface VLAN id.</param>
        /// <param name="EGRESSIF">Egress interface name.</param>
        /// <param name="EGRESSID">Interface VLAN id.</param>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPutWithHttpInfoAsync(string INGRESSIF, decimal INGRESSID, string EGRESSIF, decimal EGRESSID, VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'INGRESSIF' is set
            if (INGRESSIF == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'INGRESSIF' when calling VlanTranslationApi->VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPut");
            }

            // verify the required parameter 'EGRESSIF' is set
            if (EGRESSIF == null)
            {
                throw new SonicWallGen7.Client.ApiException(400, "Missing required parameter 'EGRESSIF' when calling VlanTranslationApi->VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPut");
            }


            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("INGRESSIF", SonicWallGen7.Client.ClientUtils.ParameterToString(INGRESSIF)); // path parameter
            localVarRequestOptions.PathParameters.Add("INGRESSID", SonicWallGen7.Client.ClientUtils.ParameterToString(INGRESSID)); // path parameter
            localVarRequestOptions.PathParameters.Add("EGRESSIF", SonicWallGen7.Client.ClientUtils.ParameterToString(EGRESSIF)); // path parameter
            localVarRequestOptions.PathParameters.Add("EGRESSID", SonicWallGen7.Client.ClientUtils.ParameterToString(EGRESSID)); // path parameter
            localVarRequestOptions.Data = vlanTranslationCollection;

            localVarRequestOptions.Operation = "VlanTranslationApi.VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ApiStatus>("/vlan-translations/ingress/interface/{INGRESSIF}/vlan/{INGRESSID}/egress/interface/{EGRESSIF}/vlan/{EGRESSID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VlanTranslationsIngressInterfaceINGRESSIFVlanINGRESSIDEgressInterfaceEGRESSIFVlanEGRESSIDPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Patch vlan translation configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus VlanTranslationsPatch(VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = VlanTranslationsPatchWithHttpInfo(vlanTranslationCollection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Patch vlan translation configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> VlanTranslationsPatchWithHttpInfo(VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = vlanTranslationCollection;

            localVarRequestOptions.Operation = "VlanTranslationApi.VlanTranslationsPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ApiStatus>("/vlan-translations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VlanTranslationsPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Patch vlan translation configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> VlanTranslationsPatchAsync(VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await VlanTranslationsPatchWithHttpInfoAsync(vlanTranslationCollection, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Patch vlan translation configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> VlanTranslationsPatchWithHttpInfoAsync(VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = vlanTranslationCollection;

            localVarRequestOptions.Operation = "VlanTranslationApi.VlanTranslationsPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ApiStatus>("/vlan-translations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VlanTranslationsPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create a new vlan translation.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus VlanTranslationsPost(VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = VlanTranslationsPostWithHttpInfo(vlanTranslationCollection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new vlan translation.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> VlanTranslationsPostWithHttpInfo(VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = vlanTranslationCollection;

            localVarRequestOptions.Operation = "VlanTranslationApi.VlanTranslationsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiStatus>("/vlan-translations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VlanTranslationsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create a new vlan translation.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> VlanTranslationsPostAsync(VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await VlanTranslationsPostWithHttpInfoAsync(vlanTranslationCollection, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new vlan translation.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> VlanTranslationsPostWithHttpInfoAsync(VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = vlanTranslationCollection;

            localVarRequestOptions.Operation = "VlanTranslationApi.VlanTranslationsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiStatus>("/vlan-translations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VlanTranslationsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Edit vlan translation configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiStatus</returns>
        public ApiStatus VlanTranslationsPut(VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = VlanTranslationsPutWithHttpInfo(vlanTranslationCollection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Edit vlan translation configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiStatus</returns>
        public SonicWallGen7.Client.ApiResponse<ApiStatus> VlanTranslationsPutWithHttpInfo(VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0)
        {
            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = vlanTranslationCollection;

            localVarRequestOptions.Operation = "VlanTranslationApi.VlanTranslationsPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApiStatus>("/vlan-translations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VlanTranslationsPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Edit vlan translation configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiStatus</returns>
        public async System.Threading.Tasks.Task<ApiStatus> VlanTranslationsPutAsync(VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SonicWallGen7.Client.ApiResponse<ApiStatus> localVarResponse = await VlanTranslationsPutWithHttpInfoAsync(vlanTranslationCollection, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Edit vlan translation configuration.
        /// </summary>
        /// <exception cref="SonicWallGen7.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vlanTranslationCollection"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiStatus)</returns>
        public async System.Threading.Tasks.Task<SonicWallGen7.Client.ApiResponse<ApiStatus>> VlanTranslationsPutWithHttpInfoAsync(VlanTranslationCollection? vlanTranslationCollection = default(VlanTranslationCollection?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SonicWallGen7.Client.RequestOptions localVarRequestOptions = new SonicWallGen7.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SonicWallGen7.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SonicWallGen7.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = vlanTranslationCollection;

            localVarRequestOptions.Operation = "VlanTranslationApi.VlanTranslationsPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ApiStatus>("/vlan-translations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VlanTranslationsPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
