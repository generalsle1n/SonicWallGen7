/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// ShowStatusLdapDynamicServerStatusListInner
    /// </summary>
    [DataContract(Name = "show_status_ldap_dynamic_server_status_list_inner")]
    public partial class ShowStatusLdapDynamicServerStatusListInner : IEquatable<ShowStatusLdapDynamicServerStatusListInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusLdapDynamicServerStatusListInner" /> class.
        /// </summary>
        /// <param name="status">status.</param>
        /// <param name="hostNameIpAddress">hostNameIpAddress.</param>
        /// <param name="role">role.</param>
        /// <param name="port">port.</param>
        /// <param name="timeout">timeout.</param>
        /// <param name="useTls">useTls.</param>
        /// <param name="domain">domain.</param>
        /// <param name="partition">partition.</param>
        /// <param name="bind">bind.</param>
        /// <param name="treesContainingUsers">treesContainingUsers.</param>
        /// <param name="treesContainingUserGroups">treesContainingUserGroups.</param>
        public ShowStatusLdapDynamicServerStatusListInner(string status = default(string), string hostNameIpAddress = default(string), string role = default(string), string port = default(string), string timeout = default(string), string useTls = default(string), string domain = default(string), string partition = default(string), string bind = default(string), string treesContainingUsers = default(string), string treesContainingUserGroups = default(string))
        {
            this.Status = status;
            this.HostNameIpAddress = hostNameIpAddress;
            this.Role = role;
            this.Port = port;
            this.Timeout = timeout;
            this.UseTls = useTls;
            this.Domain = domain;
            this.Partition = partition;
            this.Bind = bind;
            this.TreesContainingUsers = treesContainingUsers;
            this.TreesContainingUserGroups = treesContainingUserGroups;
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets HostNameIpAddress
        /// </summary>
        [DataMember(Name = "host_name_ip_address", EmitDefaultValue = false)]
        public string HostNameIpAddress { get; set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [DataMember(Name = "role", EmitDefaultValue = false)]
        public string Role { get; set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [DataMember(Name = "port", EmitDefaultValue = false)]
        public string Port { get; set; }

        /// <summary>
        /// Gets or Sets Timeout
        /// </summary>
        [DataMember(Name = "timeout", EmitDefaultValue = false)]
        public string Timeout { get; set; }

        /// <summary>
        /// Gets or Sets UseTls
        /// </summary>
        [DataMember(Name = "use_tls", EmitDefaultValue = false)]
        public string UseTls { get; set; }

        /// <summary>
        /// Gets or Sets Domain
        /// </summary>
        [DataMember(Name = "domain", EmitDefaultValue = false)]
        public string Domain { get; set; }

        /// <summary>
        /// Gets or Sets Partition
        /// </summary>
        [DataMember(Name = "partition", EmitDefaultValue = false)]
        public string Partition { get; set; }

        /// <summary>
        /// Gets or Sets Bind
        /// </summary>
        [DataMember(Name = "bind", EmitDefaultValue = false)]
        public string Bind { get; set; }

        /// <summary>
        /// Gets or Sets TreesContainingUsers
        /// </summary>
        [DataMember(Name = "trees_containing_users", EmitDefaultValue = false)]
        public string TreesContainingUsers { get; set; }

        /// <summary>
        /// Gets or Sets TreesContainingUserGroups
        /// </summary>
        [DataMember(Name = "trees_containing_user_groups", EmitDefaultValue = false)]
        public string TreesContainingUserGroups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusLdapDynamicServerStatusListInner {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  HostNameIpAddress: ").Append(HostNameIpAddress).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  UseTls: ").Append(UseTls).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Partition: ").Append(Partition).Append("\n");
            sb.Append("  Bind: ").Append(Bind).Append("\n");
            sb.Append("  TreesContainingUsers: ").Append(TreesContainingUsers).Append("\n");
            sb.Append("  TreesContainingUserGroups: ").Append(TreesContainingUserGroups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusLdapDynamicServerStatusListInner);
        }

        /// <summary>
        /// Returns true if ShowStatusLdapDynamicServerStatusListInner instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusLdapDynamicServerStatusListInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusLdapDynamicServerStatusListInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.HostNameIpAddress == input.HostNameIpAddress ||
                    (this.HostNameIpAddress != null &&
                    this.HostNameIpAddress.Equals(input.HostNameIpAddress))
                ) && 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                ) && 
                (
                    this.Port == input.Port ||
                    (this.Port != null &&
                    this.Port.Equals(input.Port))
                ) && 
                (
                    this.Timeout == input.Timeout ||
                    (this.Timeout != null &&
                    this.Timeout.Equals(input.Timeout))
                ) && 
                (
                    this.UseTls == input.UseTls ||
                    (this.UseTls != null &&
                    this.UseTls.Equals(input.UseTls))
                ) && 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.Partition == input.Partition ||
                    (this.Partition != null &&
                    this.Partition.Equals(input.Partition))
                ) && 
                (
                    this.Bind == input.Bind ||
                    (this.Bind != null &&
                    this.Bind.Equals(input.Bind))
                ) && 
                (
                    this.TreesContainingUsers == input.TreesContainingUsers ||
                    (this.TreesContainingUsers != null &&
                    this.TreesContainingUsers.Equals(input.TreesContainingUsers))
                ) && 
                (
                    this.TreesContainingUserGroups == input.TreesContainingUserGroups ||
                    (this.TreesContainingUserGroups != null &&
                    this.TreesContainingUserGroups.Equals(input.TreesContainingUserGroups))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.HostNameIpAddress != null)
                {
                    hashCode = (hashCode * 59) + this.HostNameIpAddress.GetHashCode();
                }
                if (this.Role != null)
                {
                    hashCode = (hashCode * 59) + this.Role.GetHashCode();
                }
                if (this.Port != null)
                {
                    hashCode = (hashCode * 59) + this.Port.GetHashCode();
                }
                if (this.Timeout != null)
                {
                    hashCode = (hashCode * 59) + this.Timeout.GetHashCode();
                }
                if (this.UseTls != null)
                {
                    hashCode = (hashCode * 59) + this.UseTls.GetHashCode();
                }
                if (this.Domain != null)
                {
                    hashCode = (hashCode * 59) + this.Domain.GetHashCode();
                }
                if (this.Partition != null)
                {
                    hashCode = (hashCode * 59) + this.Partition.GetHashCode();
                }
                if (this.Bind != null)
                {
                    hashCode = (hashCode * 59) + this.Bind.GetHashCode();
                }
                if (this.TreesContainingUsers != null)
                {
                    hashCode = (hashCode * 59) + this.TreesContainingUsers.GetHashCode();
                }
                if (this.TreesContainingUserGroups != null)
                {
                    hashCode = (hashCode * 59) + this.TreesContainingUserGroups.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
