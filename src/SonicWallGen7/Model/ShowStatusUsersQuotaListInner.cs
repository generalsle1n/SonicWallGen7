/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// ShowStatusUsersQuotaListInner
    /// </summary>
    [DataContract(Name = "show_status_users_quota_list_inner")]
    public partial class ShowStatusUsersQuotaListInner : IEquatable<ShowStatusUsersQuotaListInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusUsersQuotaListInner" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="domain">domain.</param>
        /// <param name="uuid">uuid.</param>
        /// <param name="quotaType">quotaType.</param>
        /// <param name="maxSession">maxSession.</param>
        /// <param name="maxRx">maxRx.</param>
        /// <param name="maxTx">maxTx.</param>
        /// <param name="remSession">remSession.</param>
        /// <param name="remRx">remRx.</param>
        /// <param name="remTx">remTx.</param>
        public ShowStatusUsersQuotaListInner(string name = default(string), string domain = default(string), string uuid = default(string), string quotaType = default(string), string maxSession = default(string), string maxRx = default(string), string maxTx = default(string), string remSession = default(string), string remRx = default(string), string remTx = default(string))
        {
            this.Name = name;
            this.Domain = domain;
            this.Uuid = uuid;
            this.QuotaType = quotaType;
            this.MaxSession = maxSession;
            this.MaxRx = maxRx;
            this.MaxTx = maxTx;
            this.RemSession = remSession;
            this.RemRx = remRx;
            this.RemTx = remTx;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Domain
        /// </summary>
        [DataMember(Name = "domain", EmitDefaultValue = false)]
        public string Domain { get; set; }

        /// <summary>
        /// Gets or Sets Uuid
        /// </summary>
        [DataMember(Name = "uuid", EmitDefaultValue = false)]
        public string Uuid { get; set; }

        /// <summary>
        /// Gets or Sets QuotaType
        /// </summary>
        [DataMember(Name = "quota_type", EmitDefaultValue = false)]
        public string QuotaType { get; set; }

        /// <summary>
        /// Gets or Sets MaxSession
        /// </summary>
        [DataMember(Name = "max_session", EmitDefaultValue = false)]
        public string MaxSession { get; set; }

        /// <summary>
        /// Gets or Sets MaxRx
        /// </summary>
        [DataMember(Name = "max_rx", EmitDefaultValue = false)]
        public string MaxRx { get; set; }

        /// <summary>
        /// Gets or Sets MaxTx
        /// </summary>
        [DataMember(Name = "max_tx", EmitDefaultValue = false)]
        public string MaxTx { get; set; }

        /// <summary>
        /// Gets or Sets RemSession
        /// </summary>
        [DataMember(Name = "rem_session", EmitDefaultValue = false)]
        public string RemSession { get; set; }

        /// <summary>
        /// Gets or Sets RemRx
        /// </summary>
        [DataMember(Name = "rem_rx", EmitDefaultValue = false)]
        public string RemRx { get; set; }

        /// <summary>
        /// Gets or Sets RemTx
        /// </summary>
        [DataMember(Name = "rem_tx", EmitDefaultValue = false)]
        public string RemTx { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusUsersQuotaListInner {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  QuotaType: ").Append(QuotaType).Append("\n");
            sb.Append("  MaxSession: ").Append(MaxSession).Append("\n");
            sb.Append("  MaxRx: ").Append(MaxRx).Append("\n");
            sb.Append("  MaxTx: ").Append(MaxTx).Append("\n");
            sb.Append("  RemSession: ").Append(RemSession).Append("\n");
            sb.Append("  RemRx: ").Append(RemRx).Append("\n");
            sb.Append("  RemTx: ").Append(RemTx).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusUsersQuotaListInner);
        }

        /// <summary>
        /// Returns true if ShowStatusUsersQuotaListInner instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusUsersQuotaListInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusUsersQuotaListInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.QuotaType == input.QuotaType ||
                    (this.QuotaType != null &&
                    this.QuotaType.Equals(input.QuotaType))
                ) && 
                (
                    this.MaxSession == input.MaxSession ||
                    (this.MaxSession != null &&
                    this.MaxSession.Equals(input.MaxSession))
                ) && 
                (
                    this.MaxRx == input.MaxRx ||
                    (this.MaxRx != null &&
                    this.MaxRx.Equals(input.MaxRx))
                ) && 
                (
                    this.MaxTx == input.MaxTx ||
                    (this.MaxTx != null &&
                    this.MaxTx.Equals(input.MaxTx))
                ) && 
                (
                    this.RemSession == input.RemSession ||
                    (this.RemSession != null &&
                    this.RemSession.Equals(input.RemSession))
                ) && 
                (
                    this.RemRx == input.RemRx ||
                    (this.RemRx != null &&
                    this.RemRx.Equals(input.RemRx))
                ) && 
                (
                    this.RemTx == input.RemTx ||
                    (this.RemTx != null &&
                    this.RemTx.Equals(input.RemTx))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Domain != null)
                {
                    hashCode = (hashCode * 59) + this.Domain.GetHashCode();
                }
                if (this.Uuid != null)
                {
                    hashCode = (hashCode * 59) + this.Uuid.GetHashCode();
                }
                if (this.QuotaType != null)
                {
                    hashCode = (hashCode * 59) + this.QuotaType.GetHashCode();
                }
                if (this.MaxSession != null)
                {
                    hashCode = (hashCode * 59) + this.MaxSession.GetHashCode();
                }
                if (this.MaxRx != null)
                {
                    hashCode = (hashCode * 59) + this.MaxRx.GetHashCode();
                }
                if (this.MaxTx != null)
                {
                    hashCode = (hashCode * 59) + this.MaxTx.GetHashCode();
                }
                if (this.RemSession != null)
                {
                    hashCode = (hashCode * 59) + this.RemSession.GetHashCode();
                }
                if (this.RemRx != null)
                {
                    hashCode = (hashCode * 59) + this.RemRx.GetHashCode();
                }
                if (this.RemTx != null)
                {
                    hashCode = (hashCode * 59) + this.RemTx.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
