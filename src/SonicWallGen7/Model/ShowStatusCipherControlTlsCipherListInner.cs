/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// ShowStatusCipherControlTlsCipherListInner
    /// </summary>
    [DataContract(Name = "show_status_cipher_control_tls_cipher_list_inner")]
    public partial class ShowStatusCipherControlTlsCipherListInner : IEquatable<ShowStatusCipherControlTlsCipherListInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusCipherControlTlsCipherListInner" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="strength">strength.</param>
        /// <param name="block">block.</param>
        /// <param name="isCBC">isCBC.</param>
        /// <param name="tls10">tls10.</param>
        /// <param name="tls11">tls11.</param>
        /// <param name="tls12">tls12.</param>
        /// <param name="tls13">tls13.</param>
        /// <param name="dpiSsl">dpiSsl.</param>
        /// <param name="httpsMgmt">httpsMgmt.</param>
        /// <param name="sslControl">sslControl.</param>
        public ShowStatusCipherControlTlsCipherListInner(string name = default(string), string strength = default(string), string block = default(string), string isCBC = default(string), string tls10 = default(string), string tls11 = default(string), string tls12 = default(string), string tls13 = default(string), string dpiSsl = default(string), string httpsMgmt = default(string), string sslControl = default(string))
        {
            this.Name = name;
            this.Strength = strength;
            this.Block = block;
            this.IsCBC = isCBC;
            this.Tls10 = tls10;
            this.Tls11 = tls11;
            this.Tls12 = tls12;
            this.Tls13 = tls13;
            this.DpiSsl = dpiSsl;
            this.HttpsMgmt = httpsMgmt;
            this.SslControl = sslControl;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Strength
        /// </summary>
        [DataMember(Name = "strength", EmitDefaultValue = false)]
        public string Strength { get; set; }

        /// <summary>
        /// Gets or Sets Block
        /// </summary>
        [DataMember(Name = "block", EmitDefaultValue = false)]
        public string Block { get; set; }

        /// <summary>
        /// Gets or Sets IsCBC
        /// </summary>
        [DataMember(Name = "isCBC", EmitDefaultValue = false)]
        public string IsCBC { get; set; }

        /// <summary>
        /// Gets or Sets Tls10
        /// </summary>
        [DataMember(Name = "tls10", EmitDefaultValue = false)]
        public string Tls10 { get; set; }

        /// <summary>
        /// Gets or Sets Tls11
        /// </summary>
        [DataMember(Name = "tls11", EmitDefaultValue = false)]
        public string Tls11 { get; set; }

        /// <summary>
        /// Gets or Sets Tls12
        /// </summary>
        [DataMember(Name = "tls12", EmitDefaultValue = false)]
        public string Tls12 { get; set; }

        /// <summary>
        /// Gets or Sets Tls13
        /// </summary>
        [DataMember(Name = "tls13", EmitDefaultValue = false)]
        public string Tls13 { get; set; }

        /// <summary>
        /// Gets or Sets DpiSsl
        /// </summary>
        [DataMember(Name = "dpi_ssl", EmitDefaultValue = false)]
        public string DpiSsl { get; set; }

        /// <summary>
        /// Gets or Sets HttpsMgmt
        /// </summary>
        [DataMember(Name = "https_mgmt", EmitDefaultValue = false)]
        public string HttpsMgmt { get; set; }

        /// <summary>
        /// Gets or Sets SslControl
        /// </summary>
        [DataMember(Name = "ssl_control", EmitDefaultValue = false)]
        public string SslControl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusCipherControlTlsCipherListInner {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Strength: ").Append(Strength).Append("\n");
            sb.Append("  Block: ").Append(Block).Append("\n");
            sb.Append("  IsCBC: ").Append(IsCBC).Append("\n");
            sb.Append("  Tls10: ").Append(Tls10).Append("\n");
            sb.Append("  Tls11: ").Append(Tls11).Append("\n");
            sb.Append("  Tls12: ").Append(Tls12).Append("\n");
            sb.Append("  Tls13: ").Append(Tls13).Append("\n");
            sb.Append("  DpiSsl: ").Append(DpiSsl).Append("\n");
            sb.Append("  HttpsMgmt: ").Append(HttpsMgmt).Append("\n");
            sb.Append("  SslControl: ").Append(SslControl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusCipherControlTlsCipherListInner);
        }

        /// <summary>
        /// Returns true if ShowStatusCipherControlTlsCipherListInner instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusCipherControlTlsCipherListInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusCipherControlTlsCipherListInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Strength == input.Strength ||
                    (this.Strength != null &&
                    this.Strength.Equals(input.Strength))
                ) && 
                (
                    this.Block == input.Block ||
                    (this.Block != null &&
                    this.Block.Equals(input.Block))
                ) && 
                (
                    this.IsCBC == input.IsCBC ||
                    (this.IsCBC != null &&
                    this.IsCBC.Equals(input.IsCBC))
                ) && 
                (
                    this.Tls10 == input.Tls10 ||
                    (this.Tls10 != null &&
                    this.Tls10.Equals(input.Tls10))
                ) && 
                (
                    this.Tls11 == input.Tls11 ||
                    (this.Tls11 != null &&
                    this.Tls11.Equals(input.Tls11))
                ) && 
                (
                    this.Tls12 == input.Tls12 ||
                    (this.Tls12 != null &&
                    this.Tls12.Equals(input.Tls12))
                ) && 
                (
                    this.Tls13 == input.Tls13 ||
                    (this.Tls13 != null &&
                    this.Tls13.Equals(input.Tls13))
                ) && 
                (
                    this.DpiSsl == input.DpiSsl ||
                    (this.DpiSsl != null &&
                    this.DpiSsl.Equals(input.DpiSsl))
                ) && 
                (
                    this.HttpsMgmt == input.HttpsMgmt ||
                    (this.HttpsMgmt != null &&
                    this.HttpsMgmt.Equals(input.HttpsMgmt))
                ) && 
                (
                    this.SslControl == input.SslControl ||
                    (this.SslControl != null &&
                    this.SslControl.Equals(input.SslControl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Strength != null)
                {
                    hashCode = (hashCode * 59) + this.Strength.GetHashCode();
                }
                if (this.Block != null)
                {
                    hashCode = (hashCode * 59) + this.Block.GetHashCode();
                }
                if (this.IsCBC != null)
                {
                    hashCode = (hashCode * 59) + this.IsCBC.GetHashCode();
                }
                if (this.Tls10 != null)
                {
                    hashCode = (hashCode * 59) + this.Tls10.GetHashCode();
                }
                if (this.Tls11 != null)
                {
                    hashCode = (hashCode * 59) + this.Tls11.GetHashCode();
                }
                if (this.Tls12 != null)
                {
                    hashCode = (hashCode * 59) + this.Tls12.GetHashCode();
                }
                if (this.Tls13 != null)
                {
                    hashCode = (hashCode * 59) + this.Tls13.GetHashCode();
                }
                if (this.DpiSsl != null)
                {
                    hashCode = (hashCode * 59) + this.DpiSsl.GetHashCode();
                }
                if (this.HttpsMgmt != null)
                {
                    hashCode = (hashCode * 59) + this.HttpsMgmt.GetHashCode();
                }
                if (this.SslControl != null)
                {
                    hashCode = (hashCode * 59) + this.SslControl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
