/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// cert detail schema.
    /// </summary>
    [DataContract(Name = "show_status_cert_detail")]
    public partial class ShowStatusCertDetail : IEquatable<ShowStatusCertDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusCertDetail" /> class.
        /// </summary>
        /// <param name="certificate">certificate.</param>
        /// <param name="subjectDistinguishedName">subjectDistinguishedName.</param>
        /// <param name="subjectKeyIdentifier">subjectKeyIdentifier.</param>
        /// <param name="publicKeyAlgorithm">publicKeyAlgorithm.</param>
        /// <param name="status">status.</param>
        /// <param name="signatureAlgorithm">signatureAlgorithm.</param>
        /// <param name="certificateIssuer">certificateIssuer.</param>
        /// <param name="certificateSerialNumber">certificateSerialNumber.</param>
        /// <param name="validFrom">validFrom.</param>
        /// <param name="expiresOn">expiresOn.</param>
        /// <param name="expiredOn">expiredOn.</param>
        /// <param name="alternateSubjectName">alternateSubjectName.</param>
        /// <param name="alternateSubjectNameType">alternateSubjectNameType.</param>
        /// <param name="crlExpiresOn">crlExpiresOn.</param>
        /// <param name="crlStatus">crlStatus.</param>
        /// <param name="crlAutoUpdateUrl">crlAutoUpdateUrl.</param>
        /// <param name="crlIsRequired">crlIsRequired.</param>
        /// <param name="caHash">caHash.</param>
        public ShowStatusCertDetail(string certificate = default(string), string subjectDistinguishedName = default(string), string subjectKeyIdentifier = default(string), string publicKeyAlgorithm = default(string), string status = default(string), string signatureAlgorithm = default(string), string certificateIssuer = default(string), string certificateSerialNumber = default(string), string validFrom = default(string), string expiresOn = default(string), string expiredOn = default(string), string alternateSubjectName = default(string), string alternateSubjectNameType = default(string), string crlExpiresOn = default(string), string crlStatus = default(string), string crlAutoUpdateUrl = default(string), string crlIsRequired = default(string), string caHash = default(string))
        {
            this.Certificate = certificate;
            this.SubjectDistinguishedName = subjectDistinguishedName;
            this.SubjectKeyIdentifier = subjectKeyIdentifier;
            this.PublicKeyAlgorithm = publicKeyAlgorithm;
            this.Status = status;
            this.SignatureAlgorithm = signatureAlgorithm;
            this.CertificateIssuer = certificateIssuer;
            this.CertificateSerialNumber = certificateSerialNumber;
            this.ValidFrom = validFrom;
            this.ExpiresOn = expiresOn;
            this.ExpiredOn = expiredOn;
            this.AlternateSubjectName = alternateSubjectName;
            this.AlternateSubjectNameType = alternateSubjectNameType;
            this.CrlExpiresOn = crlExpiresOn;
            this.CrlStatus = crlStatus;
            this.CrlAutoUpdateUrl = crlAutoUpdateUrl;
            this.CrlIsRequired = crlIsRequired;
            this.CaHash = caHash;
        }

        /// <summary>
        /// Gets or Sets Certificate
        /// </summary>
        [DataMember(Name = "certificate", EmitDefaultValue = false)]
        public string Certificate { get; set; }

        /// <summary>
        /// Gets or Sets SubjectDistinguishedName
        /// </summary>
        [DataMember(Name = "subject_distinguished_name", EmitDefaultValue = false)]
        public string SubjectDistinguishedName { get; set; }

        /// <summary>
        /// Gets or Sets SubjectKeyIdentifier
        /// </summary>
        [DataMember(Name = "subject_key_identifier", EmitDefaultValue = false)]
        public string SubjectKeyIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets PublicKeyAlgorithm
        /// </summary>
        [DataMember(Name = "public_key_algorithm", EmitDefaultValue = false)]
        public string PublicKeyAlgorithm { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets SignatureAlgorithm
        /// </summary>
        [DataMember(Name = "signature_algorithm", EmitDefaultValue = false)]
        public string SignatureAlgorithm { get; set; }

        /// <summary>
        /// Gets or Sets CertificateIssuer
        /// </summary>
        [DataMember(Name = "certificate_issuer", EmitDefaultValue = false)]
        public string CertificateIssuer { get; set; }

        /// <summary>
        /// Gets or Sets CertificateSerialNumber
        /// </summary>
        [DataMember(Name = "certificate_serial_number", EmitDefaultValue = false)]
        public string CertificateSerialNumber { get; set; }

        /// <summary>
        /// Gets or Sets ValidFrom
        /// </summary>
        [DataMember(Name = "valid_from", EmitDefaultValue = false)]
        public string ValidFrom { get; set; }

        /// <summary>
        /// Gets or Sets ExpiresOn
        /// </summary>
        [DataMember(Name = "expires_on", EmitDefaultValue = false)]
        public string ExpiresOn { get; set; }

        /// <summary>
        /// Gets or Sets ExpiredOn
        /// </summary>
        [DataMember(Name = "expired_on", EmitDefaultValue = false)]
        public string ExpiredOn { get; set; }

        /// <summary>
        /// Gets or Sets AlternateSubjectName
        /// </summary>
        [DataMember(Name = "alternate_subject_name", EmitDefaultValue = false)]
        public string AlternateSubjectName { get; set; }

        /// <summary>
        /// Gets or Sets AlternateSubjectNameType
        /// </summary>
        [DataMember(Name = "alternate_subject_name_type", EmitDefaultValue = false)]
        public string AlternateSubjectNameType { get; set; }

        /// <summary>
        /// Gets or Sets CrlExpiresOn
        /// </summary>
        [DataMember(Name = "crl_expires_on", EmitDefaultValue = false)]
        public string CrlExpiresOn { get; set; }

        /// <summary>
        /// Gets or Sets CrlStatus
        /// </summary>
        [DataMember(Name = "crl_status", EmitDefaultValue = false)]
        public string CrlStatus { get; set; }

        /// <summary>
        /// Gets or Sets CrlAutoUpdateUrl
        /// </summary>
        [DataMember(Name = "crl_auto_update_url", EmitDefaultValue = false)]
        public string CrlAutoUpdateUrl { get; set; }

        /// <summary>
        /// Gets or Sets CrlIsRequired
        /// </summary>
        [DataMember(Name = "crl_is_required", EmitDefaultValue = false)]
        public string CrlIsRequired { get; set; }

        /// <summary>
        /// Gets or Sets CaHash
        /// </summary>
        [DataMember(Name = "ca_hash", EmitDefaultValue = false)]
        public string CaHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusCertDetail {\n");
            sb.Append("  Certificate: ").Append(Certificate).Append("\n");
            sb.Append("  SubjectDistinguishedName: ").Append(SubjectDistinguishedName).Append("\n");
            sb.Append("  SubjectKeyIdentifier: ").Append(SubjectKeyIdentifier).Append("\n");
            sb.Append("  PublicKeyAlgorithm: ").Append(PublicKeyAlgorithm).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SignatureAlgorithm: ").Append(SignatureAlgorithm).Append("\n");
            sb.Append("  CertificateIssuer: ").Append(CertificateIssuer).Append("\n");
            sb.Append("  CertificateSerialNumber: ").Append(CertificateSerialNumber).Append("\n");
            sb.Append("  ValidFrom: ").Append(ValidFrom).Append("\n");
            sb.Append("  ExpiresOn: ").Append(ExpiresOn).Append("\n");
            sb.Append("  ExpiredOn: ").Append(ExpiredOn).Append("\n");
            sb.Append("  AlternateSubjectName: ").Append(AlternateSubjectName).Append("\n");
            sb.Append("  AlternateSubjectNameType: ").Append(AlternateSubjectNameType).Append("\n");
            sb.Append("  CrlExpiresOn: ").Append(CrlExpiresOn).Append("\n");
            sb.Append("  CrlStatus: ").Append(CrlStatus).Append("\n");
            sb.Append("  CrlAutoUpdateUrl: ").Append(CrlAutoUpdateUrl).Append("\n");
            sb.Append("  CrlIsRequired: ").Append(CrlIsRequired).Append("\n");
            sb.Append("  CaHash: ").Append(CaHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusCertDetail);
        }

        /// <summary>
        /// Returns true if ShowStatusCertDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusCertDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusCertDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Certificate == input.Certificate ||
                    (this.Certificate != null &&
                    this.Certificate.Equals(input.Certificate))
                ) && 
                (
                    this.SubjectDistinguishedName == input.SubjectDistinguishedName ||
                    (this.SubjectDistinguishedName != null &&
                    this.SubjectDistinguishedName.Equals(input.SubjectDistinguishedName))
                ) && 
                (
                    this.SubjectKeyIdentifier == input.SubjectKeyIdentifier ||
                    (this.SubjectKeyIdentifier != null &&
                    this.SubjectKeyIdentifier.Equals(input.SubjectKeyIdentifier))
                ) && 
                (
                    this.PublicKeyAlgorithm == input.PublicKeyAlgorithm ||
                    (this.PublicKeyAlgorithm != null &&
                    this.PublicKeyAlgorithm.Equals(input.PublicKeyAlgorithm))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.SignatureAlgorithm == input.SignatureAlgorithm ||
                    (this.SignatureAlgorithm != null &&
                    this.SignatureAlgorithm.Equals(input.SignatureAlgorithm))
                ) && 
                (
                    this.CertificateIssuer == input.CertificateIssuer ||
                    (this.CertificateIssuer != null &&
                    this.CertificateIssuer.Equals(input.CertificateIssuer))
                ) && 
                (
                    this.CertificateSerialNumber == input.CertificateSerialNumber ||
                    (this.CertificateSerialNumber != null &&
                    this.CertificateSerialNumber.Equals(input.CertificateSerialNumber))
                ) && 
                (
                    this.ValidFrom == input.ValidFrom ||
                    (this.ValidFrom != null &&
                    this.ValidFrom.Equals(input.ValidFrom))
                ) && 
                (
                    this.ExpiresOn == input.ExpiresOn ||
                    (this.ExpiresOn != null &&
                    this.ExpiresOn.Equals(input.ExpiresOn))
                ) && 
                (
                    this.ExpiredOn == input.ExpiredOn ||
                    (this.ExpiredOn != null &&
                    this.ExpiredOn.Equals(input.ExpiredOn))
                ) && 
                (
                    this.AlternateSubjectName == input.AlternateSubjectName ||
                    (this.AlternateSubjectName != null &&
                    this.AlternateSubjectName.Equals(input.AlternateSubjectName))
                ) && 
                (
                    this.AlternateSubjectNameType == input.AlternateSubjectNameType ||
                    (this.AlternateSubjectNameType != null &&
                    this.AlternateSubjectNameType.Equals(input.AlternateSubjectNameType))
                ) && 
                (
                    this.CrlExpiresOn == input.CrlExpiresOn ||
                    (this.CrlExpiresOn != null &&
                    this.CrlExpiresOn.Equals(input.CrlExpiresOn))
                ) && 
                (
                    this.CrlStatus == input.CrlStatus ||
                    (this.CrlStatus != null &&
                    this.CrlStatus.Equals(input.CrlStatus))
                ) && 
                (
                    this.CrlAutoUpdateUrl == input.CrlAutoUpdateUrl ||
                    (this.CrlAutoUpdateUrl != null &&
                    this.CrlAutoUpdateUrl.Equals(input.CrlAutoUpdateUrl))
                ) && 
                (
                    this.CrlIsRequired == input.CrlIsRequired ||
                    (this.CrlIsRequired != null &&
                    this.CrlIsRequired.Equals(input.CrlIsRequired))
                ) && 
                (
                    this.CaHash == input.CaHash ||
                    (this.CaHash != null &&
                    this.CaHash.Equals(input.CaHash))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Certificate != null)
                {
                    hashCode = (hashCode * 59) + this.Certificate.GetHashCode();
                }
                if (this.SubjectDistinguishedName != null)
                {
                    hashCode = (hashCode * 59) + this.SubjectDistinguishedName.GetHashCode();
                }
                if (this.SubjectKeyIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.SubjectKeyIdentifier.GetHashCode();
                }
                if (this.PublicKeyAlgorithm != null)
                {
                    hashCode = (hashCode * 59) + this.PublicKeyAlgorithm.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.SignatureAlgorithm != null)
                {
                    hashCode = (hashCode * 59) + this.SignatureAlgorithm.GetHashCode();
                }
                if (this.CertificateIssuer != null)
                {
                    hashCode = (hashCode * 59) + this.CertificateIssuer.GetHashCode();
                }
                if (this.CertificateSerialNumber != null)
                {
                    hashCode = (hashCode * 59) + this.CertificateSerialNumber.GetHashCode();
                }
                if (this.ValidFrom != null)
                {
                    hashCode = (hashCode * 59) + this.ValidFrom.GetHashCode();
                }
                if (this.ExpiresOn != null)
                {
                    hashCode = (hashCode * 59) + this.ExpiresOn.GetHashCode();
                }
                if (this.ExpiredOn != null)
                {
                    hashCode = (hashCode * 59) + this.ExpiredOn.GetHashCode();
                }
                if (this.AlternateSubjectName != null)
                {
                    hashCode = (hashCode * 59) + this.AlternateSubjectName.GetHashCode();
                }
                if (this.AlternateSubjectNameType != null)
                {
                    hashCode = (hashCode * 59) + this.AlternateSubjectNameType.GetHashCode();
                }
                if (this.CrlExpiresOn != null)
                {
                    hashCode = (hashCode * 59) + this.CrlExpiresOn.GetHashCode();
                }
                if (this.CrlStatus != null)
                {
                    hashCode = (hashCode * 59) + this.CrlStatus.GetHashCode();
                }
                if (this.CrlAutoUpdateUrl != null)
                {
                    hashCode = (hashCode * 59) + this.CrlAutoUpdateUrl.GetHashCode();
                }
                if (this.CrlIsRequired != null)
                {
                    hashCode = (hashCode * 59) + this.CrlIsRequired.GetHashCode();
                }
                if (this.CaHash != null)
                {
                    hashCode = (hashCode * 59) + this.CaHash.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
