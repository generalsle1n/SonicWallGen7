/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enter failover and load balancing configuration mode.
    /// </summary>
    [DataContract(Name = "flb_failover_lb")]
    public partial class FlbFailoverLb : IEquatable<FlbFailoverLb>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlbFailoverLb" /> class.
        /// </summary>
        /// <param name="enable">Enable failover and load balancing..</param>
        /// <param name="respondToProbes">Enable respond to probes..</param>
        /// <param name="anyTcpSyn">Enable any-tcp-syn..</param>
        /// <param name="port">TCP port. * Set to null to represent an unconfigured state..</param>
        public FlbFailoverLb(bool enable = default(bool), bool respondToProbes = default(bool), bool anyTcpSyn = default(bool), decimal? port = default(decimal?))
        {
            this.Enable = enable;
            this.RespondToProbes = respondToProbes;
            this.AnyTcpSyn = anyTcpSyn;
            this.Port = port;
        }

        /// <summary>
        /// Enable failover and load balancing.
        /// </summary>
        /// <value>Enable failover and load balancing.</value>
        [DataMember(Name = "enable", EmitDefaultValue = true)]
        public bool Enable { get; set; }

        /// <summary>
        /// Enable respond to probes.
        /// </summary>
        /// <value>Enable respond to probes.</value>
        [DataMember(Name = "respond_to_probes", EmitDefaultValue = true)]
        public bool RespondToProbes { get; set; }

        /// <summary>
        /// Enable any-tcp-syn.
        /// </summary>
        /// <value>Enable any-tcp-syn.</value>
        [DataMember(Name = "any_tcp_syn", EmitDefaultValue = true)]
        public bool AnyTcpSyn { get; set; }

        /// <summary>
        /// TCP port. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>TCP port. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "port", EmitDefaultValue = true)]
        public decimal? Port { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FlbFailoverLb {\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  RespondToProbes: ").Append(RespondToProbes).Append("\n");
            sb.Append("  AnyTcpSyn: ").Append(AnyTcpSyn).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlbFailoverLb);
        }

        /// <summary>
        /// Returns true if FlbFailoverLb instances are equal
        /// </summary>
        /// <param name="input">Instance of FlbFailoverLb to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlbFailoverLb input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.RespondToProbes == input.RespondToProbes ||
                    this.RespondToProbes.Equals(input.RespondToProbes)
                ) && 
                (
                    this.AnyTcpSyn == input.AnyTcpSyn ||
                    this.AnyTcpSyn.Equals(input.AnyTcpSyn)
                ) && 
                (
                    this.Port == input.Port ||
                    (this.Port != null &&
                    this.Port.Equals(input.Port))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Enable.GetHashCode();
                hashCode = (hashCode * 59) + this.RespondToProbes.GetHashCode();
                hashCode = (hashCode * 59) + this.AnyTcpSyn.GetHashCode();
                if (this.Port != null)
                {
                    hashCode = (hashCode * 59) + this.Port.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
