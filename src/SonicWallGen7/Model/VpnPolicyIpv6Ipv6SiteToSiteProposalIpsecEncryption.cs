/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;
using System.Reflection;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Encryption algorithm.
    /// </summary>
    [JsonConverter(typeof(VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryptionJsonConverter))]
    [DataContract(Name = "vpn_policy_ipv6_ipv6_site_to_site_proposal_ipsec_encryption")]
    public partial class VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption : AbstractOpenAPISchema, IEquatable<VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption" /> class
        /// with the <see cref="VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionDes" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionDes.</param>
        public VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption(VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionDes actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption" /> class
        /// with the <see cref="VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionTripleDes" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionTripleDes.</param>
        public VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption(VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionTripleDes actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption" /> class
        /// with the <see cref="VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes128" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes128.</param>
        public VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption(VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes128 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption" /> class
        /// with the <see cref="VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes192" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes192.</param>
        public VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption(VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes192 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption" /> class
        /// with the <see cref="VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes256" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes256.</param>
        public VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption(VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes256 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption" /> class
        /// with the <see cref="VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16128" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16128.</param>
        public VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption(VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16128 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption" /> class
        /// with the <see cref="VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16192" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16192.</param>
        public VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption(VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16192 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption" /> class
        /// with the <see cref="VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16256" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16256.</param>
        public VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption(VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16256 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption" /> class
        /// with the <see cref="VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac128" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac128.</param>
        public VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption(VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac128 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption" /> class
        /// with the <see cref="VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac192" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac192.</param>
        public VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption(VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac192 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption" /> class
        /// with the <see cref="VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac256" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac256.</param>
        public VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption(VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac256 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes128))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes192))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes256))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16128))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16192))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16256))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac128))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac192))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac256))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionDes))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionTripleDes))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes128, VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes192, VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes256, VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16128, VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16192, VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16256, VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac128, VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac192, VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac256, VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionDes, VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionTripleDes");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionDes`. If the actual instance is not `VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionDes`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionDes</returns>
        public VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionDes GetVpnPolicyIpv6SiteToSiteProposalIpsecEncryptionDes()
        {
            return (VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionDes)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionTripleDes`. If the actual instance is not `VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionTripleDes`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionTripleDes</returns>
        public VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionTripleDes GetVpnPolicyIpv6SiteToSiteProposalIpsecEncryptionTripleDes()
        {
            return (VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionTripleDes)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes128`. If the actual instance is not `VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes128`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes128</returns>
        public VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes128 GetVpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes128()
        {
            return (VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes128)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes192`. If the actual instance is not `VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes192`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes192</returns>
        public VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes192 GetVpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes192()
        {
            return (VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes192)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes256`. If the actual instance is not `VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes256`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes256</returns>
        public VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes256 GetVpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes256()
        {
            return (VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes256)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16128`. If the actual instance is not `VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16128`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16128</returns>
        public VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16128 GetVpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16128()
        {
            return (VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16128)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16192`. If the actual instance is not `VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16192`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16192</returns>
        public VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16192 GetVpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16192()
        {
            return (VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16192)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16256`. If the actual instance is not `VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16256`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16256</returns>
        public VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16256 GetVpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16256()
        {
            return (VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16256)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac128`. If the actual instance is not `VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac128`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac128</returns>
        public VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac128 GetVpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac128()
        {
            return (VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac128)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac192`. If the actual instance is not `VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac192`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac192</returns>
        public VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac192 GetVpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac192()
        {
            return (VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac192)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac256`. If the actual instance is not `VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac256`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac256</returns>
        public VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac256 GetVpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac256()
        {
            return (VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac256)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption</returns>
        public static VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption FromJson(string jsonString)
        {
            VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption newVpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newVpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes128).GetProperty("AdditionalProperties") == null)
                {
                    newVpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption = new VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption(JsonConvert.DeserializeObject<VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes128>(jsonString, VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption.SerializerSettings));
                }
                else
                {
                    newVpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption = new VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption(JsonConvert.DeserializeObject<VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes128>(jsonString, VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes128");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes128: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes192).GetProperty("AdditionalProperties") == null)
                {
                    newVpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption = new VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption(JsonConvert.DeserializeObject<VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes192>(jsonString, VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption.SerializerSettings));
                }
                else
                {
                    newVpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption = new VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption(JsonConvert.DeserializeObject<VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes192>(jsonString, VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes192");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes192: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes256).GetProperty("AdditionalProperties") == null)
                {
                    newVpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption = new VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption(JsonConvert.DeserializeObject<VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes256>(jsonString, VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption.SerializerSettings));
                }
                else
                {
                    newVpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption = new VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption(JsonConvert.DeserializeObject<VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes256>(jsonString, VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes256");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAes256: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16128).GetProperty("AdditionalProperties") == null)
                {
                    newVpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption = new VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption(JsonConvert.DeserializeObject<VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16128>(jsonString, VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption.SerializerSettings));
                }
                else
                {
                    newVpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption = new VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption(JsonConvert.DeserializeObject<VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16128>(jsonString, VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16128");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16128: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16192).GetProperty("AdditionalProperties") == null)
                {
                    newVpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption = new VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption(JsonConvert.DeserializeObject<VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16192>(jsonString, VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption.SerializerSettings));
                }
                else
                {
                    newVpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption = new VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption(JsonConvert.DeserializeObject<VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16192>(jsonString, VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16192");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16192: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16256).GetProperty("AdditionalProperties") == null)
                {
                    newVpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption = new VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption(JsonConvert.DeserializeObject<VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16256>(jsonString, VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption.SerializerSettings));
                }
                else
                {
                    newVpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption = new VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption(JsonConvert.DeserializeObject<VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16256>(jsonString, VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16256");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGcm16256: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac128).GetProperty("AdditionalProperties") == null)
                {
                    newVpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption = new VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption(JsonConvert.DeserializeObject<VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac128>(jsonString, VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption.SerializerSettings));
                }
                else
                {
                    newVpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption = new VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption(JsonConvert.DeserializeObject<VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac128>(jsonString, VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac128");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac128: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac192).GetProperty("AdditionalProperties") == null)
                {
                    newVpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption = new VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption(JsonConvert.DeserializeObject<VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac192>(jsonString, VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption.SerializerSettings));
                }
                else
                {
                    newVpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption = new VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption(JsonConvert.DeserializeObject<VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac192>(jsonString, VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac192");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac192: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac256).GetProperty("AdditionalProperties") == null)
                {
                    newVpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption = new VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption(JsonConvert.DeserializeObject<VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac256>(jsonString, VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption.SerializerSettings));
                }
                else
                {
                    newVpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption = new VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption(JsonConvert.DeserializeObject<VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac256>(jsonString, VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac256");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionAesGmac256: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionDes).GetProperty("AdditionalProperties") == null)
                {
                    newVpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption = new VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption(JsonConvert.DeserializeObject<VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionDes>(jsonString, VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption.SerializerSettings));
                }
                else
                {
                    newVpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption = new VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption(JsonConvert.DeserializeObject<VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionDes>(jsonString, VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionDes");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionDes: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionTripleDes).GetProperty("AdditionalProperties") == null)
                {
                    newVpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption = new VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption(JsonConvert.DeserializeObject<VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionTripleDes>(jsonString, VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption.SerializerSettings));
                }
                else
                {
                    newVpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption = new VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption(JsonConvert.DeserializeObject<VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionTripleDes>(jsonString, VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionTripleDes");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into VpnPolicyIpv6SiteToSiteProposalIpsecEncryptionTripleDes: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newVpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption);
        }

        /// <summary>
        /// Returns true if VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption instances are equal
        /// </summary>
        /// <param name="input">Instance of VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption
    /// </summary>
    public class VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryptionJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return VpnPolicyIpv6Ipv6SiteToSiteProposalIpsecEncryption.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
