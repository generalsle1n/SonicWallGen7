/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure advanced diag Network failover and load balance settings.
    /// </summary>
    [DataContract(Name = "diag_advanced_network_fo_lb_diag_advanced_network_failover_and_load_balancing")]
    public partial class DiagAdvancedNetworkFoLbDiagAdvancedNetworkFailoverAndLoadBalancing : IEquatable<DiagAdvancedNetworkFoLbDiagAdvancedNetworkFailoverAndLoadBalancing>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagAdvancedNetworkFoLbDiagAdvancedNetworkFailoverAndLoadBalancing" /> class.
        /// </summary>
        /// <param name="idleExpireTime">Set minutes to wait before removing idle entries from the Persistent LB Table..</param>
        /// <param name="activityInterval">Set seconds interval between inspections of the Persistent LB Table, for marking entries as idle..</param>
        /// <param name="reuseMax">Set maximum reuse threshold for each entry in the Persistent LB Table, zero means unlimited..</param>
        /// <param name="sourceIp">Set source IP Address to monitor (Source-Destination IP Binding to include in TSR)..</param>
        /// <param name="destinationIp">Set destination IP Address to monitor (Source-Destination IP Binding to include in TSR)..</param>
        public DiagAdvancedNetworkFoLbDiagAdvancedNetworkFailoverAndLoadBalancing(decimal idleExpireTime = default(decimal), decimal activityInterval = default(decimal), decimal reuseMax = default(decimal), string sourceIp = default(string), string destinationIp = default(string))
        {
            this.IdleExpireTime = idleExpireTime;
            this.ActivityInterval = activityInterval;
            this.ReuseMax = reuseMax;
            this.SourceIp = sourceIp;
            this.DestinationIp = destinationIp;
        }

        /// <summary>
        /// Set minutes to wait before removing idle entries from the Persistent LB Table.
        /// </summary>
        /// <value>Set minutes to wait before removing idle entries from the Persistent LB Table.</value>
        [DataMember(Name = "idle_expire_time", EmitDefaultValue = false)]
        public decimal IdleExpireTime { get; set; }

        /// <summary>
        /// Set seconds interval between inspections of the Persistent LB Table, for marking entries as idle.
        /// </summary>
        /// <value>Set seconds interval between inspections of the Persistent LB Table, for marking entries as idle.</value>
        [DataMember(Name = "activity_interval", EmitDefaultValue = false)]
        public decimal ActivityInterval { get; set; }

        /// <summary>
        /// Set maximum reuse threshold for each entry in the Persistent LB Table, zero means unlimited.
        /// </summary>
        /// <value>Set maximum reuse threshold for each entry in the Persistent LB Table, zero means unlimited.</value>
        [DataMember(Name = "reuse_max", EmitDefaultValue = false)]
        public decimal ReuseMax { get; set; }

        /// <summary>
        /// Set source IP Address to monitor (Source-Destination IP Binding to include in TSR).
        /// </summary>
        /// <value>Set source IP Address to monitor (Source-Destination IP Binding to include in TSR).</value>
        [DataMember(Name = "source_ip", EmitDefaultValue = false)]
        public string SourceIp { get; set; }

        /// <summary>
        /// Set destination IP Address to monitor (Source-Destination IP Binding to include in TSR).
        /// </summary>
        /// <value>Set destination IP Address to monitor (Source-Destination IP Binding to include in TSR).</value>
        [DataMember(Name = "destination_ip", EmitDefaultValue = false)]
        public string DestinationIp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DiagAdvancedNetworkFoLbDiagAdvancedNetworkFailoverAndLoadBalancing {\n");
            sb.Append("  IdleExpireTime: ").Append(IdleExpireTime).Append("\n");
            sb.Append("  ActivityInterval: ").Append(ActivityInterval).Append("\n");
            sb.Append("  ReuseMax: ").Append(ReuseMax).Append("\n");
            sb.Append("  SourceIp: ").Append(SourceIp).Append("\n");
            sb.Append("  DestinationIp: ").Append(DestinationIp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiagAdvancedNetworkFoLbDiagAdvancedNetworkFailoverAndLoadBalancing);
        }

        /// <summary>
        /// Returns true if DiagAdvancedNetworkFoLbDiagAdvancedNetworkFailoverAndLoadBalancing instances are equal
        /// </summary>
        /// <param name="input">Instance of DiagAdvancedNetworkFoLbDiagAdvancedNetworkFailoverAndLoadBalancing to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiagAdvancedNetworkFoLbDiagAdvancedNetworkFailoverAndLoadBalancing input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IdleExpireTime == input.IdleExpireTime ||
                    this.IdleExpireTime.Equals(input.IdleExpireTime)
                ) && 
                (
                    this.ActivityInterval == input.ActivityInterval ||
                    this.ActivityInterval.Equals(input.ActivityInterval)
                ) && 
                (
                    this.ReuseMax == input.ReuseMax ||
                    this.ReuseMax.Equals(input.ReuseMax)
                ) && 
                (
                    this.SourceIp == input.SourceIp ||
                    (this.SourceIp != null &&
                    this.SourceIp.Equals(input.SourceIp))
                ) && 
                (
                    this.DestinationIp == input.DestinationIp ||
                    (this.DestinationIp != null &&
                    this.DestinationIp.Equals(input.DestinationIp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.IdleExpireTime.GetHashCode();
                hashCode = (hashCode * 59) + this.ActivityInterval.GetHashCode();
                hashCode = (hashCode * 59) + this.ReuseMax.GetHashCode();
                if (this.SourceIp != null)
                {
                    hashCode = (hashCode * 59) + this.SourceIp.GetHashCode();
                }
                if (this.DestinationIp != null)
                {
                    hashCode = (hashCode * 59) + this.DestinationIp.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
