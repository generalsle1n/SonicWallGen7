/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enter appflow configuration mode.
    /// </summary>
    [DataContract(Name = "appflow_appflow")]
    public partial class AppflowAppflow : IEquatable<AppflowAppflow>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppflowAppflow" /> class.
        /// </summary>
        /// <param name="realTime">realTime.</param>
        /// <param name="aggregate">aggregate.</param>
        /// <param name="report">report.</param>
        /// <param name="flowsTo">flowsTo.</param>
        /// <param name="includeUrlTypes">includeUrlTypes.</param>
        /// <param name="geoIpResolution">Enable geo-ip and name resolution..</param>
        public AppflowAppflow(AppflowAppflowRealTime realTime = default(AppflowAppflowRealTime), AppflowAppflowAggregate aggregate = default(AppflowAppflowAggregate), AppflowAppflowReport report = default(AppflowAppflowReport), AppflowAppflowFlowsTo flowsTo = default(AppflowAppflowFlowsTo), AppflowAppflowIncludeUrlTypes includeUrlTypes = default(AppflowAppflowIncludeUrlTypes), bool geoIpResolution = default(bool))
        {
            this.RealTime = realTime;
            this.Aggregate = aggregate;
            this.Report = report;
            this.FlowsTo = flowsTo;
            this.IncludeUrlTypes = includeUrlTypes;
            this.GeoIpResolution = geoIpResolution;
        }

        /// <summary>
        /// Gets or Sets RealTime
        /// </summary>
        [DataMember(Name = "real_time", EmitDefaultValue = false)]
        public AppflowAppflowRealTime RealTime { get; set; }

        /// <summary>
        /// Gets or Sets Aggregate
        /// </summary>
        [DataMember(Name = "aggregate", EmitDefaultValue = false)]
        public AppflowAppflowAggregate Aggregate { get; set; }

        /// <summary>
        /// Gets or Sets Report
        /// </summary>
        [DataMember(Name = "report", EmitDefaultValue = false)]
        public AppflowAppflowReport Report { get; set; }

        /// <summary>
        /// Gets or Sets FlowsTo
        /// </summary>
        [DataMember(Name = "flows_to", EmitDefaultValue = false)]
        public AppflowAppflowFlowsTo FlowsTo { get; set; }

        /// <summary>
        /// Gets or Sets IncludeUrlTypes
        /// </summary>
        [DataMember(Name = "include_url_types", EmitDefaultValue = false)]
        public AppflowAppflowIncludeUrlTypes IncludeUrlTypes { get; set; }

        /// <summary>
        /// Enable geo-ip and name resolution.
        /// </summary>
        /// <value>Enable geo-ip and name resolution.</value>
        [DataMember(Name = "geo_ip_resolution", EmitDefaultValue = true)]
        public bool GeoIpResolution { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppflowAppflow {\n");
            sb.Append("  RealTime: ").Append(RealTime).Append("\n");
            sb.Append("  Aggregate: ").Append(Aggregate).Append("\n");
            sb.Append("  Report: ").Append(Report).Append("\n");
            sb.Append("  FlowsTo: ").Append(FlowsTo).Append("\n");
            sb.Append("  IncludeUrlTypes: ").Append(IncludeUrlTypes).Append("\n");
            sb.Append("  GeoIpResolution: ").Append(GeoIpResolution).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppflowAppflow);
        }

        /// <summary>
        /// Returns true if AppflowAppflow instances are equal
        /// </summary>
        /// <param name="input">Instance of AppflowAppflow to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppflowAppflow input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RealTime == input.RealTime ||
                    (this.RealTime != null &&
                    this.RealTime.Equals(input.RealTime))
                ) && 
                (
                    this.Aggregate == input.Aggregate ||
                    (this.Aggregate != null &&
                    this.Aggregate.Equals(input.Aggregate))
                ) && 
                (
                    this.Report == input.Report ||
                    (this.Report != null &&
                    this.Report.Equals(input.Report))
                ) && 
                (
                    this.FlowsTo == input.FlowsTo ||
                    (this.FlowsTo != null &&
                    this.FlowsTo.Equals(input.FlowsTo))
                ) && 
                (
                    this.IncludeUrlTypes == input.IncludeUrlTypes ||
                    (this.IncludeUrlTypes != null &&
                    this.IncludeUrlTypes.Equals(input.IncludeUrlTypes))
                ) && 
                (
                    this.GeoIpResolution == input.GeoIpResolution ||
                    this.GeoIpResolution.Equals(input.GeoIpResolution)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RealTime != null)
                {
                    hashCode = (hashCode * 59) + this.RealTime.GetHashCode();
                }
                if (this.Aggregate != null)
                {
                    hashCode = (hashCode * 59) + this.Aggregate.GetHashCode();
                }
                if (this.Report != null)
                {
                    hashCode = (hashCode * 59) + this.Report.GetHashCode();
                }
                if (this.FlowsTo != null)
                {
                    hashCode = (hashCode * 59) + this.FlowsTo.GetHashCode();
                }
                if (this.IncludeUrlTypes != null)
                {
                    hashCode = (hashCode * 59) + this.IncludeUrlTypes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GeoIpResolution.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
