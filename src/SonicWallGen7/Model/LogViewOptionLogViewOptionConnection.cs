/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enable view log connection option settings.
    /// </summary>
    [DataContract(Name = "log_view_option_log_view_option_connection")]
    public partial class LogViewOptionLogViewOptionConnection : IEquatable<LogViewOptionLogViewOptionConnection>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogViewOptionLogViewOptionConnection" /> class.
        /// </summary>
        /// <param name="txBytes">Tx-bytes..</param>
        /// <param name="rxBytes">Rx-bytes..</param>
        /// <param name="accessRule">Access-rule..</param>
        /// <param name="natPolicy">Nat-policy..</param>
        /// <param name="vpnPolicy">Vpn-policy..</param>
        /// <param name="userName">User-name..</param>
        /// <param name="sessionTime">Session-time..</param>
        /// <param name="sessionType">Session-type..</param>
        /// <param name="idpRule">Idp-rule..</param>
        /// <param name="idpPriority">Idp-priority..</param>
        public LogViewOptionLogViewOptionConnection(bool txBytes = default(bool), bool rxBytes = default(bool), bool accessRule = default(bool), bool natPolicy = default(bool), bool vpnPolicy = default(bool), bool userName = default(bool), bool sessionTime = default(bool), bool sessionType = default(bool), bool idpRule = default(bool), bool idpPriority = default(bool))
        {
            this.TxBytes = txBytes;
            this.RxBytes = rxBytes;
            this.AccessRule = accessRule;
            this.NatPolicy = natPolicy;
            this.VpnPolicy = vpnPolicy;
            this.UserName = userName;
            this.SessionTime = sessionTime;
            this.SessionType = sessionType;
            this.IdpRule = idpRule;
            this.IdpPriority = idpPriority;
        }

        /// <summary>
        /// Tx-bytes.
        /// </summary>
        /// <value>Tx-bytes.</value>
        [DataMember(Name = "tx_bytes", EmitDefaultValue = true)]
        public bool TxBytes { get; set; }

        /// <summary>
        /// Rx-bytes.
        /// </summary>
        /// <value>Rx-bytes.</value>
        [DataMember(Name = "rx_bytes", EmitDefaultValue = true)]
        public bool RxBytes { get; set; }

        /// <summary>
        /// Access-rule.
        /// </summary>
        /// <value>Access-rule.</value>
        [DataMember(Name = "access_rule", EmitDefaultValue = true)]
        public bool AccessRule { get; set; }

        /// <summary>
        /// Nat-policy.
        /// </summary>
        /// <value>Nat-policy.</value>
        [DataMember(Name = "nat_policy", EmitDefaultValue = true)]
        public bool NatPolicy { get; set; }

        /// <summary>
        /// Vpn-policy.
        /// </summary>
        /// <value>Vpn-policy.</value>
        [DataMember(Name = "vpn_policy", EmitDefaultValue = true)]
        public bool VpnPolicy { get; set; }

        /// <summary>
        /// User-name.
        /// </summary>
        /// <value>User-name.</value>
        [DataMember(Name = "user_name", EmitDefaultValue = true)]
        public bool UserName { get; set; }

        /// <summary>
        /// Session-time.
        /// </summary>
        /// <value>Session-time.</value>
        [DataMember(Name = "session_time", EmitDefaultValue = true)]
        public bool SessionTime { get; set; }

        /// <summary>
        /// Session-type.
        /// </summary>
        /// <value>Session-type.</value>
        [DataMember(Name = "session_type", EmitDefaultValue = true)]
        public bool SessionType { get; set; }

        /// <summary>
        /// Idp-rule.
        /// </summary>
        /// <value>Idp-rule.</value>
        [DataMember(Name = "idp_rule", EmitDefaultValue = true)]
        public bool IdpRule { get; set; }

        /// <summary>
        /// Idp-priority.
        /// </summary>
        /// <value>Idp-priority.</value>
        [DataMember(Name = "idp_priority", EmitDefaultValue = true)]
        public bool IdpPriority { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LogViewOptionLogViewOptionConnection {\n");
            sb.Append("  TxBytes: ").Append(TxBytes).Append("\n");
            sb.Append("  RxBytes: ").Append(RxBytes).Append("\n");
            sb.Append("  AccessRule: ").Append(AccessRule).Append("\n");
            sb.Append("  NatPolicy: ").Append(NatPolicy).Append("\n");
            sb.Append("  VpnPolicy: ").Append(VpnPolicy).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  SessionTime: ").Append(SessionTime).Append("\n");
            sb.Append("  SessionType: ").Append(SessionType).Append("\n");
            sb.Append("  IdpRule: ").Append(IdpRule).Append("\n");
            sb.Append("  IdpPriority: ").Append(IdpPriority).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogViewOptionLogViewOptionConnection);
        }

        /// <summary>
        /// Returns true if LogViewOptionLogViewOptionConnection instances are equal
        /// </summary>
        /// <param name="input">Instance of LogViewOptionLogViewOptionConnection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogViewOptionLogViewOptionConnection input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TxBytes == input.TxBytes ||
                    this.TxBytes.Equals(input.TxBytes)
                ) && 
                (
                    this.RxBytes == input.RxBytes ||
                    this.RxBytes.Equals(input.RxBytes)
                ) && 
                (
                    this.AccessRule == input.AccessRule ||
                    this.AccessRule.Equals(input.AccessRule)
                ) && 
                (
                    this.NatPolicy == input.NatPolicy ||
                    this.NatPolicy.Equals(input.NatPolicy)
                ) && 
                (
                    this.VpnPolicy == input.VpnPolicy ||
                    this.VpnPolicy.Equals(input.VpnPolicy)
                ) && 
                (
                    this.UserName == input.UserName ||
                    this.UserName.Equals(input.UserName)
                ) && 
                (
                    this.SessionTime == input.SessionTime ||
                    this.SessionTime.Equals(input.SessionTime)
                ) && 
                (
                    this.SessionType == input.SessionType ||
                    this.SessionType.Equals(input.SessionType)
                ) && 
                (
                    this.IdpRule == input.IdpRule ||
                    this.IdpRule.Equals(input.IdpRule)
                ) && 
                (
                    this.IdpPriority == input.IdpPriority ||
                    this.IdpPriority.Equals(input.IdpPriority)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.TxBytes.GetHashCode();
                hashCode = (hashCode * 59) + this.RxBytes.GetHashCode();
                hashCode = (hashCode * 59) + this.AccessRule.GetHashCode();
                hashCode = (hashCode * 59) + this.NatPolicy.GetHashCode();
                hashCode = (hashCode * 59) + this.VpnPolicy.GetHashCode();
                hashCode = (hashCode * 59) + this.UserName.GetHashCode();
                hashCode = (hashCode * 59) + this.SessionTime.GetHashCode();
                hashCode = (hashCode * 59) + this.SessionType.GetHashCode();
                hashCode = (hashCode * 59) + this.IdpRule.GetHashCode();
                hashCode = (hashCode * 59) + this.IdpPriority.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
