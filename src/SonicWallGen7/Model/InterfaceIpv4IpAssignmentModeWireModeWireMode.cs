/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Interfaces paired in wire mode.
    /// </summary>
    [DataContract(Name = "interface_ipv4_ip_assignment_mode_wire_mode_wire_mode")]
    public partial class InterfaceIpv4IpAssignmentModeWireModeWireMode : IEquatable<InterfaceIpv4IpAssignmentModeWireModeWireMode>, IValidatableObject
    {
        /// <summary>
        /// Set the type for wiremode.
        /// </summary>
        /// <value>Set the type for wiremode.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Bypass for value: bypass
            /// </summary>
            [EnumMember(Value = "bypass")]
            Bypass = 1,

            /// <summary>
            /// Enum Inspect for value: inspect
            /// </summary>
            [EnumMember(Value = "inspect")]
            Inspect = 2,

            /// <summary>
            /// Enum Secure for value: secure
            /// </summary>
            [EnumMember(Value = "secure")]
            Secure = 3
        }


        /// <summary>
        /// Set the type for wiremode.
        /// </summary>
        /// <value>Set the type for wiremode.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InterfaceIpv4IpAssignmentModeWireModeWireMode" /> class.
        /// </summary>
        /// <param name="type">Set the type for wiremode..</param>
        /// <param name="pairedInterface">pairedInterface.</param>
        /// <param name="pairedInterfaceZone">Set the paired interface zone for wiremode..</param>
        /// <param name="statefulInspection">Enable stateful inspection..</param>
        /// <param name="linkstatePropagation">Enable link state propagation..</param>
        /// <param name="restrictAnalysis">Enable restrict analysis at resource limit..</param>
        public InterfaceIpv4IpAssignmentModeWireModeWireMode(TypeEnum? type = default(TypeEnum?), InterfaceIpv4IpAssignmentModeWireModeWireModePairedInterface pairedInterface = default(InterfaceIpv4IpAssignmentModeWireModeWireModePairedInterface), string pairedInterfaceZone = default(string), bool statefulInspection = default(bool), bool linkstatePropagation = default(bool), bool restrictAnalysis = default(bool))
        {
            this.Type = type;
            this.PairedInterface = pairedInterface;
            this.PairedInterfaceZone = pairedInterfaceZone;
            this.StatefulInspection = statefulInspection;
            this.LinkstatePropagation = linkstatePropagation;
            this.RestrictAnalysis = restrictAnalysis;
        }

        /// <summary>
        /// Gets or Sets PairedInterface
        /// </summary>
        [DataMember(Name = "paired_interface", EmitDefaultValue = true)]
        public InterfaceIpv4IpAssignmentModeWireModeWireModePairedInterface PairedInterface { get; set; }

        /// <summary>
        /// Set the paired interface zone for wiremode.
        /// </summary>
        /// <value>Set the paired interface zone for wiremode.</value>
        [DataMember(Name = "paired_interface_zone", EmitDefaultValue = false)]
        public string PairedInterfaceZone { get; set; }

        /// <summary>
        /// Enable stateful inspection.
        /// </summary>
        /// <value>Enable stateful inspection.</value>
        [DataMember(Name = "stateful_inspection", EmitDefaultValue = true)]
        public bool StatefulInspection { get; set; }

        /// <summary>
        /// Enable link state propagation.
        /// </summary>
        /// <value>Enable link state propagation.</value>
        [DataMember(Name = "linkstate_propagation", EmitDefaultValue = true)]
        public bool LinkstatePropagation { get; set; }

        /// <summary>
        /// Enable restrict analysis at resource limit.
        /// </summary>
        /// <value>Enable restrict analysis at resource limit.</value>
        [DataMember(Name = "restrict_analysis", EmitDefaultValue = true)]
        public bool RestrictAnalysis { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InterfaceIpv4IpAssignmentModeWireModeWireMode {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  PairedInterface: ").Append(PairedInterface).Append("\n");
            sb.Append("  PairedInterfaceZone: ").Append(PairedInterfaceZone).Append("\n");
            sb.Append("  StatefulInspection: ").Append(StatefulInspection).Append("\n");
            sb.Append("  LinkstatePropagation: ").Append(LinkstatePropagation).Append("\n");
            sb.Append("  RestrictAnalysis: ").Append(RestrictAnalysis).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InterfaceIpv4IpAssignmentModeWireModeWireMode);
        }

        /// <summary>
        /// Returns true if InterfaceIpv4IpAssignmentModeWireModeWireMode instances are equal
        /// </summary>
        /// <param name="input">Instance of InterfaceIpv4IpAssignmentModeWireModeWireMode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InterfaceIpv4IpAssignmentModeWireModeWireMode input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.PairedInterface == input.PairedInterface ||
                    (this.PairedInterface != null &&
                    this.PairedInterface.Equals(input.PairedInterface))
                ) && 
                (
                    this.PairedInterfaceZone == input.PairedInterfaceZone ||
                    (this.PairedInterfaceZone != null &&
                    this.PairedInterfaceZone.Equals(input.PairedInterfaceZone))
                ) && 
                (
                    this.StatefulInspection == input.StatefulInspection ||
                    this.StatefulInspection.Equals(input.StatefulInspection)
                ) && 
                (
                    this.LinkstatePropagation == input.LinkstatePropagation ||
                    this.LinkstatePropagation.Equals(input.LinkstatePropagation)
                ) && 
                (
                    this.RestrictAnalysis == input.RestrictAnalysis ||
                    this.RestrictAnalysis.Equals(input.RestrictAnalysis)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.PairedInterface != null)
                {
                    hashCode = (hashCode * 59) + this.PairedInterface.GetHashCode();
                }
                if (this.PairedInterfaceZone != null)
                {
                    hashCode = (hashCode * 59) + this.PairedInterfaceZone.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StatefulInspection.GetHashCode();
                hashCode = (hashCode * 59) + this.LinkstatePropagation.GetHashCode();
                hashCode = (hashCode * 59) + this.RestrictAnalysis.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
