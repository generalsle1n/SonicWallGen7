/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// ShowStatusDhcpOverVpnLeasesListInner
    /// </summary>
    [DataContract(Name = "show_status_dhcp_over_vpn_leases_list_inner")]
    public partial class ShowStatusDhcpOverVpnLeasesListInner : IEquatable<ShowStatusDhcpOverVpnLeasesListInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusDhcpOverVpnLeasesListInner" /> class.
        /// </summary>
        /// <param name="ipAddress">ipAddress.</param>
        /// <param name="hostName">hostName.</param>
        /// <param name="ethernetAddress">ethernetAddress.</param>
        /// <param name="vendor">vendor.</param>
        /// <param name="leaseTime">leaseTime.</param>
        /// <param name="tunnelName">tunnelName.</param>
        public ShowStatusDhcpOverVpnLeasesListInner(string ipAddress = default(string), string hostName = default(string), string ethernetAddress = default(string), string vendor = default(string), string leaseTime = default(string), string tunnelName = default(string))
        {
            this.IpAddress = ipAddress;
            this.HostName = hostName;
            this.EthernetAddress = ethernetAddress;
            this.Vendor = vendor;
            this.LeaseTime = leaseTime;
            this.TunnelName = tunnelName;
        }

        /// <summary>
        /// Gets or Sets IpAddress
        /// </summary>
        [DataMember(Name = "ip_address", EmitDefaultValue = false)]
        public string IpAddress { get; set; }

        /// <summary>
        /// Gets or Sets HostName
        /// </summary>
        [DataMember(Name = "host_name", EmitDefaultValue = false)]
        public string HostName { get; set; }

        /// <summary>
        /// Gets or Sets EthernetAddress
        /// </summary>
        [DataMember(Name = "ethernet_address", EmitDefaultValue = false)]
        public string EthernetAddress { get; set; }

        /// <summary>
        /// Gets or Sets Vendor
        /// </summary>
        [DataMember(Name = "vendor", EmitDefaultValue = false)]
        public string Vendor { get; set; }

        /// <summary>
        /// Gets or Sets LeaseTime
        /// </summary>
        [DataMember(Name = "lease_time", EmitDefaultValue = false)]
        public string LeaseTime { get; set; }

        /// <summary>
        /// Gets or Sets TunnelName
        /// </summary>
        [DataMember(Name = "tunnel_name", EmitDefaultValue = false)]
        public string TunnelName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusDhcpOverVpnLeasesListInner {\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  HostName: ").Append(HostName).Append("\n");
            sb.Append("  EthernetAddress: ").Append(EthernetAddress).Append("\n");
            sb.Append("  Vendor: ").Append(Vendor).Append("\n");
            sb.Append("  LeaseTime: ").Append(LeaseTime).Append("\n");
            sb.Append("  TunnelName: ").Append(TunnelName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusDhcpOverVpnLeasesListInner);
        }

        /// <summary>
        /// Returns true if ShowStatusDhcpOverVpnLeasesListInner instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusDhcpOverVpnLeasesListInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusDhcpOverVpnLeasesListInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IpAddress == input.IpAddress ||
                    (this.IpAddress != null &&
                    this.IpAddress.Equals(input.IpAddress))
                ) && 
                (
                    this.HostName == input.HostName ||
                    (this.HostName != null &&
                    this.HostName.Equals(input.HostName))
                ) && 
                (
                    this.EthernetAddress == input.EthernetAddress ||
                    (this.EthernetAddress != null &&
                    this.EthernetAddress.Equals(input.EthernetAddress))
                ) && 
                (
                    this.Vendor == input.Vendor ||
                    (this.Vendor != null &&
                    this.Vendor.Equals(input.Vendor))
                ) && 
                (
                    this.LeaseTime == input.LeaseTime ||
                    (this.LeaseTime != null &&
                    this.LeaseTime.Equals(input.LeaseTime))
                ) && 
                (
                    this.TunnelName == input.TunnelName ||
                    (this.TunnelName != null &&
                    this.TunnelName.Equals(input.TunnelName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IpAddress != null)
                {
                    hashCode = (hashCode * 59) + this.IpAddress.GetHashCode();
                }
                if (this.HostName != null)
                {
                    hashCode = (hashCode * 59) + this.HostName.GetHashCode();
                }
                if (this.EthernetAddress != null)
                {
                    hashCode = (hashCode * 59) + this.EthernetAddress.GetHashCode();
                }
                if (this.Vendor != null)
                {
                    hashCode = (hashCode * 59) + this.Vendor.GetHashCode();
                }
                if (this.LeaseTime != null)
                {
                    hashCode = (hashCode * 59) + this.LeaseTime.GetHashCode();
                }
                if (this.TunnelName != null)
                {
                    hashCode = (hashCode * 59) + this.TunnelName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
