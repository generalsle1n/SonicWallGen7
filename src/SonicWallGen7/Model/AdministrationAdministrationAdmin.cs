/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Config the administrator settings.
    /// </summary>
    [DataContract(Name = "administration_administration_admin")]
    public partial class AdministrationAdministrationAdmin : IEquatable<AdministrationAdministrationAdmin>, IValidatableObject
    {
        /// <summary>
        /// Set action to do upon preemption by another administrator.
        /// </summary>
        /// <value>Set action to do upon preemption by another administrator.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PreemptActionEnum
        {
            /// <summary>
            /// Enum GotoNonConfig for value: goto-non-config
            /// </summary>
            [EnumMember(Value = "goto-non-config")]
            GotoNonConfig = 1,

            /// <summary>
            /// Enum Logout for value: logout
            /// </summary>
            [EnumMember(Value = "logout")]
            Logout = 2
        }


        /// <summary>
        /// Set action to do upon preemption by another administrator.
        /// </summary>
        /// <value>Set action to do upon preemption by another administrator.</value>
        [DataMember(Name = "preempt_action", EmitDefaultValue = false)]
        public PreemptActionEnum? PreemptAction { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdministrationAdministrationAdmin" /> class.
        /// </summary>
        /// <param name="name">Set the name for the built in administrator..</param>
        /// <param name="oneTimePassword">oneTimePassword.</param>
        /// <param name="preemptAction">Set action to do upon preemption by another administrator..</param>
        /// <param name="preemptInactivityTimeout">Allow preemption by a lower priority administrator after inactivity of (minutes)..</param>
        public AdministrationAdministrationAdmin(string name = default(string), AdministrationAdministrationAdminOneTimePassword oneTimePassword = default(AdministrationAdministrationAdminOneTimePassword), PreemptActionEnum? preemptAction = default(PreemptActionEnum?), decimal preemptInactivityTimeout = default(decimal))
        {
            this.Name = name;
            this.OneTimePassword = oneTimePassword;
            this.PreemptAction = preemptAction;
            this.PreemptInactivityTimeout = preemptInactivityTimeout;
        }

        /// <summary>
        /// Set the name for the built in administrator.
        /// </summary>
        /// <value>Set the name for the built in administrator.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OneTimePassword
        /// </summary>
        [DataMember(Name = "one_time_password", EmitDefaultValue = true)]
        public AdministrationAdministrationAdminOneTimePassword OneTimePassword { get; set; }

        /// <summary>
        /// Allow preemption by a lower priority administrator after inactivity of (minutes).
        /// </summary>
        /// <value>Allow preemption by a lower priority administrator after inactivity of (minutes).</value>
        [DataMember(Name = "preempt_inactivity_timeout", EmitDefaultValue = false)]
        public decimal PreemptInactivityTimeout { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdministrationAdministrationAdmin {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OneTimePassword: ").Append(OneTimePassword).Append("\n");
            sb.Append("  PreemptAction: ").Append(PreemptAction).Append("\n");
            sb.Append("  PreemptInactivityTimeout: ").Append(PreemptInactivityTimeout).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdministrationAdministrationAdmin);
        }

        /// <summary>
        /// Returns true if AdministrationAdministrationAdmin instances are equal
        /// </summary>
        /// <param name="input">Instance of AdministrationAdministrationAdmin to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdministrationAdministrationAdmin input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OneTimePassword == input.OneTimePassword ||
                    (this.OneTimePassword != null &&
                    this.OneTimePassword.Equals(input.OneTimePassword))
                ) && 
                (
                    this.PreemptAction == input.PreemptAction ||
                    this.PreemptAction.Equals(input.PreemptAction)
                ) && 
                (
                    this.PreemptInactivityTimeout == input.PreemptInactivityTimeout ||
                    this.PreemptInactivityTimeout.Equals(input.PreemptInactivityTimeout)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.OneTimePassword != null)
                {
                    hashCode = (hashCode * 59) + this.OneTimePassword.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PreemptAction.GetHashCode();
                hashCode = (hashCode * 59) + this.PreemptInactivityTimeout.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
