/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// dns wan ipv6 detail schema.
    /// </summary>
    [DataContract(Name = "show_status_dns_wan_ipv6_detail")]
    public partial class ShowStatusDnsWanIpv6Detail : IEquatable<ShowStatusDnsWanIpv6Detail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusDnsWanIpv6Detail" /> class.
        /// </summary>
        /// <param name="dnsServer1">dnsServer1.</param>
        /// <param name="dnsServer2">dnsServer2.</param>
        /// <param name="dnsServer3">dnsServer3.</param>
        public ShowStatusDnsWanIpv6Detail(string dnsServer1 = default(string), string dnsServer2 = default(string), string dnsServer3 = default(string))
        {
            this.DnsServer1 = dnsServer1;
            this.DnsServer2 = dnsServer2;
            this.DnsServer3 = dnsServer3;
        }

        /// <summary>
        /// Gets or Sets DnsServer1
        /// </summary>
        [DataMember(Name = "dns_server_1", EmitDefaultValue = false)]
        public string DnsServer1 { get; set; }

        /// <summary>
        /// Gets or Sets DnsServer2
        /// </summary>
        [DataMember(Name = "dns_server_2", EmitDefaultValue = false)]
        public string DnsServer2 { get; set; }

        /// <summary>
        /// Gets or Sets DnsServer3
        /// </summary>
        [DataMember(Name = "dns_server_3", EmitDefaultValue = false)]
        public string DnsServer3 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusDnsWanIpv6Detail {\n");
            sb.Append("  DnsServer1: ").Append(DnsServer1).Append("\n");
            sb.Append("  DnsServer2: ").Append(DnsServer2).Append("\n");
            sb.Append("  DnsServer3: ").Append(DnsServer3).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusDnsWanIpv6Detail);
        }

        /// <summary>
        /// Returns true if ShowStatusDnsWanIpv6Detail instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusDnsWanIpv6Detail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusDnsWanIpv6Detail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DnsServer1 == input.DnsServer1 ||
                    (this.DnsServer1 != null &&
                    this.DnsServer1.Equals(input.DnsServer1))
                ) && 
                (
                    this.DnsServer2 == input.DnsServer2 ||
                    (this.DnsServer2 != null &&
                    this.DnsServer2.Equals(input.DnsServer2))
                ) && 
                (
                    this.DnsServer3 == input.DnsServer3 ||
                    (this.DnsServer3 != null &&
                    this.DnsServer3.Equals(input.DnsServer3))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DnsServer1 != null)
                {
                    hashCode = (hashCode * 59) + this.DnsServer1.GetHashCode();
                }
                if (this.DnsServer2 != null)
                {
                    hashCode = (hashCode * 59) + this.DnsServer2.GetHashCode();
                }
                if (this.DnsServer3 != null)
                {
                    hashCode = (hashCode * 59) + this.DnsServer3.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
