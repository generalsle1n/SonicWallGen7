/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure DHCP over VPN for central gateway and enter to central mode.
    /// </summary>
    [DataContract(Name = "dhcp_over_vpn_base_central_vpn_dhcp_over_vpn_central")]
    public partial class DhcpOverVpnBaseCentralVpnDhcpOverVpnCentral : IEquatable<DhcpOverVpnBaseCentralVpnDhcpOverVpnCentral>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DhcpOverVpnBaseCentralVpnDhcpOverVpnCentral" /> class.
        /// </summary>
        /// <param name="internalDhcp">Enable use internal DHCP server..</param>
        /// <param name="globalVpn">Enable use internal DHCP server for global VPN client..</param>
        /// <param name="remote">Enable use internal DHCP server for remote firewall..</param>
        /// <param name="sendRequests">Enable send DHCP requests to the server addresses in the server list..</param>
        /// <param name="relayIp">Configure DHCP relay IP address..</param>
        public DhcpOverVpnBaseCentralVpnDhcpOverVpnCentral(bool internalDhcp = default(bool), bool globalVpn = default(bool), bool remote = default(bool), bool sendRequests = default(bool), string relayIp = default(string))
        {
            this.InternalDhcp = internalDhcp;
            this.GlobalVpn = globalVpn;
            this.Remote = remote;
            this.SendRequests = sendRequests;
            this.RelayIp = relayIp;
        }

        /// <summary>
        /// Enable use internal DHCP server.
        /// </summary>
        /// <value>Enable use internal DHCP server.</value>
        [DataMember(Name = "internal_dhcp", EmitDefaultValue = true)]
        public bool InternalDhcp { get; set; }

        /// <summary>
        /// Enable use internal DHCP server for global VPN client.
        /// </summary>
        /// <value>Enable use internal DHCP server for global VPN client.</value>
        [DataMember(Name = "global_vpn", EmitDefaultValue = true)]
        public bool GlobalVpn { get; set; }

        /// <summary>
        /// Enable use internal DHCP server for remote firewall.
        /// </summary>
        /// <value>Enable use internal DHCP server for remote firewall.</value>
        [DataMember(Name = "remote", EmitDefaultValue = true)]
        public bool Remote { get; set; }

        /// <summary>
        /// Enable send DHCP requests to the server addresses in the server list.
        /// </summary>
        /// <value>Enable send DHCP requests to the server addresses in the server list.</value>
        [DataMember(Name = "send_requests", EmitDefaultValue = true)]
        public bool SendRequests { get; set; }

        /// <summary>
        /// Configure DHCP relay IP address.
        /// </summary>
        /// <value>Configure DHCP relay IP address.</value>
        [DataMember(Name = "relay_ip", EmitDefaultValue = false)]
        public string RelayIp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DhcpOverVpnBaseCentralVpnDhcpOverVpnCentral {\n");
            sb.Append("  InternalDhcp: ").Append(InternalDhcp).Append("\n");
            sb.Append("  GlobalVpn: ").Append(GlobalVpn).Append("\n");
            sb.Append("  Remote: ").Append(Remote).Append("\n");
            sb.Append("  SendRequests: ").Append(SendRequests).Append("\n");
            sb.Append("  RelayIp: ").Append(RelayIp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DhcpOverVpnBaseCentralVpnDhcpOverVpnCentral);
        }

        /// <summary>
        /// Returns true if DhcpOverVpnBaseCentralVpnDhcpOverVpnCentral instances are equal
        /// </summary>
        /// <param name="input">Instance of DhcpOverVpnBaseCentralVpnDhcpOverVpnCentral to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DhcpOverVpnBaseCentralVpnDhcpOverVpnCentral input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InternalDhcp == input.InternalDhcp ||
                    this.InternalDhcp.Equals(input.InternalDhcp)
                ) && 
                (
                    this.GlobalVpn == input.GlobalVpn ||
                    this.GlobalVpn.Equals(input.GlobalVpn)
                ) && 
                (
                    this.Remote == input.Remote ||
                    this.Remote.Equals(input.Remote)
                ) && 
                (
                    this.SendRequests == input.SendRequests ||
                    this.SendRequests.Equals(input.SendRequests)
                ) && 
                (
                    this.RelayIp == input.RelayIp ||
                    (this.RelayIp != null &&
                    this.RelayIp.Equals(input.RelayIp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.InternalDhcp.GetHashCode();
                hashCode = (hashCode * 59) + this.GlobalVpn.GetHashCode();
                hashCode = (hashCode * 59) + this.Remote.GetHashCode();
                hashCode = (hashCode * 59) + this.SendRequests.GetHashCode();
                if (this.RelayIp != null)
                {
                    hashCode = (hashCode * 59) + this.RelayIp.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
