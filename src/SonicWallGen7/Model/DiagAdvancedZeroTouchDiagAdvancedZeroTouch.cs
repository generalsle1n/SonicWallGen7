/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure advanced diag Zero Touch settings.
    /// </summary>
    [DataContract(Name = "diag_advanced_zero_touch_diag_advanced_zero_touch")]
    public partial class DiagAdvancedZeroTouchDiagAdvancedZeroTouch : IEquatable<DiagAdvancedZeroTouchDiagAdvancedZeroTouch>, IValidatableObject
    {
        /// <summary>
        /// Configure the Server IP Use Mode.
        /// </summary>
        /// <value>Configure the Server IP Use Mode.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ServerIpUseModeEnum
        {
            /// <summary>
            /// Enum UseWhenUnresolved for value: use-when-unresolved
            /// </summary>
            [EnumMember(Value = "use-when-unresolved")]
            UseWhenUnresolved = 1,

            /// <summary>
            /// Enum AlwaysUse for value: always-use
            /// </summary>
            [EnumMember(Value = "always-use")]
            AlwaysUse = 2
        }


        /// <summary>
        /// Configure the Server IP Use Mode.
        /// </summary>
        /// <value>Configure the Server IP Use Mode.</value>
        [DataMember(Name = "server_ip_use_mode", EmitDefaultValue = false)]
        public ServerIpUseModeEnum? ServerIpUseMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagAdvancedZeroTouchDiagAdvancedZeroTouch" /> class.
        /// </summary>
        /// <param name="fqdnServer">Configure the Server FQDN..</param>
        /// <param name="serverIpUseMode">Configure the Server IP Use Mode..</param>
        /// <param name="serverIp">Configure the Server IP..</param>
        /// <param name="reconnectingDelay">Configure the reconnecting delay in Seconds..</param>
        /// <param name="reconnectingAttempt">Configure the reconnecting attempt..</param>
        /// <param name="skipCertificate">Enable Skip checking server certificate..</param>
        /// <param name="showDiagnosticPage">Enable the show diagnostic page..</param>
        /// <param name="debugLevel">Configure the debug level..</param>
        public DiagAdvancedZeroTouchDiagAdvancedZeroTouch(string fqdnServer = default(string), ServerIpUseModeEnum? serverIpUseMode = default(ServerIpUseModeEnum?), string serverIp = default(string), decimal reconnectingDelay = default(decimal), decimal reconnectingAttempt = default(decimal), bool skipCertificate = default(bool), bool showDiagnosticPage = default(bool), decimal debugLevel = default(decimal))
        {
            this.FqdnServer = fqdnServer;
            this.ServerIpUseMode = serverIpUseMode;
            this.ServerIp = serverIp;
            this.ReconnectingDelay = reconnectingDelay;
            this.ReconnectingAttempt = reconnectingAttempt;
            this.SkipCertificate = skipCertificate;
            this.ShowDiagnosticPage = showDiagnosticPage;
            this.DebugLevel = debugLevel;
        }

        /// <summary>
        /// Configure the Server FQDN.
        /// </summary>
        /// <value>Configure the Server FQDN.</value>
        [DataMember(Name = "fqdn_server", EmitDefaultValue = false)]
        public string FqdnServer { get; set; }

        /// <summary>
        /// Configure the Server IP.
        /// </summary>
        /// <value>Configure the Server IP.</value>
        [DataMember(Name = "server_ip", EmitDefaultValue = false)]
        public string ServerIp { get; set; }

        /// <summary>
        /// Configure the reconnecting delay in Seconds.
        /// </summary>
        /// <value>Configure the reconnecting delay in Seconds.</value>
        [DataMember(Name = "reconnecting_delay", EmitDefaultValue = false)]
        public decimal ReconnectingDelay { get; set; }

        /// <summary>
        /// Configure the reconnecting attempt.
        /// </summary>
        /// <value>Configure the reconnecting attempt.</value>
        [DataMember(Name = "reconnecting_attempt", EmitDefaultValue = false)]
        public decimal ReconnectingAttempt { get; set; }

        /// <summary>
        /// Enable Skip checking server certificate.
        /// </summary>
        /// <value>Enable Skip checking server certificate.</value>
        [DataMember(Name = "skip_certificate", EmitDefaultValue = true)]
        public bool SkipCertificate { get; set; }

        /// <summary>
        /// Enable the show diagnostic page.
        /// </summary>
        /// <value>Enable the show diagnostic page.</value>
        [DataMember(Name = "show_diagnostic_page", EmitDefaultValue = true)]
        public bool ShowDiagnosticPage { get; set; }

        /// <summary>
        /// Configure the debug level.
        /// </summary>
        /// <value>Configure the debug level.</value>
        [DataMember(Name = "debug_level", EmitDefaultValue = false)]
        public decimal DebugLevel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DiagAdvancedZeroTouchDiagAdvancedZeroTouch {\n");
            sb.Append("  FqdnServer: ").Append(FqdnServer).Append("\n");
            sb.Append("  ServerIpUseMode: ").Append(ServerIpUseMode).Append("\n");
            sb.Append("  ServerIp: ").Append(ServerIp).Append("\n");
            sb.Append("  ReconnectingDelay: ").Append(ReconnectingDelay).Append("\n");
            sb.Append("  ReconnectingAttempt: ").Append(ReconnectingAttempt).Append("\n");
            sb.Append("  SkipCertificate: ").Append(SkipCertificate).Append("\n");
            sb.Append("  ShowDiagnosticPage: ").Append(ShowDiagnosticPage).Append("\n");
            sb.Append("  DebugLevel: ").Append(DebugLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiagAdvancedZeroTouchDiagAdvancedZeroTouch);
        }

        /// <summary>
        /// Returns true if DiagAdvancedZeroTouchDiagAdvancedZeroTouch instances are equal
        /// </summary>
        /// <param name="input">Instance of DiagAdvancedZeroTouchDiagAdvancedZeroTouch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiagAdvancedZeroTouchDiagAdvancedZeroTouch input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FqdnServer == input.FqdnServer ||
                    (this.FqdnServer != null &&
                    this.FqdnServer.Equals(input.FqdnServer))
                ) && 
                (
                    this.ServerIpUseMode == input.ServerIpUseMode ||
                    this.ServerIpUseMode.Equals(input.ServerIpUseMode)
                ) && 
                (
                    this.ServerIp == input.ServerIp ||
                    (this.ServerIp != null &&
                    this.ServerIp.Equals(input.ServerIp))
                ) && 
                (
                    this.ReconnectingDelay == input.ReconnectingDelay ||
                    this.ReconnectingDelay.Equals(input.ReconnectingDelay)
                ) && 
                (
                    this.ReconnectingAttempt == input.ReconnectingAttempt ||
                    this.ReconnectingAttempt.Equals(input.ReconnectingAttempt)
                ) && 
                (
                    this.SkipCertificate == input.SkipCertificate ||
                    this.SkipCertificate.Equals(input.SkipCertificate)
                ) && 
                (
                    this.ShowDiagnosticPage == input.ShowDiagnosticPage ||
                    this.ShowDiagnosticPage.Equals(input.ShowDiagnosticPage)
                ) && 
                (
                    this.DebugLevel == input.DebugLevel ||
                    this.DebugLevel.Equals(input.DebugLevel)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FqdnServer != null)
                {
                    hashCode = (hashCode * 59) + this.FqdnServer.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ServerIpUseMode.GetHashCode();
                if (this.ServerIp != null)
                {
                    hashCode = (hashCode * 59) + this.ServerIp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReconnectingDelay.GetHashCode();
                hashCode = (hashCode * 59) + this.ReconnectingAttempt.GetHashCode();
                hashCode = (hashCode * 59) + this.SkipCertificate.GetHashCode();
                hashCode = (hashCode * 59) + this.ShowDiagnosticPage.GetHashCode();
                hashCode = (hashCode * 59) + this.DebugLevel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
