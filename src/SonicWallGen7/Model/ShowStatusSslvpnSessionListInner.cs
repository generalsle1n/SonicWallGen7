/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// ShowStatusSslvpnSessionListInner
    /// </summary>
    [DataContract(Name = "show_status_sslvpn_session_list_inner")]
    public partial class ShowStatusSslvpnSessionListInner : IEquatable<ShowStatusSslvpnSessionListInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusSslvpnSessionListInner" /> class.
        /// </summary>
        /// <param name="userName">userName.</param>
        /// <param name="clientVirtualIp">clientVirtualIp.</param>
        /// <param name="clientWanIp">clientWanIp.</param>
        /// <param name="loginTime">loginTime.</param>
        /// <param name="inactivityTime">inactivityTime.</param>
        /// <param name="loggedIn">loggedIn.</param>
        /// <param name="devProfile">devProfile.</param>
        /// <param name="spn">spn.</param>
        public ShowStatusSslvpnSessionListInner(string userName = default(string), string clientVirtualIp = default(string), string clientWanIp = default(string), string loginTime = default(string), string inactivityTime = default(string), string loggedIn = default(string), string devProfile = default(string), string spn = default(string))
        {
            this.UserName = userName;
            this.ClientVirtualIp = clientVirtualIp;
            this.ClientWanIp = clientWanIp;
            this.LoginTime = loginTime;
            this.InactivityTime = inactivityTime;
            this.LoggedIn = loggedIn;
            this.DevProfile = devProfile;
            this.Spn = spn;
        }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name = "user_name", EmitDefaultValue = false)]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets ClientVirtualIp
        /// </summary>
        [DataMember(Name = "client_virtual_ip", EmitDefaultValue = false)]
        public string ClientVirtualIp { get; set; }

        /// <summary>
        /// Gets or Sets ClientWanIp
        /// </summary>
        [DataMember(Name = "client_wan_ip", EmitDefaultValue = false)]
        public string ClientWanIp { get; set; }

        /// <summary>
        /// Gets or Sets LoginTime
        /// </summary>
        [DataMember(Name = "login_time", EmitDefaultValue = false)]
        public string LoginTime { get; set; }

        /// <summary>
        /// Gets or Sets InactivityTime
        /// </summary>
        [DataMember(Name = "inactivity_time", EmitDefaultValue = false)]
        public string InactivityTime { get; set; }

        /// <summary>
        /// Gets or Sets LoggedIn
        /// </summary>
        [DataMember(Name = "logged_in", EmitDefaultValue = false)]
        public string LoggedIn { get; set; }

        /// <summary>
        /// Gets or Sets DevProfile
        /// </summary>
        [DataMember(Name = "dev_profile", EmitDefaultValue = false)]
        public string DevProfile { get; set; }

        /// <summary>
        /// Gets or Sets Spn
        /// </summary>
        [DataMember(Name = "spn", EmitDefaultValue = false)]
        public string Spn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusSslvpnSessionListInner {\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  ClientVirtualIp: ").Append(ClientVirtualIp).Append("\n");
            sb.Append("  ClientWanIp: ").Append(ClientWanIp).Append("\n");
            sb.Append("  LoginTime: ").Append(LoginTime).Append("\n");
            sb.Append("  InactivityTime: ").Append(InactivityTime).Append("\n");
            sb.Append("  LoggedIn: ").Append(LoggedIn).Append("\n");
            sb.Append("  DevProfile: ").Append(DevProfile).Append("\n");
            sb.Append("  Spn: ").Append(Spn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusSslvpnSessionListInner);
        }

        /// <summary>
        /// Returns true if ShowStatusSslvpnSessionListInner instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusSslvpnSessionListInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusSslvpnSessionListInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.ClientVirtualIp == input.ClientVirtualIp ||
                    (this.ClientVirtualIp != null &&
                    this.ClientVirtualIp.Equals(input.ClientVirtualIp))
                ) && 
                (
                    this.ClientWanIp == input.ClientWanIp ||
                    (this.ClientWanIp != null &&
                    this.ClientWanIp.Equals(input.ClientWanIp))
                ) && 
                (
                    this.LoginTime == input.LoginTime ||
                    (this.LoginTime != null &&
                    this.LoginTime.Equals(input.LoginTime))
                ) && 
                (
                    this.InactivityTime == input.InactivityTime ||
                    (this.InactivityTime != null &&
                    this.InactivityTime.Equals(input.InactivityTime))
                ) && 
                (
                    this.LoggedIn == input.LoggedIn ||
                    (this.LoggedIn != null &&
                    this.LoggedIn.Equals(input.LoggedIn))
                ) && 
                (
                    this.DevProfile == input.DevProfile ||
                    (this.DevProfile != null &&
                    this.DevProfile.Equals(input.DevProfile))
                ) && 
                (
                    this.Spn == input.Spn ||
                    (this.Spn != null &&
                    this.Spn.Equals(input.Spn))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserName != null)
                {
                    hashCode = (hashCode * 59) + this.UserName.GetHashCode();
                }
                if (this.ClientVirtualIp != null)
                {
                    hashCode = (hashCode * 59) + this.ClientVirtualIp.GetHashCode();
                }
                if (this.ClientWanIp != null)
                {
                    hashCode = (hashCode * 59) + this.ClientWanIp.GetHashCode();
                }
                if (this.LoginTime != null)
                {
                    hashCode = (hashCode * 59) + this.LoginTime.GetHashCode();
                }
                if (this.InactivityTime != null)
                {
                    hashCode = (hashCode * 59) + this.InactivityTime.GetHashCode();
                }
                if (this.LoggedIn != null)
                {
                    hashCode = (hashCode * 59) + this.LoggedIn.GetHashCode();
                }
                if (this.DevProfile != null)
                {
                    hashCode = (hashCode * 59) + this.DevProfile.GetHashCode();
                }
                if (this.Spn != null)
                {
                    hashCode = (hashCode * 59) + this.Spn.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
