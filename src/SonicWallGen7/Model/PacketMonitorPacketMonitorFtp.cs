/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Set FTP parameters.
    /// </summary>
    [DataContract(Name = "packet_monitor_packet_monitor_ftp")]
    public partial class PacketMonitorPacketMonitorFtp : IEquatable<PacketMonitorPacketMonitorFtp>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PacketMonitorPacketMonitorFtp" /> class.
        /// </summary>
        /// <param name="server">Specify the FTP server&#39;s IP address to send the packet                capture to..</param>
        /// <param name="login">Specify the FTP server&#39;s login name to send the packet capture..</param>
        /// <param name="password">Specify the FTP server&#39;s login password to send the packet                capture..</param>
        /// <param name="directory">Specify the FTP server&#39;s directory to place the packet                capture in..</param>
        /// <param name="automatic">Enable automatically log captures to the FTP server..</param>
        /// <param name="pcapng">Enable logging of PCAPNG file..</param>
        /// <param name="html">Enable logging of HTML file along with .cap file..</param>
        public PacketMonitorPacketMonitorFtp(string server = default(string), string login = default(string), string password = default(string), string directory = default(string), bool automatic = default(bool), bool pcapng = default(bool), bool html = default(bool))
        {
            this.Server = server;
            this.Login = login;
            this.Password = password;
            this.Directory = directory;
            this.Automatic = automatic;
            this.Pcapng = pcapng;
            this.Html = html;
        }

        /// <summary>
        /// Specify the FTP server&#39;s IP address to send the packet                capture to.
        /// </summary>
        /// <value>Specify the FTP server&#39;s IP address to send the packet                capture to.</value>
        [DataMember(Name = "server", EmitDefaultValue = false)]
        public string Server { get; set; }

        /// <summary>
        /// Specify the FTP server&#39;s login name to send the packet capture.
        /// </summary>
        /// <value>Specify the FTP server&#39;s login name to send the packet capture.</value>
        [DataMember(Name = "login", EmitDefaultValue = false)]
        public string Login { get; set; }

        /// <summary>
        /// Specify the FTP server&#39;s login password to send the packet                capture.
        /// </summary>
        /// <value>Specify the FTP server&#39;s login password to send the packet                capture.</value>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Specify the FTP server&#39;s directory to place the packet                capture in.
        /// </summary>
        /// <value>Specify the FTP server&#39;s directory to place the packet                capture in.</value>
        [DataMember(Name = "directory", EmitDefaultValue = false)]
        public string Directory { get; set; }

        /// <summary>
        /// Enable automatically log captures to the FTP server.
        /// </summary>
        /// <value>Enable automatically log captures to the FTP server.</value>
        [DataMember(Name = "automatic", EmitDefaultValue = true)]
        public bool Automatic { get; set; }

        /// <summary>
        /// Enable logging of PCAPNG file.
        /// </summary>
        /// <value>Enable logging of PCAPNG file.</value>
        [DataMember(Name = "pcapng", EmitDefaultValue = true)]
        public bool Pcapng { get; set; }

        /// <summary>
        /// Enable logging of HTML file along with .cap file.
        /// </summary>
        /// <value>Enable logging of HTML file along with .cap file.</value>
        [DataMember(Name = "html", EmitDefaultValue = true)]
        public bool Html { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PacketMonitorPacketMonitorFtp {\n");
            sb.Append("  Server: ").Append(Server).Append("\n");
            sb.Append("  Login: ").Append(Login).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Directory: ").Append(Directory).Append("\n");
            sb.Append("  Automatic: ").Append(Automatic).Append("\n");
            sb.Append("  Pcapng: ").Append(Pcapng).Append("\n");
            sb.Append("  Html: ").Append(Html).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PacketMonitorPacketMonitorFtp);
        }

        /// <summary>
        /// Returns true if PacketMonitorPacketMonitorFtp instances are equal
        /// </summary>
        /// <param name="input">Instance of PacketMonitorPacketMonitorFtp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PacketMonitorPacketMonitorFtp input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Server == input.Server ||
                    (this.Server != null &&
                    this.Server.Equals(input.Server))
                ) && 
                (
                    this.Login == input.Login ||
                    (this.Login != null &&
                    this.Login.Equals(input.Login))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Directory == input.Directory ||
                    (this.Directory != null &&
                    this.Directory.Equals(input.Directory))
                ) && 
                (
                    this.Automatic == input.Automatic ||
                    this.Automatic.Equals(input.Automatic)
                ) && 
                (
                    this.Pcapng == input.Pcapng ||
                    this.Pcapng.Equals(input.Pcapng)
                ) && 
                (
                    this.Html == input.Html ||
                    this.Html.Equals(input.Html)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Server != null)
                {
                    hashCode = (hashCode * 59) + this.Server.GetHashCode();
                }
                if (this.Login != null)
                {
                    hashCode = (hashCode * 59) + this.Login.GetHashCode();
                }
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                if (this.Directory != null)
                {
                    hashCode = (hashCode * 59) + this.Directory.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Automatic.GetHashCode();
                hashCode = (hashCode * 59) + this.Pcapng.GetHashCode();
                hashCode = (hashCode * 59) + this.Html.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
