/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enable inclusion of specified URL types.
    /// </summary>
    [DataContract(Name = "appflow_appflow_include_url_types")]
    public partial class AppflowAppflowIncludeUrlTypes : IEquatable<AppflowAppflowIncludeUrlTypes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppflowAppflowIncludeUrlTypes" /> class.
        /// </summary>
        /// <param name="gifs">Gifs..</param>
        /// <param name="jpegs">Jpegs..</param>
        /// <param name="pngs">Pngs..</param>
        /// <param name="js">Js..</param>
        /// <param name="xmls">Xmls..</param>
        /// <param name="jsons">Jsons..</param>
        /// <param name="css">Css..</param>
        /// <param name="htmls">Htmls..</param>
        /// <param name="aspx">Aspx..</param>
        /// <param name="cms">Cms..</param>
        public AppflowAppflowIncludeUrlTypes(bool gifs = default(bool), bool jpegs = default(bool), bool pngs = default(bool), bool js = default(bool), bool xmls = default(bool), bool jsons = default(bool), bool css = default(bool), bool htmls = default(bool), bool aspx = default(bool), bool cms = default(bool))
        {
            this.Gifs = gifs;
            this.Jpegs = jpegs;
            this.Pngs = pngs;
            this.Js = js;
            this.Xmls = xmls;
            this.Jsons = jsons;
            this.Css = css;
            this.Htmls = htmls;
            this.Aspx = aspx;
            this.Cms = cms;
        }

        /// <summary>
        /// Gifs.
        /// </summary>
        /// <value>Gifs.</value>
        [DataMember(Name = "gifs", EmitDefaultValue = true)]
        public bool Gifs { get; set; }

        /// <summary>
        /// Jpegs.
        /// </summary>
        /// <value>Jpegs.</value>
        [DataMember(Name = "jpegs", EmitDefaultValue = true)]
        public bool Jpegs { get; set; }

        /// <summary>
        /// Pngs.
        /// </summary>
        /// <value>Pngs.</value>
        [DataMember(Name = "pngs", EmitDefaultValue = true)]
        public bool Pngs { get; set; }

        /// <summary>
        /// Js.
        /// </summary>
        /// <value>Js.</value>
        [DataMember(Name = "js", EmitDefaultValue = true)]
        public bool Js { get; set; }

        /// <summary>
        /// Xmls.
        /// </summary>
        /// <value>Xmls.</value>
        [DataMember(Name = "xmls", EmitDefaultValue = true)]
        public bool Xmls { get; set; }

        /// <summary>
        /// Jsons.
        /// </summary>
        /// <value>Jsons.</value>
        [DataMember(Name = "jsons", EmitDefaultValue = true)]
        public bool Jsons { get; set; }

        /// <summary>
        /// Css.
        /// </summary>
        /// <value>Css.</value>
        [DataMember(Name = "css", EmitDefaultValue = true)]
        public bool Css { get; set; }

        /// <summary>
        /// Htmls.
        /// </summary>
        /// <value>Htmls.</value>
        [DataMember(Name = "htmls", EmitDefaultValue = true)]
        public bool Htmls { get; set; }

        /// <summary>
        /// Aspx.
        /// </summary>
        /// <value>Aspx.</value>
        [DataMember(Name = "aspx", EmitDefaultValue = true)]
        public bool Aspx { get; set; }

        /// <summary>
        /// Cms.
        /// </summary>
        /// <value>Cms.</value>
        [DataMember(Name = "cms", EmitDefaultValue = true)]
        public bool Cms { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppflowAppflowIncludeUrlTypes {\n");
            sb.Append("  Gifs: ").Append(Gifs).Append("\n");
            sb.Append("  Jpegs: ").Append(Jpegs).Append("\n");
            sb.Append("  Pngs: ").Append(Pngs).Append("\n");
            sb.Append("  Js: ").Append(Js).Append("\n");
            sb.Append("  Xmls: ").Append(Xmls).Append("\n");
            sb.Append("  Jsons: ").Append(Jsons).Append("\n");
            sb.Append("  Css: ").Append(Css).Append("\n");
            sb.Append("  Htmls: ").Append(Htmls).Append("\n");
            sb.Append("  Aspx: ").Append(Aspx).Append("\n");
            sb.Append("  Cms: ").Append(Cms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppflowAppflowIncludeUrlTypes);
        }

        /// <summary>
        /// Returns true if AppflowAppflowIncludeUrlTypes instances are equal
        /// </summary>
        /// <param name="input">Instance of AppflowAppflowIncludeUrlTypes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppflowAppflowIncludeUrlTypes input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Gifs == input.Gifs ||
                    this.Gifs.Equals(input.Gifs)
                ) && 
                (
                    this.Jpegs == input.Jpegs ||
                    this.Jpegs.Equals(input.Jpegs)
                ) && 
                (
                    this.Pngs == input.Pngs ||
                    this.Pngs.Equals(input.Pngs)
                ) && 
                (
                    this.Js == input.Js ||
                    this.Js.Equals(input.Js)
                ) && 
                (
                    this.Xmls == input.Xmls ||
                    this.Xmls.Equals(input.Xmls)
                ) && 
                (
                    this.Jsons == input.Jsons ||
                    this.Jsons.Equals(input.Jsons)
                ) && 
                (
                    this.Css == input.Css ||
                    this.Css.Equals(input.Css)
                ) && 
                (
                    this.Htmls == input.Htmls ||
                    this.Htmls.Equals(input.Htmls)
                ) && 
                (
                    this.Aspx == input.Aspx ||
                    this.Aspx.Equals(input.Aspx)
                ) && 
                (
                    this.Cms == input.Cms ||
                    this.Cms.Equals(input.Cms)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Gifs.GetHashCode();
                hashCode = (hashCode * 59) + this.Jpegs.GetHashCode();
                hashCode = (hashCode * 59) + this.Pngs.GetHashCode();
                hashCode = (hashCode * 59) + this.Js.GetHashCode();
                hashCode = (hashCode * 59) + this.Xmls.GetHashCode();
                hashCode = (hashCode * 59) + this.Jsons.GetHashCode();
                hashCode = (hashCode * 59) + this.Css.GetHashCode();
                hashCode = (hashCode * 59) + this.Htmls.GetHashCode();
                hashCode = (hashCode * 59) + this.Aspx.GetHashCode();
                hashCode = (hashCode * 59) + this.Cms.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
