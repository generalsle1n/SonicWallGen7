/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Set packer monitor.
    /// </summary>
    [DataContract(Name = "standby_trace_standby_trace")]
    public partial class StandbyTraceStandbyTrace : IEquatable<StandbyTraceStandbyTrace>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StandbyTraceStandbyTrace" /> class.
        /// </summary>
        /// <param name="ftpServer">Ftp server..</param>
        /// <param name="bytesToCapture">Specify number of bytes to capture (per packet)..</param>
        /// <param name="ftpPassword">Specify the FTP server&#39;s login password to send the packet                capture..</param>
        /// <param name="ftpLogin">Specify the FTP server&#39;s login name to send the packet capture..</param>
        /// <param name="ftpDirectory">Specify the FTP server&#39;s directory to place the packet                capture in..</param>
        /// <param name="wrapBuffer">Enable or disable wrapping of capture buffer once full..</param>
        /// <param name="multicast">Enable or disable monitoring of intermediate multicast traffic..</param>
        /// <param name="iphelper">Enable or disable monitoring of intermediate IP helper traffic..</param>
        /// <param name="reassembled">Enable or disable monitoring of intermediate reassembled traffic..</param>
        /// <param name="fragmented">Enable or disable monitoring of intermediate fragmented traffic..</param>
        /// <param name="remoteMirrored">Enable or disable monitoring of intermediate remote mirrored traffic..</param>
        /// <param name="ipsec">Enable or disable monitoring of intermediate IPSEC traffic..</param>
        /// <param name="ssl">Enable or disable monitoring of intermediate SSL decrypted traffic..</param>
        /// <param name="restorePortsSsl">Enable or disable restore original ports on SSL decrypted traffic..</param>
        /// <param name="ftpAutomatic">Enable or disable automatically log captures to the FTP server..</param>
        /// <param name="ftpPcapng">Enable or disable logging of PCAPNG file..</param>
        /// <param name="patchedHeader">Enable or disable patched header..</param>
        /// <param name="ftpHtml">Enable or disable text output..</param>
        /// <param name="firewallGenerated">Enable or disable monitoring of firewall generated packets. (This will                bypass interface filter).</param>
        /// <param name="intermediate">Enable or disable capture intermediate packets..</param>
        /// <param name="ldapOverTls">Enable or disable monitoring of intermediate decrypted LDAP over                TLS traffic..</param>
        /// <param name="ssoAgent">Enable or disable monitoring of intermediate decrypted Single Sign On                agent messages..</param>
        /// <param name="excludeManagementHttp">Enable or disable exclude HTTP/HTTPS management traffic..</param>
        /// <param name="excludeManagementSnmp">Enable or disable exclude snmp management traffic..</param>
        /// <param name="excludeManagementSsh">Enable or disable exclude ssh management traffic..</param>
        /// <param name="excludeSyslogServers">Sylog servers..</param>
        /// <param name="excludeGmsServer">GMS server..</param>
        /// <param name="excludeEncryptedGms">Enable or disable exclusion of enrypted GMS traffic..</param>
        /// <param name="excludeInternalTrafficHa">High availability..</param>
        /// <param name="excludeInternalTrafficSonicpoint">SonicPoint..</param>
        /// <param name="captureInterfaces">Capture interfaces..</param>
        /// <param name="captureEtherTypes">Capture ether types..</param>
        /// <param name="captureIpTypes">Capture ip types..</param>
        /// <param name="captureSourceIps">Capture source ip..</param>
        /// <param name="captureDestinationIps">Capture destination ip..</param>
        /// <param name="captureDestinationPorts">Capture destination-ports..</param>
        /// <param name="captureSourcePorts">Capture source ports..</param>
        /// <param name="captureBidirectional">Capture bidirectional..</param>
        /// <param name="captureForwarded">Capture forwarded..</param>
        /// <param name="captureGenerated">Capture generated..</param>
        /// <param name="captureConsumed">Capture consumed..</param>
        /// <param name="captureDropped">Capture dropped..</param>
        /// <param name="captureBasedOnFirewallRule">Capture based on firewall rule..</param>
        /// <param name="displayInterfaces">Display interfaces..</param>
        /// <param name="displayEtherTypes">Display ether types..</param>
        /// <param name="displayIpTypes">Display ip types..</param>
        /// <param name="displaySourceIps">Display source ip..</param>
        /// <param name="displayDestinationIps">Display destination ip..</param>
        /// <param name="displayDestinationPorts">Display destination-ports..</param>
        /// <param name="displaySourcePorts">Display source ports..</param>
        /// <param name="displayBidirectional">Display bidirectional..</param>
        /// <param name="displayForwarded">Display forwarded..</param>
        /// <param name="displayGenerated">Display generated..</param>
        /// <param name="displayConsumed">Display consumed..</param>
        /// <param name="displayDropped">Display dropped..</param>
        public StandbyTraceStandbyTrace(string ftpServer = default(string), string bytesToCapture = default(string), string ftpPassword = default(string), string ftpLogin = default(string), string ftpDirectory = default(string), decimal wrapBuffer = default(decimal), decimal multicast = default(decimal), decimal iphelper = default(decimal), decimal reassembled = default(decimal), decimal fragmented = default(decimal), decimal remoteMirrored = default(decimal), decimal ipsec = default(decimal), decimal ssl = default(decimal), decimal restorePortsSsl = default(decimal), decimal ftpAutomatic = default(decimal), decimal ftpPcapng = default(decimal), decimal patchedHeader = default(decimal), decimal ftpHtml = default(decimal), decimal firewallGenerated = default(decimal), decimal intermediate = default(decimal), decimal ldapOverTls = default(decimal), decimal ssoAgent = default(decimal), decimal excludeManagementHttp = default(decimal), decimal excludeManagementSnmp = default(decimal), decimal excludeManagementSsh = default(decimal), decimal excludeSyslogServers = default(decimal), decimal excludeGmsServer = default(decimal), decimal excludeEncryptedGms = default(decimal), decimal excludeInternalTrafficHa = default(decimal), decimal excludeInternalTrafficSonicpoint = default(decimal), string captureInterfaces = default(string), string captureEtherTypes = default(string), string captureIpTypes = default(string), string captureSourceIps = default(string), string captureDestinationIps = default(string), string captureDestinationPorts = default(string), string captureSourcePorts = default(string), decimal captureBidirectional = default(decimal), decimal captureForwarded = default(decimal), decimal captureGenerated = default(decimal), decimal captureConsumed = default(decimal), decimal captureDropped = default(decimal), decimal captureBasedOnFirewallRule = default(decimal), string displayInterfaces = default(string), string displayEtherTypes = default(string), string displayIpTypes = default(string), string displaySourceIps = default(string), string displayDestinationIps = default(string), string displayDestinationPorts = default(string), string displaySourcePorts = default(string), decimal displayBidirectional = default(decimal), decimal displayForwarded = default(decimal), decimal displayGenerated = default(decimal), decimal displayConsumed = default(decimal), decimal displayDropped = default(decimal))
        {
            this.FtpServer = ftpServer;
            this.BytesToCapture = bytesToCapture;
            this.FtpPassword = ftpPassword;
            this.FtpLogin = ftpLogin;
            this.FtpDirectory = ftpDirectory;
            this.WrapBuffer = wrapBuffer;
            this.Multicast = multicast;
            this.Iphelper = iphelper;
            this.Reassembled = reassembled;
            this.Fragmented = fragmented;
            this.RemoteMirrored = remoteMirrored;
            this.Ipsec = ipsec;
            this.Ssl = ssl;
            this.RestorePortsSsl = restorePortsSsl;
            this.FtpAutomatic = ftpAutomatic;
            this.FtpPcapng = ftpPcapng;
            this.PatchedHeader = patchedHeader;
            this.FtpHtml = ftpHtml;
            this.FirewallGenerated = firewallGenerated;
            this.Intermediate = intermediate;
            this.LdapOverTls = ldapOverTls;
            this.SsoAgent = ssoAgent;
            this.ExcludeManagementHttp = excludeManagementHttp;
            this.ExcludeManagementSnmp = excludeManagementSnmp;
            this.ExcludeManagementSsh = excludeManagementSsh;
            this.ExcludeSyslogServers = excludeSyslogServers;
            this.ExcludeGmsServer = excludeGmsServer;
            this.ExcludeEncryptedGms = excludeEncryptedGms;
            this.ExcludeInternalTrafficHa = excludeInternalTrafficHa;
            this.ExcludeInternalTrafficSonicpoint = excludeInternalTrafficSonicpoint;
            this.CaptureInterfaces = captureInterfaces;
            this.CaptureEtherTypes = captureEtherTypes;
            this.CaptureIpTypes = captureIpTypes;
            this.CaptureSourceIps = captureSourceIps;
            this.CaptureDestinationIps = captureDestinationIps;
            this.CaptureDestinationPorts = captureDestinationPorts;
            this.CaptureSourcePorts = captureSourcePorts;
            this.CaptureBidirectional = captureBidirectional;
            this.CaptureForwarded = captureForwarded;
            this.CaptureGenerated = captureGenerated;
            this.CaptureConsumed = captureConsumed;
            this.CaptureDropped = captureDropped;
            this.CaptureBasedOnFirewallRule = captureBasedOnFirewallRule;
            this.DisplayInterfaces = displayInterfaces;
            this.DisplayEtherTypes = displayEtherTypes;
            this.DisplayIpTypes = displayIpTypes;
            this.DisplaySourceIps = displaySourceIps;
            this.DisplayDestinationIps = displayDestinationIps;
            this.DisplayDestinationPorts = displayDestinationPorts;
            this.DisplaySourcePorts = displaySourcePorts;
            this.DisplayBidirectional = displayBidirectional;
            this.DisplayForwarded = displayForwarded;
            this.DisplayGenerated = displayGenerated;
            this.DisplayConsumed = displayConsumed;
            this.DisplayDropped = displayDropped;
        }

        /// <summary>
        /// Ftp server.
        /// </summary>
        /// <value>Ftp server.</value>
        [DataMember(Name = "ftp_server", EmitDefaultValue = false)]
        public string FtpServer { get; set; }

        /// <summary>
        /// Specify number of bytes to capture (per packet).
        /// </summary>
        /// <value>Specify number of bytes to capture (per packet).</value>
        [DataMember(Name = "bytes_to_capture", EmitDefaultValue = false)]
        public string BytesToCapture { get; set; }

        /// <summary>
        /// Specify the FTP server&#39;s login password to send the packet                capture.
        /// </summary>
        /// <value>Specify the FTP server&#39;s login password to send the packet                capture.</value>
        [DataMember(Name = "ftp_password", EmitDefaultValue = false)]
        public string FtpPassword { get; set; }

        /// <summary>
        /// Specify the FTP server&#39;s login name to send the packet capture.
        /// </summary>
        /// <value>Specify the FTP server&#39;s login name to send the packet capture.</value>
        [DataMember(Name = "ftp_login", EmitDefaultValue = false)]
        public string FtpLogin { get; set; }

        /// <summary>
        /// Specify the FTP server&#39;s directory to place the packet                capture in.
        /// </summary>
        /// <value>Specify the FTP server&#39;s directory to place the packet                capture in.</value>
        [DataMember(Name = "ftp_directory", EmitDefaultValue = false)]
        public string FtpDirectory { get; set; }

        /// <summary>
        /// Enable or disable wrapping of capture buffer once full.
        /// </summary>
        /// <value>Enable or disable wrapping of capture buffer once full.</value>
        [DataMember(Name = "wrap_buffer", EmitDefaultValue = false)]
        public decimal WrapBuffer { get; set; }

        /// <summary>
        /// Enable or disable monitoring of intermediate multicast traffic.
        /// </summary>
        /// <value>Enable or disable monitoring of intermediate multicast traffic.</value>
        [DataMember(Name = "multicast", EmitDefaultValue = false)]
        public decimal Multicast { get; set; }

        /// <summary>
        /// Enable or disable monitoring of intermediate IP helper traffic.
        /// </summary>
        /// <value>Enable or disable monitoring of intermediate IP helper traffic.</value>
        [DataMember(Name = "iphelper", EmitDefaultValue = false)]
        public decimal Iphelper { get; set; }

        /// <summary>
        /// Enable or disable monitoring of intermediate reassembled traffic.
        /// </summary>
        /// <value>Enable or disable monitoring of intermediate reassembled traffic.</value>
        [DataMember(Name = "reassembled", EmitDefaultValue = false)]
        public decimal Reassembled { get; set; }

        /// <summary>
        /// Enable or disable monitoring of intermediate fragmented traffic.
        /// </summary>
        /// <value>Enable or disable monitoring of intermediate fragmented traffic.</value>
        [DataMember(Name = "fragmented", EmitDefaultValue = false)]
        public decimal Fragmented { get; set; }

        /// <summary>
        /// Enable or disable monitoring of intermediate remote mirrored traffic.
        /// </summary>
        /// <value>Enable or disable monitoring of intermediate remote mirrored traffic.</value>
        [DataMember(Name = "remote_mirrored", EmitDefaultValue = false)]
        public decimal RemoteMirrored { get; set; }

        /// <summary>
        /// Enable or disable monitoring of intermediate IPSEC traffic.
        /// </summary>
        /// <value>Enable or disable monitoring of intermediate IPSEC traffic.</value>
        [DataMember(Name = "ipsec", EmitDefaultValue = false)]
        public decimal Ipsec { get; set; }

        /// <summary>
        /// Enable or disable monitoring of intermediate SSL decrypted traffic.
        /// </summary>
        /// <value>Enable or disable monitoring of intermediate SSL decrypted traffic.</value>
        [DataMember(Name = "ssl", EmitDefaultValue = false)]
        public decimal Ssl { get; set; }

        /// <summary>
        /// Enable or disable restore original ports on SSL decrypted traffic.
        /// </summary>
        /// <value>Enable or disable restore original ports on SSL decrypted traffic.</value>
        [DataMember(Name = "restore_ports_ssl", EmitDefaultValue = false)]
        public decimal RestorePortsSsl { get; set; }

        /// <summary>
        /// Enable or disable automatically log captures to the FTP server.
        /// </summary>
        /// <value>Enable or disable automatically log captures to the FTP server.</value>
        [DataMember(Name = "ftp_automatic", EmitDefaultValue = false)]
        public decimal FtpAutomatic { get; set; }

        /// <summary>
        /// Enable or disable logging of PCAPNG file.
        /// </summary>
        /// <value>Enable or disable logging of PCAPNG file.</value>
        [DataMember(Name = "ftp_pcapng", EmitDefaultValue = false)]
        public decimal FtpPcapng { get; set; }

        /// <summary>
        /// Enable or disable patched header.
        /// </summary>
        /// <value>Enable or disable patched header.</value>
        [DataMember(Name = "patched_header", EmitDefaultValue = false)]
        public decimal PatchedHeader { get; set; }

        /// <summary>
        /// Enable or disable text output.
        /// </summary>
        /// <value>Enable or disable text output.</value>
        [DataMember(Name = "ftp_html", EmitDefaultValue = false)]
        public decimal FtpHtml { get; set; }

        /// <summary>
        /// Enable or disable monitoring of firewall generated packets. (This will                bypass interface filter)
        /// </summary>
        /// <value>Enable or disable monitoring of firewall generated packets. (This will                bypass interface filter)</value>
        [DataMember(Name = "firewall_generated", EmitDefaultValue = false)]
        public decimal FirewallGenerated { get; set; }

        /// <summary>
        /// Enable or disable capture intermediate packets.
        /// </summary>
        /// <value>Enable or disable capture intermediate packets.</value>
        [DataMember(Name = "intermediate", EmitDefaultValue = false)]
        public decimal Intermediate { get; set; }

        /// <summary>
        /// Enable or disable monitoring of intermediate decrypted LDAP over                TLS traffic.
        /// </summary>
        /// <value>Enable or disable monitoring of intermediate decrypted LDAP over                TLS traffic.</value>
        [DataMember(Name = "ldap_over_tls", EmitDefaultValue = false)]
        public decimal LdapOverTls { get; set; }

        /// <summary>
        /// Enable or disable monitoring of intermediate decrypted Single Sign On                agent messages.
        /// </summary>
        /// <value>Enable or disable monitoring of intermediate decrypted Single Sign On                agent messages.</value>
        [DataMember(Name = "sso_agent", EmitDefaultValue = false)]
        public decimal SsoAgent { get; set; }

        /// <summary>
        /// Enable or disable exclude HTTP/HTTPS management traffic.
        /// </summary>
        /// <value>Enable or disable exclude HTTP/HTTPS management traffic.</value>
        [DataMember(Name = "exclude_management_http", EmitDefaultValue = false)]
        public decimal ExcludeManagementHttp { get; set; }

        /// <summary>
        /// Enable or disable exclude snmp management traffic.
        /// </summary>
        /// <value>Enable or disable exclude snmp management traffic.</value>
        [DataMember(Name = "exclude_management_snmp", EmitDefaultValue = false)]
        public decimal ExcludeManagementSnmp { get; set; }

        /// <summary>
        /// Enable or disable exclude ssh management traffic.
        /// </summary>
        /// <value>Enable or disable exclude ssh management traffic.</value>
        [DataMember(Name = "exclude_management_ssh", EmitDefaultValue = false)]
        public decimal ExcludeManagementSsh { get; set; }

        /// <summary>
        /// Sylog servers.
        /// </summary>
        /// <value>Sylog servers.</value>
        [DataMember(Name = "exclude_syslog_servers", EmitDefaultValue = false)]
        public decimal ExcludeSyslogServers { get; set; }

        /// <summary>
        /// GMS server.
        /// </summary>
        /// <value>GMS server.</value>
        [DataMember(Name = "exclude_gms_server", EmitDefaultValue = false)]
        public decimal ExcludeGmsServer { get; set; }

        /// <summary>
        /// Enable or disable exclusion of enrypted GMS traffic.
        /// </summary>
        /// <value>Enable or disable exclusion of enrypted GMS traffic.</value>
        [DataMember(Name = "exclude_encrypted_gms", EmitDefaultValue = false)]
        public decimal ExcludeEncryptedGms { get; set; }

        /// <summary>
        /// High availability.
        /// </summary>
        /// <value>High availability.</value>
        [DataMember(Name = "exclude_internal_traffic_ha", EmitDefaultValue = false)]
        public decimal ExcludeInternalTrafficHa { get; set; }

        /// <summary>
        /// SonicPoint.
        /// </summary>
        /// <value>SonicPoint.</value>
        [DataMember(Name = "exclude_internal_traffic_sonicpoint", EmitDefaultValue = false)]
        public decimal ExcludeInternalTrafficSonicpoint { get; set; }

        /// <summary>
        /// Capture interfaces.
        /// </summary>
        /// <value>Capture interfaces.</value>
        [DataMember(Name = "capture_interfaces", EmitDefaultValue = false)]
        public string CaptureInterfaces { get; set; }

        /// <summary>
        /// Capture ether types.
        /// </summary>
        /// <value>Capture ether types.</value>
        [DataMember(Name = "capture_ether_types", EmitDefaultValue = false)]
        public string CaptureEtherTypes { get; set; }

        /// <summary>
        /// Capture ip types.
        /// </summary>
        /// <value>Capture ip types.</value>
        [DataMember(Name = "capture_ip_types", EmitDefaultValue = false)]
        public string CaptureIpTypes { get; set; }

        /// <summary>
        /// Capture source ip.
        /// </summary>
        /// <value>Capture source ip.</value>
        [DataMember(Name = "capture_source_ips", EmitDefaultValue = false)]
        public string CaptureSourceIps { get; set; }

        /// <summary>
        /// Capture destination ip.
        /// </summary>
        /// <value>Capture destination ip.</value>
        [DataMember(Name = "capture_destination_ips", EmitDefaultValue = false)]
        public string CaptureDestinationIps { get; set; }

        /// <summary>
        /// Capture destination-ports.
        /// </summary>
        /// <value>Capture destination-ports.</value>
        [DataMember(Name = "capture_destination_ports", EmitDefaultValue = false)]
        public string CaptureDestinationPorts { get; set; }

        /// <summary>
        /// Capture source ports.
        /// </summary>
        /// <value>Capture source ports.</value>
        [DataMember(Name = "capture_source_ports", EmitDefaultValue = false)]
        public string CaptureSourcePorts { get; set; }

        /// <summary>
        /// Capture bidirectional.
        /// </summary>
        /// <value>Capture bidirectional.</value>
        [DataMember(Name = "capture_bidirectional", EmitDefaultValue = false)]
        public decimal CaptureBidirectional { get; set; }

        /// <summary>
        /// Capture forwarded.
        /// </summary>
        /// <value>Capture forwarded.</value>
        [DataMember(Name = "capture_forwarded", EmitDefaultValue = false)]
        public decimal CaptureForwarded { get; set; }

        /// <summary>
        /// Capture generated.
        /// </summary>
        /// <value>Capture generated.</value>
        [DataMember(Name = "capture_generated", EmitDefaultValue = false)]
        public decimal CaptureGenerated { get; set; }

        /// <summary>
        /// Capture consumed.
        /// </summary>
        /// <value>Capture consumed.</value>
        [DataMember(Name = "capture_consumed", EmitDefaultValue = false)]
        public decimal CaptureConsumed { get; set; }

        /// <summary>
        /// Capture dropped.
        /// </summary>
        /// <value>Capture dropped.</value>
        [DataMember(Name = "capture_dropped", EmitDefaultValue = false)]
        public decimal CaptureDropped { get; set; }

        /// <summary>
        /// Capture based on firewall rule.
        /// </summary>
        /// <value>Capture based on firewall rule.</value>
        [DataMember(Name = "capture_based_on_firewall_rule", EmitDefaultValue = false)]
        public decimal CaptureBasedOnFirewallRule { get; set; }

        /// <summary>
        /// Display interfaces.
        /// </summary>
        /// <value>Display interfaces.</value>
        [DataMember(Name = "display_interfaces", EmitDefaultValue = false)]
        public string DisplayInterfaces { get; set; }

        /// <summary>
        /// Display ether types.
        /// </summary>
        /// <value>Display ether types.</value>
        [DataMember(Name = "display_ether_types", EmitDefaultValue = false)]
        public string DisplayEtherTypes { get; set; }

        /// <summary>
        /// Display ip types.
        /// </summary>
        /// <value>Display ip types.</value>
        [DataMember(Name = "display_ip_types", EmitDefaultValue = false)]
        public string DisplayIpTypes { get; set; }

        /// <summary>
        /// Display source ip.
        /// </summary>
        /// <value>Display source ip.</value>
        [DataMember(Name = "display_source_ips", EmitDefaultValue = false)]
        public string DisplaySourceIps { get; set; }

        /// <summary>
        /// Display destination ip.
        /// </summary>
        /// <value>Display destination ip.</value>
        [DataMember(Name = "display_destination_ips", EmitDefaultValue = false)]
        public string DisplayDestinationIps { get; set; }

        /// <summary>
        /// Display destination-ports.
        /// </summary>
        /// <value>Display destination-ports.</value>
        [DataMember(Name = "display_destination_ports", EmitDefaultValue = false)]
        public string DisplayDestinationPorts { get; set; }

        /// <summary>
        /// Display source ports.
        /// </summary>
        /// <value>Display source ports.</value>
        [DataMember(Name = "display_source_ports", EmitDefaultValue = false)]
        public string DisplaySourcePorts { get; set; }

        /// <summary>
        /// Display bidirectional.
        /// </summary>
        /// <value>Display bidirectional.</value>
        [DataMember(Name = "display_bidirectional", EmitDefaultValue = false)]
        public decimal DisplayBidirectional { get; set; }

        /// <summary>
        /// Display forwarded.
        /// </summary>
        /// <value>Display forwarded.</value>
        [DataMember(Name = "display_forwarded", EmitDefaultValue = false)]
        public decimal DisplayForwarded { get; set; }

        /// <summary>
        /// Display generated.
        /// </summary>
        /// <value>Display generated.</value>
        [DataMember(Name = "display_generated", EmitDefaultValue = false)]
        public decimal DisplayGenerated { get; set; }

        /// <summary>
        /// Display consumed.
        /// </summary>
        /// <value>Display consumed.</value>
        [DataMember(Name = "display_consumed", EmitDefaultValue = false)]
        public decimal DisplayConsumed { get; set; }

        /// <summary>
        /// Display dropped.
        /// </summary>
        /// <value>Display dropped.</value>
        [DataMember(Name = "display_dropped", EmitDefaultValue = false)]
        public decimal DisplayDropped { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StandbyTraceStandbyTrace {\n");
            sb.Append("  FtpServer: ").Append(FtpServer).Append("\n");
            sb.Append("  BytesToCapture: ").Append(BytesToCapture).Append("\n");
            sb.Append("  FtpPassword: ").Append(FtpPassword).Append("\n");
            sb.Append("  FtpLogin: ").Append(FtpLogin).Append("\n");
            sb.Append("  FtpDirectory: ").Append(FtpDirectory).Append("\n");
            sb.Append("  WrapBuffer: ").Append(WrapBuffer).Append("\n");
            sb.Append("  Multicast: ").Append(Multicast).Append("\n");
            sb.Append("  Iphelper: ").Append(Iphelper).Append("\n");
            sb.Append("  Reassembled: ").Append(Reassembled).Append("\n");
            sb.Append("  Fragmented: ").Append(Fragmented).Append("\n");
            sb.Append("  RemoteMirrored: ").Append(RemoteMirrored).Append("\n");
            sb.Append("  Ipsec: ").Append(Ipsec).Append("\n");
            sb.Append("  Ssl: ").Append(Ssl).Append("\n");
            sb.Append("  RestorePortsSsl: ").Append(RestorePortsSsl).Append("\n");
            sb.Append("  FtpAutomatic: ").Append(FtpAutomatic).Append("\n");
            sb.Append("  FtpPcapng: ").Append(FtpPcapng).Append("\n");
            sb.Append("  PatchedHeader: ").Append(PatchedHeader).Append("\n");
            sb.Append("  FtpHtml: ").Append(FtpHtml).Append("\n");
            sb.Append("  FirewallGenerated: ").Append(FirewallGenerated).Append("\n");
            sb.Append("  Intermediate: ").Append(Intermediate).Append("\n");
            sb.Append("  LdapOverTls: ").Append(LdapOverTls).Append("\n");
            sb.Append("  SsoAgent: ").Append(SsoAgent).Append("\n");
            sb.Append("  ExcludeManagementHttp: ").Append(ExcludeManagementHttp).Append("\n");
            sb.Append("  ExcludeManagementSnmp: ").Append(ExcludeManagementSnmp).Append("\n");
            sb.Append("  ExcludeManagementSsh: ").Append(ExcludeManagementSsh).Append("\n");
            sb.Append("  ExcludeSyslogServers: ").Append(ExcludeSyslogServers).Append("\n");
            sb.Append("  ExcludeGmsServer: ").Append(ExcludeGmsServer).Append("\n");
            sb.Append("  ExcludeEncryptedGms: ").Append(ExcludeEncryptedGms).Append("\n");
            sb.Append("  ExcludeInternalTrafficHa: ").Append(ExcludeInternalTrafficHa).Append("\n");
            sb.Append("  ExcludeInternalTrafficSonicpoint: ").Append(ExcludeInternalTrafficSonicpoint).Append("\n");
            sb.Append("  CaptureInterfaces: ").Append(CaptureInterfaces).Append("\n");
            sb.Append("  CaptureEtherTypes: ").Append(CaptureEtherTypes).Append("\n");
            sb.Append("  CaptureIpTypes: ").Append(CaptureIpTypes).Append("\n");
            sb.Append("  CaptureSourceIps: ").Append(CaptureSourceIps).Append("\n");
            sb.Append("  CaptureDestinationIps: ").Append(CaptureDestinationIps).Append("\n");
            sb.Append("  CaptureDestinationPorts: ").Append(CaptureDestinationPorts).Append("\n");
            sb.Append("  CaptureSourcePorts: ").Append(CaptureSourcePorts).Append("\n");
            sb.Append("  CaptureBidirectional: ").Append(CaptureBidirectional).Append("\n");
            sb.Append("  CaptureForwarded: ").Append(CaptureForwarded).Append("\n");
            sb.Append("  CaptureGenerated: ").Append(CaptureGenerated).Append("\n");
            sb.Append("  CaptureConsumed: ").Append(CaptureConsumed).Append("\n");
            sb.Append("  CaptureDropped: ").Append(CaptureDropped).Append("\n");
            sb.Append("  CaptureBasedOnFirewallRule: ").Append(CaptureBasedOnFirewallRule).Append("\n");
            sb.Append("  DisplayInterfaces: ").Append(DisplayInterfaces).Append("\n");
            sb.Append("  DisplayEtherTypes: ").Append(DisplayEtherTypes).Append("\n");
            sb.Append("  DisplayIpTypes: ").Append(DisplayIpTypes).Append("\n");
            sb.Append("  DisplaySourceIps: ").Append(DisplaySourceIps).Append("\n");
            sb.Append("  DisplayDestinationIps: ").Append(DisplayDestinationIps).Append("\n");
            sb.Append("  DisplayDestinationPorts: ").Append(DisplayDestinationPorts).Append("\n");
            sb.Append("  DisplaySourcePorts: ").Append(DisplaySourcePorts).Append("\n");
            sb.Append("  DisplayBidirectional: ").Append(DisplayBidirectional).Append("\n");
            sb.Append("  DisplayForwarded: ").Append(DisplayForwarded).Append("\n");
            sb.Append("  DisplayGenerated: ").Append(DisplayGenerated).Append("\n");
            sb.Append("  DisplayConsumed: ").Append(DisplayConsumed).Append("\n");
            sb.Append("  DisplayDropped: ").Append(DisplayDropped).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StandbyTraceStandbyTrace);
        }

        /// <summary>
        /// Returns true if StandbyTraceStandbyTrace instances are equal
        /// </summary>
        /// <param name="input">Instance of StandbyTraceStandbyTrace to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StandbyTraceStandbyTrace input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FtpServer == input.FtpServer ||
                    (this.FtpServer != null &&
                    this.FtpServer.Equals(input.FtpServer))
                ) && 
                (
                    this.BytesToCapture == input.BytesToCapture ||
                    (this.BytesToCapture != null &&
                    this.BytesToCapture.Equals(input.BytesToCapture))
                ) && 
                (
                    this.FtpPassword == input.FtpPassword ||
                    (this.FtpPassword != null &&
                    this.FtpPassword.Equals(input.FtpPassword))
                ) && 
                (
                    this.FtpLogin == input.FtpLogin ||
                    (this.FtpLogin != null &&
                    this.FtpLogin.Equals(input.FtpLogin))
                ) && 
                (
                    this.FtpDirectory == input.FtpDirectory ||
                    (this.FtpDirectory != null &&
                    this.FtpDirectory.Equals(input.FtpDirectory))
                ) && 
                (
                    this.WrapBuffer == input.WrapBuffer ||
                    this.WrapBuffer.Equals(input.WrapBuffer)
                ) && 
                (
                    this.Multicast == input.Multicast ||
                    this.Multicast.Equals(input.Multicast)
                ) && 
                (
                    this.Iphelper == input.Iphelper ||
                    this.Iphelper.Equals(input.Iphelper)
                ) && 
                (
                    this.Reassembled == input.Reassembled ||
                    this.Reassembled.Equals(input.Reassembled)
                ) && 
                (
                    this.Fragmented == input.Fragmented ||
                    this.Fragmented.Equals(input.Fragmented)
                ) && 
                (
                    this.RemoteMirrored == input.RemoteMirrored ||
                    this.RemoteMirrored.Equals(input.RemoteMirrored)
                ) && 
                (
                    this.Ipsec == input.Ipsec ||
                    this.Ipsec.Equals(input.Ipsec)
                ) && 
                (
                    this.Ssl == input.Ssl ||
                    this.Ssl.Equals(input.Ssl)
                ) && 
                (
                    this.RestorePortsSsl == input.RestorePortsSsl ||
                    this.RestorePortsSsl.Equals(input.RestorePortsSsl)
                ) && 
                (
                    this.FtpAutomatic == input.FtpAutomatic ||
                    this.FtpAutomatic.Equals(input.FtpAutomatic)
                ) && 
                (
                    this.FtpPcapng == input.FtpPcapng ||
                    this.FtpPcapng.Equals(input.FtpPcapng)
                ) && 
                (
                    this.PatchedHeader == input.PatchedHeader ||
                    this.PatchedHeader.Equals(input.PatchedHeader)
                ) && 
                (
                    this.FtpHtml == input.FtpHtml ||
                    this.FtpHtml.Equals(input.FtpHtml)
                ) && 
                (
                    this.FirewallGenerated == input.FirewallGenerated ||
                    this.FirewallGenerated.Equals(input.FirewallGenerated)
                ) && 
                (
                    this.Intermediate == input.Intermediate ||
                    this.Intermediate.Equals(input.Intermediate)
                ) && 
                (
                    this.LdapOverTls == input.LdapOverTls ||
                    this.LdapOverTls.Equals(input.LdapOverTls)
                ) && 
                (
                    this.SsoAgent == input.SsoAgent ||
                    this.SsoAgent.Equals(input.SsoAgent)
                ) && 
                (
                    this.ExcludeManagementHttp == input.ExcludeManagementHttp ||
                    this.ExcludeManagementHttp.Equals(input.ExcludeManagementHttp)
                ) && 
                (
                    this.ExcludeManagementSnmp == input.ExcludeManagementSnmp ||
                    this.ExcludeManagementSnmp.Equals(input.ExcludeManagementSnmp)
                ) && 
                (
                    this.ExcludeManagementSsh == input.ExcludeManagementSsh ||
                    this.ExcludeManagementSsh.Equals(input.ExcludeManagementSsh)
                ) && 
                (
                    this.ExcludeSyslogServers == input.ExcludeSyslogServers ||
                    this.ExcludeSyslogServers.Equals(input.ExcludeSyslogServers)
                ) && 
                (
                    this.ExcludeGmsServer == input.ExcludeGmsServer ||
                    this.ExcludeGmsServer.Equals(input.ExcludeGmsServer)
                ) && 
                (
                    this.ExcludeEncryptedGms == input.ExcludeEncryptedGms ||
                    this.ExcludeEncryptedGms.Equals(input.ExcludeEncryptedGms)
                ) && 
                (
                    this.ExcludeInternalTrafficHa == input.ExcludeInternalTrafficHa ||
                    this.ExcludeInternalTrafficHa.Equals(input.ExcludeInternalTrafficHa)
                ) && 
                (
                    this.ExcludeInternalTrafficSonicpoint == input.ExcludeInternalTrafficSonicpoint ||
                    this.ExcludeInternalTrafficSonicpoint.Equals(input.ExcludeInternalTrafficSonicpoint)
                ) && 
                (
                    this.CaptureInterfaces == input.CaptureInterfaces ||
                    (this.CaptureInterfaces != null &&
                    this.CaptureInterfaces.Equals(input.CaptureInterfaces))
                ) && 
                (
                    this.CaptureEtherTypes == input.CaptureEtherTypes ||
                    (this.CaptureEtherTypes != null &&
                    this.CaptureEtherTypes.Equals(input.CaptureEtherTypes))
                ) && 
                (
                    this.CaptureIpTypes == input.CaptureIpTypes ||
                    (this.CaptureIpTypes != null &&
                    this.CaptureIpTypes.Equals(input.CaptureIpTypes))
                ) && 
                (
                    this.CaptureSourceIps == input.CaptureSourceIps ||
                    (this.CaptureSourceIps != null &&
                    this.CaptureSourceIps.Equals(input.CaptureSourceIps))
                ) && 
                (
                    this.CaptureDestinationIps == input.CaptureDestinationIps ||
                    (this.CaptureDestinationIps != null &&
                    this.CaptureDestinationIps.Equals(input.CaptureDestinationIps))
                ) && 
                (
                    this.CaptureDestinationPorts == input.CaptureDestinationPorts ||
                    (this.CaptureDestinationPorts != null &&
                    this.CaptureDestinationPorts.Equals(input.CaptureDestinationPorts))
                ) && 
                (
                    this.CaptureSourcePorts == input.CaptureSourcePorts ||
                    (this.CaptureSourcePorts != null &&
                    this.CaptureSourcePorts.Equals(input.CaptureSourcePorts))
                ) && 
                (
                    this.CaptureBidirectional == input.CaptureBidirectional ||
                    this.CaptureBidirectional.Equals(input.CaptureBidirectional)
                ) && 
                (
                    this.CaptureForwarded == input.CaptureForwarded ||
                    this.CaptureForwarded.Equals(input.CaptureForwarded)
                ) && 
                (
                    this.CaptureGenerated == input.CaptureGenerated ||
                    this.CaptureGenerated.Equals(input.CaptureGenerated)
                ) && 
                (
                    this.CaptureConsumed == input.CaptureConsumed ||
                    this.CaptureConsumed.Equals(input.CaptureConsumed)
                ) && 
                (
                    this.CaptureDropped == input.CaptureDropped ||
                    this.CaptureDropped.Equals(input.CaptureDropped)
                ) && 
                (
                    this.CaptureBasedOnFirewallRule == input.CaptureBasedOnFirewallRule ||
                    this.CaptureBasedOnFirewallRule.Equals(input.CaptureBasedOnFirewallRule)
                ) && 
                (
                    this.DisplayInterfaces == input.DisplayInterfaces ||
                    (this.DisplayInterfaces != null &&
                    this.DisplayInterfaces.Equals(input.DisplayInterfaces))
                ) && 
                (
                    this.DisplayEtherTypes == input.DisplayEtherTypes ||
                    (this.DisplayEtherTypes != null &&
                    this.DisplayEtherTypes.Equals(input.DisplayEtherTypes))
                ) && 
                (
                    this.DisplayIpTypes == input.DisplayIpTypes ||
                    (this.DisplayIpTypes != null &&
                    this.DisplayIpTypes.Equals(input.DisplayIpTypes))
                ) && 
                (
                    this.DisplaySourceIps == input.DisplaySourceIps ||
                    (this.DisplaySourceIps != null &&
                    this.DisplaySourceIps.Equals(input.DisplaySourceIps))
                ) && 
                (
                    this.DisplayDestinationIps == input.DisplayDestinationIps ||
                    (this.DisplayDestinationIps != null &&
                    this.DisplayDestinationIps.Equals(input.DisplayDestinationIps))
                ) && 
                (
                    this.DisplayDestinationPorts == input.DisplayDestinationPorts ||
                    (this.DisplayDestinationPorts != null &&
                    this.DisplayDestinationPorts.Equals(input.DisplayDestinationPorts))
                ) && 
                (
                    this.DisplaySourcePorts == input.DisplaySourcePorts ||
                    (this.DisplaySourcePorts != null &&
                    this.DisplaySourcePorts.Equals(input.DisplaySourcePorts))
                ) && 
                (
                    this.DisplayBidirectional == input.DisplayBidirectional ||
                    this.DisplayBidirectional.Equals(input.DisplayBidirectional)
                ) && 
                (
                    this.DisplayForwarded == input.DisplayForwarded ||
                    this.DisplayForwarded.Equals(input.DisplayForwarded)
                ) && 
                (
                    this.DisplayGenerated == input.DisplayGenerated ||
                    this.DisplayGenerated.Equals(input.DisplayGenerated)
                ) && 
                (
                    this.DisplayConsumed == input.DisplayConsumed ||
                    this.DisplayConsumed.Equals(input.DisplayConsumed)
                ) && 
                (
                    this.DisplayDropped == input.DisplayDropped ||
                    this.DisplayDropped.Equals(input.DisplayDropped)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FtpServer != null)
                {
                    hashCode = (hashCode * 59) + this.FtpServer.GetHashCode();
                }
                if (this.BytesToCapture != null)
                {
                    hashCode = (hashCode * 59) + this.BytesToCapture.GetHashCode();
                }
                if (this.FtpPassword != null)
                {
                    hashCode = (hashCode * 59) + this.FtpPassword.GetHashCode();
                }
                if (this.FtpLogin != null)
                {
                    hashCode = (hashCode * 59) + this.FtpLogin.GetHashCode();
                }
                if (this.FtpDirectory != null)
                {
                    hashCode = (hashCode * 59) + this.FtpDirectory.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.WrapBuffer.GetHashCode();
                hashCode = (hashCode * 59) + this.Multicast.GetHashCode();
                hashCode = (hashCode * 59) + this.Iphelper.GetHashCode();
                hashCode = (hashCode * 59) + this.Reassembled.GetHashCode();
                hashCode = (hashCode * 59) + this.Fragmented.GetHashCode();
                hashCode = (hashCode * 59) + this.RemoteMirrored.GetHashCode();
                hashCode = (hashCode * 59) + this.Ipsec.GetHashCode();
                hashCode = (hashCode * 59) + this.Ssl.GetHashCode();
                hashCode = (hashCode * 59) + this.RestorePortsSsl.GetHashCode();
                hashCode = (hashCode * 59) + this.FtpAutomatic.GetHashCode();
                hashCode = (hashCode * 59) + this.FtpPcapng.GetHashCode();
                hashCode = (hashCode * 59) + this.PatchedHeader.GetHashCode();
                hashCode = (hashCode * 59) + this.FtpHtml.GetHashCode();
                hashCode = (hashCode * 59) + this.FirewallGenerated.GetHashCode();
                hashCode = (hashCode * 59) + this.Intermediate.GetHashCode();
                hashCode = (hashCode * 59) + this.LdapOverTls.GetHashCode();
                hashCode = (hashCode * 59) + this.SsoAgent.GetHashCode();
                hashCode = (hashCode * 59) + this.ExcludeManagementHttp.GetHashCode();
                hashCode = (hashCode * 59) + this.ExcludeManagementSnmp.GetHashCode();
                hashCode = (hashCode * 59) + this.ExcludeManagementSsh.GetHashCode();
                hashCode = (hashCode * 59) + this.ExcludeSyslogServers.GetHashCode();
                hashCode = (hashCode * 59) + this.ExcludeGmsServer.GetHashCode();
                hashCode = (hashCode * 59) + this.ExcludeEncryptedGms.GetHashCode();
                hashCode = (hashCode * 59) + this.ExcludeInternalTrafficHa.GetHashCode();
                hashCode = (hashCode * 59) + this.ExcludeInternalTrafficSonicpoint.GetHashCode();
                if (this.CaptureInterfaces != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureInterfaces.GetHashCode();
                }
                if (this.CaptureEtherTypes != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureEtherTypes.GetHashCode();
                }
                if (this.CaptureIpTypes != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureIpTypes.GetHashCode();
                }
                if (this.CaptureSourceIps != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureSourceIps.GetHashCode();
                }
                if (this.CaptureDestinationIps != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureDestinationIps.GetHashCode();
                }
                if (this.CaptureDestinationPorts != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureDestinationPorts.GetHashCode();
                }
                if (this.CaptureSourcePorts != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureSourcePorts.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CaptureBidirectional.GetHashCode();
                hashCode = (hashCode * 59) + this.CaptureForwarded.GetHashCode();
                hashCode = (hashCode * 59) + this.CaptureGenerated.GetHashCode();
                hashCode = (hashCode * 59) + this.CaptureConsumed.GetHashCode();
                hashCode = (hashCode * 59) + this.CaptureDropped.GetHashCode();
                hashCode = (hashCode * 59) + this.CaptureBasedOnFirewallRule.GetHashCode();
                if (this.DisplayInterfaces != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayInterfaces.GetHashCode();
                }
                if (this.DisplayEtherTypes != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayEtherTypes.GetHashCode();
                }
                if (this.DisplayIpTypes != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayIpTypes.GetHashCode();
                }
                if (this.DisplaySourceIps != null)
                {
                    hashCode = (hashCode * 59) + this.DisplaySourceIps.GetHashCode();
                }
                if (this.DisplayDestinationIps != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayDestinationIps.GetHashCode();
                }
                if (this.DisplayDestinationPorts != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayDestinationPorts.GetHashCode();
                }
                if (this.DisplaySourcePorts != null)
                {
                    hashCode = (hashCode * 59) + this.DisplaySourcePorts.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DisplayBidirectional.GetHashCode();
                hashCode = (hashCode * 59) + this.DisplayForwarded.GetHashCode();
                hashCode = (hashCode * 59) + this.DisplayGenerated.GetHashCode();
                hashCode = (hashCode * 59) + this.DisplayConsumed.GetHashCode();
                hashCode = (hashCode * 59) + this.DisplayDropped.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
