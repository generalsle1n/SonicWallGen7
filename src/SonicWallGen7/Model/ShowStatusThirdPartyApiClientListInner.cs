/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// ShowStatusThirdPartyApiClientListInner
    /// </summary>
    [DataContract(Name = "show_status_third_party_api_client_list_inner")]
    public partial class ShowStatusThirdPartyApiClientListInner : IEquatable<ShowStatusThirdPartyApiClientListInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusThirdPartyApiClientListInner" /> class.
        /// </summary>
        /// <param name="varClient">varClient.</param>
        /// <param name="ipAddress">ipAddress.</param>
        /// <param name="status">status.</param>
        /// <param name="timeSinceLastRequest">timeSinceLastRequest.</param>
        /// <param name="totalRequestsReceived">totalRequestsReceived.</param>
        /// <param name="ignoredRequests">ignoredRequests.</param>
        /// <param name="requestsThatFaieldAuth">requestsThatFaieldAuth.</param>
        /// <param name="totalPostRequestsReceived">totalPostRequestsReceived.</param>
        /// <param name="badPostRequestsReceived">badPostRequestsReceived.</param>
        /// <param name="totalDeleteRequestsReceived">totalDeleteRequestsReceived.</param>
        /// <param name="badDeleteRequestsReceived">badDeleteRequestsReceived.</param>
        /// <param name="totalOptionsRequestsReceived">totalOptionsRequestsReceived.</param>
        /// <param name="badOptionsRequestsReceived">badOptionsRequestsReceived.</param>
        /// <param name="otherUnsupportedRequests">otherUnsupportedRequests.</param>
        /// <param name="successfulUserLogins">successfulUserLogins.</param>
        /// <param name="timesSameUserWasAlreadyLoggedIn">timesSameUserWasAlreadyLoggedIn.</param>
        /// <param name="failedUserLogins">failedUserLogins.</param>
        /// <param name="userLogouts">userLogouts.</param>
        /// <param name="usersNotFoundErrorsWithDeleteRequests">usersNotFoundErrorsWithDeleteRequests.</param>
        public ShowStatusThirdPartyApiClientListInner(string varClient = default(string), string ipAddress = default(string), string status = default(string), string timeSinceLastRequest = default(string), string totalRequestsReceived = default(string), string ignoredRequests = default(string), string requestsThatFaieldAuth = default(string), string totalPostRequestsReceived = default(string), string badPostRequestsReceived = default(string), string totalDeleteRequestsReceived = default(string), string badDeleteRequestsReceived = default(string), string totalOptionsRequestsReceived = default(string), string badOptionsRequestsReceived = default(string), string otherUnsupportedRequests = default(string), string successfulUserLogins = default(string), string timesSameUserWasAlreadyLoggedIn = default(string), string failedUserLogins = default(string), string userLogouts = default(string), string usersNotFoundErrorsWithDeleteRequests = default(string))
        {
            this.VarClient = varClient;
            this.IpAddress = ipAddress;
            this.Status = status;
            this.TimeSinceLastRequest = timeSinceLastRequest;
            this.TotalRequestsReceived = totalRequestsReceived;
            this.IgnoredRequests = ignoredRequests;
            this.RequestsThatFaieldAuth = requestsThatFaieldAuth;
            this.TotalPostRequestsReceived = totalPostRequestsReceived;
            this.BadPostRequestsReceived = badPostRequestsReceived;
            this.TotalDeleteRequestsReceived = totalDeleteRequestsReceived;
            this.BadDeleteRequestsReceived = badDeleteRequestsReceived;
            this.TotalOptionsRequestsReceived = totalOptionsRequestsReceived;
            this.BadOptionsRequestsReceived = badOptionsRequestsReceived;
            this.OtherUnsupportedRequests = otherUnsupportedRequests;
            this.SuccessfulUserLogins = successfulUserLogins;
            this.TimesSameUserWasAlreadyLoggedIn = timesSameUserWasAlreadyLoggedIn;
            this.FailedUserLogins = failedUserLogins;
            this.UserLogouts = userLogouts;
            this.UsersNotFoundErrorsWithDeleteRequests = usersNotFoundErrorsWithDeleteRequests;
        }

        /// <summary>
        /// Gets or Sets VarClient
        /// </summary>
        [DataMember(Name = "Client", EmitDefaultValue = false)]
        public string VarClient { get; set; }

        /// <summary>
        /// Gets or Sets IpAddress
        /// </summary>
        [DataMember(Name = "ip_address", EmitDefaultValue = false)]
        public string IpAddress { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets TimeSinceLastRequest
        /// </summary>
        [DataMember(Name = "time_since_last_request", EmitDefaultValue = false)]
        public string TimeSinceLastRequest { get; set; }

        /// <summary>
        /// Gets or Sets TotalRequestsReceived
        /// </summary>
        [DataMember(Name = "total_requests_received", EmitDefaultValue = false)]
        public string TotalRequestsReceived { get; set; }

        /// <summary>
        /// Gets or Sets IgnoredRequests
        /// </summary>
        [DataMember(Name = "ignored_requests", EmitDefaultValue = false)]
        public string IgnoredRequests { get; set; }

        /// <summary>
        /// Gets or Sets RequestsThatFaieldAuth
        /// </summary>
        [DataMember(Name = "requests_that_faield_auth", EmitDefaultValue = false)]
        public string RequestsThatFaieldAuth { get; set; }

        /// <summary>
        /// Gets or Sets TotalPostRequestsReceived
        /// </summary>
        [DataMember(Name = "total_post_requests_received", EmitDefaultValue = false)]
        public string TotalPostRequestsReceived { get; set; }

        /// <summary>
        /// Gets or Sets BadPostRequestsReceived
        /// </summary>
        [DataMember(Name = "bad_post_requests_received", EmitDefaultValue = false)]
        public string BadPostRequestsReceived { get; set; }

        /// <summary>
        /// Gets or Sets TotalDeleteRequestsReceived
        /// </summary>
        [DataMember(Name = "total_delete_requests_received", EmitDefaultValue = false)]
        public string TotalDeleteRequestsReceived { get; set; }

        /// <summary>
        /// Gets or Sets BadDeleteRequestsReceived
        /// </summary>
        [DataMember(Name = "bad_delete_requests_received", EmitDefaultValue = false)]
        public string BadDeleteRequestsReceived { get; set; }

        /// <summary>
        /// Gets or Sets TotalOptionsRequestsReceived
        /// </summary>
        [DataMember(Name = "total_options_requests_received", EmitDefaultValue = false)]
        public string TotalOptionsRequestsReceived { get; set; }

        /// <summary>
        /// Gets or Sets BadOptionsRequestsReceived
        /// </summary>
        [DataMember(Name = "bad_options_requests_received", EmitDefaultValue = false)]
        public string BadOptionsRequestsReceived { get; set; }

        /// <summary>
        /// Gets or Sets OtherUnsupportedRequests
        /// </summary>
        [DataMember(Name = "other_unsupported_requests", EmitDefaultValue = false)]
        public string OtherUnsupportedRequests { get; set; }

        /// <summary>
        /// Gets or Sets SuccessfulUserLogins
        /// </summary>
        [DataMember(Name = "successful_user_logins", EmitDefaultValue = false)]
        public string SuccessfulUserLogins { get; set; }

        /// <summary>
        /// Gets or Sets TimesSameUserWasAlreadyLoggedIn
        /// </summary>
        [DataMember(Name = "times_same_user_was_already_logged_in", EmitDefaultValue = false)]
        public string TimesSameUserWasAlreadyLoggedIn { get; set; }

        /// <summary>
        /// Gets or Sets FailedUserLogins
        /// </summary>
        [DataMember(Name = "failed_user_logins", EmitDefaultValue = false)]
        public string FailedUserLogins { get; set; }

        /// <summary>
        /// Gets or Sets UserLogouts
        /// </summary>
        [DataMember(Name = "user_logouts", EmitDefaultValue = false)]
        public string UserLogouts { get; set; }

        /// <summary>
        /// Gets or Sets UsersNotFoundErrorsWithDeleteRequests
        /// </summary>
        [DataMember(Name = "users_not_found_errors_with_delete_requests", EmitDefaultValue = false)]
        public string UsersNotFoundErrorsWithDeleteRequests { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusThirdPartyApiClientListInner {\n");
            sb.Append("  VarClient: ").Append(VarClient).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TimeSinceLastRequest: ").Append(TimeSinceLastRequest).Append("\n");
            sb.Append("  TotalRequestsReceived: ").Append(TotalRequestsReceived).Append("\n");
            sb.Append("  IgnoredRequests: ").Append(IgnoredRequests).Append("\n");
            sb.Append("  RequestsThatFaieldAuth: ").Append(RequestsThatFaieldAuth).Append("\n");
            sb.Append("  TotalPostRequestsReceived: ").Append(TotalPostRequestsReceived).Append("\n");
            sb.Append("  BadPostRequestsReceived: ").Append(BadPostRequestsReceived).Append("\n");
            sb.Append("  TotalDeleteRequestsReceived: ").Append(TotalDeleteRequestsReceived).Append("\n");
            sb.Append("  BadDeleteRequestsReceived: ").Append(BadDeleteRequestsReceived).Append("\n");
            sb.Append("  TotalOptionsRequestsReceived: ").Append(TotalOptionsRequestsReceived).Append("\n");
            sb.Append("  BadOptionsRequestsReceived: ").Append(BadOptionsRequestsReceived).Append("\n");
            sb.Append("  OtherUnsupportedRequests: ").Append(OtherUnsupportedRequests).Append("\n");
            sb.Append("  SuccessfulUserLogins: ").Append(SuccessfulUserLogins).Append("\n");
            sb.Append("  TimesSameUserWasAlreadyLoggedIn: ").Append(TimesSameUserWasAlreadyLoggedIn).Append("\n");
            sb.Append("  FailedUserLogins: ").Append(FailedUserLogins).Append("\n");
            sb.Append("  UserLogouts: ").Append(UserLogouts).Append("\n");
            sb.Append("  UsersNotFoundErrorsWithDeleteRequests: ").Append(UsersNotFoundErrorsWithDeleteRequests).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusThirdPartyApiClientListInner);
        }

        /// <summary>
        /// Returns true if ShowStatusThirdPartyApiClientListInner instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusThirdPartyApiClientListInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusThirdPartyApiClientListInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VarClient == input.VarClient ||
                    (this.VarClient != null &&
                    this.VarClient.Equals(input.VarClient))
                ) && 
                (
                    this.IpAddress == input.IpAddress ||
                    (this.IpAddress != null &&
                    this.IpAddress.Equals(input.IpAddress))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TimeSinceLastRequest == input.TimeSinceLastRequest ||
                    (this.TimeSinceLastRequest != null &&
                    this.TimeSinceLastRequest.Equals(input.TimeSinceLastRequest))
                ) && 
                (
                    this.TotalRequestsReceived == input.TotalRequestsReceived ||
                    (this.TotalRequestsReceived != null &&
                    this.TotalRequestsReceived.Equals(input.TotalRequestsReceived))
                ) && 
                (
                    this.IgnoredRequests == input.IgnoredRequests ||
                    (this.IgnoredRequests != null &&
                    this.IgnoredRequests.Equals(input.IgnoredRequests))
                ) && 
                (
                    this.RequestsThatFaieldAuth == input.RequestsThatFaieldAuth ||
                    (this.RequestsThatFaieldAuth != null &&
                    this.RequestsThatFaieldAuth.Equals(input.RequestsThatFaieldAuth))
                ) && 
                (
                    this.TotalPostRequestsReceived == input.TotalPostRequestsReceived ||
                    (this.TotalPostRequestsReceived != null &&
                    this.TotalPostRequestsReceived.Equals(input.TotalPostRequestsReceived))
                ) && 
                (
                    this.BadPostRequestsReceived == input.BadPostRequestsReceived ||
                    (this.BadPostRequestsReceived != null &&
                    this.BadPostRequestsReceived.Equals(input.BadPostRequestsReceived))
                ) && 
                (
                    this.TotalDeleteRequestsReceived == input.TotalDeleteRequestsReceived ||
                    (this.TotalDeleteRequestsReceived != null &&
                    this.TotalDeleteRequestsReceived.Equals(input.TotalDeleteRequestsReceived))
                ) && 
                (
                    this.BadDeleteRequestsReceived == input.BadDeleteRequestsReceived ||
                    (this.BadDeleteRequestsReceived != null &&
                    this.BadDeleteRequestsReceived.Equals(input.BadDeleteRequestsReceived))
                ) && 
                (
                    this.TotalOptionsRequestsReceived == input.TotalOptionsRequestsReceived ||
                    (this.TotalOptionsRequestsReceived != null &&
                    this.TotalOptionsRequestsReceived.Equals(input.TotalOptionsRequestsReceived))
                ) && 
                (
                    this.BadOptionsRequestsReceived == input.BadOptionsRequestsReceived ||
                    (this.BadOptionsRequestsReceived != null &&
                    this.BadOptionsRequestsReceived.Equals(input.BadOptionsRequestsReceived))
                ) && 
                (
                    this.OtherUnsupportedRequests == input.OtherUnsupportedRequests ||
                    (this.OtherUnsupportedRequests != null &&
                    this.OtherUnsupportedRequests.Equals(input.OtherUnsupportedRequests))
                ) && 
                (
                    this.SuccessfulUserLogins == input.SuccessfulUserLogins ||
                    (this.SuccessfulUserLogins != null &&
                    this.SuccessfulUserLogins.Equals(input.SuccessfulUserLogins))
                ) && 
                (
                    this.TimesSameUserWasAlreadyLoggedIn == input.TimesSameUserWasAlreadyLoggedIn ||
                    (this.TimesSameUserWasAlreadyLoggedIn != null &&
                    this.TimesSameUserWasAlreadyLoggedIn.Equals(input.TimesSameUserWasAlreadyLoggedIn))
                ) && 
                (
                    this.FailedUserLogins == input.FailedUserLogins ||
                    (this.FailedUserLogins != null &&
                    this.FailedUserLogins.Equals(input.FailedUserLogins))
                ) && 
                (
                    this.UserLogouts == input.UserLogouts ||
                    (this.UserLogouts != null &&
                    this.UserLogouts.Equals(input.UserLogouts))
                ) && 
                (
                    this.UsersNotFoundErrorsWithDeleteRequests == input.UsersNotFoundErrorsWithDeleteRequests ||
                    (this.UsersNotFoundErrorsWithDeleteRequests != null &&
                    this.UsersNotFoundErrorsWithDeleteRequests.Equals(input.UsersNotFoundErrorsWithDeleteRequests))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VarClient != null)
                {
                    hashCode = (hashCode * 59) + this.VarClient.GetHashCode();
                }
                if (this.IpAddress != null)
                {
                    hashCode = (hashCode * 59) + this.IpAddress.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.TimeSinceLastRequest != null)
                {
                    hashCode = (hashCode * 59) + this.TimeSinceLastRequest.GetHashCode();
                }
                if (this.TotalRequestsReceived != null)
                {
                    hashCode = (hashCode * 59) + this.TotalRequestsReceived.GetHashCode();
                }
                if (this.IgnoredRequests != null)
                {
                    hashCode = (hashCode * 59) + this.IgnoredRequests.GetHashCode();
                }
                if (this.RequestsThatFaieldAuth != null)
                {
                    hashCode = (hashCode * 59) + this.RequestsThatFaieldAuth.GetHashCode();
                }
                if (this.TotalPostRequestsReceived != null)
                {
                    hashCode = (hashCode * 59) + this.TotalPostRequestsReceived.GetHashCode();
                }
                if (this.BadPostRequestsReceived != null)
                {
                    hashCode = (hashCode * 59) + this.BadPostRequestsReceived.GetHashCode();
                }
                if (this.TotalDeleteRequestsReceived != null)
                {
                    hashCode = (hashCode * 59) + this.TotalDeleteRequestsReceived.GetHashCode();
                }
                if (this.BadDeleteRequestsReceived != null)
                {
                    hashCode = (hashCode * 59) + this.BadDeleteRequestsReceived.GetHashCode();
                }
                if (this.TotalOptionsRequestsReceived != null)
                {
                    hashCode = (hashCode * 59) + this.TotalOptionsRequestsReceived.GetHashCode();
                }
                if (this.BadOptionsRequestsReceived != null)
                {
                    hashCode = (hashCode * 59) + this.BadOptionsRequestsReceived.GetHashCode();
                }
                if (this.OtherUnsupportedRequests != null)
                {
                    hashCode = (hashCode * 59) + this.OtherUnsupportedRequests.GetHashCode();
                }
                if (this.SuccessfulUserLogins != null)
                {
                    hashCode = (hashCode * 59) + this.SuccessfulUserLogins.GetHashCode();
                }
                if (this.TimesSameUserWasAlreadyLoggedIn != null)
                {
                    hashCode = (hashCode * 59) + this.TimesSameUserWasAlreadyLoggedIn.GetHashCode();
                }
                if (this.FailedUserLogins != null)
                {
                    hashCode = (hashCode * 59) + this.FailedUserLogins.GetHashCode();
                }
                if (this.UserLogouts != null)
                {
                    hashCode = (hashCode * 59) + this.UserLogouts.GetHashCode();
                }
                if (this.UsersNotFoundErrorsWithDeleteRequests != null)
                {
                    hashCode = (hashCode * 59) + this.UsersNotFoundErrorsWithDeleteRequests.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
