/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Block port forwarding.
    /// </summary>
    [DataContract(Name = "dpi_ssh_dpi_ssh_block_port_forwarding")]
    public partial class DpiSshDpiSshBlockPortForwarding : IEquatable<DpiSshDpiSshBlockPortForwarding>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DpiSshDpiSshBlockPortForwarding" /> class.
        /// </summary>
        /// <param name="global">Block port forwarding..</param>
        /// <param name="local">Block local port forwarding..</param>
        /// <param name="remote">Block remote port forwarding..</param>
        /// <param name="x11">Block X11 forwarding..</param>
        public DpiSshDpiSshBlockPortForwarding(bool global = default(bool), bool local = default(bool), bool remote = default(bool), bool x11 = default(bool))
        {
            this.Global = global;
            this.Local = local;
            this.Remote = remote;
            this.X11 = x11;
        }

        /// <summary>
        /// Block port forwarding.
        /// </summary>
        /// <value>Block port forwarding.</value>
        [DataMember(Name = "global", EmitDefaultValue = true)]
        public bool Global { get; set; }

        /// <summary>
        /// Block local port forwarding.
        /// </summary>
        /// <value>Block local port forwarding.</value>
        [DataMember(Name = "local", EmitDefaultValue = true)]
        public bool Local { get; set; }

        /// <summary>
        /// Block remote port forwarding.
        /// </summary>
        /// <value>Block remote port forwarding.</value>
        [DataMember(Name = "remote", EmitDefaultValue = true)]
        public bool Remote { get; set; }

        /// <summary>
        /// Block X11 forwarding.
        /// </summary>
        /// <value>Block X11 forwarding.</value>
        [DataMember(Name = "x11", EmitDefaultValue = true)]
        public bool X11 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DpiSshDpiSshBlockPortForwarding {\n");
            sb.Append("  Global: ").Append(Global).Append("\n");
            sb.Append("  Local: ").Append(Local).Append("\n");
            sb.Append("  Remote: ").Append(Remote).Append("\n");
            sb.Append("  X11: ").Append(X11).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DpiSshDpiSshBlockPortForwarding);
        }

        /// <summary>
        /// Returns true if DpiSshDpiSshBlockPortForwarding instances are equal
        /// </summary>
        /// <param name="input">Instance of DpiSshDpiSshBlockPortForwarding to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DpiSshDpiSshBlockPortForwarding input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Global == input.Global ||
                    this.Global.Equals(input.Global)
                ) && 
                (
                    this.Local == input.Local ||
                    this.Local.Equals(input.Local)
                ) && 
                (
                    this.Remote == input.Remote ||
                    this.Remote.Equals(input.Remote)
                ) && 
                (
                    this.X11 == input.X11 ||
                    this.X11.Equals(input.X11)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Global.GetHashCode();
                hashCode = (hashCode * 59) + this.Local.GetHashCode();
                hashCode = (hashCode * 59) + this.Remote.GetHashCode();
                hashCode = (hashCode * 59) + this.X11.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
