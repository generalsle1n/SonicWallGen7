/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Search for a user or a group.
    /// </summary>
    [DataContract(Name = "user_ldap_test_basic_search_user_ldap_test_type_ldap_search_basic")]
    public partial class UserLdapTestBasicSearchUserLdapTestTypeLdapSearchBasic : IEquatable<UserLdapTestBasicSearchUserLdapTestTypeLdapSearchBasic>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserLdapTestBasicSearchUserLdapTestTypeLdapSearchBasic" /> class.
        /// </summary>
        /// <param name="searchContent">Set the search content for a user or a group..</param>
        /// <param name="use">use.</param>
        public UserLdapTestBasicSearchUserLdapTestTypeLdapSearchBasic(string searchContent = default(string), UserLdapTestBasicSearchUserLdapTestTypeLdapSearchBasicUse use = default(UserLdapTestBasicSearchUserLdapTestTypeLdapSearchBasicUse))
        {
            this.SearchContent = searchContent;
            this.Use = use;
        }

        /// <summary>
        /// Set the search content for a user or a group.
        /// </summary>
        /// <value>Set the search content for a user or a group.</value>
        [DataMember(Name = "searchContent", EmitDefaultValue = false)]
        public string SearchContent { get; set; }

        /// <summary>
        /// Gets or Sets Use
        /// </summary>
        [DataMember(Name = "use", EmitDefaultValue = false)]
        public UserLdapTestBasicSearchUserLdapTestTypeLdapSearchBasicUse Use { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserLdapTestBasicSearchUserLdapTestTypeLdapSearchBasic {\n");
            sb.Append("  SearchContent: ").Append(SearchContent).Append("\n");
            sb.Append("  Use: ").Append(Use).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserLdapTestBasicSearchUserLdapTestTypeLdapSearchBasic);
        }

        /// <summary>
        /// Returns true if UserLdapTestBasicSearchUserLdapTestTypeLdapSearchBasic instances are equal
        /// </summary>
        /// <param name="input">Instance of UserLdapTestBasicSearchUserLdapTestTypeLdapSearchBasic to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserLdapTestBasicSearchUserLdapTestTypeLdapSearchBasic input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SearchContent == input.SearchContent ||
                    (this.SearchContent != null &&
                    this.SearchContent.Equals(input.SearchContent))
                ) && 
                (
                    this.Use == input.Use ||
                    (this.Use != null &&
                    this.Use.Equals(input.Use))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SearchContent != null)
                {
                    hashCode = (hashCode * 59) + this.SearchContent.GetHashCode();
                }
                if (this.Use != null)
                {
                    hashCode = (hashCode * 59) + this.Use.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
