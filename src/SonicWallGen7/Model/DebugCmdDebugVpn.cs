/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// VPN debug settings.
    /// </summary>
    [DataContract(Name = "debug_cmd_debug_vpn")]
    public partial class DebugCmdDebugVpn : IEquatable<DebugCmdDebugVpn>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DebugCmdDebugVpn" /> class.
        /// </summary>
        /// <param name="config">Set debug level(0 ~ 10). * Set to null to represent an unconfigured state..</param>
        /// <param name="general">Set general debug level(0 ~ 10). * Set to null to represent an unconfigured state..</param>
        /// <param name="addNewline">Enable match level..</param>
        /// <param name="matchLevel">Enable match level..</param>
        /// <param name="vpn">vpn.</param>
        /// <param name="ipsec">ipsec.</param>
        /// <param name="ike">ike.</param>
        /// <param name="module">module.</param>
        public DebugCmdDebugVpn(decimal? config = default(decimal?), decimal? general = default(decimal?), bool addNewline = default(bool), bool matchLevel = default(bool), DebugCmdDebugVpnVpn vpn = default(DebugCmdDebugVpnVpn), DebugCmdDebugVpnIpsec ipsec = default(DebugCmdDebugVpnIpsec), DebugCmdDebugVpnIke ike = default(DebugCmdDebugVpnIke), DebugCmdDebugVpnModule module = default(DebugCmdDebugVpnModule))
        {
            this.Config = config;
            this.General = general;
            this.AddNewline = addNewline;
            this.MatchLevel = matchLevel;
            this.Vpn = vpn;
            this.Ipsec = ipsec;
            this.Ike = ike;
            this.Module = module;
        }

        /// <summary>
        /// Set debug level(0 ~ 10). * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Set debug level(0 ~ 10). * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "config", EmitDefaultValue = true)]
        public decimal? Config { get; set; }

        /// <summary>
        /// Set general debug level(0 ~ 10). * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Set general debug level(0 ~ 10). * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "general", EmitDefaultValue = true)]
        public decimal? General { get; set; }

        /// <summary>
        /// Enable match level.
        /// </summary>
        /// <value>Enable match level.</value>
        [DataMember(Name = "add_newline", EmitDefaultValue = true)]
        public bool AddNewline { get; set; }

        /// <summary>
        /// Enable match level.
        /// </summary>
        /// <value>Enable match level.</value>
        [DataMember(Name = "match_level", EmitDefaultValue = true)]
        public bool MatchLevel { get; set; }

        /// <summary>
        /// Gets or Sets Vpn
        /// </summary>
        [DataMember(Name = "vpn", EmitDefaultValue = false)]
        public DebugCmdDebugVpnVpn Vpn { get; set; }

        /// <summary>
        /// Gets or Sets Ipsec
        /// </summary>
        [DataMember(Name = "ipsec", EmitDefaultValue = false)]
        public DebugCmdDebugVpnIpsec Ipsec { get; set; }

        /// <summary>
        /// Gets or Sets Ike
        /// </summary>
        [DataMember(Name = "ike", EmitDefaultValue = false)]
        public DebugCmdDebugVpnIke Ike { get; set; }

        /// <summary>
        /// Gets or Sets Module
        /// </summary>
        [DataMember(Name = "module", EmitDefaultValue = false)]
        public DebugCmdDebugVpnModule Module { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DebugCmdDebugVpn {\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("  General: ").Append(General).Append("\n");
            sb.Append("  AddNewline: ").Append(AddNewline).Append("\n");
            sb.Append("  MatchLevel: ").Append(MatchLevel).Append("\n");
            sb.Append("  Vpn: ").Append(Vpn).Append("\n");
            sb.Append("  Ipsec: ").Append(Ipsec).Append("\n");
            sb.Append("  Ike: ").Append(Ike).Append("\n");
            sb.Append("  Module: ").Append(Module).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DebugCmdDebugVpn);
        }

        /// <summary>
        /// Returns true if DebugCmdDebugVpn instances are equal
        /// </summary>
        /// <param name="input">Instance of DebugCmdDebugVpn to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DebugCmdDebugVpn input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Config == input.Config ||
                    (this.Config != null &&
                    this.Config.Equals(input.Config))
                ) && 
                (
                    this.General == input.General ||
                    (this.General != null &&
                    this.General.Equals(input.General))
                ) && 
                (
                    this.AddNewline == input.AddNewline ||
                    this.AddNewline.Equals(input.AddNewline)
                ) && 
                (
                    this.MatchLevel == input.MatchLevel ||
                    this.MatchLevel.Equals(input.MatchLevel)
                ) && 
                (
                    this.Vpn == input.Vpn ||
                    (this.Vpn != null &&
                    this.Vpn.Equals(input.Vpn))
                ) && 
                (
                    this.Ipsec == input.Ipsec ||
                    (this.Ipsec != null &&
                    this.Ipsec.Equals(input.Ipsec))
                ) && 
                (
                    this.Ike == input.Ike ||
                    (this.Ike != null &&
                    this.Ike.Equals(input.Ike))
                ) && 
                (
                    this.Module == input.Module ||
                    (this.Module != null &&
                    this.Module.Equals(input.Module))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Config != null)
                {
                    hashCode = (hashCode * 59) + this.Config.GetHashCode();
                }
                if (this.General != null)
                {
                    hashCode = (hashCode * 59) + this.General.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AddNewline.GetHashCode();
                hashCode = (hashCode * 59) + this.MatchLevel.GetHashCode();
                if (this.Vpn != null)
                {
                    hashCode = (hashCode * 59) + this.Vpn.GetHashCode();
                }
                if (this.Ipsec != null)
                {
                    hashCode = (hashCode * 59) + this.Ipsec.GetHashCode();
                }
                if (this.Ike != null)
                {
                    hashCode = (hashCode * 59) + this.Ike.GetHashCode();
                }
                if (this.Module != null)
                {
                    hashCode = (hashCode * 59) + this.Module.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
