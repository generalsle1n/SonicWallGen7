/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// User SSO third party api client settings.
    /// </summary>
    [DataContract(Name = "user_sso_3rd_party_api_client")]
    public partial class UserSso3rdPartyApiClient : IEquatable<UserSso3rdPartyApiClient>, IValidatableObject
    {
        /// <summary>
        /// Set authentication type for API client.
        /// </summary>
        /// <value>Set authentication type for API client.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AuthenticationTypeEnum
        {
            /// <summary>
            /// Enum SharedSecret for value: shared-secret
            /// </summary>
            [EnumMember(Value = "shared-secret")]
            SharedSecret = 1,

            /// <summary>
            /// Enum Certificate for value: certificate
            /// </summary>
            [EnumMember(Value = "certificate")]
            Certificate = 2,

            /// <summary>
            /// Enum Both for value: both
            /// </summary>
            [EnumMember(Value = "both")]
            Both = 3
        }


        /// <summary>
        /// Set authentication type for API client.
        /// </summary>
        /// <value>Set authentication type for API client.</value>
        [DataMember(Name = "authentication_type", EmitDefaultValue = false)]
        public AuthenticationTypeEnum? AuthenticationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserSso3rdPartyApiClient" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserSso3rdPartyApiClient() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserSso3rdPartyApiClient" /> class.
        /// </summary>
        /// <param name="host">Set the 3rd party api client&#39;s host name or IP address. (required).</param>
        /// <param name="enable">Enable the SSO third party API client..</param>
        /// <param name="authenticationType">Set authentication type for API client..</param>
        /// <param name="partition">Set the API client&#39;s user partition..</param>
        /// <param name="sharedSecret">Set the shared secret for switch administration..</param>
        /// <param name="securityLevel">securityLevel.</param>
        /// <param name="replayPrevention">Enable CSRF/replay prevention..</param>
        /// <param name="originRestriction">originRestriction.</param>
        /// <param name="persistentConnections">Enable allow persistent connections..</param>
        public UserSso3rdPartyApiClient(string host = default(string), bool enable = default(bool), AuthenticationTypeEnum? authenticationType = default(AuthenticationTypeEnum?), string partition = default(string), string sharedSecret = default(string), UserSso3rdPartyApiClientSecurityLevel securityLevel = default(UserSso3rdPartyApiClientSecurityLevel), bool replayPrevention = default(bool), UserSso3rdPartyApiClientOriginRestriction originRestriction = default(UserSso3rdPartyApiClientOriginRestriction), bool persistentConnections = default(bool))
        {
            // to ensure "host" is required (not null)
            if (host == null)
            {
                throw new ArgumentNullException("host is a required property for UserSso3rdPartyApiClient and cannot be null");
            }
            this.Host = host;
            this.Enable = enable;
            this.AuthenticationType = authenticationType;
            this.Partition = partition;
            this.SharedSecret = sharedSecret;
            this.SecurityLevel = securityLevel;
            this.ReplayPrevention = replayPrevention;
            this.OriginRestriction = originRestriction;
            this.PersistentConnections = persistentConnections;
        }

        /// <summary>
        /// Set the 3rd party api client&#39;s host name or IP address.
        /// </summary>
        /// <value>Set the 3rd party api client&#39;s host name or IP address.</value>
        [DataMember(Name = "host", IsRequired = true, EmitDefaultValue = true)]
        public string Host { get; set; }

        /// <summary>
        /// Enable the SSO third party API client.
        /// </summary>
        /// <value>Enable the SSO third party API client.</value>
        [DataMember(Name = "enable", EmitDefaultValue = true)]
        public bool Enable { get; set; }

        /// <summary>
        /// Set the API client&#39;s user partition.
        /// </summary>
        /// <value>Set the API client&#39;s user partition.</value>
        [DataMember(Name = "partition", EmitDefaultValue = false)]
        public string Partition { get; set; }

        /// <summary>
        /// Set the shared secret for switch administration.
        /// </summary>
        /// <value>Set the shared secret for switch administration.</value>
        [DataMember(Name = "shared_secret", EmitDefaultValue = false)]
        public string SharedSecret { get; set; }

        /// <summary>
        /// Gets or Sets SecurityLevel
        /// </summary>
        [DataMember(Name = "security_level", EmitDefaultValue = false)]
        public UserSso3rdPartyApiClientSecurityLevel SecurityLevel { get; set; }

        /// <summary>
        /// Enable CSRF/replay prevention.
        /// </summary>
        /// <value>Enable CSRF/replay prevention.</value>
        [DataMember(Name = "replay_prevention", EmitDefaultValue = true)]
        public bool ReplayPrevention { get; set; }

        /// <summary>
        /// Gets or Sets OriginRestriction
        /// </summary>
        [DataMember(Name = "origin_restriction", EmitDefaultValue = true)]
        public UserSso3rdPartyApiClientOriginRestriction OriginRestriction { get; set; }

        /// <summary>
        /// Enable allow persistent connections.
        /// </summary>
        /// <value>Enable allow persistent connections.</value>
        [DataMember(Name = "persistent_connections", EmitDefaultValue = true)]
        public bool PersistentConnections { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserSso3rdPartyApiClient {\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  AuthenticationType: ").Append(AuthenticationType).Append("\n");
            sb.Append("  Partition: ").Append(Partition).Append("\n");
            sb.Append("  SharedSecret: ").Append(SharedSecret).Append("\n");
            sb.Append("  SecurityLevel: ").Append(SecurityLevel).Append("\n");
            sb.Append("  ReplayPrevention: ").Append(ReplayPrevention).Append("\n");
            sb.Append("  OriginRestriction: ").Append(OriginRestriction).Append("\n");
            sb.Append("  PersistentConnections: ").Append(PersistentConnections).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserSso3rdPartyApiClient);
        }

        /// <summary>
        /// Returns true if UserSso3rdPartyApiClient instances are equal
        /// </summary>
        /// <param name="input">Instance of UserSso3rdPartyApiClient to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserSso3rdPartyApiClient input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Host == input.Host ||
                    (this.Host != null &&
                    this.Host.Equals(input.Host))
                ) && 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.AuthenticationType == input.AuthenticationType ||
                    this.AuthenticationType.Equals(input.AuthenticationType)
                ) && 
                (
                    this.Partition == input.Partition ||
                    (this.Partition != null &&
                    this.Partition.Equals(input.Partition))
                ) && 
                (
                    this.SharedSecret == input.SharedSecret ||
                    (this.SharedSecret != null &&
                    this.SharedSecret.Equals(input.SharedSecret))
                ) && 
                (
                    this.SecurityLevel == input.SecurityLevel ||
                    (this.SecurityLevel != null &&
                    this.SecurityLevel.Equals(input.SecurityLevel))
                ) && 
                (
                    this.ReplayPrevention == input.ReplayPrevention ||
                    this.ReplayPrevention.Equals(input.ReplayPrevention)
                ) && 
                (
                    this.OriginRestriction == input.OriginRestriction ||
                    (this.OriginRestriction != null &&
                    this.OriginRestriction.Equals(input.OriginRestriction))
                ) && 
                (
                    this.PersistentConnections == input.PersistentConnections ||
                    this.PersistentConnections.Equals(input.PersistentConnections)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Host != null)
                {
                    hashCode = (hashCode * 59) + this.Host.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Enable.GetHashCode();
                hashCode = (hashCode * 59) + this.AuthenticationType.GetHashCode();
                if (this.Partition != null)
                {
                    hashCode = (hashCode * 59) + this.Partition.GetHashCode();
                }
                if (this.SharedSecret != null)
                {
                    hashCode = (hashCode * 59) + this.SharedSecret.GetHashCode();
                }
                if (this.SecurityLevel != null)
                {
                    hashCode = (hashCode * 59) + this.SecurityLevel.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReplayPrevention.GetHashCode();
                if (this.OriginRestriction != null)
                {
                    hashCode = (hashCode * 59) + this.OriginRestriction.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PersistentConnections.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
