/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Define attributes of user objects.
    /// </summary>
    [DataContract(Name = "user_ldap_server_user_attribute")]
    public partial class UserLdapServerUserAttribute : IEquatable<UserLdapServerUserAttribute>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserLdapServerUserAttribute" /> class.
        /// </summary>
        /// <param name="logonName">Set the user logon name attribute. * Set to null to represent an unconfigured state..</param>
        /// <param name="qualifiedLogonName">Set the qualified logon name attribute. * Set to null to represent an unconfigured state..</param>
        /// <param name="groupMembership">Set the user group membership attribute. * Set to null to represent an unconfigured state..</param>
        /// <param name="additionalGroupId">Set the additional user group ID attribute. * Set to null to represent an unconfigured state..</param>
        /// <param name="useAdditionalGroupId">Use the additional user group ID attribute..</param>
        /// <param name="framedIpAddress">Set the framed IP address attribute. * Set to null to represent an unconfigured state..</param>
        public UserLdapServerUserAttribute(string logonName = default(string), string qualifiedLogonName = default(string), string groupMembership = default(string), string additionalGroupId = default(string), bool useAdditionalGroupId = default(bool), string framedIpAddress = default(string))
        {
            this.LogonName = logonName;
            this.QualifiedLogonName = qualifiedLogonName;
            this.GroupMembership = groupMembership;
            this.AdditionalGroupId = additionalGroupId;
            this.UseAdditionalGroupId = useAdditionalGroupId;
            this.FramedIpAddress = framedIpAddress;
        }

        /// <summary>
        /// Set the user logon name attribute. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Set the user logon name attribute. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "logon_name", EmitDefaultValue = true)]
        public string LogonName { get; set; }

        /// <summary>
        /// Set the qualified logon name attribute. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Set the qualified logon name attribute. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "qualified_logon_name", EmitDefaultValue = true)]
        public string QualifiedLogonName { get; set; }

        /// <summary>
        /// Set the user group membership attribute. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Set the user group membership attribute. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "group_membership", EmitDefaultValue = true)]
        public string GroupMembership { get; set; }

        /// <summary>
        /// Set the additional user group ID attribute. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Set the additional user group ID attribute. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "additional_group_id", EmitDefaultValue = true)]
        public string AdditionalGroupId { get; set; }

        /// <summary>
        /// Use the additional user group ID attribute.
        /// </summary>
        /// <value>Use the additional user group ID attribute.</value>
        [DataMember(Name = "use_additional_group_id", EmitDefaultValue = true)]
        public bool UseAdditionalGroupId { get; set; }

        /// <summary>
        /// Set the framed IP address attribute. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Set the framed IP address attribute. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "framed_ip_address", EmitDefaultValue = true)]
        public string FramedIpAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserLdapServerUserAttribute {\n");
            sb.Append("  LogonName: ").Append(LogonName).Append("\n");
            sb.Append("  QualifiedLogonName: ").Append(QualifiedLogonName).Append("\n");
            sb.Append("  GroupMembership: ").Append(GroupMembership).Append("\n");
            sb.Append("  AdditionalGroupId: ").Append(AdditionalGroupId).Append("\n");
            sb.Append("  UseAdditionalGroupId: ").Append(UseAdditionalGroupId).Append("\n");
            sb.Append("  FramedIpAddress: ").Append(FramedIpAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserLdapServerUserAttribute);
        }

        /// <summary>
        /// Returns true if UserLdapServerUserAttribute instances are equal
        /// </summary>
        /// <param name="input">Instance of UserLdapServerUserAttribute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserLdapServerUserAttribute input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LogonName == input.LogonName ||
                    (this.LogonName != null &&
                    this.LogonName.Equals(input.LogonName))
                ) && 
                (
                    this.QualifiedLogonName == input.QualifiedLogonName ||
                    (this.QualifiedLogonName != null &&
                    this.QualifiedLogonName.Equals(input.QualifiedLogonName))
                ) && 
                (
                    this.GroupMembership == input.GroupMembership ||
                    (this.GroupMembership != null &&
                    this.GroupMembership.Equals(input.GroupMembership))
                ) && 
                (
                    this.AdditionalGroupId == input.AdditionalGroupId ||
                    (this.AdditionalGroupId != null &&
                    this.AdditionalGroupId.Equals(input.AdditionalGroupId))
                ) && 
                (
                    this.UseAdditionalGroupId == input.UseAdditionalGroupId ||
                    this.UseAdditionalGroupId.Equals(input.UseAdditionalGroupId)
                ) && 
                (
                    this.FramedIpAddress == input.FramedIpAddress ||
                    (this.FramedIpAddress != null &&
                    this.FramedIpAddress.Equals(input.FramedIpAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LogonName != null)
                {
                    hashCode = (hashCode * 59) + this.LogonName.GetHashCode();
                }
                if (this.QualifiedLogonName != null)
                {
                    hashCode = (hashCode * 59) + this.QualifiedLogonName.GetHashCode();
                }
                if (this.GroupMembership != null)
                {
                    hashCode = (hashCode * 59) + this.GroupMembership.GetHashCode();
                }
                if (this.AdditionalGroupId != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalGroupId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UseAdditionalGroupId.GetHashCode();
                if (this.FramedIpAddress != null)
                {
                    hashCode = (hashCode * 59) + this.FramedIpAddress.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
