/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enter global Anti-Spyware Prevention profile for zone mode.
    /// </summary>
    [DataContract(Name = "policies_setting_base_policies_setting_antispyware_profile_for_zone")]
    public partial class PoliciesSettingBasePoliciesSettingAntispywareProfileForZone : IEquatable<PoliciesSettingBasePoliciesSettingAntispywareProfileForZone>, IValidatableObject
    {
        /// <summary>
        /// Set what Anti-Spyware profile is based on.
        /// </summary>
        /// <value>Set what Anti-Spyware profile is based on.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BasedOnEnum
        {
            /// <summary>
            /// Enum Object for value: object
            /// </summary>
            [EnumMember(Value = "object")]
            Object = 1,

            /// <summary>
            /// Enum Global for value: global
            /// </summary>
            [EnumMember(Value = "global")]
            Global = 2
        }


        /// <summary>
        /// Set what Anti-Spyware profile is based on.
        /// </summary>
        /// <value>Set what Anti-Spyware profile is based on.</value>
        [DataMember(Name = "based_on", EmitDefaultValue = false)]
        public BasedOnEnum? BasedOn { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PoliciesSettingBasePoliciesSettingAntispywareProfileForZone" /> class.
        /// </summary>
        /// <param name="inbound">Enable inbound inspection..</param>
        /// <param name="outbound">Enable outbound inspection for the specified protocols..</param>
        /// <param name="smtpResponses">Enable SMTP responses..</param>
        /// <param name="httpClientlessNotification">Enable anti-spyware http clientless notification..</param>
        /// <param name="basedOn">Set what Anti-Spyware profile is based on..</param>
        /// <param name="prevent">Enable prevent..</param>
        /// <param name="packetMonitor">Enable Anti-Spyware profile packet monitor..</param>
        /// <param name="log">log.</param>
        /// <param name="highDanger">highDanger.</param>
        /// <param name="mediumDanger">mediumDanger.</param>
        /// <param name="lowDanger">lowDanger.</param>
        public PoliciesSettingBasePoliciesSettingAntispywareProfileForZone(bool inbound = default(bool), bool outbound = default(bool), bool smtpResponses = default(bool), bool httpClientlessNotification = default(bool), BasedOnEnum? basedOn = default(BasedOnEnum?), bool prevent = default(bool), bool packetMonitor = default(bool), PoliciesSettingBasePoliciesSettingAntispywareProfileForZoneLog log = default(PoliciesSettingBasePoliciesSettingAntispywareProfileForZoneLog), PoliciesSettingBasePoliciesSettingAntispywareProfileForZoneHighDanger highDanger = default(PoliciesSettingBasePoliciesSettingAntispywareProfileForZoneHighDanger), PoliciesSettingBasePoliciesSettingAntispywareProfileForZoneMediumDanger mediumDanger = default(PoliciesSettingBasePoliciesSettingAntispywareProfileForZoneMediumDanger), PoliciesSettingBasePoliciesSettingAntispywareProfileForZoneLowDanger lowDanger = default(PoliciesSettingBasePoliciesSettingAntispywareProfileForZoneLowDanger))
        {
            this.Inbound = inbound;
            this.Outbound = outbound;
            this.SmtpResponses = smtpResponses;
            this.HttpClientlessNotification = httpClientlessNotification;
            this.BasedOn = basedOn;
            this.Prevent = prevent;
            this.PacketMonitor = packetMonitor;
            this.Log = log;
            this.HighDanger = highDanger;
            this.MediumDanger = mediumDanger;
            this.LowDanger = lowDanger;
        }

        /// <summary>
        /// Enable inbound inspection.
        /// </summary>
        /// <value>Enable inbound inspection.</value>
        [DataMember(Name = "inbound", EmitDefaultValue = true)]
        public bool Inbound { get; set; }

        /// <summary>
        /// Enable outbound inspection for the specified protocols.
        /// </summary>
        /// <value>Enable outbound inspection for the specified protocols.</value>
        [DataMember(Name = "outbound", EmitDefaultValue = true)]
        public bool Outbound { get; set; }

        /// <summary>
        /// Enable SMTP responses.
        /// </summary>
        /// <value>Enable SMTP responses.</value>
        [DataMember(Name = "smtp_responses", EmitDefaultValue = true)]
        public bool SmtpResponses { get; set; }

        /// <summary>
        /// Enable anti-spyware http clientless notification.
        /// </summary>
        /// <value>Enable anti-spyware http clientless notification.</value>
        [DataMember(Name = "http_clientless_notification", EmitDefaultValue = true)]
        public bool HttpClientlessNotification { get; set; }

        /// <summary>
        /// Enable prevent.
        /// </summary>
        /// <value>Enable prevent.</value>
        [DataMember(Name = "prevent", EmitDefaultValue = true)]
        public bool Prevent { get; set; }

        /// <summary>
        /// Enable Anti-Spyware profile packet monitor.
        /// </summary>
        /// <value>Enable Anti-Spyware profile packet monitor.</value>
        [DataMember(Name = "packet_monitor", EmitDefaultValue = true)]
        public bool PacketMonitor { get; set; }

        /// <summary>
        /// Gets or Sets Log
        /// </summary>
        [DataMember(Name = "log", EmitDefaultValue = false)]
        public PoliciesSettingBasePoliciesSettingAntispywareProfileForZoneLog Log { get; set; }

        /// <summary>
        /// Gets or Sets HighDanger
        /// </summary>
        [DataMember(Name = "high_danger", EmitDefaultValue = false)]
        public PoliciesSettingBasePoliciesSettingAntispywareProfileForZoneHighDanger HighDanger { get; set; }

        /// <summary>
        /// Gets or Sets MediumDanger
        /// </summary>
        [DataMember(Name = "medium_danger", EmitDefaultValue = false)]
        public PoliciesSettingBasePoliciesSettingAntispywareProfileForZoneMediumDanger MediumDanger { get; set; }

        /// <summary>
        /// Gets or Sets LowDanger
        /// </summary>
        [DataMember(Name = "low_danger", EmitDefaultValue = false)]
        public PoliciesSettingBasePoliciesSettingAntispywareProfileForZoneLowDanger LowDanger { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PoliciesSettingBasePoliciesSettingAntispywareProfileForZone {\n");
            sb.Append("  Inbound: ").Append(Inbound).Append("\n");
            sb.Append("  Outbound: ").Append(Outbound).Append("\n");
            sb.Append("  SmtpResponses: ").Append(SmtpResponses).Append("\n");
            sb.Append("  HttpClientlessNotification: ").Append(HttpClientlessNotification).Append("\n");
            sb.Append("  BasedOn: ").Append(BasedOn).Append("\n");
            sb.Append("  Prevent: ").Append(Prevent).Append("\n");
            sb.Append("  PacketMonitor: ").Append(PacketMonitor).Append("\n");
            sb.Append("  Log: ").Append(Log).Append("\n");
            sb.Append("  HighDanger: ").Append(HighDanger).Append("\n");
            sb.Append("  MediumDanger: ").Append(MediumDanger).Append("\n");
            sb.Append("  LowDanger: ").Append(LowDanger).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PoliciesSettingBasePoliciesSettingAntispywareProfileForZone);
        }

        /// <summary>
        /// Returns true if PoliciesSettingBasePoliciesSettingAntispywareProfileForZone instances are equal
        /// </summary>
        /// <param name="input">Instance of PoliciesSettingBasePoliciesSettingAntispywareProfileForZone to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PoliciesSettingBasePoliciesSettingAntispywareProfileForZone input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Inbound == input.Inbound ||
                    this.Inbound.Equals(input.Inbound)
                ) && 
                (
                    this.Outbound == input.Outbound ||
                    this.Outbound.Equals(input.Outbound)
                ) && 
                (
                    this.SmtpResponses == input.SmtpResponses ||
                    this.SmtpResponses.Equals(input.SmtpResponses)
                ) && 
                (
                    this.HttpClientlessNotification == input.HttpClientlessNotification ||
                    this.HttpClientlessNotification.Equals(input.HttpClientlessNotification)
                ) && 
                (
                    this.BasedOn == input.BasedOn ||
                    this.BasedOn.Equals(input.BasedOn)
                ) && 
                (
                    this.Prevent == input.Prevent ||
                    this.Prevent.Equals(input.Prevent)
                ) && 
                (
                    this.PacketMonitor == input.PacketMonitor ||
                    this.PacketMonitor.Equals(input.PacketMonitor)
                ) && 
                (
                    this.Log == input.Log ||
                    (this.Log != null &&
                    this.Log.Equals(input.Log))
                ) && 
                (
                    this.HighDanger == input.HighDanger ||
                    (this.HighDanger != null &&
                    this.HighDanger.Equals(input.HighDanger))
                ) && 
                (
                    this.MediumDanger == input.MediumDanger ||
                    (this.MediumDanger != null &&
                    this.MediumDanger.Equals(input.MediumDanger))
                ) && 
                (
                    this.LowDanger == input.LowDanger ||
                    (this.LowDanger != null &&
                    this.LowDanger.Equals(input.LowDanger))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Inbound.GetHashCode();
                hashCode = (hashCode * 59) + this.Outbound.GetHashCode();
                hashCode = (hashCode * 59) + this.SmtpResponses.GetHashCode();
                hashCode = (hashCode * 59) + this.HttpClientlessNotification.GetHashCode();
                hashCode = (hashCode * 59) + this.BasedOn.GetHashCode();
                hashCode = (hashCode * 59) + this.Prevent.GetHashCode();
                hashCode = (hashCode * 59) + this.PacketMonitor.GetHashCode();
                if (this.Log != null)
                {
                    hashCode = (hashCode * 59) + this.Log.GetHashCode();
                }
                if (this.HighDanger != null)
                {
                    hashCode = (hashCode * 59) + this.HighDanger.GetHashCode();
                }
                if (this.MediumDanger != null)
                {
                    hashCode = (hashCode * 59) + this.MediumDanger.GetHashCode();
                }
                if (this.LowDanger != null)
                {
                    hashCode = (hashCode * 59) + this.LowDanger.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
