/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;
using System.Reflection;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Set the color to be displayed in the log monitor.
    /// </summary>
    [JsonConverter(typeof(ReportingProfilesColorJsonConverter))]
    [DataContract(Name = "reporting_profiles_color")]
    public partial class ReportingProfilesColor : AbstractOpenAPISchema, IEquatable<ReportingProfilesColor>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingProfilesColor" /> class
        /// with the <see cref="ReportingProfilesColorRgb" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ReportingProfilesColorRgb.</param>
        public ReportingProfilesColor(ReportingProfilesColorRgb actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingProfilesColor" /> class
        /// with the <see cref="ReportingProfilesColorHex" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ReportingProfilesColorHex.</param>
        public ReportingProfilesColor(ReportingProfilesColorHex actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingProfilesColor" /> class
        /// with the <see cref="ReportingProfilesColorBlack" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ReportingProfilesColorBlack.</param>
        public ReportingProfilesColor(ReportingProfilesColorBlack actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingProfilesColor" /> class
        /// with the <see cref="ReportingProfilesColorRed" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ReportingProfilesColorRed.</param>
        public ReportingProfilesColor(ReportingProfilesColorRed actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingProfilesColor" /> class
        /// with the <see cref="ReportingProfilesColorYellow" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ReportingProfilesColorYellow.</param>
        public ReportingProfilesColor(ReportingProfilesColorYellow actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingProfilesColor" /> class
        /// with the <see cref="ReportingProfilesColorBlue" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ReportingProfilesColorBlue.</param>
        public ReportingProfilesColor(ReportingProfilesColorBlue actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingProfilesColor" /> class
        /// with the <see cref="ReportingProfilesColorGreen" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ReportingProfilesColorGreen.</param>
        public ReportingProfilesColor(ReportingProfilesColorGreen actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingProfilesColor" /> class
        /// with the <see cref="ReportingProfilesColorOrange" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ReportingProfilesColorOrange.</param>
        public ReportingProfilesColor(ReportingProfilesColorOrange actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingProfilesColor" /> class
        /// with the <see cref="ReportingProfilesColorPurple" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ReportingProfilesColorPurple.</param>
        public ReportingProfilesColor(ReportingProfilesColorPurple actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(ReportingProfilesColorBlack))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ReportingProfilesColorBlue))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ReportingProfilesColorGreen))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ReportingProfilesColorHex))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ReportingProfilesColorOrange))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ReportingProfilesColorPurple))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ReportingProfilesColorRed))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ReportingProfilesColorRgb))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ReportingProfilesColorYellow))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: ReportingProfilesColorBlack, ReportingProfilesColorBlue, ReportingProfilesColorGreen, ReportingProfilesColorHex, ReportingProfilesColorOrange, ReportingProfilesColorPurple, ReportingProfilesColorRed, ReportingProfilesColorRgb, ReportingProfilesColorYellow");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `ReportingProfilesColorRgb`. If the actual instance is not `ReportingProfilesColorRgb`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ReportingProfilesColorRgb</returns>
        public ReportingProfilesColorRgb GetReportingProfilesColorRgb()
        {
            return (ReportingProfilesColorRgb)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ReportingProfilesColorHex`. If the actual instance is not `ReportingProfilesColorHex`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ReportingProfilesColorHex</returns>
        public ReportingProfilesColorHex GetReportingProfilesColorHex()
        {
            return (ReportingProfilesColorHex)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ReportingProfilesColorBlack`. If the actual instance is not `ReportingProfilesColorBlack`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ReportingProfilesColorBlack</returns>
        public ReportingProfilesColorBlack GetReportingProfilesColorBlack()
        {
            return (ReportingProfilesColorBlack)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ReportingProfilesColorRed`. If the actual instance is not `ReportingProfilesColorRed`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ReportingProfilesColorRed</returns>
        public ReportingProfilesColorRed GetReportingProfilesColorRed()
        {
            return (ReportingProfilesColorRed)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ReportingProfilesColorYellow`. If the actual instance is not `ReportingProfilesColorYellow`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ReportingProfilesColorYellow</returns>
        public ReportingProfilesColorYellow GetReportingProfilesColorYellow()
        {
            return (ReportingProfilesColorYellow)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ReportingProfilesColorBlue`. If the actual instance is not `ReportingProfilesColorBlue`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ReportingProfilesColorBlue</returns>
        public ReportingProfilesColorBlue GetReportingProfilesColorBlue()
        {
            return (ReportingProfilesColorBlue)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ReportingProfilesColorGreen`. If the actual instance is not `ReportingProfilesColorGreen`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ReportingProfilesColorGreen</returns>
        public ReportingProfilesColorGreen GetReportingProfilesColorGreen()
        {
            return (ReportingProfilesColorGreen)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ReportingProfilesColorOrange`. If the actual instance is not `ReportingProfilesColorOrange`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ReportingProfilesColorOrange</returns>
        public ReportingProfilesColorOrange GetReportingProfilesColorOrange()
        {
            return (ReportingProfilesColorOrange)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ReportingProfilesColorPurple`. If the actual instance is not `ReportingProfilesColorPurple`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ReportingProfilesColorPurple</returns>
        public ReportingProfilesColorPurple GetReportingProfilesColorPurple()
        {
            return (ReportingProfilesColorPurple)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportingProfilesColor {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, ReportingProfilesColor.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of ReportingProfilesColor
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of ReportingProfilesColor</returns>
        public static ReportingProfilesColor FromJson(string jsonString)
        {
            ReportingProfilesColor newReportingProfilesColor = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newReportingProfilesColor;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ReportingProfilesColorBlack).GetProperty("AdditionalProperties") == null)
                {
                    newReportingProfilesColor = new ReportingProfilesColor(JsonConvert.DeserializeObject<ReportingProfilesColorBlack>(jsonString, ReportingProfilesColor.SerializerSettings));
                }
                else
                {
                    newReportingProfilesColor = new ReportingProfilesColor(JsonConvert.DeserializeObject<ReportingProfilesColorBlack>(jsonString, ReportingProfilesColor.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ReportingProfilesColorBlack");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ReportingProfilesColorBlack: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ReportingProfilesColorBlue).GetProperty("AdditionalProperties") == null)
                {
                    newReportingProfilesColor = new ReportingProfilesColor(JsonConvert.DeserializeObject<ReportingProfilesColorBlue>(jsonString, ReportingProfilesColor.SerializerSettings));
                }
                else
                {
                    newReportingProfilesColor = new ReportingProfilesColor(JsonConvert.DeserializeObject<ReportingProfilesColorBlue>(jsonString, ReportingProfilesColor.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ReportingProfilesColorBlue");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ReportingProfilesColorBlue: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ReportingProfilesColorGreen).GetProperty("AdditionalProperties") == null)
                {
                    newReportingProfilesColor = new ReportingProfilesColor(JsonConvert.DeserializeObject<ReportingProfilesColorGreen>(jsonString, ReportingProfilesColor.SerializerSettings));
                }
                else
                {
                    newReportingProfilesColor = new ReportingProfilesColor(JsonConvert.DeserializeObject<ReportingProfilesColorGreen>(jsonString, ReportingProfilesColor.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ReportingProfilesColorGreen");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ReportingProfilesColorGreen: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ReportingProfilesColorHex).GetProperty("AdditionalProperties") == null)
                {
                    newReportingProfilesColor = new ReportingProfilesColor(JsonConvert.DeserializeObject<ReportingProfilesColorHex>(jsonString, ReportingProfilesColor.SerializerSettings));
                }
                else
                {
                    newReportingProfilesColor = new ReportingProfilesColor(JsonConvert.DeserializeObject<ReportingProfilesColorHex>(jsonString, ReportingProfilesColor.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ReportingProfilesColorHex");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ReportingProfilesColorHex: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ReportingProfilesColorOrange).GetProperty("AdditionalProperties") == null)
                {
                    newReportingProfilesColor = new ReportingProfilesColor(JsonConvert.DeserializeObject<ReportingProfilesColorOrange>(jsonString, ReportingProfilesColor.SerializerSettings));
                }
                else
                {
                    newReportingProfilesColor = new ReportingProfilesColor(JsonConvert.DeserializeObject<ReportingProfilesColorOrange>(jsonString, ReportingProfilesColor.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ReportingProfilesColorOrange");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ReportingProfilesColorOrange: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ReportingProfilesColorPurple).GetProperty("AdditionalProperties") == null)
                {
                    newReportingProfilesColor = new ReportingProfilesColor(JsonConvert.DeserializeObject<ReportingProfilesColorPurple>(jsonString, ReportingProfilesColor.SerializerSettings));
                }
                else
                {
                    newReportingProfilesColor = new ReportingProfilesColor(JsonConvert.DeserializeObject<ReportingProfilesColorPurple>(jsonString, ReportingProfilesColor.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ReportingProfilesColorPurple");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ReportingProfilesColorPurple: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ReportingProfilesColorRed).GetProperty("AdditionalProperties") == null)
                {
                    newReportingProfilesColor = new ReportingProfilesColor(JsonConvert.DeserializeObject<ReportingProfilesColorRed>(jsonString, ReportingProfilesColor.SerializerSettings));
                }
                else
                {
                    newReportingProfilesColor = new ReportingProfilesColor(JsonConvert.DeserializeObject<ReportingProfilesColorRed>(jsonString, ReportingProfilesColor.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ReportingProfilesColorRed");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ReportingProfilesColorRed: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ReportingProfilesColorRgb).GetProperty("AdditionalProperties") == null)
                {
                    newReportingProfilesColor = new ReportingProfilesColor(JsonConvert.DeserializeObject<ReportingProfilesColorRgb>(jsonString, ReportingProfilesColor.SerializerSettings));
                }
                else
                {
                    newReportingProfilesColor = new ReportingProfilesColor(JsonConvert.DeserializeObject<ReportingProfilesColorRgb>(jsonString, ReportingProfilesColor.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ReportingProfilesColorRgb");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ReportingProfilesColorRgb: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ReportingProfilesColorYellow).GetProperty("AdditionalProperties") == null)
                {
                    newReportingProfilesColor = new ReportingProfilesColor(JsonConvert.DeserializeObject<ReportingProfilesColorYellow>(jsonString, ReportingProfilesColor.SerializerSettings));
                }
                else
                {
                    newReportingProfilesColor = new ReportingProfilesColor(JsonConvert.DeserializeObject<ReportingProfilesColorYellow>(jsonString, ReportingProfilesColor.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ReportingProfilesColorYellow");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ReportingProfilesColorYellow: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newReportingProfilesColor;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportingProfilesColor);
        }

        /// <summary>
        /// Returns true if ReportingProfilesColor instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportingProfilesColor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportingProfilesColor input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for ReportingProfilesColor
    /// </summary>
    public class ReportingProfilesColorJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(ReportingProfilesColor).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return ReportingProfilesColor.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
