/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// user partition selection policies configuration.
    /// </summary>
    [DataContract(Name = "user_partitioning_policies")]
    public partial class UserPartitioningPolicies : IEquatable<UserPartitioningPolicies>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserPartitioningPolicies" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserPartitioningPolicies() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserPartitioningPolicies" /> class.
        /// </summary>
        /// <param name="varInterface">Set network for the selection policy. (required).</param>
        /// <param name="zone">Add zone to the selection criteria. (required).</param>
        /// <param name="addressObject">Set network for the selection policy. (required).</param>
        /// <param name="partition">Select partition for the policy..</param>
        /// <param name="priority">Set the partition selection policy priority..</param>
        /// <param name="comment">Set the partition selection policy comment..</param>
        public UserPartitioningPolicies(string varInterface = default(string), string zone = default(string), string addressObject = default(string), string partition = default(string), decimal priority = default(decimal), string comment = default(string))
        {
            // to ensure "varInterface" is required (not null)
            if (varInterface == null)
            {
                throw new ArgumentNullException("varInterface is a required property for UserPartitioningPolicies and cannot be null");
            }
            this.VarInterface = varInterface;
            // to ensure "zone" is required (not null)
            if (zone == null)
            {
                throw new ArgumentNullException("zone is a required property for UserPartitioningPolicies and cannot be null");
            }
            this.Zone = zone;
            // to ensure "addressObject" is required (not null)
            if (addressObject == null)
            {
                throw new ArgumentNullException("addressObject is a required property for UserPartitioningPolicies and cannot be null");
            }
            this.AddressObject = addressObject;
            this.Partition = partition;
            this.Priority = priority;
            this.Comment = comment;
        }

        /// <summary>
        /// Set network for the selection policy.
        /// </summary>
        /// <value>Set network for the selection policy.</value>
        [DataMember(Name = "interface", IsRequired = true, EmitDefaultValue = true)]
        public string VarInterface { get; set; }

        /// <summary>
        /// Add zone to the selection criteria.
        /// </summary>
        /// <value>Add zone to the selection criteria.</value>
        [DataMember(Name = "zone", IsRequired = true, EmitDefaultValue = true)]
        public string Zone { get; set; }

        /// <summary>
        /// Set network for the selection policy.
        /// </summary>
        /// <value>Set network for the selection policy.</value>
        [DataMember(Name = "address_object", IsRequired = true, EmitDefaultValue = true)]
        public string AddressObject { get; set; }

        /// <summary>
        /// Select partition for the policy.
        /// </summary>
        /// <value>Select partition for the policy.</value>
        [DataMember(Name = "partition", EmitDefaultValue = false)]
        public string Partition { get; set; }

        /// <summary>
        /// Set the partition selection policy priority.
        /// </summary>
        /// <value>Set the partition selection policy priority.</value>
        [DataMember(Name = "priority", EmitDefaultValue = false)]
        public decimal Priority { get; set; }

        /// <summary>
        /// Set the partition selection policy comment.
        /// </summary>
        /// <value>Set the partition selection policy comment.</value>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserPartitioningPolicies {\n");
            sb.Append("  VarInterface: ").Append(VarInterface).Append("\n");
            sb.Append("  Zone: ").Append(Zone).Append("\n");
            sb.Append("  AddressObject: ").Append(AddressObject).Append("\n");
            sb.Append("  Partition: ").Append(Partition).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserPartitioningPolicies);
        }

        /// <summary>
        /// Returns true if UserPartitioningPolicies instances are equal
        /// </summary>
        /// <param name="input">Instance of UserPartitioningPolicies to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserPartitioningPolicies input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VarInterface == input.VarInterface ||
                    (this.VarInterface != null &&
                    this.VarInterface.Equals(input.VarInterface))
                ) && 
                (
                    this.Zone == input.Zone ||
                    (this.Zone != null &&
                    this.Zone.Equals(input.Zone))
                ) && 
                (
                    this.AddressObject == input.AddressObject ||
                    (this.AddressObject != null &&
                    this.AddressObject.Equals(input.AddressObject))
                ) && 
                (
                    this.Partition == input.Partition ||
                    (this.Partition != null &&
                    this.Partition.Equals(input.Partition))
                ) && 
                (
                    this.Priority == input.Priority ||
                    this.Priority.Equals(input.Priority)
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VarInterface != null)
                {
                    hashCode = (hashCode * 59) + this.VarInterface.GetHashCode();
                }
                if (this.Zone != null)
                {
                    hashCode = (hashCode * 59) + this.Zone.GetHashCode();
                }
                if (this.AddressObject != null)
                {
                    hashCode = (hashCode * 59) + this.AddressObject.GetHashCode();
                }
                if (this.Partition != null)
                {
                    hashCode = (hashCode * 59) + this.Partition.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Priority.GetHashCode();
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
