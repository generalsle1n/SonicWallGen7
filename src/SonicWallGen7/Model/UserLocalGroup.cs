/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// local group configuration.
    /// </summary>
    [DataContract(Name = "user_local_group")]
    public partial class UserLocalGroup : IEquatable<UserLocalGroup>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserLocalGroup" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserLocalGroup() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserLocalGroup" /> class.
        /// </summary>
        /// <param name="name">Set the name of the user group. (required).</param>
        /// <param name="domain">Set the user group&#39;s domain. * Set to null to represent an unconfigured state..</param>
        /// <param name="displayName">Only used for show user group display name..</param>
        /// <param name="comment">Set a comment for the user group. * Set to null to represent an unconfigured state..</param>
        /// <param name="membershipsByLdapLocation">membershipsByLdapLocation.</param>
        /// <param name="ldapLocation">Set local group location in LDAP directory. * Set to null to represent an unconfigured state..</param>
        /// <param name="oneTimePassword">oneTimePassword.</param>
        /// <param name="toManagementOnLogin">Members with administrative privilege will go straight to the management UI on web login..</param>
        /// <param name="readOnlyRestriction">The administrative rights from the other groups will be restricted to read-only..</param>
        /// <param name="member">Add a member user or user group..</param>
        /// <param name="vpnClientAccess">Add VPN client access to a network for group members..</param>
        /// <param name="bookmark">Add/edit bookmark and enter configuration mode..</param>
        public UserLocalGroup(string name = default(string), string domain = default(string), string displayName = default(string), string comment = default(string), UserLocalGroupMembershipsByLdapLocation membershipsByLdapLocation = default(UserLocalGroupMembershipsByLdapLocation), string ldapLocation = default(string), UserLocalGroupOneTimePassword oneTimePassword = default(UserLocalGroupOneTimePassword), bool toManagementOnLogin = default(bool), bool readOnlyRestriction = default(bool), List<AddressGroupIpv4Ipv4AddressGroupIpv4Inner> member = default(List<AddressGroupIpv4Ipv4AddressGroupIpv4Inner>), List<UserLocalGroupVpnClientAccessInner> vpnClientAccess = default(List<UserLocalGroupVpnClientAccessInner>), List<UserLocalGroupBookmarkInner> bookmark = default(List<UserLocalGroupBookmarkInner>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for UserLocalGroup and cannot be null");
            }
            this.Name = name;
            this.Domain = domain;
            this.DisplayName = displayName;
            this.Comment = comment;
            this.MembershipsByLdapLocation = membershipsByLdapLocation;
            this.LdapLocation = ldapLocation;
            this.OneTimePassword = oneTimePassword;
            this.ToManagementOnLogin = toManagementOnLogin;
            this.ReadOnlyRestriction = readOnlyRestriction;
            this.Member = member;
            this.VpnClientAccess = vpnClientAccess;
            this.Bookmark = bookmark;
        }

        /// <summary>
        /// Set the name of the user group.
        /// </summary>
        /// <value>Set the name of the user group.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Set the user group&#39;s domain. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Set the user group&#39;s domain. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "domain", EmitDefaultValue = true)]
        public string Domain { get; set; }

        /// <summary>
        /// user group object UUID.
        /// </summary>
        /// <value>user group object UUID.</value>
        [DataMember(Name = "uuid", EmitDefaultValue = false)]
        public string Uuid { get; private set; }

        /// <summary>
        /// Returns false as Uuid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUuid()
        {
            return false;
        }
        /// <summary>
        /// Only used for show user group display name.
        /// </summary>
        /// <value>Only used for show user group display name.</value>
        [DataMember(Name = "display_name", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Set a comment for the user group. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Set a comment for the user group. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "comment", EmitDefaultValue = true)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets MembershipsByLdapLocation
        /// </summary>
        [DataMember(Name = "memberships_by_ldap_location", EmitDefaultValue = false)]
        public UserLocalGroupMembershipsByLdapLocation MembershipsByLdapLocation { get; set; }

        /// <summary>
        /// Set local group location in LDAP directory. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Set local group location in LDAP directory. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "ldap_location", EmitDefaultValue = true)]
        public string LdapLocation { get; set; }

        /// <summary>
        /// Gets or Sets OneTimePassword
        /// </summary>
        [DataMember(Name = "one_time_password", EmitDefaultValue = false)]
        public UserLocalGroupOneTimePassword OneTimePassword { get; set; }

        /// <summary>
        /// Members with administrative privilege will go straight to the management UI on web login.
        /// </summary>
        /// <value>Members with administrative privilege will go straight to the management UI on web login.</value>
        [DataMember(Name = "to_management_on_login", EmitDefaultValue = true)]
        public bool ToManagementOnLogin { get; set; }

        /// <summary>
        /// The administrative rights from the other groups will be restricted to read-only.
        /// </summary>
        /// <value>The administrative rights from the other groups will be restricted to read-only.</value>
        [DataMember(Name = "read_only_restriction", EmitDefaultValue = true)]
        public bool ReadOnlyRestriction { get; set; }

        /// <summary>
        /// Add a member user or user group.
        /// </summary>
        /// <value>Add a member user or user group.</value>
        [DataMember(Name = "member", EmitDefaultValue = false)]
        public List<AddressGroupIpv4Ipv4AddressGroupIpv4Inner> Member { get; set; }

        /// <summary>
        /// Add VPN client access to a network for group members.
        /// </summary>
        /// <value>Add VPN client access to a network for group members.</value>
        [DataMember(Name = "vpn_client_access", EmitDefaultValue = false)]
        public List<UserLocalGroupVpnClientAccessInner> VpnClientAccess { get; set; }

        /// <summary>
        /// Add/edit bookmark and enter configuration mode.
        /// </summary>
        /// <value>Add/edit bookmark and enter configuration mode.</value>
        [DataMember(Name = "bookmark", EmitDefaultValue = false)]
        public List<UserLocalGroupBookmarkInner> Bookmark { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserLocalGroup {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  MembershipsByLdapLocation: ").Append(MembershipsByLdapLocation).Append("\n");
            sb.Append("  LdapLocation: ").Append(LdapLocation).Append("\n");
            sb.Append("  OneTimePassword: ").Append(OneTimePassword).Append("\n");
            sb.Append("  ToManagementOnLogin: ").Append(ToManagementOnLogin).Append("\n");
            sb.Append("  ReadOnlyRestriction: ").Append(ReadOnlyRestriction).Append("\n");
            sb.Append("  Member: ").Append(Member).Append("\n");
            sb.Append("  VpnClientAccess: ").Append(VpnClientAccess).Append("\n");
            sb.Append("  Bookmark: ").Append(Bookmark).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserLocalGroup);
        }

        /// <summary>
        /// Returns true if UserLocalGroup instances are equal
        /// </summary>
        /// <param name="input">Instance of UserLocalGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserLocalGroup input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.MembershipsByLdapLocation == input.MembershipsByLdapLocation ||
                    (this.MembershipsByLdapLocation != null &&
                    this.MembershipsByLdapLocation.Equals(input.MembershipsByLdapLocation))
                ) && 
                (
                    this.LdapLocation == input.LdapLocation ||
                    (this.LdapLocation != null &&
                    this.LdapLocation.Equals(input.LdapLocation))
                ) && 
                (
                    this.OneTimePassword == input.OneTimePassword ||
                    (this.OneTimePassword != null &&
                    this.OneTimePassword.Equals(input.OneTimePassword))
                ) && 
                (
                    this.ToManagementOnLogin == input.ToManagementOnLogin ||
                    this.ToManagementOnLogin.Equals(input.ToManagementOnLogin)
                ) && 
                (
                    this.ReadOnlyRestriction == input.ReadOnlyRestriction ||
                    this.ReadOnlyRestriction.Equals(input.ReadOnlyRestriction)
                ) && 
                (
                    this.Member == input.Member ||
                    this.Member != null &&
                    input.Member != null &&
                    this.Member.SequenceEqual(input.Member)
                ) && 
                (
                    this.VpnClientAccess == input.VpnClientAccess ||
                    this.VpnClientAccess != null &&
                    input.VpnClientAccess != null &&
                    this.VpnClientAccess.SequenceEqual(input.VpnClientAccess)
                ) && 
                (
                    this.Bookmark == input.Bookmark ||
                    this.Bookmark != null &&
                    input.Bookmark != null &&
                    this.Bookmark.SequenceEqual(input.Bookmark)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Domain != null)
                {
                    hashCode = (hashCode * 59) + this.Domain.GetHashCode();
                }
                if (this.Uuid != null)
                {
                    hashCode = (hashCode * 59) + this.Uuid.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                if (this.MembershipsByLdapLocation != null)
                {
                    hashCode = (hashCode * 59) + this.MembershipsByLdapLocation.GetHashCode();
                }
                if (this.LdapLocation != null)
                {
                    hashCode = (hashCode * 59) + this.LdapLocation.GetHashCode();
                }
                if (this.OneTimePassword != null)
                {
                    hashCode = (hashCode * 59) + this.OneTimePassword.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ToManagementOnLogin.GetHashCode();
                hashCode = (hashCode * 59) + this.ReadOnlyRestriction.GetHashCode();
                if (this.Member != null)
                {
                    hashCode = (hashCode * 59) + this.Member.GetHashCode();
                }
                if (this.VpnClientAccess != null)
                {
                    hashCode = (hashCode * 59) + this.VpnClientAccess.GetHashCode();
                }
                if (this.Bookmark != null)
                {
                    hashCode = (hashCode * 59) + this.Bookmark.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
