/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// ShowStatusNetmonPolicyListInner
    /// </summary>
    [DataContract(Name = "show_status_netmon_policy_list_inner")]
    public partial class ShowStatusNetmonPolicyListInner : IEquatable<ShowStatusNetmonPolicyListInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusNetmonPolicyListInner" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="successful">successful.</param>
        /// <param name="resolved">resolved.</param>
        /// <param name="sent">sent.</param>
        /// <param name="received">received.</param>
        /// <param name="targets">targets.</param>
        public ShowStatusNetmonPolicyListInner(string name = default(string), string successful = default(string), string resolved = default(string), string sent = default(string), string received = default(string), string targets = default(string))
        {
            this.Name = name;
            this.Successful = successful;
            this.Resolved = resolved;
            this.Sent = sent;
            this.Received = received;
            this.Targets = targets;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Successful
        /// </summary>
        [DataMember(Name = "successful", EmitDefaultValue = false)]
        public string Successful { get; set; }

        /// <summary>
        /// Gets or Sets Resolved
        /// </summary>
        [DataMember(Name = "resolved", EmitDefaultValue = false)]
        public string Resolved { get; set; }

        /// <summary>
        /// Gets or Sets Sent
        /// </summary>
        [DataMember(Name = "sent", EmitDefaultValue = false)]
        public string Sent { get; set; }

        /// <summary>
        /// Gets or Sets Received
        /// </summary>
        [DataMember(Name = "received", EmitDefaultValue = false)]
        public string Received { get; set; }

        /// <summary>
        /// Gets or Sets Targets
        /// </summary>
        [DataMember(Name = "targets", EmitDefaultValue = false)]
        public string Targets { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusNetmonPolicyListInner {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Successful: ").Append(Successful).Append("\n");
            sb.Append("  Resolved: ").Append(Resolved).Append("\n");
            sb.Append("  Sent: ").Append(Sent).Append("\n");
            sb.Append("  Received: ").Append(Received).Append("\n");
            sb.Append("  Targets: ").Append(Targets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusNetmonPolicyListInner);
        }

        /// <summary>
        /// Returns true if ShowStatusNetmonPolicyListInner instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusNetmonPolicyListInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusNetmonPolicyListInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Successful == input.Successful ||
                    (this.Successful != null &&
                    this.Successful.Equals(input.Successful))
                ) && 
                (
                    this.Resolved == input.Resolved ||
                    (this.Resolved != null &&
                    this.Resolved.Equals(input.Resolved))
                ) && 
                (
                    this.Sent == input.Sent ||
                    (this.Sent != null &&
                    this.Sent.Equals(input.Sent))
                ) && 
                (
                    this.Received == input.Received ||
                    (this.Received != null &&
                    this.Received.Equals(input.Received))
                ) && 
                (
                    this.Targets == input.Targets ||
                    (this.Targets != null &&
                    this.Targets.Equals(input.Targets))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Successful != null)
                {
                    hashCode = (hashCode * 59) + this.Successful.GetHashCode();
                }
                if (this.Resolved != null)
                {
                    hashCode = (hashCode * 59) + this.Resolved.GetHashCode();
                }
                if (this.Sent != null)
                {
                    hashCode = (hashCode * 59) + this.Sent.GetHashCode();
                }
                if (this.Received != null)
                {
                    hashCode = (hashCode * 59) + this.Received.GetHashCode();
                }
                if (this.Targets != null)
                {
                    hashCode = (hashCode * 59) + this.Targets.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
