/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// ldap servers global statistics detail schema.
    /// </summary>
    [DataContract(Name = "show_status_ldap_servers_global_statistics_detail")]
    public partial class ShowStatusLdapServersGlobalStatisticsDetail : IEquatable<ShowStatusLdapServersGlobalStatisticsDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusLdapServersGlobalStatisticsDetail" /> class.
        /// </summary>
        /// <param name="userAuthRequests">userAuthRequests.</param>
        /// <param name="userAuthFailures">userAuthFailures.</param>
        /// <param name="userInfoRequests">userInfoRequests.</param>
        /// <param name="userInfoFailures">userInfoFailures.</param>
        /// <param name="numberOfDiscardedRequests">numberOfDiscardedRequests.</param>
        /// <param name="bindRequests">bindRequests.</param>
        /// <param name="bindFailures">bindFailures.</param>
        /// <param name="searchRequests">searchRequests.</param>
        /// <param name="searchFailures">searchFailures.</param>
        /// <param name="connectivityRequests">connectivityRequests.</param>
        /// <param name="connectivityFailures">connectivityFailures.</param>
        /// <param name="totalFailuresToSendRequests">totalFailuresToSendRequests.</param>
        /// <param name="totalServerTimeouts">totalServerTimeouts.</param>
        /// <param name="totalServerDownErrors">totalServerDownErrors.</param>
        /// <param name="totalOtherServerRequestErrors">totalOtherServerRequestErrors.</param>
        /// <param name="maximumConcurrentRequests">maximumConcurrentRequests.</param>
        /// <param name="currentConnections">currentConnections.</param>
        /// <param name="maximumOpenConnections">maximumOpenConnections.</param>
        public ShowStatusLdapServersGlobalStatisticsDetail(string userAuthRequests = default(string), string userAuthFailures = default(string), string userInfoRequests = default(string), string userInfoFailures = default(string), string numberOfDiscardedRequests = default(string), string bindRequests = default(string), string bindFailures = default(string), string searchRequests = default(string), string searchFailures = default(string), string connectivityRequests = default(string), string connectivityFailures = default(string), string totalFailuresToSendRequests = default(string), string totalServerTimeouts = default(string), string totalServerDownErrors = default(string), string totalOtherServerRequestErrors = default(string), string maximumConcurrentRequests = default(string), string currentConnections = default(string), string maximumOpenConnections = default(string))
        {
            this.UserAuthRequests = userAuthRequests;
            this.UserAuthFailures = userAuthFailures;
            this.UserInfoRequests = userInfoRequests;
            this.UserInfoFailures = userInfoFailures;
            this.NumberOfDiscardedRequests = numberOfDiscardedRequests;
            this.BindRequests = bindRequests;
            this.BindFailures = bindFailures;
            this.SearchRequests = searchRequests;
            this.SearchFailures = searchFailures;
            this.ConnectivityRequests = connectivityRequests;
            this.ConnectivityFailures = connectivityFailures;
            this.TotalFailuresToSendRequests = totalFailuresToSendRequests;
            this.TotalServerTimeouts = totalServerTimeouts;
            this.TotalServerDownErrors = totalServerDownErrors;
            this.TotalOtherServerRequestErrors = totalOtherServerRequestErrors;
            this.MaximumConcurrentRequests = maximumConcurrentRequests;
            this.CurrentConnections = currentConnections;
            this.MaximumOpenConnections = maximumOpenConnections;
        }

        /// <summary>
        /// Gets or Sets UserAuthRequests
        /// </summary>
        [DataMember(Name = "user_auth_requests", EmitDefaultValue = false)]
        public string UserAuthRequests { get; set; }

        /// <summary>
        /// Gets or Sets UserAuthFailures
        /// </summary>
        [DataMember(Name = "user_auth_failures", EmitDefaultValue = false)]
        public string UserAuthFailures { get; set; }

        /// <summary>
        /// Gets or Sets UserInfoRequests
        /// </summary>
        [DataMember(Name = "user_info_requests", EmitDefaultValue = false)]
        public string UserInfoRequests { get; set; }

        /// <summary>
        /// Gets or Sets UserInfoFailures
        /// </summary>
        [DataMember(Name = "user_info_failures", EmitDefaultValue = false)]
        public string UserInfoFailures { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfDiscardedRequests
        /// </summary>
        [DataMember(Name = "number_of_discarded_requests", EmitDefaultValue = false)]
        public string NumberOfDiscardedRequests { get; set; }

        /// <summary>
        /// Gets or Sets BindRequests
        /// </summary>
        [DataMember(Name = "bind_requests", EmitDefaultValue = false)]
        public string BindRequests { get; set; }

        /// <summary>
        /// Gets or Sets BindFailures
        /// </summary>
        [DataMember(Name = "bind_failures", EmitDefaultValue = false)]
        public string BindFailures { get; set; }

        /// <summary>
        /// Gets or Sets SearchRequests
        /// </summary>
        [DataMember(Name = "search_requests", EmitDefaultValue = false)]
        public string SearchRequests { get; set; }

        /// <summary>
        /// Gets or Sets SearchFailures
        /// </summary>
        [DataMember(Name = "search_failures", EmitDefaultValue = false)]
        public string SearchFailures { get; set; }

        /// <summary>
        /// Gets or Sets ConnectivityRequests
        /// </summary>
        [DataMember(Name = "connectivity_requests", EmitDefaultValue = false)]
        public string ConnectivityRequests { get; set; }

        /// <summary>
        /// Gets or Sets ConnectivityFailures
        /// </summary>
        [DataMember(Name = "connectivity_failures", EmitDefaultValue = false)]
        public string ConnectivityFailures { get; set; }

        /// <summary>
        /// Gets or Sets TotalFailuresToSendRequests
        /// </summary>
        [DataMember(Name = "total_failures_to_send_requests", EmitDefaultValue = false)]
        public string TotalFailuresToSendRequests { get; set; }

        /// <summary>
        /// Gets or Sets TotalServerTimeouts
        /// </summary>
        [DataMember(Name = "total_server_timeouts", EmitDefaultValue = false)]
        public string TotalServerTimeouts { get; set; }

        /// <summary>
        /// Gets or Sets TotalServerDownErrors
        /// </summary>
        [DataMember(Name = "total_server_down_errors", EmitDefaultValue = false)]
        public string TotalServerDownErrors { get; set; }

        /// <summary>
        /// Gets or Sets TotalOtherServerRequestErrors
        /// </summary>
        [DataMember(Name = "total_other_server_request_errors", EmitDefaultValue = false)]
        public string TotalOtherServerRequestErrors { get; set; }

        /// <summary>
        /// Gets or Sets MaximumConcurrentRequests
        /// </summary>
        [DataMember(Name = "maximum_concurrent_requests", EmitDefaultValue = false)]
        public string MaximumConcurrentRequests { get; set; }

        /// <summary>
        /// Gets or Sets CurrentConnections
        /// </summary>
        [DataMember(Name = "current_connections", EmitDefaultValue = false)]
        public string CurrentConnections { get; set; }

        /// <summary>
        /// Gets or Sets MaximumOpenConnections
        /// </summary>
        [DataMember(Name = "maximum_open_connections", EmitDefaultValue = false)]
        public string MaximumOpenConnections { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusLdapServersGlobalStatisticsDetail {\n");
            sb.Append("  UserAuthRequests: ").Append(UserAuthRequests).Append("\n");
            sb.Append("  UserAuthFailures: ").Append(UserAuthFailures).Append("\n");
            sb.Append("  UserInfoRequests: ").Append(UserInfoRequests).Append("\n");
            sb.Append("  UserInfoFailures: ").Append(UserInfoFailures).Append("\n");
            sb.Append("  NumberOfDiscardedRequests: ").Append(NumberOfDiscardedRequests).Append("\n");
            sb.Append("  BindRequests: ").Append(BindRequests).Append("\n");
            sb.Append("  BindFailures: ").Append(BindFailures).Append("\n");
            sb.Append("  SearchRequests: ").Append(SearchRequests).Append("\n");
            sb.Append("  SearchFailures: ").Append(SearchFailures).Append("\n");
            sb.Append("  ConnectivityRequests: ").Append(ConnectivityRequests).Append("\n");
            sb.Append("  ConnectivityFailures: ").Append(ConnectivityFailures).Append("\n");
            sb.Append("  TotalFailuresToSendRequests: ").Append(TotalFailuresToSendRequests).Append("\n");
            sb.Append("  TotalServerTimeouts: ").Append(TotalServerTimeouts).Append("\n");
            sb.Append("  TotalServerDownErrors: ").Append(TotalServerDownErrors).Append("\n");
            sb.Append("  TotalOtherServerRequestErrors: ").Append(TotalOtherServerRequestErrors).Append("\n");
            sb.Append("  MaximumConcurrentRequests: ").Append(MaximumConcurrentRequests).Append("\n");
            sb.Append("  CurrentConnections: ").Append(CurrentConnections).Append("\n");
            sb.Append("  MaximumOpenConnections: ").Append(MaximumOpenConnections).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusLdapServersGlobalStatisticsDetail);
        }

        /// <summary>
        /// Returns true if ShowStatusLdapServersGlobalStatisticsDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusLdapServersGlobalStatisticsDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusLdapServersGlobalStatisticsDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UserAuthRequests == input.UserAuthRequests ||
                    (this.UserAuthRequests != null &&
                    this.UserAuthRequests.Equals(input.UserAuthRequests))
                ) && 
                (
                    this.UserAuthFailures == input.UserAuthFailures ||
                    (this.UserAuthFailures != null &&
                    this.UserAuthFailures.Equals(input.UserAuthFailures))
                ) && 
                (
                    this.UserInfoRequests == input.UserInfoRequests ||
                    (this.UserInfoRequests != null &&
                    this.UserInfoRequests.Equals(input.UserInfoRequests))
                ) && 
                (
                    this.UserInfoFailures == input.UserInfoFailures ||
                    (this.UserInfoFailures != null &&
                    this.UserInfoFailures.Equals(input.UserInfoFailures))
                ) && 
                (
                    this.NumberOfDiscardedRequests == input.NumberOfDiscardedRequests ||
                    (this.NumberOfDiscardedRequests != null &&
                    this.NumberOfDiscardedRequests.Equals(input.NumberOfDiscardedRequests))
                ) && 
                (
                    this.BindRequests == input.BindRequests ||
                    (this.BindRequests != null &&
                    this.BindRequests.Equals(input.BindRequests))
                ) && 
                (
                    this.BindFailures == input.BindFailures ||
                    (this.BindFailures != null &&
                    this.BindFailures.Equals(input.BindFailures))
                ) && 
                (
                    this.SearchRequests == input.SearchRequests ||
                    (this.SearchRequests != null &&
                    this.SearchRequests.Equals(input.SearchRequests))
                ) && 
                (
                    this.SearchFailures == input.SearchFailures ||
                    (this.SearchFailures != null &&
                    this.SearchFailures.Equals(input.SearchFailures))
                ) && 
                (
                    this.ConnectivityRequests == input.ConnectivityRequests ||
                    (this.ConnectivityRequests != null &&
                    this.ConnectivityRequests.Equals(input.ConnectivityRequests))
                ) && 
                (
                    this.ConnectivityFailures == input.ConnectivityFailures ||
                    (this.ConnectivityFailures != null &&
                    this.ConnectivityFailures.Equals(input.ConnectivityFailures))
                ) && 
                (
                    this.TotalFailuresToSendRequests == input.TotalFailuresToSendRequests ||
                    (this.TotalFailuresToSendRequests != null &&
                    this.TotalFailuresToSendRequests.Equals(input.TotalFailuresToSendRequests))
                ) && 
                (
                    this.TotalServerTimeouts == input.TotalServerTimeouts ||
                    (this.TotalServerTimeouts != null &&
                    this.TotalServerTimeouts.Equals(input.TotalServerTimeouts))
                ) && 
                (
                    this.TotalServerDownErrors == input.TotalServerDownErrors ||
                    (this.TotalServerDownErrors != null &&
                    this.TotalServerDownErrors.Equals(input.TotalServerDownErrors))
                ) && 
                (
                    this.TotalOtherServerRequestErrors == input.TotalOtherServerRequestErrors ||
                    (this.TotalOtherServerRequestErrors != null &&
                    this.TotalOtherServerRequestErrors.Equals(input.TotalOtherServerRequestErrors))
                ) && 
                (
                    this.MaximumConcurrentRequests == input.MaximumConcurrentRequests ||
                    (this.MaximumConcurrentRequests != null &&
                    this.MaximumConcurrentRequests.Equals(input.MaximumConcurrentRequests))
                ) && 
                (
                    this.CurrentConnections == input.CurrentConnections ||
                    (this.CurrentConnections != null &&
                    this.CurrentConnections.Equals(input.CurrentConnections))
                ) && 
                (
                    this.MaximumOpenConnections == input.MaximumOpenConnections ||
                    (this.MaximumOpenConnections != null &&
                    this.MaximumOpenConnections.Equals(input.MaximumOpenConnections))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserAuthRequests != null)
                {
                    hashCode = (hashCode * 59) + this.UserAuthRequests.GetHashCode();
                }
                if (this.UserAuthFailures != null)
                {
                    hashCode = (hashCode * 59) + this.UserAuthFailures.GetHashCode();
                }
                if (this.UserInfoRequests != null)
                {
                    hashCode = (hashCode * 59) + this.UserInfoRequests.GetHashCode();
                }
                if (this.UserInfoFailures != null)
                {
                    hashCode = (hashCode * 59) + this.UserInfoFailures.GetHashCode();
                }
                if (this.NumberOfDiscardedRequests != null)
                {
                    hashCode = (hashCode * 59) + this.NumberOfDiscardedRequests.GetHashCode();
                }
                if (this.BindRequests != null)
                {
                    hashCode = (hashCode * 59) + this.BindRequests.GetHashCode();
                }
                if (this.BindFailures != null)
                {
                    hashCode = (hashCode * 59) + this.BindFailures.GetHashCode();
                }
                if (this.SearchRequests != null)
                {
                    hashCode = (hashCode * 59) + this.SearchRequests.GetHashCode();
                }
                if (this.SearchFailures != null)
                {
                    hashCode = (hashCode * 59) + this.SearchFailures.GetHashCode();
                }
                if (this.ConnectivityRequests != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectivityRequests.GetHashCode();
                }
                if (this.ConnectivityFailures != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectivityFailures.GetHashCode();
                }
                if (this.TotalFailuresToSendRequests != null)
                {
                    hashCode = (hashCode * 59) + this.TotalFailuresToSendRequests.GetHashCode();
                }
                if (this.TotalServerTimeouts != null)
                {
                    hashCode = (hashCode * 59) + this.TotalServerTimeouts.GetHashCode();
                }
                if (this.TotalServerDownErrors != null)
                {
                    hashCode = (hashCode * 59) + this.TotalServerDownErrors.GetHashCode();
                }
                if (this.TotalOtherServerRequestErrors != null)
                {
                    hashCode = (hashCode * 59) + this.TotalOtherServerRequestErrors.GetHashCode();
                }
                if (this.MaximumConcurrentRequests != null)
                {
                    hashCode = (hashCode * 59) + this.MaximumConcurrentRequests.GetHashCode();
                }
                if (this.CurrentConnections != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentConnections.GetHashCode();
                }
                if (this.MaximumOpenConnections != null)
                {
                    hashCode = (hashCode * 59) + this.MaximumOpenConnections.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
