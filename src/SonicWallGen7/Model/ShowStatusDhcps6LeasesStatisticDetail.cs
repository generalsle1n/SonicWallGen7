/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// dhcps6 leases statistic detail schema.
    /// </summary>
    [DataContract(Name = "show_status_dhcps6_leases_statistic_detail")]
    public partial class ShowStatusDhcps6LeasesStatisticDetail : IEquatable<ShowStatusDhcps6LeasesStatisticDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusDhcps6LeasesStatisticDetail" /> class.
        /// </summary>
        /// <param name="current">current.</param>
        /// <param name="remain">remain.</param>
        /// <param name="avaliableDynamic">avaliableDynamic.</param>
        /// <param name="avaliableStatic">avaliableStatic.</param>
        /// <param name="totalAvaliable">totalAvaliable.</param>
        /// <param name="totalConfigured">totalConfigured.</param>
        public ShowStatusDhcps6LeasesStatisticDetail(string current = default(string), string remain = default(string), string avaliableDynamic = default(string), string avaliableStatic = default(string), string totalAvaliable = default(string), string totalConfigured = default(string))
        {
            this.Current = current;
            this.Remain = remain;
            this.AvaliableDynamic = avaliableDynamic;
            this.AvaliableStatic = avaliableStatic;
            this.TotalAvaliable = totalAvaliable;
            this.TotalConfigured = totalConfigured;
        }

        /// <summary>
        /// Gets or Sets Current
        /// </summary>
        [DataMember(Name = "current", EmitDefaultValue = false)]
        public string Current { get; set; }

        /// <summary>
        /// Gets or Sets Remain
        /// </summary>
        [DataMember(Name = "remain", EmitDefaultValue = false)]
        public string Remain { get; set; }

        /// <summary>
        /// Gets or Sets AvaliableDynamic
        /// </summary>
        [DataMember(Name = "avaliable_dynamic", EmitDefaultValue = false)]
        public string AvaliableDynamic { get; set; }

        /// <summary>
        /// Gets or Sets AvaliableStatic
        /// </summary>
        [DataMember(Name = "avaliable_static", EmitDefaultValue = false)]
        public string AvaliableStatic { get; set; }

        /// <summary>
        /// Gets or Sets TotalAvaliable
        /// </summary>
        [DataMember(Name = "total_avaliable", EmitDefaultValue = false)]
        public string TotalAvaliable { get; set; }

        /// <summary>
        /// Gets or Sets TotalConfigured
        /// </summary>
        [DataMember(Name = "total_configured", EmitDefaultValue = false)]
        public string TotalConfigured { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusDhcps6LeasesStatisticDetail {\n");
            sb.Append("  Current: ").Append(Current).Append("\n");
            sb.Append("  Remain: ").Append(Remain).Append("\n");
            sb.Append("  AvaliableDynamic: ").Append(AvaliableDynamic).Append("\n");
            sb.Append("  AvaliableStatic: ").Append(AvaliableStatic).Append("\n");
            sb.Append("  TotalAvaliable: ").Append(TotalAvaliable).Append("\n");
            sb.Append("  TotalConfigured: ").Append(TotalConfigured).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusDhcps6LeasesStatisticDetail);
        }

        /// <summary>
        /// Returns true if ShowStatusDhcps6LeasesStatisticDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusDhcps6LeasesStatisticDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusDhcps6LeasesStatisticDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Current == input.Current ||
                    (this.Current != null &&
                    this.Current.Equals(input.Current))
                ) && 
                (
                    this.Remain == input.Remain ||
                    (this.Remain != null &&
                    this.Remain.Equals(input.Remain))
                ) && 
                (
                    this.AvaliableDynamic == input.AvaliableDynamic ||
                    (this.AvaliableDynamic != null &&
                    this.AvaliableDynamic.Equals(input.AvaliableDynamic))
                ) && 
                (
                    this.AvaliableStatic == input.AvaliableStatic ||
                    (this.AvaliableStatic != null &&
                    this.AvaliableStatic.Equals(input.AvaliableStatic))
                ) && 
                (
                    this.TotalAvaliable == input.TotalAvaliable ||
                    (this.TotalAvaliable != null &&
                    this.TotalAvaliable.Equals(input.TotalAvaliable))
                ) && 
                (
                    this.TotalConfigured == input.TotalConfigured ||
                    (this.TotalConfigured != null &&
                    this.TotalConfigured.Equals(input.TotalConfigured))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Current != null)
                {
                    hashCode = (hashCode * 59) + this.Current.GetHashCode();
                }
                if (this.Remain != null)
                {
                    hashCode = (hashCode * 59) + this.Remain.GetHashCode();
                }
                if (this.AvaliableDynamic != null)
                {
                    hashCode = (hashCode * 59) + this.AvaliableDynamic.GetHashCode();
                }
                if (this.AvaliableStatic != null)
                {
                    hashCode = (hashCode * 59) + this.AvaliableStatic.GetHashCode();
                }
                if (this.TotalAvaliable != null)
                {
                    hashCode = (hashCode * 59) + this.TotalAvaliable.GetHashCode();
                }
                if (this.TotalConfigured != null)
                {
                    hashCode = (hashCode * 59) + this.TotalConfigured.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
