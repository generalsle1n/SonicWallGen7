/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// ShowStatusNatPolicyListInner
    /// </summary>
    [DataContract(Name = "show_status_nat_policy_list_inner")]
    public partial class ShowStatusNatPolicyListInner : IEquatable<ShowStatusNatPolicyListInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusNatPolicyListInner" /> class.
        /// </summary>
        /// <param name="uuid">uuid.</param>
        /// <param name="inboundInterface">inboundInterface.</param>
        /// <param name="outboundInterface">outboundInterface.</param>
        /// <param name="originalSource">originalSource.</param>
        /// <param name="translatedSource">translatedSource.</param>
        /// <param name="originalDestination">originalDestination.</param>
        /// <param name="translatedDestination">translatedDestination.</param>
        /// <param name="originalService">originalService.</param>
        /// <param name="translatedService">translatedService.</param>
        /// <param name="usageCount">usageCount.</param>
        /// <param name="rxBytes">rxBytes.</param>
        /// <param name="rxPackets">rxPackets.</param>
        /// <param name="txBytes">txBytes.</param>
        /// <param name="txPackets">txPackets.</param>
        public ShowStatusNatPolicyListInner(string uuid = default(string), string inboundInterface = default(string), string outboundInterface = default(string), string originalSource = default(string), string translatedSource = default(string), string originalDestination = default(string), string translatedDestination = default(string), string originalService = default(string), string translatedService = default(string), string usageCount = default(string), string rxBytes = default(string), string rxPackets = default(string), string txBytes = default(string), string txPackets = default(string))
        {
            this.Uuid = uuid;
            this.InboundInterface = inboundInterface;
            this.OutboundInterface = outboundInterface;
            this.OriginalSource = originalSource;
            this.TranslatedSource = translatedSource;
            this.OriginalDestination = originalDestination;
            this.TranslatedDestination = translatedDestination;
            this.OriginalService = originalService;
            this.TranslatedService = translatedService;
            this.UsageCount = usageCount;
            this.RxBytes = rxBytes;
            this.RxPackets = rxPackets;
            this.TxBytes = txBytes;
            this.TxPackets = txPackets;
        }

        /// <summary>
        /// Gets or Sets Uuid
        /// </summary>
        [DataMember(Name = "uuid", EmitDefaultValue = false)]
        public string Uuid { get; set; }

        /// <summary>
        /// Gets or Sets InboundInterface
        /// </summary>
        [DataMember(Name = "inbound_interface", EmitDefaultValue = false)]
        public string InboundInterface { get; set; }

        /// <summary>
        /// Gets or Sets OutboundInterface
        /// </summary>
        [DataMember(Name = "outbound_interface", EmitDefaultValue = false)]
        public string OutboundInterface { get; set; }

        /// <summary>
        /// Gets or Sets OriginalSource
        /// </summary>
        [DataMember(Name = "original_source", EmitDefaultValue = false)]
        public string OriginalSource { get; set; }

        /// <summary>
        /// Gets or Sets TranslatedSource
        /// </summary>
        [DataMember(Name = "translated_source", EmitDefaultValue = false)]
        public string TranslatedSource { get; set; }

        /// <summary>
        /// Gets or Sets OriginalDestination
        /// </summary>
        [DataMember(Name = "original_destination", EmitDefaultValue = false)]
        public string OriginalDestination { get; set; }

        /// <summary>
        /// Gets or Sets TranslatedDestination
        /// </summary>
        [DataMember(Name = "translated_destination", EmitDefaultValue = false)]
        public string TranslatedDestination { get; set; }

        /// <summary>
        /// Gets or Sets OriginalService
        /// </summary>
        [DataMember(Name = "original_service", EmitDefaultValue = false)]
        public string OriginalService { get; set; }

        /// <summary>
        /// Gets or Sets TranslatedService
        /// </summary>
        [DataMember(Name = "translated_service", EmitDefaultValue = false)]
        public string TranslatedService { get; set; }

        /// <summary>
        /// Gets or Sets UsageCount
        /// </summary>
        [DataMember(Name = "usage_count", EmitDefaultValue = false)]
        public string UsageCount { get; set; }

        /// <summary>
        /// Gets or Sets RxBytes
        /// </summary>
        [DataMember(Name = "rx_bytes", EmitDefaultValue = false)]
        public string RxBytes { get; set; }

        /// <summary>
        /// Gets or Sets RxPackets
        /// </summary>
        [DataMember(Name = "rx_packets", EmitDefaultValue = false)]
        public string RxPackets { get; set; }

        /// <summary>
        /// Gets or Sets TxBytes
        /// </summary>
        [DataMember(Name = "tx_bytes", EmitDefaultValue = false)]
        public string TxBytes { get; set; }

        /// <summary>
        /// Gets or Sets TxPackets
        /// </summary>
        [DataMember(Name = "tx_packets", EmitDefaultValue = false)]
        public string TxPackets { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusNatPolicyListInner {\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  InboundInterface: ").Append(InboundInterface).Append("\n");
            sb.Append("  OutboundInterface: ").Append(OutboundInterface).Append("\n");
            sb.Append("  OriginalSource: ").Append(OriginalSource).Append("\n");
            sb.Append("  TranslatedSource: ").Append(TranslatedSource).Append("\n");
            sb.Append("  OriginalDestination: ").Append(OriginalDestination).Append("\n");
            sb.Append("  TranslatedDestination: ").Append(TranslatedDestination).Append("\n");
            sb.Append("  OriginalService: ").Append(OriginalService).Append("\n");
            sb.Append("  TranslatedService: ").Append(TranslatedService).Append("\n");
            sb.Append("  UsageCount: ").Append(UsageCount).Append("\n");
            sb.Append("  RxBytes: ").Append(RxBytes).Append("\n");
            sb.Append("  RxPackets: ").Append(RxPackets).Append("\n");
            sb.Append("  TxBytes: ").Append(TxBytes).Append("\n");
            sb.Append("  TxPackets: ").Append(TxPackets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusNatPolicyListInner);
        }

        /// <summary>
        /// Returns true if ShowStatusNatPolicyListInner instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusNatPolicyListInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusNatPolicyListInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.InboundInterface == input.InboundInterface ||
                    (this.InboundInterface != null &&
                    this.InboundInterface.Equals(input.InboundInterface))
                ) && 
                (
                    this.OutboundInterface == input.OutboundInterface ||
                    (this.OutboundInterface != null &&
                    this.OutboundInterface.Equals(input.OutboundInterface))
                ) && 
                (
                    this.OriginalSource == input.OriginalSource ||
                    (this.OriginalSource != null &&
                    this.OriginalSource.Equals(input.OriginalSource))
                ) && 
                (
                    this.TranslatedSource == input.TranslatedSource ||
                    (this.TranslatedSource != null &&
                    this.TranslatedSource.Equals(input.TranslatedSource))
                ) && 
                (
                    this.OriginalDestination == input.OriginalDestination ||
                    (this.OriginalDestination != null &&
                    this.OriginalDestination.Equals(input.OriginalDestination))
                ) && 
                (
                    this.TranslatedDestination == input.TranslatedDestination ||
                    (this.TranslatedDestination != null &&
                    this.TranslatedDestination.Equals(input.TranslatedDestination))
                ) && 
                (
                    this.OriginalService == input.OriginalService ||
                    (this.OriginalService != null &&
                    this.OriginalService.Equals(input.OriginalService))
                ) && 
                (
                    this.TranslatedService == input.TranslatedService ||
                    (this.TranslatedService != null &&
                    this.TranslatedService.Equals(input.TranslatedService))
                ) && 
                (
                    this.UsageCount == input.UsageCount ||
                    (this.UsageCount != null &&
                    this.UsageCount.Equals(input.UsageCount))
                ) && 
                (
                    this.RxBytes == input.RxBytes ||
                    (this.RxBytes != null &&
                    this.RxBytes.Equals(input.RxBytes))
                ) && 
                (
                    this.RxPackets == input.RxPackets ||
                    (this.RxPackets != null &&
                    this.RxPackets.Equals(input.RxPackets))
                ) && 
                (
                    this.TxBytes == input.TxBytes ||
                    (this.TxBytes != null &&
                    this.TxBytes.Equals(input.TxBytes))
                ) && 
                (
                    this.TxPackets == input.TxPackets ||
                    (this.TxPackets != null &&
                    this.TxPackets.Equals(input.TxPackets))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uuid != null)
                {
                    hashCode = (hashCode * 59) + this.Uuid.GetHashCode();
                }
                if (this.InboundInterface != null)
                {
                    hashCode = (hashCode * 59) + this.InboundInterface.GetHashCode();
                }
                if (this.OutboundInterface != null)
                {
                    hashCode = (hashCode * 59) + this.OutboundInterface.GetHashCode();
                }
                if (this.OriginalSource != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalSource.GetHashCode();
                }
                if (this.TranslatedSource != null)
                {
                    hashCode = (hashCode * 59) + this.TranslatedSource.GetHashCode();
                }
                if (this.OriginalDestination != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalDestination.GetHashCode();
                }
                if (this.TranslatedDestination != null)
                {
                    hashCode = (hashCode * 59) + this.TranslatedDestination.GetHashCode();
                }
                if (this.OriginalService != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalService.GetHashCode();
                }
                if (this.TranslatedService != null)
                {
                    hashCode = (hashCode * 59) + this.TranslatedService.GetHashCode();
                }
                if (this.UsageCount != null)
                {
                    hashCode = (hashCode * 59) + this.UsageCount.GetHashCode();
                }
                if (this.RxBytes != null)
                {
                    hashCode = (hashCode * 59) + this.RxBytes.GetHashCode();
                }
                if (this.RxPackets != null)
                {
                    hashCode = (hashCode * 59) + this.RxPackets.GetHashCode();
                }
                if (this.TxBytes != null)
                {
                    hashCode = (hashCode * 59) + this.TxBytes.GetHashCode();
                }
                if (this.TxPackets != null)
                {
                    hashCode = (hashCode * 59) + this.TxPackets.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
