/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure TACACS settings.
    /// </summary>
    [DataContract(Name = "user_tacacs_base_user_tacacs")]
    public partial class UserTacacsBaseUserTacacs : IEquatable<UserTacacsBaseUserTacacs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserTacacsBaseUserTacacs" /> class.
        /// </summary>
        /// <param name="localUsersOnly">Allow only TACACS users with local accounts..</param>
        /// <param name="defaultUserGroup">Select a default user group for TACACS users..</param>
        /// <param name="timeout">Set the timeout on replies from the TACACS+ servers..</param>
        /// <param name="retries">Set the maximum number of retries to make..</param>
        /// <param name="singleConnect">Enable support for single connect..</param>
        /// <param name="periodicCheck">Enable periodic check of TACACS servers that are down..</param>
        /// <param name="userGroupMechanism">userGroupMechanism.</param>
        public UserTacacsBaseUserTacacs(bool localUsersOnly = default(bool), string defaultUserGroup = default(string), decimal timeout = default(decimal), decimal retries = default(decimal), bool singleConnect = default(bool), bool periodicCheck = default(bool), UserTacacsBaseUserTacacsUserGroupMechanism userGroupMechanism = default(UserTacacsBaseUserTacacsUserGroupMechanism))
        {
            this.LocalUsersOnly = localUsersOnly;
            this.DefaultUserGroup = defaultUserGroup;
            this.Timeout = timeout;
            this.Retries = retries;
            this.SingleConnect = singleConnect;
            this.PeriodicCheck = periodicCheck;
            this.UserGroupMechanism = userGroupMechanism;
        }

        /// <summary>
        /// Allow only TACACS users with local accounts.
        /// </summary>
        /// <value>Allow only TACACS users with local accounts.</value>
        [DataMember(Name = "local_users_only", EmitDefaultValue = true)]
        public bool LocalUsersOnly { get; set; }

        /// <summary>
        /// Select a default user group for TACACS users.
        /// </summary>
        /// <value>Select a default user group for TACACS users.</value>
        [DataMember(Name = "default_user_group", EmitDefaultValue = false)]
        public string DefaultUserGroup { get; set; }

        /// <summary>
        /// Set the timeout on replies from the TACACS+ servers.
        /// </summary>
        /// <value>Set the timeout on replies from the TACACS+ servers.</value>
        [DataMember(Name = "timeout", EmitDefaultValue = false)]
        public decimal Timeout { get; set; }

        /// <summary>
        /// Set the maximum number of retries to make.
        /// </summary>
        /// <value>Set the maximum number of retries to make.</value>
        [DataMember(Name = "retries", EmitDefaultValue = false)]
        public decimal Retries { get; set; }

        /// <summary>
        /// Enable support for single connect.
        /// </summary>
        /// <value>Enable support for single connect.</value>
        [DataMember(Name = "single_connect", EmitDefaultValue = true)]
        public bool SingleConnect { get; set; }

        /// <summary>
        /// Enable periodic check of TACACS servers that are down.
        /// </summary>
        /// <value>Enable periodic check of TACACS servers that are down.</value>
        [DataMember(Name = "periodic_check", EmitDefaultValue = true)]
        public bool PeriodicCheck { get; set; }

        /// <summary>
        /// Gets or Sets UserGroupMechanism
        /// </summary>
        [DataMember(Name = "user_group_mechanism", EmitDefaultValue = false)]
        public UserTacacsBaseUserTacacsUserGroupMechanism UserGroupMechanism { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserTacacsBaseUserTacacs {\n");
            sb.Append("  LocalUsersOnly: ").Append(LocalUsersOnly).Append("\n");
            sb.Append("  DefaultUserGroup: ").Append(DefaultUserGroup).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  Retries: ").Append(Retries).Append("\n");
            sb.Append("  SingleConnect: ").Append(SingleConnect).Append("\n");
            sb.Append("  PeriodicCheck: ").Append(PeriodicCheck).Append("\n");
            sb.Append("  UserGroupMechanism: ").Append(UserGroupMechanism).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserTacacsBaseUserTacacs);
        }

        /// <summary>
        /// Returns true if UserTacacsBaseUserTacacs instances are equal
        /// </summary>
        /// <param name="input">Instance of UserTacacsBaseUserTacacs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserTacacsBaseUserTacacs input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LocalUsersOnly == input.LocalUsersOnly ||
                    this.LocalUsersOnly.Equals(input.LocalUsersOnly)
                ) && 
                (
                    this.DefaultUserGroup == input.DefaultUserGroup ||
                    (this.DefaultUserGroup != null &&
                    this.DefaultUserGroup.Equals(input.DefaultUserGroup))
                ) && 
                (
                    this.Timeout == input.Timeout ||
                    this.Timeout.Equals(input.Timeout)
                ) && 
                (
                    this.Retries == input.Retries ||
                    this.Retries.Equals(input.Retries)
                ) && 
                (
                    this.SingleConnect == input.SingleConnect ||
                    this.SingleConnect.Equals(input.SingleConnect)
                ) && 
                (
                    this.PeriodicCheck == input.PeriodicCheck ||
                    this.PeriodicCheck.Equals(input.PeriodicCheck)
                ) && 
                (
                    this.UserGroupMechanism == input.UserGroupMechanism ||
                    (this.UserGroupMechanism != null &&
                    this.UserGroupMechanism.Equals(input.UserGroupMechanism))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.LocalUsersOnly.GetHashCode();
                if (this.DefaultUserGroup != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultUserGroup.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Timeout.GetHashCode();
                hashCode = (hashCode * 59) + this.Retries.GetHashCode();
                hashCode = (hashCode * 59) + this.SingleConnect.GetHashCode();
                hashCode = (hashCode * 59) + this.PeriodicCheck.GetHashCode();
                if (this.UserGroupMechanism != null)
                {
                    hashCode = (hashCode * 59) + this.UserGroupMechanism.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
