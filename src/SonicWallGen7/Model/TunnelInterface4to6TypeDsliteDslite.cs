/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Dslite tunnel.
    /// </summary>
    [DataContract(Name = "tunnel_interface_4to6_type_dslite_dslite")]
    public partial class TunnelInterface4to6TypeDsliteDslite : IEquatable<TunnelInterface4to6TypeDsliteDslite>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TunnelInterface4to6TypeDsliteDslite" /> class.
        /// </summary>
        /// <param name="boundTo">boundTo.</param>
        /// <param name="local">local.</param>
        /// <param name="remote">remote.</param>
        /// <param name="localIpv4">Set dslite tunnel interface local IPv4 address..</param>
        public TunnelInterface4to6TypeDsliteDslite(TunnelInterface4to6TypeDsliteDsliteBoundTo boundTo = default(TunnelInterface4to6TypeDsliteDsliteBoundTo), TunnelInterface4to6TypeDsliteDsliteLocal local = default(TunnelInterface4to6TypeDsliteDsliteLocal), TunnelInterface4to6TypeDsliteDsliteRemote remote = default(TunnelInterface4to6TypeDsliteDsliteRemote), string localIpv4 = default(string))
        {
            this.BoundTo = boundTo;
            this.Local = local;
            this.Remote = remote;
            this.LocalIpv4 = localIpv4;
        }

        /// <summary>
        /// Gets or Sets BoundTo
        /// </summary>
        [DataMember(Name = "bound_to", EmitDefaultValue = true)]
        public TunnelInterface4to6TypeDsliteDsliteBoundTo BoundTo { get; set; }

        /// <summary>
        /// Gets or Sets Local
        /// </summary>
        [DataMember(Name = "local", EmitDefaultValue = false)]
        public TunnelInterface4to6TypeDsliteDsliteLocal Local { get; set; }

        /// <summary>
        /// Gets or Sets Remote
        /// </summary>
        [DataMember(Name = "remote", EmitDefaultValue = false)]
        public TunnelInterface4to6TypeDsliteDsliteRemote Remote { get; set; }

        /// <summary>
        /// Set dslite tunnel interface local IPv4 address.
        /// </summary>
        /// <value>Set dslite tunnel interface local IPv4 address.</value>
        [DataMember(Name = "local_ipv4", EmitDefaultValue = false)]
        public string LocalIpv4 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TunnelInterface4to6TypeDsliteDslite {\n");
            sb.Append("  BoundTo: ").Append(BoundTo).Append("\n");
            sb.Append("  Local: ").Append(Local).Append("\n");
            sb.Append("  Remote: ").Append(Remote).Append("\n");
            sb.Append("  LocalIpv4: ").Append(LocalIpv4).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TunnelInterface4to6TypeDsliteDslite);
        }

        /// <summary>
        /// Returns true if TunnelInterface4to6TypeDsliteDslite instances are equal
        /// </summary>
        /// <param name="input">Instance of TunnelInterface4to6TypeDsliteDslite to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TunnelInterface4to6TypeDsliteDslite input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BoundTo == input.BoundTo ||
                    (this.BoundTo != null &&
                    this.BoundTo.Equals(input.BoundTo))
                ) && 
                (
                    this.Local == input.Local ||
                    (this.Local != null &&
                    this.Local.Equals(input.Local))
                ) && 
                (
                    this.Remote == input.Remote ||
                    (this.Remote != null &&
                    this.Remote.Equals(input.Remote))
                ) && 
                (
                    this.LocalIpv4 == input.LocalIpv4 ||
                    (this.LocalIpv4 != null &&
                    this.LocalIpv4.Equals(input.LocalIpv4))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BoundTo != null)
                {
                    hashCode = (hashCode * 59) + this.BoundTo.GetHashCode();
                }
                if (this.Local != null)
                {
                    hashCode = (hashCode * 59) + this.Local.GetHashCode();
                }
                if (this.Remote != null)
                {
                    hashCode = (hashCode * 59) + this.Remote.GetHashCode();
                }
                if (this.LocalIpv4 != null)
                {
                    hashCode = (hashCode * 59) + this.LocalIpv4.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
