/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// action-val for packet crafting using icmp
    /// </summary>
    [DataContract(Name = "packet_replay_packet_crafting_icmp_packet_replay_packet_crafting_icmp_action_val")]
    public partial class PacketReplayPacketCraftingIcmpPacketReplayPacketCraftingIcmpActionVal : IEquatable<PacketReplayPacketCraftingIcmpPacketReplayPacketCraftingIcmpActionVal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PacketReplayPacketCraftingIcmpPacketReplayPacketCraftingIcmpActionVal" /> class.
        /// </summary>
        /// <param name="destIface">Enter destination interface * Set to null to represent an unconfigured state..</param>
        /// <param name="destMac">Enter destination Mac Address * Set to null to represent an unconfigured state..</param>
        /// <param name="srcMac">Enter source Mac Address * Set to null to represent an unconfigured state..</param>
        /// <param name="etherType">Enter ether type.</param>
        /// <param name="ipAddrType">Enter IP address type.</param>
        /// <param name="srcAddr">Enter Source Address * Set to null to represent an unconfigured state..</param>
        /// <param name="destAddr">Enter Destination Address * Set to null to represent an unconfigured state..</param>
        /// <param name="ttlVal">Enter TTL Value * Set to null to represent an unconfigured state..</param>
        /// <param name="icmpType">Enter ICMP Type value * Set to null to represent an unconfigured state..</param>
        /// <param name="idVal">Enter ID value * Set to null to represent an unconfigured state..</param>
        /// <param name="sequenceVal">Enter Sequence Value * Set to null to represent an unconfigured state..</param>
        /// <param name="payload">Enter Payload * Set to null to represent an unconfigured state..</param>
        public PacketReplayPacketCraftingIcmpPacketReplayPacketCraftingIcmpActionVal(decimal? destIface = default(decimal?), string destMac = default(string), string srcMac = default(string), decimal etherType = default(decimal), decimal ipAddrType = default(decimal), string srcAddr = default(string), string destAddr = default(string), decimal? ttlVal = default(decimal?), decimal? icmpType = default(decimal?), decimal? idVal = default(decimal?), decimal? sequenceVal = default(decimal?), string payload = default(string))
        {
            this.DestIface = destIface;
            this.DestMac = destMac;
            this.SrcMac = srcMac;
            this.EtherType = etherType;
            this.IpAddrType = ipAddrType;
            this.SrcAddr = srcAddr;
            this.DestAddr = destAddr;
            this.TtlVal = ttlVal;
            this.IcmpType = icmpType;
            this.IdVal = idVal;
            this.SequenceVal = sequenceVal;
            this.Payload = payload;
        }

        /// <summary>
        /// Enter destination interface * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Enter destination interface * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "dest_iface", EmitDefaultValue = true)]
        public decimal? DestIface { get; set; }

        /// <summary>
        /// Enter destination Mac Address * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Enter destination Mac Address * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "dest_mac", EmitDefaultValue = true)]
        public string DestMac { get; set; }

        /// <summary>
        /// Enter source Mac Address * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Enter source Mac Address * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "src_mac", EmitDefaultValue = true)]
        public string SrcMac { get; set; }

        /// <summary>
        /// Enter ether type
        /// </summary>
        /// <value>Enter ether type</value>
        [DataMember(Name = "ether_type", EmitDefaultValue = false)]
        public decimal EtherType { get; set; }

        /// <summary>
        /// Enter IP address type
        /// </summary>
        /// <value>Enter IP address type</value>
        [DataMember(Name = "ip_addr_type", EmitDefaultValue = false)]
        public decimal IpAddrType { get; set; }

        /// <summary>
        /// Enter Source Address * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Enter Source Address * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "src_addr", EmitDefaultValue = true)]
        public string SrcAddr { get; set; }

        /// <summary>
        /// Enter Destination Address * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Enter Destination Address * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "dest_addr", EmitDefaultValue = true)]
        public string DestAddr { get; set; }

        /// <summary>
        /// Enter TTL Value * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Enter TTL Value * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "ttl_val", EmitDefaultValue = true)]
        public decimal? TtlVal { get; set; }

        /// <summary>
        /// Enter ICMP Type value * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Enter ICMP Type value * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "icmp_type", EmitDefaultValue = true)]
        public decimal? IcmpType { get; set; }

        /// <summary>
        /// Enter ID value * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Enter ID value * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "id_val", EmitDefaultValue = true)]
        public decimal? IdVal { get; set; }

        /// <summary>
        /// Enter Sequence Value * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Enter Sequence Value * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "sequence_val", EmitDefaultValue = true)]
        public decimal? SequenceVal { get; set; }

        /// <summary>
        /// Enter Payload * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Enter Payload * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "payload", EmitDefaultValue = true)]
        public string Payload { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PacketReplayPacketCraftingIcmpPacketReplayPacketCraftingIcmpActionVal {\n");
            sb.Append("  DestIface: ").Append(DestIface).Append("\n");
            sb.Append("  DestMac: ").Append(DestMac).Append("\n");
            sb.Append("  SrcMac: ").Append(SrcMac).Append("\n");
            sb.Append("  EtherType: ").Append(EtherType).Append("\n");
            sb.Append("  IpAddrType: ").Append(IpAddrType).Append("\n");
            sb.Append("  SrcAddr: ").Append(SrcAddr).Append("\n");
            sb.Append("  DestAddr: ").Append(DestAddr).Append("\n");
            sb.Append("  TtlVal: ").Append(TtlVal).Append("\n");
            sb.Append("  IcmpType: ").Append(IcmpType).Append("\n");
            sb.Append("  IdVal: ").Append(IdVal).Append("\n");
            sb.Append("  SequenceVal: ").Append(SequenceVal).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PacketReplayPacketCraftingIcmpPacketReplayPacketCraftingIcmpActionVal);
        }

        /// <summary>
        /// Returns true if PacketReplayPacketCraftingIcmpPacketReplayPacketCraftingIcmpActionVal instances are equal
        /// </summary>
        /// <param name="input">Instance of PacketReplayPacketCraftingIcmpPacketReplayPacketCraftingIcmpActionVal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PacketReplayPacketCraftingIcmpPacketReplayPacketCraftingIcmpActionVal input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DestIface == input.DestIface ||
                    (this.DestIface != null &&
                    this.DestIface.Equals(input.DestIface))
                ) && 
                (
                    this.DestMac == input.DestMac ||
                    (this.DestMac != null &&
                    this.DestMac.Equals(input.DestMac))
                ) && 
                (
                    this.SrcMac == input.SrcMac ||
                    (this.SrcMac != null &&
                    this.SrcMac.Equals(input.SrcMac))
                ) && 
                (
                    this.EtherType == input.EtherType ||
                    this.EtherType.Equals(input.EtherType)
                ) && 
                (
                    this.IpAddrType == input.IpAddrType ||
                    this.IpAddrType.Equals(input.IpAddrType)
                ) && 
                (
                    this.SrcAddr == input.SrcAddr ||
                    (this.SrcAddr != null &&
                    this.SrcAddr.Equals(input.SrcAddr))
                ) && 
                (
                    this.DestAddr == input.DestAddr ||
                    (this.DestAddr != null &&
                    this.DestAddr.Equals(input.DestAddr))
                ) && 
                (
                    this.TtlVal == input.TtlVal ||
                    (this.TtlVal != null &&
                    this.TtlVal.Equals(input.TtlVal))
                ) && 
                (
                    this.IcmpType == input.IcmpType ||
                    (this.IcmpType != null &&
                    this.IcmpType.Equals(input.IcmpType))
                ) && 
                (
                    this.IdVal == input.IdVal ||
                    (this.IdVal != null &&
                    this.IdVal.Equals(input.IdVal))
                ) && 
                (
                    this.SequenceVal == input.SequenceVal ||
                    (this.SequenceVal != null &&
                    this.SequenceVal.Equals(input.SequenceVal))
                ) && 
                (
                    this.Payload == input.Payload ||
                    (this.Payload != null &&
                    this.Payload.Equals(input.Payload))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DestIface != null)
                {
                    hashCode = (hashCode * 59) + this.DestIface.GetHashCode();
                }
                if (this.DestMac != null)
                {
                    hashCode = (hashCode * 59) + this.DestMac.GetHashCode();
                }
                if (this.SrcMac != null)
                {
                    hashCode = (hashCode * 59) + this.SrcMac.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EtherType.GetHashCode();
                hashCode = (hashCode * 59) + this.IpAddrType.GetHashCode();
                if (this.SrcAddr != null)
                {
                    hashCode = (hashCode * 59) + this.SrcAddr.GetHashCode();
                }
                if (this.DestAddr != null)
                {
                    hashCode = (hashCode * 59) + this.DestAddr.GetHashCode();
                }
                if (this.TtlVal != null)
                {
                    hashCode = (hashCode * 59) + this.TtlVal.GetHashCode();
                }
                if (this.IcmpType != null)
                {
                    hashCode = (hashCode * 59) + this.IcmpType.GetHashCode();
                }
                if (this.IdVal != null)
                {
                    hashCode = (hashCode * 59) + this.IdVal.GetHashCode();
                }
                if (this.SequenceVal != null)
                {
                    hashCode = (hashCode * 59) + this.SequenceVal.GetHashCode();
                }
                if (this.Payload != null)
                {
                    hashCode = (hashCode * 59) + this.Payload.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
