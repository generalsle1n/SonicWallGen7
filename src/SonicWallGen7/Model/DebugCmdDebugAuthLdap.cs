/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// cofigure different ldap debug option.
    /// </summary>
    [DataContract(Name = "debug_cmd_debug_auth_ldap")]
    public partial class DebugCmdDebugAuthLdap : IEquatable<DebugCmdDebugAuthLdap>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DebugCmdDebugAuthLdap" /> class.
        /// </summary>
        /// <param name="varClient">Enable ldap client debug.</param>
        /// <param name="daemon">Enable ldap daemon debug.</param>
        /// <param name="tool">Enable ldap tool debug.</param>
        /// <param name="relay">Enable ldap relay debug.</param>
        /// <param name="trace">Enable ldap trace debug.</param>
        /// <param name="packets">Enable ldap packets debug.</param>
        /// <param name="args">Enable ldap arguments debug.</param>
        /// <param name="conns">Enable ldap conns debug.</param>
        /// <param name="ber">Enable ldap ber debug.</param>
        /// <param name="authFilter">Enable ldap filter debug.</param>
        /// <param name="parse">Enable ldap parse debug.</param>
        /// <param name="toolverbose">Enable ldap toolverbose debug.</param>
        /// <param name="nameresolve">Enable ldap nameresolve debug.</param>
        /// <param name="pktdump">Enable ldap pktdump debug.</param>
        /// <param name="socketdump">Enable ldap socketdump debug.</param>
        /// <param name="all">Enable all ldap debug.</param>
        public DebugCmdDebugAuthLdap(bool varClient = default(bool), bool daemon = default(bool), bool tool = default(bool), bool relay = default(bool), bool trace = default(bool), bool packets = default(bool), bool args = default(bool), bool conns = default(bool), bool ber = default(bool), bool authFilter = default(bool), bool parse = default(bool), bool toolverbose = default(bool), bool nameresolve = default(bool), bool pktdump = default(bool), bool socketdump = default(bool), bool all = default(bool))
        {
            this.VarClient = varClient;
            this.Daemon = daemon;
            this.Tool = tool;
            this.Relay = relay;
            this.Trace = trace;
            this.Packets = packets;
            this.Args = args;
            this.Conns = conns;
            this.Ber = ber;
            this.AuthFilter = authFilter;
            this.Parse = parse;
            this.Toolverbose = toolverbose;
            this.Nameresolve = nameresolve;
            this.Pktdump = pktdump;
            this.Socketdump = socketdump;
            this.All = all;
        }

        /// <summary>
        /// Enable ldap client debug
        /// </summary>
        /// <value>Enable ldap client debug</value>
        [DataMember(Name = "client", EmitDefaultValue = true)]
        public bool VarClient { get; set; }

        /// <summary>
        /// Enable ldap daemon debug
        /// </summary>
        /// <value>Enable ldap daemon debug</value>
        [DataMember(Name = "daemon", EmitDefaultValue = true)]
        public bool Daemon { get; set; }

        /// <summary>
        /// Enable ldap tool debug
        /// </summary>
        /// <value>Enable ldap tool debug</value>
        [DataMember(Name = "tool", EmitDefaultValue = true)]
        public bool Tool { get; set; }

        /// <summary>
        /// Enable ldap relay debug
        /// </summary>
        /// <value>Enable ldap relay debug</value>
        [DataMember(Name = "relay", EmitDefaultValue = true)]
        public bool Relay { get; set; }

        /// <summary>
        /// Enable ldap trace debug
        /// </summary>
        /// <value>Enable ldap trace debug</value>
        [DataMember(Name = "trace", EmitDefaultValue = true)]
        public bool Trace { get; set; }

        /// <summary>
        /// Enable ldap packets debug
        /// </summary>
        /// <value>Enable ldap packets debug</value>
        [DataMember(Name = "packets", EmitDefaultValue = true)]
        public bool Packets { get; set; }

        /// <summary>
        /// Enable ldap arguments debug
        /// </summary>
        /// <value>Enable ldap arguments debug</value>
        [DataMember(Name = "args", EmitDefaultValue = true)]
        public bool Args { get; set; }

        /// <summary>
        /// Enable ldap conns debug
        /// </summary>
        /// <value>Enable ldap conns debug</value>
        [DataMember(Name = "conns", EmitDefaultValue = true)]
        public bool Conns { get; set; }

        /// <summary>
        /// Enable ldap ber debug
        /// </summary>
        /// <value>Enable ldap ber debug</value>
        [DataMember(Name = "ber", EmitDefaultValue = true)]
        public bool Ber { get; set; }

        /// <summary>
        /// Enable ldap filter debug
        /// </summary>
        /// <value>Enable ldap filter debug</value>
        [DataMember(Name = "auth_filter", EmitDefaultValue = true)]
        public bool AuthFilter { get; set; }

        /// <summary>
        /// Enable ldap parse debug
        /// </summary>
        /// <value>Enable ldap parse debug</value>
        [DataMember(Name = "parse", EmitDefaultValue = true)]
        public bool Parse { get; set; }

        /// <summary>
        /// Enable ldap toolverbose debug
        /// </summary>
        /// <value>Enable ldap toolverbose debug</value>
        [DataMember(Name = "toolverbose", EmitDefaultValue = true)]
        public bool Toolverbose { get; set; }

        /// <summary>
        /// Enable ldap nameresolve debug
        /// </summary>
        /// <value>Enable ldap nameresolve debug</value>
        [DataMember(Name = "nameresolve", EmitDefaultValue = true)]
        public bool Nameresolve { get; set; }

        /// <summary>
        /// Enable ldap pktdump debug
        /// </summary>
        /// <value>Enable ldap pktdump debug</value>
        [DataMember(Name = "pktdump", EmitDefaultValue = true)]
        public bool Pktdump { get; set; }

        /// <summary>
        /// Enable ldap socketdump debug
        /// </summary>
        /// <value>Enable ldap socketdump debug</value>
        [DataMember(Name = "socketdump", EmitDefaultValue = true)]
        public bool Socketdump { get; set; }

        /// <summary>
        /// Enable all ldap debug
        /// </summary>
        /// <value>Enable all ldap debug</value>
        [DataMember(Name = "all", EmitDefaultValue = true)]
        public bool All { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DebugCmdDebugAuthLdap {\n");
            sb.Append("  VarClient: ").Append(VarClient).Append("\n");
            sb.Append("  Daemon: ").Append(Daemon).Append("\n");
            sb.Append("  Tool: ").Append(Tool).Append("\n");
            sb.Append("  Relay: ").Append(Relay).Append("\n");
            sb.Append("  Trace: ").Append(Trace).Append("\n");
            sb.Append("  Packets: ").Append(Packets).Append("\n");
            sb.Append("  Args: ").Append(Args).Append("\n");
            sb.Append("  Conns: ").Append(Conns).Append("\n");
            sb.Append("  Ber: ").Append(Ber).Append("\n");
            sb.Append("  AuthFilter: ").Append(AuthFilter).Append("\n");
            sb.Append("  Parse: ").Append(Parse).Append("\n");
            sb.Append("  Toolverbose: ").Append(Toolverbose).Append("\n");
            sb.Append("  Nameresolve: ").Append(Nameresolve).Append("\n");
            sb.Append("  Pktdump: ").Append(Pktdump).Append("\n");
            sb.Append("  Socketdump: ").Append(Socketdump).Append("\n");
            sb.Append("  All: ").Append(All).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DebugCmdDebugAuthLdap);
        }

        /// <summary>
        /// Returns true if DebugCmdDebugAuthLdap instances are equal
        /// </summary>
        /// <param name="input">Instance of DebugCmdDebugAuthLdap to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DebugCmdDebugAuthLdap input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VarClient == input.VarClient ||
                    this.VarClient.Equals(input.VarClient)
                ) && 
                (
                    this.Daemon == input.Daemon ||
                    this.Daemon.Equals(input.Daemon)
                ) && 
                (
                    this.Tool == input.Tool ||
                    this.Tool.Equals(input.Tool)
                ) && 
                (
                    this.Relay == input.Relay ||
                    this.Relay.Equals(input.Relay)
                ) && 
                (
                    this.Trace == input.Trace ||
                    this.Trace.Equals(input.Trace)
                ) && 
                (
                    this.Packets == input.Packets ||
                    this.Packets.Equals(input.Packets)
                ) && 
                (
                    this.Args == input.Args ||
                    this.Args.Equals(input.Args)
                ) && 
                (
                    this.Conns == input.Conns ||
                    this.Conns.Equals(input.Conns)
                ) && 
                (
                    this.Ber == input.Ber ||
                    this.Ber.Equals(input.Ber)
                ) && 
                (
                    this.AuthFilter == input.AuthFilter ||
                    this.AuthFilter.Equals(input.AuthFilter)
                ) && 
                (
                    this.Parse == input.Parse ||
                    this.Parse.Equals(input.Parse)
                ) && 
                (
                    this.Toolverbose == input.Toolverbose ||
                    this.Toolverbose.Equals(input.Toolverbose)
                ) && 
                (
                    this.Nameresolve == input.Nameresolve ||
                    this.Nameresolve.Equals(input.Nameresolve)
                ) && 
                (
                    this.Pktdump == input.Pktdump ||
                    this.Pktdump.Equals(input.Pktdump)
                ) && 
                (
                    this.Socketdump == input.Socketdump ||
                    this.Socketdump.Equals(input.Socketdump)
                ) && 
                (
                    this.All == input.All ||
                    this.All.Equals(input.All)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.VarClient.GetHashCode();
                hashCode = (hashCode * 59) + this.Daemon.GetHashCode();
                hashCode = (hashCode * 59) + this.Tool.GetHashCode();
                hashCode = (hashCode * 59) + this.Relay.GetHashCode();
                hashCode = (hashCode * 59) + this.Trace.GetHashCode();
                hashCode = (hashCode * 59) + this.Packets.GetHashCode();
                hashCode = (hashCode * 59) + this.Args.GetHashCode();
                hashCode = (hashCode * 59) + this.Conns.GetHashCode();
                hashCode = (hashCode * 59) + this.Ber.GetHashCode();
                hashCode = (hashCode * 59) + this.AuthFilter.GetHashCode();
                hashCode = (hashCode * 59) + this.Parse.GetHashCode();
                hashCode = (hashCode * 59) + this.Toolverbose.GetHashCode();
                hashCode = (hashCode * 59) + this.Nameresolve.GetHashCode();
                hashCode = (hashCode * 59) + this.Pktdump.GetHashCode();
                hashCode = (hashCode * 59) + this.Socketdump.GetHashCode();
                hashCode = (hashCode * 59) + this.All.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
