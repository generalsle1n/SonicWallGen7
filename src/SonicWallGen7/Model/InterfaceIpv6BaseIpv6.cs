/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// IP version IPV6.
    /// </summary>
    [DataContract(Name = "interface_ipv6_base_ipv6")]
    public partial class InterfaceIpv6BaseIpv6 : IEquatable<InterfaceIpv6BaseIpv6>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InterfaceIpv6BaseIpv6" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InterfaceIpv6BaseIpv6() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InterfaceIpv6BaseIpv6" /> class.
        /// </summary>
        /// <param name="name">Interface name. (required).</param>
        /// <param name="vlan">Interface VLAN ID..</param>
        /// <param name="ipAssignment">ipAssignment.</param>
        /// <param name="management">management.</param>
        /// <param name="userLogin">userLogin.</param>
        /// <param name="httpsRedirect">Enable redirection from HTTP to HTTPS..</param>
        /// <param name="ipv6Traffic">Enable IPv6 traffic on this interface..</param>
        /// <param name="listenRouterAdvertisement">Enable listening to route advertisement..</param>
        /// <param name="statelessAddressAutoconfig">Enable stateless address autoconfiguration..</param>
        /// <param name="duplicateAddressDetectionTransmits">Set duplicate address detection transmits..</param>
        /// <param name="reachableTime">Set neighbor discovery base reachable time in seconds..</param>
        /// <param name="multicast">Enable IPv6 multicast support..</param>
        /// <param name="oneArmMode">Enable one-arm ipv6 mode on the interface.</param>
        /// <param name="oneArmPeer">Set interface one-arm-peer..</param>
        public InterfaceIpv6BaseIpv6(string name = default(string), decimal vlan = default(decimal), InterfaceIpv6BaseIpv6IpAssignment ipAssignment = default(InterfaceIpv6BaseIpv6IpAssignment), InterfaceIpv6BaseIpv6Management management = default(InterfaceIpv6BaseIpv6Management), InterfaceIpv4Ipv4UserLogin userLogin = default(InterfaceIpv4Ipv4UserLogin), bool httpsRedirect = default(bool), bool ipv6Traffic = default(bool), bool listenRouterAdvertisement = default(bool), bool statelessAddressAutoconfig = default(bool), decimal duplicateAddressDetectionTransmits = default(decimal), decimal reachableTime = default(decimal), bool multicast = default(bool), bool oneArmMode = default(bool), string oneArmPeer = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for InterfaceIpv6BaseIpv6 and cannot be null");
            }
            this.Name = name;
            this.Vlan = vlan;
            this.IpAssignment = ipAssignment;
            this.Management = management;
            this.UserLogin = userLogin;
            this.HttpsRedirect = httpsRedirect;
            this.Ipv6Traffic = ipv6Traffic;
            this.ListenRouterAdvertisement = listenRouterAdvertisement;
            this.StatelessAddressAutoconfig = statelessAddressAutoconfig;
            this.DuplicateAddressDetectionTransmits = duplicateAddressDetectionTransmits;
            this.ReachableTime = reachableTime;
            this.Multicast = multicast;
            this.OneArmMode = oneArmMode;
            this.OneArmPeer = oneArmPeer;
        }

        /// <summary>
        /// Interface name.
        /// </summary>
        /// <value>Interface name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Interface VLAN ID.
        /// </summary>
        /// <value>Interface VLAN ID.</value>
        [DataMember(Name = "vlan", EmitDefaultValue = false)]
        public decimal Vlan { get; set; }

        /// <summary>
        /// Gets or Sets IpAssignment
        /// </summary>
        [DataMember(Name = "ip_assignment", EmitDefaultValue = true)]
        public InterfaceIpv6BaseIpv6IpAssignment IpAssignment { get; set; }

        /// <summary>
        /// Gets or Sets Management
        /// </summary>
        [DataMember(Name = "management", EmitDefaultValue = false)]
        public InterfaceIpv6BaseIpv6Management Management { get; set; }

        /// <summary>
        /// Gets or Sets UserLogin
        /// </summary>
        [DataMember(Name = "user_login", EmitDefaultValue = false)]
        public InterfaceIpv4Ipv4UserLogin UserLogin { get; set; }

        /// <summary>
        /// Enable redirection from HTTP to HTTPS.
        /// </summary>
        /// <value>Enable redirection from HTTP to HTTPS.</value>
        [DataMember(Name = "https_redirect", EmitDefaultValue = true)]
        public bool HttpsRedirect { get; set; }

        /// <summary>
        /// Enable IPv6 traffic on this interface.
        /// </summary>
        /// <value>Enable IPv6 traffic on this interface.</value>
        [DataMember(Name = "ipv6_traffic", EmitDefaultValue = true)]
        public bool Ipv6Traffic { get; set; }

        /// <summary>
        /// Enable listening to route advertisement.
        /// </summary>
        /// <value>Enable listening to route advertisement.</value>
        [DataMember(Name = "listen_router_advertisement", EmitDefaultValue = true)]
        public bool ListenRouterAdvertisement { get; set; }

        /// <summary>
        /// Enable stateless address autoconfiguration.
        /// </summary>
        /// <value>Enable stateless address autoconfiguration.</value>
        [DataMember(Name = "stateless_address_autoconfig", EmitDefaultValue = true)]
        public bool StatelessAddressAutoconfig { get; set; }

        /// <summary>
        /// Set duplicate address detection transmits.
        /// </summary>
        /// <value>Set duplicate address detection transmits.</value>
        [DataMember(Name = "duplicate_address_detection_transmits", EmitDefaultValue = false)]
        public decimal DuplicateAddressDetectionTransmits { get; set; }

        /// <summary>
        /// Set neighbor discovery base reachable time in seconds.
        /// </summary>
        /// <value>Set neighbor discovery base reachable time in seconds.</value>
        [DataMember(Name = "reachable_time", EmitDefaultValue = false)]
        public decimal ReachableTime { get; set; }

        /// <summary>
        /// Enable IPv6 multicast support.
        /// </summary>
        /// <value>Enable IPv6 multicast support.</value>
        [DataMember(Name = "multicast", EmitDefaultValue = true)]
        public bool Multicast { get; set; }

        /// <summary>
        /// Enable one-arm ipv6 mode on the interface
        /// </summary>
        /// <value>Enable one-arm ipv6 mode on the interface</value>
        [DataMember(Name = "one_arm_mode", EmitDefaultValue = true)]
        public bool OneArmMode { get; set; }

        /// <summary>
        /// Set interface one-arm-peer.
        /// </summary>
        /// <value>Set interface one-arm-peer.</value>
        [DataMember(Name = "one_arm_peer", EmitDefaultValue = false)]
        public string OneArmPeer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InterfaceIpv6BaseIpv6 {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Vlan: ").Append(Vlan).Append("\n");
            sb.Append("  IpAssignment: ").Append(IpAssignment).Append("\n");
            sb.Append("  Management: ").Append(Management).Append("\n");
            sb.Append("  UserLogin: ").Append(UserLogin).Append("\n");
            sb.Append("  HttpsRedirect: ").Append(HttpsRedirect).Append("\n");
            sb.Append("  Ipv6Traffic: ").Append(Ipv6Traffic).Append("\n");
            sb.Append("  ListenRouterAdvertisement: ").Append(ListenRouterAdvertisement).Append("\n");
            sb.Append("  StatelessAddressAutoconfig: ").Append(StatelessAddressAutoconfig).Append("\n");
            sb.Append("  DuplicateAddressDetectionTransmits: ").Append(DuplicateAddressDetectionTransmits).Append("\n");
            sb.Append("  ReachableTime: ").Append(ReachableTime).Append("\n");
            sb.Append("  Multicast: ").Append(Multicast).Append("\n");
            sb.Append("  OneArmMode: ").Append(OneArmMode).Append("\n");
            sb.Append("  OneArmPeer: ").Append(OneArmPeer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InterfaceIpv6BaseIpv6);
        }

        /// <summary>
        /// Returns true if InterfaceIpv6BaseIpv6 instances are equal
        /// </summary>
        /// <param name="input">Instance of InterfaceIpv6BaseIpv6 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InterfaceIpv6BaseIpv6 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Vlan == input.Vlan ||
                    this.Vlan.Equals(input.Vlan)
                ) && 
                (
                    this.IpAssignment == input.IpAssignment ||
                    (this.IpAssignment != null &&
                    this.IpAssignment.Equals(input.IpAssignment))
                ) && 
                (
                    this.Management == input.Management ||
                    (this.Management != null &&
                    this.Management.Equals(input.Management))
                ) && 
                (
                    this.UserLogin == input.UserLogin ||
                    (this.UserLogin != null &&
                    this.UserLogin.Equals(input.UserLogin))
                ) && 
                (
                    this.HttpsRedirect == input.HttpsRedirect ||
                    this.HttpsRedirect.Equals(input.HttpsRedirect)
                ) && 
                (
                    this.Ipv6Traffic == input.Ipv6Traffic ||
                    this.Ipv6Traffic.Equals(input.Ipv6Traffic)
                ) && 
                (
                    this.ListenRouterAdvertisement == input.ListenRouterAdvertisement ||
                    this.ListenRouterAdvertisement.Equals(input.ListenRouterAdvertisement)
                ) && 
                (
                    this.StatelessAddressAutoconfig == input.StatelessAddressAutoconfig ||
                    this.StatelessAddressAutoconfig.Equals(input.StatelessAddressAutoconfig)
                ) && 
                (
                    this.DuplicateAddressDetectionTransmits == input.DuplicateAddressDetectionTransmits ||
                    this.DuplicateAddressDetectionTransmits.Equals(input.DuplicateAddressDetectionTransmits)
                ) && 
                (
                    this.ReachableTime == input.ReachableTime ||
                    this.ReachableTime.Equals(input.ReachableTime)
                ) && 
                (
                    this.Multicast == input.Multicast ||
                    this.Multicast.Equals(input.Multicast)
                ) && 
                (
                    this.OneArmMode == input.OneArmMode ||
                    this.OneArmMode.Equals(input.OneArmMode)
                ) && 
                (
                    this.OneArmPeer == input.OneArmPeer ||
                    (this.OneArmPeer != null &&
                    this.OneArmPeer.Equals(input.OneArmPeer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Vlan.GetHashCode();
                if (this.IpAssignment != null)
                {
                    hashCode = (hashCode * 59) + this.IpAssignment.GetHashCode();
                }
                if (this.Management != null)
                {
                    hashCode = (hashCode * 59) + this.Management.GetHashCode();
                }
                if (this.UserLogin != null)
                {
                    hashCode = (hashCode * 59) + this.UserLogin.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HttpsRedirect.GetHashCode();
                hashCode = (hashCode * 59) + this.Ipv6Traffic.GetHashCode();
                hashCode = (hashCode * 59) + this.ListenRouterAdvertisement.GetHashCode();
                hashCode = (hashCode * 59) + this.StatelessAddressAutoconfig.GetHashCode();
                hashCode = (hashCode * 59) + this.DuplicateAddressDetectionTransmits.GetHashCode();
                hashCode = (hashCode * 59) + this.ReachableTime.GetHashCode();
                hashCode = (hashCode * 59) + this.Multicast.GetHashCode();
                hashCode = (hashCode * 59) + this.OneArmMode.GetHashCode();
                if (this.OneArmPeer != null)
                {
                    hashCode = (hashCode * 59) + this.OneArmPeer.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
