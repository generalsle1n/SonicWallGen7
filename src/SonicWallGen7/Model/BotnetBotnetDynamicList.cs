/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enter dynamic list configuration mode.
    /// </summary>
    [DataContract(Name = "botnet_botnet_dynamic_list")]
    public partial class BotnetBotnetDynamicList : IEquatable<BotnetBotnetDynamicList>, IValidatableObject
    {
        /// <summary>
        /// Set a download interval.
        /// </summary>
        /// <value>Set a download interval.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DownloadIntervalEnum
        {
            /// <summary>
            /// Enum _5minutes for value: 5minutes
            /// </summary>
            [EnumMember(Value = "5minutes")]
            _5minutes = 1,

            /// <summary>
            /// Enum _15minutes for value: 15minutes
            /// </summary>
            [EnumMember(Value = "15minutes")]
            _15minutes = 2,

            /// <summary>
            /// Enum _1hour for value: 1hour
            /// </summary>
            [EnumMember(Value = "1hour")]
            _1hour = 3,

            /// <summary>
            /// Enum _24hours for value: 24hours
            /// </summary>
            [EnumMember(Value = "24hours")]
            _24hours = 4
        }


        /// <summary>
        /// Set a download interval.
        /// </summary>
        /// <value>Set a download interval.</value>
        [DataMember(Name = "download_interval", EmitDefaultValue = false)]
        public DownloadIntervalEnum? DownloadInterval { get; set; }
        /// <summary>
        /// Set botnet server protocol type.
        /// </summary>
        /// <value>Set botnet server protocol type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProtocolEnum
        {
            /// <summary>
            /// Enum Ftp for value: ftp
            /// </summary>
            [EnumMember(Value = "ftp")]
            Ftp = 1,

            /// <summary>
            /// Enum Https for value: https
            /// </summary>
            [EnumMember(Value = "https")]
            Https = 2
        }


        /// <summary>
        /// Set botnet server protocol type.
        /// </summary>
        /// <value>Set botnet server protocol type.</value>
        [DataMember(Name = "protocol", EmitDefaultValue = false)]
        public ProtocolEnum? Protocol { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BotnetBotnetDynamicList" /> class.
        /// </summary>
        /// <param name="enable">Enable botnet dynamic list..</param>
        /// <param name="periodicalDownload">Enable botnet list download periodically..</param>
        /// <param name="downloadInterval">Set a download interval..</param>
        /// <param name="protocol">Set botnet server protocol type..</param>
        /// <param name="ftp">ftp.</param>
        /// <param name="https">https.</param>
        public BotnetBotnetDynamicList(bool enable = default(bool), bool periodicalDownload = default(bool), DownloadIntervalEnum? downloadInterval = default(DownloadIntervalEnum?), ProtocolEnum? protocol = default(ProtocolEnum?), BotnetBotnetDynamicListFtp ftp = default(BotnetBotnetDynamicListFtp), BotnetBotnetDynamicListHttps https = default(BotnetBotnetDynamicListHttps))
        {
            this.Enable = enable;
            this.PeriodicalDownload = periodicalDownload;
            this.DownloadInterval = downloadInterval;
            this.Protocol = protocol;
            this.Ftp = ftp;
            this.Https = https;
        }

        /// <summary>
        /// Enable botnet dynamic list.
        /// </summary>
        /// <value>Enable botnet dynamic list.</value>
        [DataMember(Name = "enable", EmitDefaultValue = true)]
        public bool Enable { get; set; }

        /// <summary>
        /// Enable botnet list download periodically.
        /// </summary>
        /// <value>Enable botnet list download periodically.</value>
        [DataMember(Name = "periodical_download", EmitDefaultValue = true)]
        public bool PeriodicalDownload { get; set; }

        /// <summary>
        /// Gets or Sets Ftp
        /// </summary>
        [DataMember(Name = "ftp", EmitDefaultValue = false)]
        public BotnetBotnetDynamicListFtp Ftp { get; set; }

        /// <summary>
        /// Gets or Sets Https
        /// </summary>
        [DataMember(Name = "https", EmitDefaultValue = false)]
        public BotnetBotnetDynamicListHttps Https { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BotnetBotnetDynamicList {\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  PeriodicalDownload: ").Append(PeriodicalDownload).Append("\n");
            sb.Append("  DownloadInterval: ").Append(DownloadInterval).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  Ftp: ").Append(Ftp).Append("\n");
            sb.Append("  Https: ").Append(Https).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BotnetBotnetDynamicList);
        }

        /// <summary>
        /// Returns true if BotnetBotnetDynamicList instances are equal
        /// </summary>
        /// <param name="input">Instance of BotnetBotnetDynamicList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BotnetBotnetDynamicList input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.PeriodicalDownload == input.PeriodicalDownload ||
                    this.PeriodicalDownload.Equals(input.PeriodicalDownload)
                ) && 
                (
                    this.DownloadInterval == input.DownloadInterval ||
                    this.DownloadInterval.Equals(input.DownloadInterval)
                ) && 
                (
                    this.Protocol == input.Protocol ||
                    this.Protocol.Equals(input.Protocol)
                ) && 
                (
                    this.Ftp == input.Ftp ||
                    (this.Ftp != null &&
                    this.Ftp.Equals(input.Ftp))
                ) && 
                (
                    this.Https == input.Https ||
                    (this.Https != null &&
                    this.Https.Equals(input.Https))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Enable.GetHashCode();
                hashCode = (hashCode * 59) + this.PeriodicalDownload.GetHashCode();
                hashCode = (hashCode * 59) + this.DownloadInterval.GetHashCode();
                hashCode = (hashCode * 59) + this.Protocol.GetHashCode();
                if (this.Ftp != null)
                {
                    hashCode = (hashCode * 59) + this.Ftp.GetHashCode();
                }
                if (this.Https != null)
                {
                    hashCode = (hashCode * 59) + this.Https.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
