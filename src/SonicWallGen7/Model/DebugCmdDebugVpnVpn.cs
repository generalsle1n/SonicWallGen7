/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Specify VPN submodule
    /// </summary>
    [DataContract(Name = "debug_cmd_debug_vpn_vpn")]
    public partial class DebugCmdDebugVpnVpn : IEquatable<DebugCmdDebugVpnVpn>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DebugCmdDebugVpnVpn" /> class.
        /// </summary>
        /// <param name="policy">Enable VPN policy.</param>
        /// <param name="bitmap">Enable VPN bitmap.</param>
        /// <param name="autorule">Enable VPN autorule.</param>
        /// <param name="routeadv">Enable VPN routeadv.</param>
        /// <param name="snmp">Enable VPN snmp.</param>
        /// <param name="gms">Enable VPN gms.</param>
        /// <param name="manualkey">Enable VPN manualkey.</param>
        /// <param name="tunnelif">Enable VPN tunnelif.</param>
        /// <param name="natpol">Enable VPN natpol.</param>
        /// <param name="iphcfg">Enable VPN iphcfg.</param>
        /// <param name="prisecgw">Enable VPN prisecgw.</param>
        /// <param name="config">Enable VPN config.</param>
        /// <param name="spd">Enable VPN spd.</param>
        /// <param name="vpnHa">Enable VPN vpn-ha.</param>
        /// <param name="activestate">Enable VPN activestate.</param>
        /// <param name="lookUp">Enable VPN look up.</param>
        /// <param name="bladedisplay">Enable VPN bladedisplay.</param>
        public DebugCmdDebugVpnVpn(bool policy = default(bool), bool bitmap = default(bool), bool autorule = default(bool), bool routeadv = default(bool), bool snmp = default(bool), bool gms = default(bool), bool manualkey = default(bool), bool tunnelif = default(bool), bool natpol = default(bool), bool iphcfg = default(bool), bool prisecgw = default(bool), bool config = default(bool), bool spd = default(bool), bool vpnHa = default(bool), bool activestate = default(bool), bool lookUp = default(bool), bool bladedisplay = default(bool))
        {
            this.Policy = policy;
            this.Bitmap = bitmap;
            this.Autorule = autorule;
            this.Routeadv = routeadv;
            this.Snmp = snmp;
            this.Gms = gms;
            this.Manualkey = manualkey;
            this.Tunnelif = tunnelif;
            this.Natpol = natpol;
            this.Iphcfg = iphcfg;
            this.Prisecgw = prisecgw;
            this.Config = config;
            this.Spd = spd;
            this.VpnHa = vpnHa;
            this.Activestate = activestate;
            this.LookUp = lookUp;
            this.Bladedisplay = bladedisplay;
        }

        /// <summary>
        /// Enable VPN policy
        /// </summary>
        /// <value>Enable VPN policy</value>
        [DataMember(Name = "policy", EmitDefaultValue = true)]
        public bool Policy { get; set; }

        /// <summary>
        /// Enable VPN bitmap
        /// </summary>
        /// <value>Enable VPN bitmap</value>
        [DataMember(Name = "bitmap", EmitDefaultValue = true)]
        public bool Bitmap { get; set; }

        /// <summary>
        /// Enable VPN autorule
        /// </summary>
        /// <value>Enable VPN autorule</value>
        [DataMember(Name = "autorule", EmitDefaultValue = true)]
        public bool Autorule { get; set; }

        /// <summary>
        /// Enable VPN routeadv
        /// </summary>
        /// <value>Enable VPN routeadv</value>
        [DataMember(Name = "routeadv", EmitDefaultValue = true)]
        public bool Routeadv { get; set; }

        /// <summary>
        /// Enable VPN snmp
        /// </summary>
        /// <value>Enable VPN snmp</value>
        [DataMember(Name = "snmp", EmitDefaultValue = true)]
        public bool Snmp { get; set; }

        /// <summary>
        /// Enable VPN gms
        /// </summary>
        /// <value>Enable VPN gms</value>
        [DataMember(Name = "gms", EmitDefaultValue = true)]
        public bool Gms { get; set; }

        /// <summary>
        /// Enable VPN manualkey
        /// </summary>
        /// <value>Enable VPN manualkey</value>
        [DataMember(Name = "manualkey", EmitDefaultValue = true)]
        public bool Manualkey { get; set; }

        /// <summary>
        /// Enable VPN tunnelif
        /// </summary>
        /// <value>Enable VPN tunnelif</value>
        [DataMember(Name = "tunnelif", EmitDefaultValue = true)]
        public bool Tunnelif { get; set; }

        /// <summary>
        /// Enable VPN natpol
        /// </summary>
        /// <value>Enable VPN natpol</value>
        [DataMember(Name = "natpol", EmitDefaultValue = true)]
        public bool Natpol { get; set; }

        /// <summary>
        /// Enable VPN iphcfg
        /// </summary>
        /// <value>Enable VPN iphcfg</value>
        [DataMember(Name = "iphcfg", EmitDefaultValue = true)]
        public bool Iphcfg { get; set; }

        /// <summary>
        /// Enable VPN prisecgw
        /// </summary>
        /// <value>Enable VPN prisecgw</value>
        [DataMember(Name = "prisecgw", EmitDefaultValue = true)]
        public bool Prisecgw { get; set; }

        /// <summary>
        /// Enable VPN config
        /// </summary>
        /// <value>Enable VPN config</value>
        [DataMember(Name = "config", EmitDefaultValue = true)]
        public bool Config { get; set; }

        /// <summary>
        /// Enable VPN spd
        /// </summary>
        /// <value>Enable VPN spd</value>
        [DataMember(Name = "spd", EmitDefaultValue = true)]
        public bool Spd { get; set; }

        /// <summary>
        /// Enable VPN vpn-ha
        /// </summary>
        /// <value>Enable VPN vpn-ha</value>
        [DataMember(Name = "vpn_ha", EmitDefaultValue = true)]
        public bool VpnHa { get; set; }

        /// <summary>
        /// Enable VPN activestate
        /// </summary>
        /// <value>Enable VPN activestate</value>
        [DataMember(Name = "activestate", EmitDefaultValue = true)]
        public bool Activestate { get; set; }

        /// <summary>
        /// Enable VPN look up
        /// </summary>
        /// <value>Enable VPN look up</value>
        [DataMember(Name = "look_up", EmitDefaultValue = true)]
        public bool LookUp { get; set; }

        /// <summary>
        /// Enable VPN bladedisplay
        /// </summary>
        /// <value>Enable VPN bladedisplay</value>
        [DataMember(Name = "bladedisplay", EmitDefaultValue = true)]
        public bool Bladedisplay { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DebugCmdDebugVpnVpn {\n");
            sb.Append("  Policy: ").Append(Policy).Append("\n");
            sb.Append("  Bitmap: ").Append(Bitmap).Append("\n");
            sb.Append("  Autorule: ").Append(Autorule).Append("\n");
            sb.Append("  Routeadv: ").Append(Routeadv).Append("\n");
            sb.Append("  Snmp: ").Append(Snmp).Append("\n");
            sb.Append("  Gms: ").Append(Gms).Append("\n");
            sb.Append("  Manualkey: ").Append(Manualkey).Append("\n");
            sb.Append("  Tunnelif: ").Append(Tunnelif).Append("\n");
            sb.Append("  Natpol: ").Append(Natpol).Append("\n");
            sb.Append("  Iphcfg: ").Append(Iphcfg).Append("\n");
            sb.Append("  Prisecgw: ").Append(Prisecgw).Append("\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("  Spd: ").Append(Spd).Append("\n");
            sb.Append("  VpnHa: ").Append(VpnHa).Append("\n");
            sb.Append("  Activestate: ").Append(Activestate).Append("\n");
            sb.Append("  LookUp: ").Append(LookUp).Append("\n");
            sb.Append("  Bladedisplay: ").Append(Bladedisplay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DebugCmdDebugVpnVpn);
        }

        /// <summary>
        /// Returns true if DebugCmdDebugVpnVpn instances are equal
        /// </summary>
        /// <param name="input">Instance of DebugCmdDebugVpnVpn to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DebugCmdDebugVpnVpn input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Policy == input.Policy ||
                    this.Policy.Equals(input.Policy)
                ) && 
                (
                    this.Bitmap == input.Bitmap ||
                    this.Bitmap.Equals(input.Bitmap)
                ) && 
                (
                    this.Autorule == input.Autorule ||
                    this.Autorule.Equals(input.Autorule)
                ) && 
                (
                    this.Routeadv == input.Routeadv ||
                    this.Routeadv.Equals(input.Routeadv)
                ) && 
                (
                    this.Snmp == input.Snmp ||
                    this.Snmp.Equals(input.Snmp)
                ) && 
                (
                    this.Gms == input.Gms ||
                    this.Gms.Equals(input.Gms)
                ) && 
                (
                    this.Manualkey == input.Manualkey ||
                    this.Manualkey.Equals(input.Manualkey)
                ) && 
                (
                    this.Tunnelif == input.Tunnelif ||
                    this.Tunnelif.Equals(input.Tunnelif)
                ) && 
                (
                    this.Natpol == input.Natpol ||
                    this.Natpol.Equals(input.Natpol)
                ) && 
                (
                    this.Iphcfg == input.Iphcfg ||
                    this.Iphcfg.Equals(input.Iphcfg)
                ) && 
                (
                    this.Prisecgw == input.Prisecgw ||
                    this.Prisecgw.Equals(input.Prisecgw)
                ) && 
                (
                    this.Config == input.Config ||
                    this.Config.Equals(input.Config)
                ) && 
                (
                    this.Spd == input.Spd ||
                    this.Spd.Equals(input.Spd)
                ) && 
                (
                    this.VpnHa == input.VpnHa ||
                    this.VpnHa.Equals(input.VpnHa)
                ) && 
                (
                    this.Activestate == input.Activestate ||
                    this.Activestate.Equals(input.Activestate)
                ) && 
                (
                    this.LookUp == input.LookUp ||
                    this.LookUp.Equals(input.LookUp)
                ) && 
                (
                    this.Bladedisplay == input.Bladedisplay ||
                    this.Bladedisplay.Equals(input.Bladedisplay)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Policy.GetHashCode();
                hashCode = (hashCode * 59) + this.Bitmap.GetHashCode();
                hashCode = (hashCode * 59) + this.Autorule.GetHashCode();
                hashCode = (hashCode * 59) + this.Routeadv.GetHashCode();
                hashCode = (hashCode * 59) + this.Snmp.GetHashCode();
                hashCode = (hashCode * 59) + this.Gms.GetHashCode();
                hashCode = (hashCode * 59) + this.Manualkey.GetHashCode();
                hashCode = (hashCode * 59) + this.Tunnelif.GetHashCode();
                hashCode = (hashCode * 59) + this.Natpol.GetHashCode();
                hashCode = (hashCode * 59) + this.Iphcfg.GetHashCode();
                hashCode = (hashCode * 59) + this.Prisecgw.GetHashCode();
                hashCode = (hashCode * 59) + this.Config.GetHashCode();
                hashCode = (hashCode * 59) + this.Spd.GetHashCode();
                hashCode = (hashCode * 59) + this.VpnHa.GetHashCode();
                hashCode = (hashCode * 59) + this.Activestate.GetHashCode();
                hashCode = (hashCode * 59) + this.LookUp.GetHashCode();
                hashCode = (hashCode * 59) + this.Bladedisplay.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
