/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enter Gateway Anti-Virus Configuration Mode.
    /// </summary>
    [DataContract(Name = "gateway_antivirus_gateway_antivirus")]
    public partial class GatewayAntivirusGatewayAntivirus : IEquatable<GatewayAntivirusGatewayAntivirus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayAntivirusGatewayAntivirus" /> class.
        /// </summary>
        /// <param name="enable">Enable Gateway Anti-Virus service..</param>
        /// <param name="inboundInspection">inboundInspection.</param>
        /// <param name="outboundInspection">outboundInspection.</param>
        /// <param name="restrict">restrict.</param>
        /// <param name="exclusionObject">exclusionObject.</param>
        /// <param name="smtpResponses">Enable SMTP responses..</param>
        /// <param name="eicarDetection">Enable detection of EICAR test virus..</param>
        /// <param name="httpByteRange">Enable HTTP Byte-Range requests with Gateway AV..</param>
        /// <param name="ftpRest">Enable FTP &#39;REST&#39; requests with Gateway AV..</param>
        /// <param name="scanHighCompression">Scan parts of files with high compression ratios..</param>
        /// <param name="blockMultipleCompressFiles">Enable to block files with multiple levels of zip/gzip compression..</param>
        /// <param name="detectionOnly">Enable detection only mode..</param>
        /// <param name="httpClientlessNotification">Enable HTTP Clientless Notification Alerts..</param>
        /// <param name="notificationMessage">Set HTTP Clientless Notification Message to display when blocking..</param>
        public GatewayAntivirusGatewayAntivirus(bool enable = default(bool), GatewayAntivirusGatewayAntivirusInboundInspection inboundInspection = default(GatewayAntivirusGatewayAntivirusInboundInspection), GatewayAntivirusGatewayAntivirusOutboundInspection outboundInspection = default(GatewayAntivirusGatewayAntivirusOutboundInspection), GatewayAntivirusGatewayAntivirusRestrict restrict = default(GatewayAntivirusGatewayAntivirusRestrict), GatewayAntivirusGatewayAntivirusExclusionObject exclusionObject = default(GatewayAntivirusGatewayAntivirusExclusionObject), bool smtpResponses = default(bool), bool eicarDetection = default(bool), bool httpByteRange = default(bool), bool ftpRest = default(bool), bool scanHighCompression = default(bool), bool blockMultipleCompressFiles = default(bool), bool detectionOnly = default(bool), bool httpClientlessNotification = default(bool), string notificationMessage = default(string))
        {
            this.Enable = enable;
            this.InboundInspection = inboundInspection;
            this.OutboundInspection = outboundInspection;
            this.Restrict = restrict;
            this.ExclusionObject = exclusionObject;
            this.SmtpResponses = smtpResponses;
            this.EicarDetection = eicarDetection;
            this.HttpByteRange = httpByteRange;
            this.FtpRest = ftpRest;
            this.ScanHighCompression = scanHighCompression;
            this.BlockMultipleCompressFiles = blockMultipleCompressFiles;
            this.DetectionOnly = detectionOnly;
            this.HttpClientlessNotification = httpClientlessNotification;
            this.NotificationMessage = notificationMessage;
        }

        /// <summary>
        /// Enable Gateway Anti-Virus service.
        /// </summary>
        /// <value>Enable Gateway Anti-Virus service.</value>
        [DataMember(Name = "enable", EmitDefaultValue = true)]
        public bool Enable { get; set; }

        /// <summary>
        /// Gets or Sets InboundInspection
        /// </summary>
        [DataMember(Name = "inbound_inspection", EmitDefaultValue = false)]
        public GatewayAntivirusGatewayAntivirusInboundInspection InboundInspection { get; set; }

        /// <summary>
        /// Gets or Sets OutboundInspection
        /// </summary>
        [DataMember(Name = "outbound_inspection", EmitDefaultValue = false)]
        public GatewayAntivirusGatewayAntivirusOutboundInspection OutboundInspection { get; set; }

        /// <summary>
        /// Gets or Sets Restrict
        /// </summary>
        [DataMember(Name = "restrict", EmitDefaultValue = false)]
        public GatewayAntivirusGatewayAntivirusRestrict Restrict { get; set; }

        /// <summary>
        /// Gets or Sets ExclusionObject
        /// </summary>
        [DataMember(Name = "exclusion_object", EmitDefaultValue = false)]
        public GatewayAntivirusGatewayAntivirusExclusionObject ExclusionObject { get; set; }

        /// <summary>
        /// Enable SMTP responses.
        /// </summary>
        /// <value>Enable SMTP responses.</value>
        [DataMember(Name = "smtp_responses", EmitDefaultValue = true)]
        public bool SmtpResponses { get; set; }

        /// <summary>
        /// Enable detection of EICAR test virus.
        /// </summary>
        /// <value>Enable detection of EICAR test virus.</value>
        [DataMember(Name = "eicar_detection", EmitDefaultValue = true)]
        public bool EicarDetection { get; set; }

        /// <summary>
        /// Enable HTTP Byte-Range requests with Gateway AV.
        /// </summary>
        /// <value>Enable HTTP Byte-Range requests with Gateway AV.</value>
        [DataMember(Name = "http_byte_range", EmitDefaultValue = true)]
        public bool HttpByteRange { get; set; }

        /// <summary>
        /// Enable FTP &#39;REST&#39; requests with Gateway AV.
        /// </summary>
        /// <value>Enable FTP &#39;REST&#39; requests with Gateway AV.</value>
        [DataMember(Name = "ftp_rest", EmitDefaultValue = true)]
        public bool FtpRest { get; set; }

        /// <summary>
        /// Scan parts of files with high compression ratios.
        /// </summary>
        /// <value>Scan parts of files with high compression ratios.</value>
        [DataMember(Name = "scan_high_compression", EmitDefaultValue = true)]
        public bool ScanHighCompression { get; set; }

        /// <summary>
        /// Enable to block files with multiple levels of zip/gzip compression.
        /// </summary>
        /// <value>Enable to block files with multiple levels of zip/gzip compression.</value>
        [DataMember(Name = "block_multiple_compress_files", EmitDefaultValue = true)]
        public bool BlockMultipleCompressFiles { get; set; }

        /// <summary>
        /// Enable detection only mode.
        /// </summary>
        /// <value>Enable detection only mode.</value>
        [DataMember(Name = "detection_only", EmitDefaultValue = true)]
        public bool DetectionOnly { get; set; }

        /// <summary>
        /// Enable HTTP Clientless Notification Alerts.
        /// </summary>
        /// <value>Enable HTTP Clientless Notification Alerts.</value>
        [DataMember(Name = "http_clientless_notification", EmitDefaultValue = true)]
        public bool HttpClientlessNotification { get; set; }

        /// <summary>
        /// Set HTTP Clientless Notification Message to display when blocking.
        /// </summary>
        /// <value>Set HTTP Clientless Notification Message to display when blocking.</value>
        [DataMember(Name = "notification_message", EmitDefaultValue = false)]
        public string NotificationMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GatewayAntivirusGatewayAntivirus {\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  InboundInspection: ").Append(InboundInspection).Append("\n");
            sb.Append("  OutboundInspection: ").Append(OutboundInspection).Append("\n");
            sb.Append("  Restrict: ").Append(Restrict).Append("\n");
            sb.Append("  ExclusionObject: ").Append(ExclusionObject).Append("\n");
            sb.Append("  SmtpResponses: ").Append(SmtpResponses).Append("\n");
            sb.Append("  EicarDetection: ").Append(EicarDetection).Append("\n");
            sb.Append("  HttpByteRange: ").Append(HttpByteRange).Append("\n");
            sb.Append("  FtpRest: ").Append(FtpRest).Append("\n");
            sb.Append("  ScanHighCompression: ").Append(ScanHighCompression).Append("\n");
            sb.Append("  BlockMultipleCompressFiles: ").Append(BlockMultipleCompressFiles).Append("\n");
            sb.Append("  DetectionOnly: ").Append(DetectionOnly).Append("\n");
            sb.Append("  HttpClientlessNotification: ").Append(HttpClientlessNotification).Append("\n");
            sb.Append("  NotificationMessage: ").Append(NotificationMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GatewayAntivirusGatewayAntivirus);
        }

        /// <summary>
        /// Returns true if GatewayAntivirusGatewayAntivirus instances are equal
        /// </summary>
        /// <param name="input">Instance of GatewayAntivirusGatewayAntivirus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GatewayAntivirusGatewayAntivirus input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.InboundInspection == input.InboundInspection ||
                    (this.InboundInspection != null &&
                    this.InboundInspection.Equals(input.InboundInspection))
                ) && 
                (
                    this.OutboundInspection == input.OutboundInspection ||
                    (this.OutboundInspection != null &&
                    this.OutboundInspection.Equals(input.OutboundInspection))
                ) && 
                (
                    this.Restrict == input.Restrict ||
                    (this.Restrict != null &&
                    this.Restrict.Equals(input.Restrict))
                ) && 
                (
                    this.ExclusionObject == input.ExclusionObject ||
                    (this.ExclusionObject != null &&
                    this.ExclusionObject.Equals(input.ExclusionObject))
                ) && 
                (
                    this.SmtpResponses == input.SmtpResponses ||
                    this.SmtpResponses.Equals(input.SmtpResponses)
                ) && 
                (
                    this.EicarDetection == input.EicarDetection ||
                    this.EicarDetection.Equals(input.EicarDetection)
                ) && 
                (
                    this.HttpByteRange == input.HttpByteRange ||
                    this.HttpByteRange.Equals(input.HttpByteRange)
                ) && 
                (
                    this.FtpRest == input.FtpRest ||
                    this.FtpRest.Equals(input.FtpRest)
                ) && 
                (
                    this.ScanHighCompression == input.ScanHighCompression ||
                    this.ScanHighCompression.Equals(input.ScanHighCompression)
                ) && 
                (
                    this.BlockMultipleCompressFiles == input.BlockMultipleCompressFiles ||
                    this.BlockMultipleCompressFiles.Equals(input.BlockMultipleCompressFiles)
                ) && 
                (
                    this.DetectionOnly == input.DetectionOnly ||
                    this.DetectionOnly.Equals(input.DetectionOnly)
                ) && 
                (
                    this.HttpClientlessNotification == input.HttpClientlessNotification ||
                    this.HttpClientlessNotification.Equals(input.HttpClientlessNotification)
                ) && 
                (
                    this.NotificationMessage == input.NotificationMessage ||
                    (this.NotificationMessage != null &&
                    this.NotificationMessage.Equals(input.NotificationMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Enable.GetHashCode();
                if (this.InboundInspection != null)
                {
                    hashCode = (hashCode * 59) + this.InboundInspection.GetHashCode();
                }
                if (this.OutboundInspection != null)
                {
                    hashCode = (hashCode * 59) + this.OutboundInspection.GetHashCode();
                }
                if (this.Restrict != null)
                {
                    hashCode = (hashCode * 59) + this.Restrict.GetHashCode();
                }
                if (this.ExclusionObject != null)
                {
                    hashCode = (hashCode * 59) + this.ExclusionObject.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SmtpResponses.GetHashCode();
                hashCode = (hashCode * 59) + this.EicarDetection.GetHashCode();
                hashCode = (hashCode * 59) + this.HttpByteRange.GetHashCode();
                hashCode = (hashCode * 59) + this.FtpRest.GetHashCode();
                hashCode = (hashCode * 59) + this.ScanHighCompression.GetHashCode();
                hashCode = (hashCode * 59) + this.BlockMultipleCompressFiles.GetHashCode();
                hashCode = (hashCode * 59) + this.DetectionOnly.GetHashCode();
                hashCode = (hashCode * 59) + this.HttpClientlessNotification.GetHashCode();
                if (this.NotificationMessage != null)
                {
                    hashCode = (hashCode * 59) + this.NotificationMessage.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
