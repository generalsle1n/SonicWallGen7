/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// ShowStatusDosPolicyStatusListInner
    /// </summary>
    [DataContract(Name = "show_status_dos_policy_status_list_inner")]
    public partial class ShowStatusDosPolicyStatusListInner : IEquatable<ShowStatusDosPolicyStatusListInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusDosPolicyStatusListInner" /> class.
        /// </summary>
        /// <param name="uuid">uuid.</param>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="rxBytes">rxBytes.</param>
        /// <param name="rxPackets">rxPackets.</param>
        /// <param name="txBytes">txBytes.</param>
        /// <param name="txPackets">txPackets.</param>
        /// <param name="activeConn">activeConn.</param>
        /// <param name="totalConn">totalConn.</param>
        /// <param name="totalConnU">totalConnU.</param>
        /// <param name="hitCount">hitCount.</param>
        /// <param name="enabled">enabled.</param>
        public ShowStatusDosPolicyStatusListInner(string uuid = default(string), string id = default(string), string name = default(string), string rxBytes = default(string), string rxPackets = default(string), string txBytes = default(string), string txPackets = default(string), string activeConn = default(string), string totalConn = default(string), string totalConnU = default(string), string hitCount = default(string), string enabled = default(string))
        {
            this.Uuid = uuid;
            this.Id = id;
            this.Name = name;
            this.RxBytes = rxBytes;
            this.RxPackets = rxPackets;
            this.TxBytes = txBytes;
            this.TxPackets = txPackets;
            this.ActiveConn = activeConn;
            this.TotalConn = totalConn;
            this.TotalConnU = totalConnU;
            this.HitCount = hitCount;
            this.Enabled = enabled;
        }

        /// <summary>
        /// Gets or Sets Uuid
        /// </summary>
        [DataMember(Name = "uuid", EmitDefaultValue = false)]
        public string Uuid { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets RxBytes
        /// </summary>
        [DataMember(Name = "rxBytes", EmitDefaultValue = false)]
        public string RxBytes { get; set; }

        /// <summary>
        /// Gets or Sets RxPackets
        /// </summary>
        [DataMember(Name = "rxPackets", EmitDefaultValue = false)]
        public string RxPackets { get; set; }

        /// <summary>
        /// Gets or Sets TxBytes
        /// </summary>
        [DataMember(Name = "txBytes", EmitDefaultValue = false)]
        public string TxBytes { get; set; }

        /// <summary>
        /// Gets or Sets TxPackets
        /// </summary>
        [DataMember(Name = "txPackets", EmitDefaultValue = false)]
        public string TxPackets { get; set; }

        /// <summary>
        /// Gets or Sets ActiveConn
        /// </summary>
        [DataMember(Name = "activeConn", EmitDefaultValue = false)]
        public string ActiveConn { get; set; }

        /// <summary>
        /// Gets or Sets TotalConn
        /// </summary>
        [DataMember(Name = "totalConn", EmitDefaultValue = false)]
        public string TotalConn { get; set; }

        /// <summary>
        /// Gets or Sets TotalConnU
        /// </summary>
        [DataMember(Name = "totalConnU", EmitDefaultValue = false)]
        public string TotalConnU { get; set; }

        /// <summary>
        /// Gets or Sets HitCount
        /// </summary>
        [DataMember(Name = "hitCount", EmitDefaultValue = false)]
        public string HitCount { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name = "enabled", EmitDefaultValue = false)]
        public string Enabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusDosPolicyStatusListInner {\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RxBytes: ").Append(RxBytes).Append("\n");
            sb.Append("  RxPackets: ").Append(RxPackets).Append("\n");
            sb.Append("  TxBytes: ").Append(TxBytes).Append("\n");
            sb.Append("  TxPackets: ").Append(TxPackets).Append("\n");
            sb.Append("  ActiveConn: ").Append(ActiveConn).Append("\n");
            sb.Append("  TotalConn: ").Append(TotalConn).Append("\n");
            sb.Append("  TotalConnU: ").Append(TotalConnU).Append("\n");
            sb.Append("  HitCount: ").Append(HitCount).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusDosPolicyStatusListInner);
        }

        /// <summary>
        /// Returns true if ShowStatusDosPolicyStatusListInner instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusDosPolicyStatusListInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusDosPolicyStatusListInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.RxBytes == input.RxBytes ||
                    (this.RxBytes != null &&
                    this.RxBytes.Equals(input.RxBytes))
                ) && 
                (
                    this.RxPackets == input.RxPackets ||
                    (this.RxPackets != null &&
                    this.RxPackets.Equals(input.RxPackets))
                ) && 
                (
                    this.TxBytes == input.TxBytes ||
                    (this.TxBytes != null &&
                    this.TxBytes.Equals(input.TxBytes))
                ) && 
                (
                    this.TxPackets == input.TxPackets ||
                    (this.TxPackets != null &&
                    this.TxPackets.Equals(input.TxPackets))
                ) && 
                (
                    this.ActiveConn == input.ActiveConn ||
                    (this.ActiveConn != null &&
                    this.ActiveConn.Equals(input.ActiveConn))
                ) && 
                (
                    this.TotalConn == input.TotalConn ||
                    (this.TotalConn != null &&
                    this.TotalConn.Equals(input.TotalConn))
                ) && 
                (
                    this.TotalConnU == input.TotalConnU ||
                    (this.TotalConnU != null &&
                    this.TotalConnU.Equals(input.TotalConnU))
                ) && 
                (
                    this.HitCount == input.HitCount ||
                    (this.HitCount != null &&
                    this.HitCount.Equals(input.HitCount))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uuid != null)
                {
                    hashCode = (hashCode * 59) + this.Uuid.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.RxBytes != null)
                {
                    hashCode = (hashCode * 59) + this.RxBytes.GetHashCode();
                }
                if (this.RxPackets != null)
                {
                    hashCode = (hashCode * 59) + this.RxPackets.GetHashCode();
                }
                if (this.TxBytes != null)
                {
                    hashCode = (hashCode * 59) + this.TxBytes.GetHashCode();
                }
                if (this.TxPackets != null)
                {
                    hashCode = (hashCode * 59) + this.TxPackets.GetHashCode();
                }
                if (this.ActiveConn != null)
                {
                    hashCode = (hashCode * 59) + this.ActiveConn.GetHashCode();
                }
                if (this.TotalConn != null)
                {
                    hashCode = (hashCode * 59) + this.TotalConn.GetHashCode();
                }
                if (this.TotalConnU != null)
                {
                    hashCode = (hashCode * 59) + this.TotalConnU.GetHashCode();
                }
                if (this.HitCount != null)
                {
                    hashCode = (hashCode * 59) + this.HitCount.GetHashCode();
                }
                if (this.Enabled != null)
                {
                    hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
