/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure advanced diag Analyzer Next Gen.
    /// </summary>
    [DataContract(Name = "diag_advanced_analyzer_next_gen_diag_advanced_analyzer_next_gen")]
    public partial class DiagAdvancedAnalyzerNextGenDiagAdvancedAnalyzerNextGen : IEquatable<DiagAdvancedAnalyzerNextGenDiagAdvancedAnalyzerNextGen>, IValidatableObject
    {
        /// <summary>
        /// Configure the Analyzer Next Gen Server IP Use Mode.
        /// </summary>
        /// <value>Configure the Analyzer Next Gen Server IP Use Mode.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ServerIpUseModeEnum
        {
            /// <summary>
            /// Enum UseWhenUnresolved for value: use-when-unresolved
            /// </summary>
            [EnumMember(Value = "use-when-unresolved")]
            UseWhenUnresolved = 1,

            /// <summary>
            /// Enum AlwaysUse for value: always-use
            /// </summary>
            [EnumMember(Value = "always-use")]
            AlwaysUse = 2
        }


        /// <summary>
        /// Configure the Analyzer Next Gen Server IP Use Mode.
        /// </summary>
        /// <value>Configure the Analyzer Next Gen Server IP Use Mode.</value>
        [DataMember(Name = "server_ip_use_mode", EmitDefaultValue = false)]
        public ServerIpUseModeEnum? ServerIpUseMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagAdvancedAnalyzerNextGenDiagAdvancedAnalyzerNextGen" /> class.
        /// </summary>
        /// <param name="encryption">Enable encryption to Analyzer Next Gen..</param>
        /// <param name="fqSonicDnserver">Configure the Analyzer Next Gen Server FQDN..</param>
        /// <param name="serverIpUseMode">Configure the Analyzer Next Gen Server IP Use Mode..</param>
        /// <param name="serverIp">Configure the Analyzer Next Gen Server IP..</param>
        /// <param name="port">Set Analyzer Next Gen Port..</param>
        public DiagAdvancedAnalyzerNextGenDiagAdvancedAnalyzerNextGen(bool encryption = default(bool), string fqSonicDnserver = default(string), ServerIpUseModeEnum? serverIpUseMode = default(ServerIpUseModeEnum?), string serverIp = default(string), decimal port = default(decimal))
        {
            this.Encryption = encryption;
            this.FqSonicDnserver = fqSonicDnserver;
            this.ServerIpUseMode = serverIpUseMode;
            this.ServerIp = serverIp;
            this.Port = port;
        }

        /// <summary>
        /// Enable encryption to Analyzer Next Gen.
        /// </summary>
        /// <value>Enable encryption to Analyzer Next Gen.</value>
        [DataMember(Name = "encryption", EmitDefaultValue = true)]
        public bool Encryption { get; set; }

        /// <summary>
        /// Configure the Analyzer Next Gen Server FQDN.
        /// </summary>
        /// <value>Configure the Analyzer Next Gen Server FQDN.</value>
        [DataMember(Name = "fqdn_server", EmitDefaultValue = false)]
        public string FqSonicDnserver { get; set; }

        /// <summary>
        /// Configure the Analyzer Next Gen Server IP.
        /// </summary>
        /// <value>Configure the Analyzer Next Gen Server IP.</value>
        [DataMember(Name = "server_ip", EmitDefaultValue = false)]
        public string ServerIp { get; set; }

        /// <summary>
        /// Set Analyzer Next Gen Port.
        /// </summary>
        /// <value>Set Analyzer Next Gen Port.</value>
        [DataMember(Name = "port", EmitDefaultValue = false)]
        public decimal Port { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DiagAdvancedAnalyzerNextGenDiagAdvancedAnalyzerNextGen {\n");
            sb.Append("  Encryption: ").Append(Encryption).Append("\n");
            sb.Append("  FqSonicDnserver: ").Append(FqSonicDnserver).Append("\n");
            sb.Append("  ServerIpUseMode: ").Append(ServerIpUseMode).Append("\n");
            sb.Append("  ServerIp: ").Append(ServerIp).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiagAdvancedAnalyzerNextGenDiagAdvancedAnalyzerNextGen);
        }

        /// <summary>
        /// Returns true if DiagAdvancedAnalyzerNextGenDiagAdvancedAnalyzerNextGen instances are equal
        /// </summary>
        /// <param name="input">Instance of DiagAdvancedAnalyzerNextGenDiagAdvancedAnalyzerNextGen to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiagAdvancedAnalyzerNextGenDiagAdvancedAnalyzerNextGen input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Encryption == input.Encryption ||
                    this.Encryption.Equals(input.Encryption)
                ) && 
                (
                    this.FqSonicDnserver == input.FqSonicDnserver ||
                    (this.FqSonicDnserver != null &&
                    this.FqSonicDnserver.Equals(input.FqSonicDnserver))
                ) && 
                (
                    this.ServerIpUseMode == input.ServerIpUseMode ||
                    this.ServerIpUseMode.Equals(input.ServerIpUseMode)
                ) && 
                (
                    this.ServerIp == input.ServerIp ||
                    (this.ServerIp != null &&
                    this.ServerIp.Equals(input.ServerIp))
                ) && 
                (
                    this.Port == input.Port ||
                    this.Port.Equals(input.Port)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Encryption.GetHashCode();
                if (this.FqSonicDnserver != null)
                {
                    hashCode = (hashCode * 59) + this.FqSonicDnserver.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ServerIpUseMode.GetHashCode();
                if (this.ServerIp != null)
                {
                    hashCode = (hashCode * 59) + this.ServerIp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Port.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
