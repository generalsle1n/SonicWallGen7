/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enable report on specified parameter.
    /// </summary>
    [DataContract(Name = "appflow_external_collector_appflow_external_collector_report")]
    public partial class AppflowExternalCollectorAppflowExternalCollectorReport : IEquatable<AppflowExternalCollectorAppflowExternalCollectorReport>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppflowExternalCollectorAppflowExternalCollectorReport" /> class.
        /// </summary>
        /// <param name="open">Enable report on connection OPEN..</param>
        /// <param name="close">Enable report on connection CLOSE..</param>
        /// <param name="activeTimeout">activeTimeout.</param>
        /// <param name="kilobytesExchanged">kilobytesExchanged.</param>
        /// <param name="update">update.</param>
        public AppflowExternalCollectorAppflowExternalCollectorReport(bool open = default(bool), bool close = default(bool), AppflowExternalCollectorAppflowExternalCollectorReportActiveTimeout activeTimeout = default(AppflowExternalCollectorAppflowExternalCollectorReportActiveTimeout), AppflowExternalCollectorAppflowExternalCollectorReportKilobytesExchanged kilobytesExchanged = default(AppflowExternalCollectorAppflowExternalCollectorReportKilobytesExchanged), AppflowGmsflowServerAppflowGmsflowServerReportUpdate update = default(AppflowGmsflowServerAppflowGmsflowServerReportUpdate))
        {
            this.Open = open;
            this.Close = close;
            this.ActiveTimeout = activeTimeout;
            this.KilobytesExchanged = kilobytesExchanged;
            this.Update = update;
        }

        /// <summary>
        /// Enable report on connection OPEN.
        /// </summary>
        /// <value>Enable report on connection OPEN.</value>
        [DataMember(Name = "open", EmitDefaultValue = true)]
        public bool Open { get; set; }

        /// <summary>
        /// Enable report on connection CLOSE.
        /// </summary>
        /// <value>Enable report on connection CLOSE.</value>
        [DataMember(Name = "close", EmitDefaultValue = true)]
        public bool Close { get; set; }

        /// <summary>
        /// Gets or Sets ActiveTimeout
        /// </summary>
        [DataMember(Name = "active_timeout", EmitDefaultValue = true)]
        public AppflowExternalCollectorAppflowExternalCollectorReportActiveTimeout ActiveTimeout { get; set; }

        /// <summary>
        /// Gets or Sets KilobytesExchanged
        /// </summary>
        [DataMember(Name = "kilobytes_exchanged", EmitDefaultValue = true)]
        public AppflowExternalCollectorAppflowExternalCollectorReportKilobytesExchanged KilobytesExchanged { get; set; }

        /// <summary>
        /// Gets or Sets Update
        /// </summary>
        [DataMember(Name = "update", EmitDefaultValue = false)]
        public AppflowGmsflowServerAppflowGmsflowServerReportUpdate Update { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppflowExternalCollectorAppflowExternalCollectorReport {\n");
            sb.Append("  Open: ").Append(Open).Append("\n");
            sb.Append("  Close: ").Append(Close).Append("\n");
            sb.Append("  ActiveTimeout: ").Append(ActiveTimeout).Append("\n");
            sb.Append("  KilobytesExchanged: ").Append(KilobytesExchanged).Append("\n");
            sb.Append("  Update: ").Append(Update).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppflowExternalCollectorAppflowExternalCollectorReport);
        }

        /// <summary>
        /// Returns true if AppflowExternalCollectorAppflowExternalCollectorReport instances are equal
        /// </summary>
        /// <param name="input">Instance of AppflowExternalCollectorAppflowExternalCollectorReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppflowExternalCollectorAppflowExternalCollectorReport input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Open == input.Open ||
                    this.Open.Equals(input.Open)
                ) && 
                (
                    this.Close == input.Close ||
                    this.Close.Equals(input.Close)
                ) && 
                (
                    this.ActiveTimeout == input.ActiveTimeout ||
                    (this.ActiveTimeout != null &&
                    this.ActiveTimeout.Equals(input.ActiveTimeout))
                ) && 
                (
                    this.KilobytesExchanged == input.KilobytesExchanged ||
                    (this.KilobytesExchanged != null &&
                    this.KilobytesExchanged.Equals(input.KilobytesExchanged))
                ) && 
                (
                    this.Update == input.Update ||
                    (this.Update != null &&
                    this.Update.Equals(input.Update))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Open.GetHashCode();
                hashCode = (hashCode * 59) + this.Close.GetHashCode();
                if (this.ActiveTimeout != null)
                {
                    hashCode = (hashCode * 59) + this.ActiveTimeout.GetHashCode();
                }
                if (this.KilobytesExchanged != null)
                {
                    hashCode = (hashCode * 59) + this.KilobytesExchanged.GetHashCode();
                }
                if (this.Update != null)
                {
                    hashCode = (hashCode * 59) + this.Update.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
