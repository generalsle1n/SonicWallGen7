/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enter security services configuration mode.
    /// </summary>
    [DataContract(Name = "security_services_security_services")]
    public partial class SecurityServicesSecurityServices : IEquatable<SecurityServicesSecurityServices>, IValidatableObject
    {
        /// <summary>
        /// Set global security services setting.
        /// </summary>
        /// <value>Set global security services setting.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SecurityEnum
        {
            /// <summary>
            /// Enum Maximum for value: maximum
            /// </summary>
            [EnumMember(Value = "maximum")]
            Maximum = 1,

            /// <summary>
            /// Enum PerformanceOptimized for value: performance-optimized
            /// </summary>
            [EnumMember(Value = "performance-optimized")]
            PerformanceOptimized = 2
        }


        /// <summary>
        /// Set global security services setting.
        /// </summary>
        /// <value>Set global security services setting.</value>
        [DataMember(Name = "security", EmitDefaultValue = false)]
        public SecurityEnum? Security { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityServicesSecurityServices" /> class.
        /// </summary>
        /// <param name="security">Set global security services setting..</param>
        /// <param name="reduceIsdnAntivirusTraffic">Enable reduce Anti-Virus  traffic for ISDN connections..</param>
        /// <param name="dropPacketsAtReload">Enable drop all packets while IPS, GAV and Anti-Spyware database is reloading..</param>
        /// <param name="httpClientlessNotificationTimeout">Set HTTP clientless notification timeout for gateway AntiVirus and AntiSpyware in seconds..</param>
        /// <param name="proxyServer">proxyServer.</param>
        public SecurityServicesSecurityServices(SecurityEnum? security = default(SecurityEnum?), bool reduceIsdnAntivirusTraffic = default(bool), bool dropPacketsAtReload = default(bool), decimal httpClientlessNotificationTimeout = default(decimal), SecurityServicesSecurityServicesProxyServer proxyServer = default(SecurityServicesSecurityServicesProxyServer))
        {
            this.Security = security;
            this.ReduceIsdnAntivirusTraffic = reduceIsdnAntivirusTraffic;
            this.DropPacketsAtReload = dropPacketsAtReload;
            this.HttpClientlessNotificationTimeout = httpClientlessNotificationTimeout;
            this.ProxyServer = proxyServer;
        }

        /// <summary>
        /// Enable reduce Anti-Virus  traffic for ISDN connections.
        /// </summary>
        /// <value>Enable reduce Anti-Virus  traffic for ISDN connections.</value>
        [DataMember(Name = "reduce_isdn_antivirus_traffic", EmitDefaultValue = true)]
        public bool ReduceIsdnAntivirusTraffic { get; set; }

        /// <summary>
        /// Enable drop all packets while IPS, GAV and Anti-Spyware database is reloading.
        /// </summary>
        /// <value>Enable drop all packets while IPS, GAV and Anti-Spyware database is reloading.</value>
        [DataMember(Name = "drop_packets_at_reload", EmitDefaultValue = true)]
        public bool DropPacketsAtReload { get; set; }

        /// <summary>
        /// Set HTTP clientless notification timeout for gateway AntiVirus and AntiSpyware in seconds.
        /// </summary>
        /// <value>Set HTTP clientless notification timeout for gateway AntiVirus and AntiSpyware in seconds.</value>
        [DataMember(Name = "http_clientless_notification_timeout", EmitDefaultValue = false)]
        public decimal HttpClientlessNotificationTimeout { get; set; }

        /// <summary>
        /// Gets or Sets ProxyServer
        /// </summary>
        [DataMember(Name = "proxy_server", EmitDefaultValue = false)]
        public SecurityServicesSecurityServicesProxyServer ProxyServer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SecurityServicesSecurityServices {\n");
            sb.Append("  Security: ").Append(Security).Append("\n");
            sb.Append("  ReduceIsdnAntivirusTraffic: ").Append(ReduceIsdnAntivirusTraffic).Append("\n");
            sb.Append("  DropPacketsAtReload: ").Append(DropPacketsAtReload).Append("\n");
            sb.Append("  HttpClientlessNotificationTimeout: ").Append(HttpClientlessNotificationTimeout).Append("\n");
            sb.Append("  ProxyServer: ").Append(ProxyServer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecurityServicesSecurityServices);
        }

        /// <summary>
        /// Returns true if SecurityServicesSecurityServices instances are equal
        /// </summary>
        /// <param name="input">Instance of SecurityServicesSecurityServices to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecurityServicesSecurityServices input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Security == input.Security ||
                    this.Security.Equals(input.Security)
                ) && 
                (
                    this.ReduceIsdnAntivirusTraffic == input.ReduceIsdnAntivirusTraffic ||
                    this.ReduceIsdnAntivirusTraffic.Equals(input.ReduceIsdnAntivirusTraffic)
                ) && 
                (
                    this.DropPacketsAtReload == input.DropPacketsAtReload ||
                    this.DropPacketsAtReload.Equals(input.DropPacketsAtReload)
                ) && 
                (
                    this.HttpClientlessNotificationTimeout == input.HttpClientlessNotificationTimeout ||
                    this.HttpClientlessNotificationTimeout.Equals(input.HttpClientlessNotificationTimeout)
                ) && 
                (
                    this.ProxyServer == input.ProxyServer ||
                    (this.ProxyServer != null &&
                    this.ProxyServer.Equals(input.ProxyServer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Security.GetHashCode();
                hashCode = (hashCode * 59) + this.ReduceIsdnAntivirusTraffic.GetHashCode();
                hashCode = (hashCode * 59) + this.DropPacketsAtReload.GetHashCode();
                hashCode = (hashCode * 59) + this.HttpClientlessNotificationTimeout.GetHashCode();
                if (this.ProxyServer != null)
                {
                    hashCode = (hashCode * 59) + this.ProxyServer.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
