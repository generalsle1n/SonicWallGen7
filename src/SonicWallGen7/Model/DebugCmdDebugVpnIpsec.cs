/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Specify ipsec submodule
    /// </summary>
    [DataContract(Name = "debug_cmd_debug_vpn_ipsec")]
    public partial class DebugCmdDebugVpnIpsec : IEquatable<DebugCmdDebugVpnIpsec>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DebugCmdDebugVpnIpsec" /> class.
        /// </summary>
        /// <param name="traffic">Enable ipsec traffic.</param>
        /// <param name="frag">Enable ipsec frag.</param>
        /// <param name="mcast">Enable ipsec mcast.</param>
        /// <param name="stats">Enable ipsec stats.</param>
        /// <param name="nbns">Enable ipsec nbns.</param>
        /// <param name="replay">Enable ipsec replay.</param>
        /// <param name="crypt">Enable ipsec crypt.</param>
        /// <param name="selcheck">Enable ipsec selcheck.</param>
        /// <param name="packetfwd">Enable ipsec packetfwd.</param>
        public DebugCmdDebugVpnIpsec(bool traffic = default(bool), bool frag = default(bool), bool mcast = default(bool), bool stats = default(bool), bool nbns = default(bool), bool replay = default(bool), bool crypt = default(bool), bool selcheck = default(bool), bool packetfwd = default(bool))
        {
            this.Traffic = traffic;
            this.Frag = frag;
            this.Mcast = mcast;
            this.Stats = stats;
            this.Nbns = nbns;
            this.Replay = replay;
            this.Crypt = crypt;
            this.Selcheck = selcheck;
            this.Packetfwd = packetfwd;
        }

        /// <summary>
        /// Enable ipsec traffic
        /// </summary>
        /// <value>Enable ipsec traffic</value>
        [DataMember(Name = "traffic", EmitDefaultValue = true)]
        public bool Traffic { get; set; }

        /// <summary>
        /// Enable ipsec frag
        /// </summary>
        /// <value>Enable ipsec frag</value>
        [DataMember(Name = "frag", EmitDefaultValue = true)]
        public bool Frag { get; set; }

        /// <summary>
        /// Enable ipsec mcast
        /// </summary>
        /// <value>Enable ipsec mcast</value>
        [DataMember(Name = "mcast", EmitDefaultValue = true)]
        public bool Mcast { get; set; }

        /// <summary>
        /// Enable ipsec stats
        /// </summary>
        /// <value>Enable ipsec stats</value>
        [DataMember(Name = "stats", EmitDefaultValue = true)]
        public bool Stats { get; set; }

        /// <summary>
        /// Enable ipsec nbns
        /// </summary>
        /// <value>Enable ipsec nbns</value>
        [DataMember(Name = "nbns", EmitDefaultValue = true)]
        public bool Nbns { get; set; }

        /// <summary>
        /// Enable ipsec replay
        /// </summary>
        /// <value>Enable ipsec replay</value>
        [DataMember(Name = "replay", EmitDefaultValue = true)]
        public bool Replay { get; set; }

        /// <summary>
        /// Enable ipsec crypt
        /// </summary>
        /// <value>Enable ipsec crypt</value>
        [DataMember(Name = "crypt", EmitDefaultValue = true)]
        public bool Crypt { get; set; }

        /// <summary>
        /// Enable ipsec selcheck
        /// </summary>
        /// <value>Enable ipsec selcheck</value>
        [DataMember(Name = "selcheck", EmitDefaultValue = true)]
        public bool Selcheck { get; set; }

        /// <summary>
        /// Enable ipsec packetfwd
        /// </summary>
        /// <value>Enable ipsec packetfwd</value>
        [DataMember(Name = "packetfwd", EmitDefaultValue = true)]
        public bool Packetfwd { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DebugCmdDebugVpnIpsec {\n");
            sb.Append("  Traffic: ").Append(Traffic).Append("\n");
            sb.Append("  Frag: ").Append(Frag).Append("\n");
            sb.Append("  Mcast: ").Append(Mcast).Append("\n");
            sb.Append("  Stats: ").Append(Stats).Append("\n");
            sb.Append("  Nbns: ").Append(Nbns).Append("\n");
            sb.Append("  Replay: ").Append(Replay).Append("\n");
            sb.Append("  Crypt: ").Append(Crypt).Append("\n");
            sb.Append("  Selcheck: ").Append(Selcheck).Append("\n");
            sb.Append("  Packetfwd: ").Append(Packetfwd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DebugCmdDebugVpnIpsec);
        }

        /// <summary>
        /// Returns true if DebugCmdDebugVpnIpsec instances are equal
        /// </summary>
        /// <param name="input">Instance of DebugCmdDebugVpnIpsec to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DebugCmdDebugVpnIpsec input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Traffic == input.Traffic ||
                    this.Traffic.Equals(input.Traffic)
                ) && 
                (
                    this.Frag == input.Frag ||
                    this.Frag.Equals(input.Frag)
                ) && 
                (
                    this.Mcast == input.Mcast ||
                    this.Mcast.Equals(input.Mcast)
                ) && 
                (
                    this.Stats == input.Stats ||
                    this.Stats.Equals(input.Stats)
                ) && 
                (
                    this.Nbns == input.Nbns ||
                    this.Nbns.Equals(input.Nbns)
                ) && 
                (
                    this.Replay == input.Replay ||
                    this.Replay.Equals(input.Replay)
                ) && 
                (
                    this.Crypt == input.Crypt ||
                    this.Crypt.Equals(input.Crypt)
                ) && 
                (
                    this.Selcheck == input.Selcheck ||
                    this.Selcheck.Equals(input.Selcheck)
                ) && 
                (
                    this.Packetfwd == input.Packetfwd ||
                    this.Packetfwd.Equals(input.Packetfwd)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Traffic.GetHashCode();
                hashCode = (hashCode * 59) + this.Frag.GetHashCode();
                hashCode = (hashCode * 59) + this.Mcast.GetHashCode();
                hashCode = (hashCode * 59) + this.Stats.GetHashCode();
                hashCode = (hashCode * 59) + this.Nbns.GetHashCode();
                hashCode = (hashCode * 59) + this.Replay.GetHashCode();
                hashCode = (hashCode * 59) + this.Crypt.GetHashCode();
                hashCode = (hashCode * 59) + this.Selcheck.GetHashCode();
                hashCode = (hashCode * 59) + this.Packetfwd.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
