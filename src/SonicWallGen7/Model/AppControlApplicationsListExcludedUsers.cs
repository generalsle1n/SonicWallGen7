/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;
using System.Reflection;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Excluded users/groups.
    /// </summary>
    [JsonConverter(typeof(AppControlApplicationsListExcludedUsersJsonConverter))]
    [DataContract(Name = "app_control_applications_list_excluded_users")]
    public partial class AppControlApplicationsListExcludedUsers : AbstractOpenAPISchema, IEquatable<AppControlApplicationsListExcludedUsers>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppControlApplicationsListExcludedUsers" /> class
        /// with the <see cref="AppControlApplicationsListExcludedUsersCategory" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AppControlApplicationsListExcludedUsersCategory.</param>
        public AppControlApplicationsListExcludedUsers(AppControlApplicationsListExcludedUsersCategory actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppControlApplicationsListExcludedUsers" /> class
        /// with the <see cref="AppControlApplicationsListExcludedUsersGuests" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AppControlApplicationsListExcludedUsersGuests.</param>
        public AppControlApplicationsListExcludedUsers(AppControlApplicationsListExcludedUsersGuests actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppControlApplicationsListExcludedUsers" /> class
        /// with the <see cref="AppControlApplicationsListExcludedUsersAdministrator" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AppControlApplicationsListExcludedUsersAdministrator.</param>
        public AppControlApplicationsListExcludedUsers(AppControlApplicationsListExcludedUsersAdministrator actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppControlApplicationsListExcludedUsers" /> class
        /// with the <see cref="AppControlApplicationsListExcludedUsersName" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AppControlApplicationsListExcludedUsersName.</param>
        public AppControlApplicationsListExcludedUsers(AppControlApplicationsListExcludedUsersName actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppControlApplicationsListExcludedUsers" /> class
        /// with the <see cref="AppControlApplicationsListExcludedUsersGroup" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AppControlApplicationsListExcludedUsersGroup.</param>
        public AppControlApplicationsListExcludedUsers(AppControlApplicationsListExcludedUsersGroup actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(AppControlApplicationsListExcludedUsersAdministrator))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(AppControlApplicationsListExcludedUsersCategory))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(AppControlApplicationsListExcludedUsersGroup))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(AppControlApplicationsListExcludedUsersGuests))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(AppControlApplicationsListExcludedUsersName))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: AppControlApplicationsListExcludedUsersAdministrator, AppControlApplicationsListExcludedUsersCategory, AppControlApplicationsListExcludedUsersGroup, AppControlApplicationsListExcludedUsersGuests, AppControlApplicationsListExcludedUsersName");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `AppControlApplicationsListExcludedUsersCategory`. If the actual instance is not `AppControlApplicationsListExcludedUsersCategory`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AppControlApplicationsListExcludedUsersCategory</returns>
        public AppControlApplicationsListExcludedUsersCategory GetAppControlApplicationsListExcludedUsersCategory()
        {
            return (AppControlApplicationsListExcludedUsersCategory)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AppControlApplicationsListExcludedUsersGuests`. If the actual instance is not `AppControlApplicationsListExcludedUsersGuests`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AppControlApplicationsListExcludedUsersGuests</returns>
        public AppControlApplicationsListExcludedUsersGuests GetAppControlApplicationsListExcludedUsersGuests()
        {
            return (AppControlApplicationsListExcludedUsersGuests)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AppControlApplicationsListExcludedUsersAdministrator`. If the actual instance is not `AppControlApplicationsListExcludedUsersAdministrator`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AppControlApplicationsListExcludedUsersAdministrator</returns>
        public AppControlApplicationsListExcludedUsersAdministrator GetAppControlApplicationsListExcludedUsersAdministrator()
        {
            return (AppControlApplicationsListExcludedUsersAdministrator)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AppControlApplicationsListExcludedUsersName`. If the actual instance is not `AppControlApplicationsListExcludedUsersName`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AppControlApplicationsListExcludedUsersName</returns>
        public AppControlApplicationsListExcludedUsersName GetAppControlApplicationsListExcludedUsersName()
        {
            return (AppControlApplicationsListExcludedUsersName)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AppControlApplicationsListExcludedUsersGroup`. If the actual instance is not `AppControlApplicationsListExcludedUsersGroup`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AppControlApplicationsListExcludedUsersGroup</returns>
        public AppControlApplicationsListExcludedUsersGroup GetAppControlApplicationsListExcludedUsersGroup()
        {
            return (AppControlApplicationsListExcludedUsersGroup)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppControlApplicationsListExcludedUsers {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, AppControlApplicationsListExcludedUsers.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of AppControlApplicationsListExcludedUsers
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of AppControlApplicationsListExcludedUsers</returns>
        public static AppControlApplicationsListExcludedUsers FromJson(string jsonString)
        {
            AppControlApplicationsListExcludedUsers newAppControlApplicationsListExcludedUsers = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newAppControlApplicationsListExcludedUsers;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(AppControlApplicationsListExcludedUsersAdministrator).GetProperty("AdditionalProperties") == null)
                {
                    newAppControlApplicationsListExcludedUsers = new AppControlApplicationsListExcludedUsers(JsonConvert.DeserializeObject<AppControlApplicationsListExcludedUsersAdministrator>(jsonString, AppControlApplicationsListExcludedUsers.SerializerSettings));
                }
                else
                {
                    newAppControlApplicationsListExcludedUsers = new AppControlApplicationsListExcludedUsers(JsonConvert.DeserializeObject<AppControlApplicationsListExcludedUsersAdministrator>(jsonString, AppControlApplicationsListExcludedUsers.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("AppControlApplicationsListExcludedUsersAdministrator");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AppControlApplicationsListExcludedUsersAdministrator: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(AppControlApplicationsListExcludedUsersCategory).GetProperty("AdditionalProperties") == null)
                {
                    newAppControlApplicationsListExcludedUsers = new AppControlApplicationsListExcludedUsers(JsonConvert.DeserializeObject<AppControlApplicationsListExcludedUsersCategory>(jsonString, AppControlApplicationsListExcludedUsers.SerializerSettings));
                }
                else
                {
                    newAppControlApplicationsListExcludedUsers = new AppControlApplicationsListExcludedUsers(JsonConvert.DeserializeObject<AppControlApplicationsListExcludedUsersCategory>(jsonString, AppControlApplicationsListExcludedUsers.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("AppControlApplicationsListExcludedUsersCategory");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AppControlApplicationsListExcludedUsersCategory: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(AppControlApplicationsListExcludedUsersGroup).GetProperty("AdditionalProperties") == null)
                {
                    newAppControlApplicationsListExcludedUsers = new AppControlApplicationsListExcludedUsers(JsonConvert.DeserializeObject<AppControlApplicationsListExcludedUsersGroup>(jsonString, AppControlApplicationsListExcludedUsers.SerializerSettings));
                }
                else
                {
                    newAppControlApplicationsListExcludedUsers = new AppControlApplicationsListExcludedUsers(JsonConvert.DeserializeObject<AppControlApplicationsListExcludedUsersGroup>(jsonString, AppControlApplicationsListExcludedUsers.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("AppControlApplicationsListExcludedUsersGroup");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AppControlApplicationsListExcludedUsersGroup: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(AppControlApplicationsListExcludedUsersGuests).GetProperty("AdditionalProperties") == null)
                {
                    newAppControlApplicationsListExcludedUsers = new AppControlApplicationsListExcludedUsers(JsonConvert.DeserializeObject<AppControlApplicationsListExcludedUsersGuests>(jsonString, AppControlApplicationsListExcludedUsers.SerializerSettings));
                }
                else
                {
                    newAppControlApplicationsListExcludedUsers = new AppControlApplicationsListExcludedUsers(JsonConvert.DeserializeObject<AppControlApplicationsListExcludedUsersGuests>(jsonString, AppControlApplicationsListExcludedUsers.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("AppControlApplicationsListExcludedUsersGuests");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AppControlApplicationsListExcludedUsersGuests: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(AppControlApplicationsListExcludedUsersName).GetProperty("AdditionalProperties") == null)
                {
                    newAppControlApplicationsListExcludedUsers = new AppControlApplicationsListExcludedUsers(JsonConvert.DeserializeObject<AppControlApplicationsListExcludedUsersName>(jsonString, AppControlApplicationsListExcludedUsers.SerializerSettings));
                }
                else
                {
                    newAppControlApplicationsListExcludedUsers = new AppControlApplicationsListExcludedUsers(JsonConvert.DeserializeObject<AppControlApplicationsListExcludedUsersName>(jsonString, AppControlApplicationsListExcludedUsers.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("AppControlApplicationsListExcludedUsersName");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AppControlApplicationsListExcludedUsersName: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newAppControlApplicationsListExcludedUsers;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppControlApplicationsListExcludedUsers);
        }

        /// <summary>
        /// Returns true if AppControlApplicationsListExcludedUsers instances are equal
        /// </summary>
        /// <param name="input">Instance of AppControlApplicationsListExcludedUsers to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppControlApplicationsListExcludedUsers input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for AppControlApplicationsListExcludedUsers
    /// </summary>
    public class AppControlApplicationsListExcludedUsersJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(AppControlApplicationsListExcludedUsers).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return AppControlApplicationsListExcludedUsers.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
