/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;
using System.Reflection;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Set the packet dissection data type.
    /// </summary>
    [JsonConverter(typeof(PacketDissectionObjectDataTypeJsonConverter))]
    [DataContract(Name = "packet_dissection_object_data_type")]
    public partial class PacketDissectionObjectDataType : AbstractOpenAPISchema, IEquatable<PacketDissectionObjectDataType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PacketDissectionObjectDataType" /> class
        /// with the <see cref="PacketDissectionObjectDataTypeNumeric" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PacketDissectionObjectDataTypeNumeric.</param>
        public PacketDissectionObjectDataType(PacketDissectionObjectDataTypeNumeric actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PacketDissectionObjectDataType" /> class
        /// with the <see cref="PacketDissectionObjectDataTypeRange" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PacketDissectionObjectDataTypeRange.</param>
        public PacketDissectionObjectDataType(PacketDissectionObjectDataTypeRange actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PacketDissectionObjectDataType" /> class
        /// with the <see cref="PacketDissectionObjectDataTypeHex" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PacketDissectionObjectDataTypeHex.</param>
        public PacketDissectionObjectDataType(PacketDissectionObjectDataTypeHex actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PacketDissectionObjectDataType" /> class
        /// with the <see cref="PacketDissectionObjectDataTypeRangeHex" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PacketDissectionObjectDataTypeRangeHex.</param>
        public PacketDissectionObjectDataType(PacketDissectionObjectDataTypeRangeHex actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PacketDissectionObjectDataType" /> class
        /// with the <see cref="PacketDissectionObjectDataTypeIpv4Address" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PacketDissectionObjectDataTypeIpv4Address.</param>
        public PacketDissectionObjectDataType(PacketDissectionObjectDataTypeIpv4Address actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PacketDissectionObjectDataType" /> class
        /// with the <see cref="PacketDissectionObjectDataTypeIpv4Range" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PacketDissectionObjectDataTypeIpv4Range.</param>
        public PacketDissectionObjectDataType(PacketDissectionObjectDataTypeIpv4Range actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PacketDissectionObjectDataType" /> class
        /// with the <see cref="PacketDissectionObjectDataTypeIpv6Address" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PacketDissectionObjectDataTypeIpv6Address.</param>
        public PacketDissectionObjectDataType(PacketDissectionObjectDataTypeIpv6Address actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PacketDissectionObjectDataType" /> class
        /// with the <see cref="PacketDissectionObjectDataTypeIpv6Range" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PacketDissectionObjectDataTypeIpv6Range.</param>
        public PacketDissectionObjectDataType(PacketDissectionObjectDataTypeIpv6Range actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PacketDissectionObjectDataType" /> class
        /// with the <see cref="PacketDissectionObjectDataTypeIpv4Bitset" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PacketDissectionObjectDataTypeIpv4Bitset.</param>
        public PacketDissectionObjectDataType(PacketDissectionObjectDataTypeIpv4Bitset actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PacketDissectionObjectDataType" /> class
        /// with the <see cref="PacketDissectionObjectDataTypeTcpBitset" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PacketDissectionObjectDataTypeTcpBitset.</param>
        public PacketDissectionObjectDataType(PacketDissectionObjectDataTypeTcpBitset actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(PacketDissectionObjectDataTypeHex))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(PacketDissectionObjectDataTypeIpv4Address))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(PacketDissectionObjectDataTypeIpv4Bitset))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(PacketDissectionObjectDataTypeIpv4Range))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(PacketDissectionObjectDataTypeIpv6Address))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(PacketDissectionObjectDataTypeIpv6Range))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(PacketDissectionObjectDataTypeNumeric))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(PacketDissectionObjectDataTypeRange))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(PacketDissectionObjectDataTypeRangeHex))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(PacketDissectionObjectDataTypeTcpBitset))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: PacketDissectionObjectDataTypeHex, PacketDissectionObjectDataTypeIpv4Address, PacketDissectionObjectDataTypeIpv4Bitset, PacketDissectionObjectDataTypeIpv4Range, PacketDissectionObjectDataTypeIpv6Address, PacketDissectionObjectDataTypeIpv6Range, PacketDissectionObjectDataTypeNumeric, PacketDissectionObjectDataTypeRange, PacketDissectionObjectDataTypeRangeHex, PacketDissectionObjectDataTypeTcpBitset");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `PacketDissectionObjectDataTypeNumeric`. If the actual instance is not `PacketDissectionObjectDataTypeNumeric`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PacketDissectionObjectDataTypeNumeric</returns>
        public PacketDissectionObjectDataTypeNumeric GetPacketDissectionObjectDataTypeNumeric()
        {
            return (PacketDissectionObjectDataTypeNumeric)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `PacketDissectionObjectDataTypeRange`. If the actual instance is not `PacketDissectionObjectDataTypeRange`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PacketDissectionObjectDataTypeRange</returns>
        public PacketDissectionObjectDataTypeRange GetPacketDissectionObjectDataTypeRange()
        {
            return (PacketDissectionObjectDataTypeRange)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `PacketDissectionObjectDataTypeHex`. If the actual instance is not `PacketDissectionObjectDataTypeHex`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PacketDissectionObjectDataTypeHex</returns>
        public PacketDissectionObjectDataTypeHex GetPacketDissectionObjectDataTypeHex()
        {
            return (PacketDissectionObjectDataTypeHex)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `PacketDissectionObjectDataTypeRangeHex`. If the actual instance is not `PacketDissectionObjectDataTypeRangeHex`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PacketDissectionObjectDataTypeRangeHex</returns>
        public PacketDissectionObjectDataTypeRangeHex GetPacketDissectionObjectDataTypeRangeHex()
        {
            return (PacketDissectionObjectDataTypeRangeHex)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `PacketDissectionObjectDataTypeIpv4Address`. If the actual instance is not `PacketDissectionObjectDataTypeIpv4Address`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PacketDissectionObjectDataTypeIpv4Address</returns>
        public PacketDissectionObjectDataTypeIpv4Address GetPacketDissectionObjectDataTypeIpv4Address()
        {
            return (PacketDissectionObjectDataTypeIpv4Address)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `PacketDissectionObjectDataTypeIpv4Range`. If the actual instance is not `PacketDissectionObjectDataTypeIpv4Range`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PacketDissectionObjectDataTypeIpv4Range</returns>
        public PacketDissectionObjectDataTypeIpv4Range GetPacketDissectionObjectDataTypeIpv4Range()
        {
            return (PacketDissectionObjectDataTypeIpv4Range)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `PacketDissectionObjectDataTypeIpv6Address`. If the actual instance is not `PacketDissectionObjectDataTypeIpv6Address`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PacketDissectionObjectDataTypeIpv6Address</returns>
        public PacketDissectionObjectDataTypeIpv6Address GetPacketDissectionObjectDataTypeIpv6Address()
        {
            return (PacketDissectionObjectDataTypeIpv6Address)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `PacketDissectionObjectDataTypeIpv6Range`. If the actual instance is not `PacketDissectionObjectDataTypeIpv6Range`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PacketDissectionObjectDataTypeIpv6Range</returns>
        public PacketDissectionObjectDataTypeIpv6Range GetPacketDissectionObjectDataTypeIpv6Range()
        {
            return (PacketDissectionObjectDataTypeIpv6Range)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `PacketDissectionObjectDataTypeIpv4Bitset`. If the actual instance is not `PacketDissectionObjectDataTypeIpv4Bitset`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PacketDissectionObjectDataTypeIpv4Bitset</returns>
        public PacketDissectionObjectDataTypeIpv4Bitset GetPacketDissectionObjectDataTypeIpv4Bitset()
        {
            return (PacketDissectionObjectDataTypeIpv4Bitset)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `PacketDissectionObjectDataTypeTcpBitset`. If the actual instance is not `PacketDissectionObjectDataTypeTcpBitset`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PacketDissectionObjectDataTypeTcpBitset</returns>
        public PacketDissectionObjectDataTypeTcpBitset GetPacketDissectionObjectDataTypeTcpBitset()
        {
            return (PacketDissectionObjectDataTypeTcpBitset)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PacketDissectionObjectDataType {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, PacketDissectionObjectDataType.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of PacketDissectionObjectDataType
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of PacketDissectionObjectDataType</returns>
        public static PacketDissectionObjectDataType FromJson(string jsonString)
        {
            PacketDissectionObjectDataType newPacketDissectionObjectDataType = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newPacketDissectionObjectDataType;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(PacketDissectionObjectDataTypeHex).GetProperty("AdditionalProperties") == null)
                {
                    newPacketDissectionObjectDataType = new PacketDissectionObjectDataType(JsonConvert.DeserializeObject<PacketDissectionObjectDataTypeHex>(jsonString, PacketDissectionObjectDataType.SerializerSettings));
                }
                else
                {
                    newPacketDissectionObjectDataType = new PacketDissectionObjectDataType(JsonConvert.DeserializeObject<PacketDissectionObjectDataTypeHex>(jsonString, PacketDissectionObjectDataType.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("PacketDissectionObjectDataTypeHex");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into PacketDissectionObjectDataTypeHex: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(PacketDissectionObjectDataTypeIpv4Address).GetProperty("AdditionalProperties") == null)
                {
                    newPacketDissectionObjectDataType = new PacketDissectionObjectDataType(JsonConvert.DeserializeObject<PacketDissectionObjectDataTypeIpv4Address>(jsonString, PacketDissectionObjectDataType.SerializerSettings));
                }
                else
                {
                    newPacketDissectionObjectDataType = new PacketDissectionObjectDataType(JsonConvert.DeserializeObject<PacketDissectionObjectDataTypeIpv4Address>(jsonString, PacketDissectionObjectDataType.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("PacketDissectionObjectDataTypeIpv4Address");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into PacketDissectionObjectDataTypeIpv4Address: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(PacketDissectionObjectDataTypeIpv4Bitset).GetProperty("AdditionalProperties") == null)
                {
                    newPacketDissectionObjectDataType = new PacketDissectionObjectDataType(JsonConvert.DeserializeObject<PacketDissectionObjectDataTypeIpv4Bitset>(jsonString, PacketDissectionObjectDataType.SerializerSettings));
                }
                else
                {
                    newPacketDissectionObjectDataType = new PacketDissectionObjectDataType(JsonConvert.DeserializeObject<PacketDissectionObjectDataTypeIpv4Bitset>(jsonString, PacketDissectionObjectDataType.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("PacketDissectionObjectDataTypeIpv4Bitset");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into PacketDissectionObjectDataTypeIpv4Bitset: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(PacketDissectionObjectDataTypeIpv4Range).GetProperty("AdditionalProperties") == null)
                {
                    newPacketDissectionObjectDataType = new PacketDissectionObjectDataType(JsonConvert.DeserializeObject<PacketDissectionObjectDataTypeIpv4Range>(jsonString, PacketDissectionObjectDataType.SerializerSettings));
                }
                else
                {
                    newPacketDissectionObjectDataType = new PacketDissectionObjectDataType(JsonConvert.DeserializeObject<PacketDissectionObjectDataTypeIpv4Range>(jsonString, PacketDissectionObjectDataType.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("PacketDissectionObjectDataTypeIpv4Range");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into PacketDissectionObjectDataTypeIpv4Range: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(PacketDissectionObjectDataTypeIpv6Address).GetProperty("AdditionalProperties") == null)
                {
                    newPacketDissectionObjectDataType = new PacketDissectionObjectDataType(JsonConvert.DeserializeObject<PacketDissectionObjectDataTypeIpv6Address>(jsonString, PacketDissectionObjectDataType.SerializerSettings));
                }
                else
                {
                    newPacketDissectionObjectDataType = new PacketDissectionObjectDataType(JsonConvert.DeserializeObject<PacketDissectionObjectDataTypeIpv6Address>(jsonString, PacketDissectionObjectDataType.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("PacketDissectionObjectDataTypeIpv6Address");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into PacketDissectionObjectDataTypeIpv6Address: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(PacketDissectionObjectDataTypeIpv6Range).GetProperty("AdditionalProperties") == null)
                {
                    newPacketDissectionObjectDataType = new PacketDissectionObjectDataType(JsonConvert.DeserializeObject<PacketDissectionObjectDataTypeIpv6Range>(jsonString, PacketDissectionObjectDataType.SerializerSettings));
                }
                else
                {
                    newPacketDissectionObjectDataType = new PacketDissectionObjectDataType(JsonConvert.DeserializeObject<PacketDissectionObjectDataTypeIpv6Range>(jsonString, PacketDissectionObjectDataType.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("PacketDissectionObjectDataTypeIpv6Range");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into PacketDissectionObjectDataTypeIpv6Range: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(PacketDissectionObjectDataTypeNumeric).GetProperty("AdditionalProperties") == null)
                {
                    newPacketDissectionObjectDataType = new PacketDissectionObjectDataType(JsonConvert.DeserializeObject<PacketDissectionObjectDataTypeNumeric>(jsonString, PacketDissectionObjectDataType.SerializerSettings));
                }
                else
                {
                    newPacketDissectionObjectDataType = new PacketDissectionObjectDataType(JsonConvert.DeserializeObject<PacketDissectionObjectDataTypeNumeric>(jsonString, PacketDissectionObjectDataType.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("PacketDissectionObjectDataTypeNumeric");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into PacketDissectionObjectDataTypeNumeric: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(PacketDissectionObjectDataTypeRange).GetProperty("AdditionalProperties") == null)
                {
                    newPacketDissectionObjectDataType = new PacketDissectionObjectDataType(JsonConvert.DeserializeObject<PacketDissectionObjectDataTypeRange>(jsonString, PacketDissectionObjectDataType.SerializerSettings));
                }
                else
                {
                    newPacketDissectionObjectDataType = new PacketDissectionObjectDataType(JsonConvert.DeserializeObject<PacketDissectionObjectDataTypeRange>(jsonString, PacketDissectionObjectDataType.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("PacketDissectionObjectDataTypeRange");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into PacketDissectionObjectDataTypeRange: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(PacketDissectionObjectDataTypeRangeHex).GetProperty("AdditionalProperties") == null)
                {
                    newPacketDissectionObjectDataType = new PacketDissectionObjectDataType(JsonConvert.DeserializeObject<PacketDissectionObjectDataTypeRangeHex>(jsonString, PacketDissectionObjectDataType.SerializerSettings));
                }
                else
                {
                    newPacketDissectionObjectDataType = new PacketDissectionObjectDataType(JsonConvert.DeserializeObject<PacketDissectionObjectDataTypeRangeHex>(jsonString, PacketDissectionObjectDataType.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("PacketDissectionObjectDataTypeRangeHex");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into PacketDissectionObjectDataTypeRangeHex: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(PacketDissectionObjectDataTypeTcpBitset).GetProperty("AdditionalProperties") == null)
                {
                    newPacketDissectionObjectDataType = new PacketDissectionObjectDataType(JsonConvert.DeserializeObject<PacketDissectionObjectDataTypeTcpBitset>(jsonString, PacketDissectionObjectDataType.SerializerSettings));
                }
                else
                {
                    newPacketDissectionObjectDataType = new PacketDissectionObjectDataType(JsonConvert.DeserializeObject<PacketDissectionObjectDataTypeTcpBitset>(jsonString, PacketDissectionObjectDataType.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("PacketDissectionObjectDataTypeTcpBitset");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into PacketDissectionObjectDataTypeTcpBitset: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newPacketDissectionObjectDataType;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PacketDissectionObjectDataType);
        }

        /// <summary>
        /// Returns true if PacketDissectionObjectDataType instances are equal
        /// </summary>
        /// <param name="input">Instance of PacketDissectionObjectDataType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PacketDissectionObjectDataType input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for PacketDissectionObjectDataType
    /// </summary>
    public class PacketDissectionObjectDataTypeJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(PacketDissectionObjectDataType).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return PacketDissectionObjectDataType.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
