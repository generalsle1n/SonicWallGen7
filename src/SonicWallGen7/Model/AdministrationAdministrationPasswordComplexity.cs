/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Set the allowed complexity of the password. * Set to null or {} to represent  an unconfigured state.
    /// </summary>
    [DataContract(Name = "administration_administration_password_complexity")]
    public partial class AdministrationAdministrationPasswordComplexity : IEquatable<AdministrationAdministrationPasswordComplexity>, IValidatableObject
    {
        /// <summary>
        /// Set the allowed complexity of the password type.
        /// </summary>
        /// <value>Set the allowed complexity of the password type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Numeric for value: alpha-and-numeric
            /// </summary>
            [EnumMember(Value = "alpha-and-numeric")]
            Numeric = 1,

            /// <summary>
            /// Enum NumericAndSymbols for value: alpha-and-numeric-and-symbols
            /// </summary>
            [EnumMember(Value = "alpha-and-numeric-and-symbols")]
            NumericAndSymbols = 2
        }


        /// <summary>
        /// Set the allowed complexity of the password type.
        /// </summary>
        /// <value>Set the allowed complexity of the password type.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdministrationAdministrationPasswordComplexity" /> class.
        /// </summary>
        /// <param name="type">Set the allowed complexity of the password type..</param>
        /// <param name="upperCase">Set minimum upper case character number..</param>
        /// <param name="lowerCase">Set minimum lower case character number..</param>
        /// <param name="digital">Set minimum digital character number..</param>
        /// <param name="symbolic">Set minimum symbolic character number..</param>
        public AdministrationAdministrationPasswordComplexity(TypeEnum? type = default(TypeEnum?), decimal upperCase = default(decimal), decimal lowerCase = default(decimal), decimal digital = default(decimal), decimal symbolic = default(decimal))
        {
            this.Type = type;
            this.UpperCase = upperCase;
            this.LowerCase = lowerCase;
            this.Digital = digital;
            this.Symbolic = symbolic;
        }

        /// <summary>
        /// Set minimum upper case character number.
        /// </summary>
        /// <value>Set minimum upper case character number.</value>
        [DataMember(Name = "upper_case", EmitDefaultValue = false)]
        public decimal UpperCase { get; set; }

        /// <summary>
        /// Set minimum lower case character number.
        /// </summary>
        /// <value>Set minimum lower case character number.</value>
        [DataMember(Name = "lower_case", EmitDefaultValue = false)]
        public decimal LowerCase { get; set; }

        /// <summary>
        /// Set minimum digital character number.
        /// </summary>
        /// <value>Set minimum digital character number.</value>
        [DataMember(Name = "digital", EmitDefaultValue = false)]
        public decimal Digital { get; set; }

        /// <summary>
        /// Set minimum symbolic character number.
        /// </summary>
        /// <value>Set minimum symbolic character number.</value>
        [DataMember(Name = "symbolic", EmitDefaultValue = false)]
        public decimal Symbolic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdministrationAdministrationPasswordComplexity {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UpperCase: ").Append(UpperCase).Append("\n");
            sb.Append("  LowerCase: ").Append(LowerCase).Append("\n");
            sb.Append("  Digital: ").Append(Digital).Append("\n");
            sb.Append("  Symbolic: ").Append(Symbolic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdministrationAdministrationPasswordComplexity);
        }

        /// <summary>
        /// Returns true if AdministrationAdministrationPasswordComplexity instances are equal
        /// </summary>
        /// <param name="input">Instance of AdministrationAdministrationPasswordComplexity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdministrationAdministrationPasswordComplexity input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.UpperCase == input.UpperCase ||
                    this.UpperCase.Equals(input.UpperCase)
                ) && 
                (
                    this.LowerCase == input.LowerCase ||
                    this.LowerCase.Equals(input.LowerCase)
                ) && 
                (
                    this.Digital == input.Digital ||
                    this.Digital.Equals(input.Digital)
                ) && 
                (
                    this.Symbolic == input.Symbolic ||
                    this.Symbolic.Equals(input.Symbolic)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.UpperCase.GetHashCode();
                hashCode = (hashCode * 59) + this.LowerCase.GetHashCode();
                hashCode = (hashCode * 59) + this.Digital.GetHashCode();
                hashCode = (hashCode * 59) + this.Symbolic.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
