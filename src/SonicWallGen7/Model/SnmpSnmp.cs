/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enter SNMP configuration mode. * Set to null or {} to represent  an unconfigured state.
    /// </summary>
    [DataContract(Name = "snmp_snmp")]
    public partial class SnmpSnmp : IEquatable<SnmpSnmp>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SnmpSnmp" /> class.
        /// </summary>
        /// <param name="enable">Enable SNMP..</param>
        /// <param name="systemName">Set the SNMP system name..</param>
        /// <param name="systemContact">Set the SNMP system contact..</param>
        /// <param name="systemLocation">Set the SNMP system location..</param>
        /// <param name="assetNumber">Set the SNMP asset number..</param>
        /// <param name="getCommunityName">Set the SNMP get community name..</param>
        /// <param name="trapCommunityName">Set the SNMP trap community name..</param>
        /// <param name="host1">Set SNMP Trap Host 1..</param>
        /// <param name="host2">Set SNMP Trap Host 2..</param>
        /// <param name="host3">Set SNMP Trap Host 3..</param>
        /// <param name="host4">Set SNMP Trap Host 4..</param>
        /// <param name="snmp3">snmp3.</param>
        public SnmpSnmp(bool enable = default(bool), string systemName = default(string), string systemContact = default(string), string systemLocation = default(string), string assetNumber = default(string), string getCommunityName = default(string), string trapCommunityName = default(string), string host1 = default(string), string host2 = default(string), string host3 = default(string), string host4 = default(string), SnmpSnmpSnmp3 snmp3 = default(SnmpSnmpSnmp3))
        {
            this.Enable = enable;
            this.SystemName = systemName;
            this.SystemContact = systemContact;
            this.SystemLocation = systemLocation;
            this.AssetNumber = assetNumber;
            this.GetCommunityName = getCommunityName;
            this.TrapCommunityName = trapCommunityName;
            this.Host1 = host1;
            this.Host2 = host2;
            this.Host3 = host3;
            this.Host4 = host4;
            this.Snmp3 = snmp3;
        }

        /// <summary>
        /// Enable SNMP.
        /// </summary>
        /// <value>Enable SNMP.</value>
        [DataMember(Name = "enable", EmitDefaultValue = true)]
        public bool Enable { get; set; }

        /// <summary>
        /// Set the SNMP system name.
        /// </summary>
        /// <value>Set the SNMP system name.</value>
        [DataMember(Name = "system_name", EmitDefaultValue = false)]
        public string SystemName { get; set; }

        /// <summary>
        /// Set the SNMP system contact.
        /// </summary>
        /// <value>Set the SNMP system contact.</value>
        [DataMember(Name = "system_contact", EmitDefaultValue = false)]
        public string SystemContact { get; set; }

        /// <summary>
        /// Set the SNMP system location.
        /// </summary>
        /// <value>Set the SNMP system location.</value>
        [DataMember(Name = "system_location", EmitDefaultValue = false)]
        public string SystemLocation { get; set; }

        /// <summary>
        /// Set the SNMP asset number.
        /// </summary>
        /// <value>Set the SNMP asset number.</value>
        [DataMember(Name = "asset_number", EmitDefaultValue = false)]
        public string AssetNumber { get; set; }

        /// <summary>
        /// Set the SNMP get community name.
        /// </summary>
        /// <value>Set the SNMP get community name.</value>
        [DataMember(Name = "get_community_name", EmitDefaultValue = false)]
        public string GetCommunityName { get; set; }

        /// <summary>
        /// Set the SNMP trap community name.
        /// </summary>
        /// <value>Set the SNMP trap community name.</value>
        [DataMember(Name = "trap_community_name", EmitDefaultValue = false)]
        public string TrapCommunityName { get; set; }

        /// <summary>
        /// Set SNMP Trap Host 1.
        /// </summary>
        /// <value>Set SNMP Trap Host 1.</value>
        [DataMember(Name = "host_1", EmitDefaultValue = false)]
        public string Host1 { get; set; }

        /// <summary>
        /// Set SNMP Trap Host 2.
        /// </summary>
        /// <value>Set SNMP Trap Host 2.</value>
        [DataMember(Name = "host_2", EmitDefaultValue = false)]
        public string Host2 { get; set; }

        /// <summary>
        /// Set SNMP Trap Host 3.
        /// </summary>
        /// <value>Set SNMP Trap Host 3.</value>
        [DataMember(Name = "host_3", EmitDefaultValue = false)]
        public string Host3 { get; set; }

        /// <summary>
        /// Set SNMP Trap Host 4.
        /// </summary>
        /// <value>Set SNMP Trap Host 4.</value>
        [DataMember(Name = "host_4", EmitDefaultValue = false)]
        public string Host4 { get; set; }

        /// <summary>
        /// Gets or Sets Snmp3
        /// </summary>
        [DataMember(Name = "snmp3", EmitDefaultValue = false)]
        public SnmpSnmpSnmp3 Snmp3 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SnmpSnmp {\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  SystemName: ").Append(SystemName).Append("\n");
            sb.Append("  SystemContact: ").Append(SystemContact).Append("\n");
            sb.Append("  SystemLocation: ").Append(SystemLocation).Append("\n");
            sb.Append("  AssetNumber: ").Append(AssetNumber).Append("\n");
            sb.Append("  GetCommunityName: ").Append(GetCommunityName).Append("\n");
            sb.Append("  TrapCommunityName: ").Append(TrapCommunityName).Append("\n");
            sb.Append("  Host1: ").Append(Host1).Append("\n");
            sb.Append("  Host2: ").Append(Host2).Append("\n");
            sb.Append("  Host3: ").Append(Host3).Append("\n");
            sb.Append("  Host4: ").Append(Host4).Append("\n");
            sb.Append("  Snmp3: ").Append(Snmp3).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SnmpSnmp);
        }

        /// <summary>
        /// Returns true if SnmpSnmp instances are equal
        /// </summary>
        /// <param name="input">Instance of SnmpSnmp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SnmpSnmp input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.SystemName == input.SystemName ||
                    (this.SystemName != null &&
                    this.SystemName.Equals(input.SystemName))
                ) && 
                (
                    this.SystemContact == input.SystemContact ||
                    (this.SystemContact != null &&
                    this.SystemContact.Equals(input.SystemContact))
                ) && 
                (
                    this.SystemLocation == input.SystemLocation ||
                    (this.SystemLocation != null &&
                    this.SystemLocation.Equals(input.SystemLocation))
                ) && 
                (
                    this.AssetNumber == input.AssetNumber ||
                    (this.AssetNumber != null &&
                    this.AssetNumber.Equals(input.AssetNumber))
                ) && 
                (
                    this.GetCommunityName == input.GetCommunityName ||
                    (this.GetCommunityName != null &&
                    this.GetCommunityName.Equals(input.GetCommunityName))
                ) && 
                (
                    this.TrapCommunityName == input.TrapCommunityName ||
                    (this.TrapCommunityName != null &&
                    this.TrapCommunityName.Equals(input.TrapCommunityName))
                ) && 
                (
                    this.Host1 == input.Host1 ||
                    (this.Host1 != null &&
                    this.Host1.Equals(input.Host1))
                ) && 
                (
                    this.Host2 == input.Host2 ||
                    (this.Host2 != null &&
                    this.Host2.Equals(input.Host2))
                ) && 
                (
                    this.Host3 == input.Host3 ||
                    (this.Host3 != null &&
                    this.Host3.Equals(input.Host3))
                ) && 
                (
                    this.Host4 == input.Host4 ||
                    (this.Host4 != null &&
                    this.Host4.Equals(input.Host4))
                ) && 
                (
                    this.Snmp3 == input.Snmp3 ||
                    (this.Snmp3 != null &&
                    this.Snmp3.Equals(input.Snmp3))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Enable.GetHashCode();
                if (this.SystemName != null)
                {
                    hashCode = (hashCode * 59) + this.SystemName.GetHashCode();
                }
                if (this.SystemContact != null)
                {
                    hashCode = (hashCode * 59) + this.SystemContact.GetHashCode();
                }
                if (this.SystemLocation != null)
                {
                    hashCode = (hashCode * 59) + this.SystemLocation.GetHashCode();
                }
                if (this.AssetNumber != null)
                {
                    hashCode = (hashCode * 59) + this.AssetNumber.GetHashCode();
                }
                if (this.GetCommunityName != null)
                {
                    hashCode = (hashCode * 59) + this.GetCommunityName.GetHashCode();
                }
                if (this.TrapCommunityName != null)
                {
                    hashCode = (hashCode * 59) + this.TrapCommunityName.GetHashCode();
                }
                if (this.Host1 != null)
                {
                    hashCode = (hashCode * 59) + this.Host1.GetHashCode();
                }
                if (this.Host2 != null)
                {
                    hashCode = (hashCode * 59) + this.Host2.GetHashCode();
                }
                if (this.Host3 != null)
                {
                    hashCode = (hashCode * 59) + this.Host3.GetHashCode();
                }
                if (this.Host4 != null)
                {
                    hashCode = (hashCode * 59) + this.Host4.GetHashCode();
                }
                if (this.Snmp3 != null)
                {
                    hashCode = (hashCode * 59) + this.Snmp3.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
