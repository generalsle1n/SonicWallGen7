/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure advanced diag preference conversion.
    /// </summary>
    [DataContract(Name = "diag_advanced_preference_diag_advanced_preference")]
    public partial class DiagAdvancedPreferenceDiagAdvancedPreference : IEquatable<DiagAdvancedPreferenceDiagAdvancedPreference>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagAdvancedPreferenceDiagAdvancedPreference" /> class.
        /// </summary>
        /// <param name="launchingConversionControl">Enable showing control for launching preference conversion window..</param>
        /// <param name="processorServer">Set preference processor server..</param>
        /// <param name="siteRelativeDirectory">Set site relative directory..</param>
        /// <param name="checkWhenImporting">Enable checking when importing settings..</param>
        public DiagAdvancedPreferenceDiagAdvancedPreference(bool launchingConversionControl = default(bool), string processorServer = default(string), string siteRelativeDirectory = default(string), bool checkWhenImporting = default(bool))
        {
            this.LaunchingConversionControl = launchingConversionControl;
            this.ProcessorServer = processorServer;
            this.SiteRelativeDirectory = siteRelativeDirectory;
            this.CheckWhenImporting = checkWhenImporting;
        }

        /// <summary>
        /// Enable showing control for launching preference conversion window.
        /// </summary>
        /// <value>Enable showing control for launching preference conversion window.</value>
        [DataMember(Name = "launching_conversion_control", EmitDefaultValue = true)]
        public bool LaunchingConversionControl { get; set; }

        /// <summary>
        /// Set preference processor server.
        /// </summary>
        /// <value>Set preference processor server.</value>
        [DataMember(Name = "processor_server", EmitDefaultValue = false)]
        public string ProcessorServer { get; set; }

        /// <summary>
        /// Set site relative directory.
        /// </summary>
        /// <value>Set site relative directory.</value>
        [DataMember(Name = "site_relative_directory", EmitDefaultValue = false)]
        public string SiteRelativeDirectory { get; set; }

        /// <summary>
        /// Enable checking when importing settings.
        /// </summary>
        /// <value>Enable checking when importing settings.</value>
        [DataMember(Name = "check_when_importing", EmitDefaultValue = true)]
        public bool CheckWhenImporting { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DiagAdvancedPreferenceDiagAdvancedPreference {\n");
            sb.Append("  LaunchingConversionControl: ").Append(LaunchingConversionControl).Append("\n");
            sb.Append("  ProcessorServer: ").Append(ProcessorServer).Append("\n");
            sb.Append("  SiteRelativeDirectory: ").Append(SiteRelativeDirectory).Append("\n");
            sb.Append("  CheckWhenImporting: ").Append(CheckWhenImporting).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiagAdvancedPreferenceDiagAdvancedPreference);
        }

        /// <summary>
        /// Returns true if DiagAdvancedPreferenceDiagAdvancedPreference instances are equal
        /// </summary>
        /// <param name="input">Instance of DiagAdvancedPreferenceDiagAdvancedPreference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiagAdvancedPreferenceDiagAdvancedPreference input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LaunchingConversionControl == input.LaunchingConversionControl ||
                    this.LaunchingConversionControl.Equals(input.LaunchingConversionControl)
                ) && 
                (
                    this.ProcessorServer == input.ProcessorServer ||
                    (this.ProcessorServer != null &&
                    this.ProcessorServer.Equals(input.ProcessorServer))
                ) && 
                (
                    this.SiteRelativeDirectory == input.SiteRelativeDirectory ||
                    (this.SiteRelativeDirectory != null &&
                    this.SiteRelativeDirectory.Equals(input.SiteRelativeDirectory))
                ) && 
                (
                    this.CheckWhenImporting == input.CheckWhenImporting ||
                    this.CheckWhenImporting.Equals(input.CheckWhenImporting)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.LaunchingConversionControl.GetHashCode();
                if (this.ProcessorServer != null)
                {
                    hashCode = (hashCode * 59) + this.ProcessorServer.GetHashCode();
                }
                if (this.SiteRelativeDirectory != null)
                {
                    hashCode = (hashCode * 59) + this.SiteRelativeDirectory.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CheckWhenImporting.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
