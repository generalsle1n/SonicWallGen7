/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enter H.323 transformations configure mode. * Set to null or {} to represent  an unconfigured state.
    /// </summary>
    [DataContract(Name = "voip_voip_h323")]
    public partial class VoipVoipH323 : IEquatable<VoipVoipH323>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VoipVoipH323" /> class.
        /// </summary>
        /// <param name="enable">Enable H.323 transformations..</param>
        /// <param name="accessRuleBased">Set H.323 transformation will be performed only when it is enabled on the corresponding firewall access rule..</param>
        /// <param name="onlyGatekeeperCalls">Enable only accept incoming calls from gatekeeper..</param>
        /// <param name="inactivityTimeout">Set H.323 signaling/media inactivity time out (seconds)..</param>
        /// <param name="gatekeeperIp">Set default wan/dmz gatekeeper IP address..</param>
        public VoipVoipH323(bool enable = default(bool), bool accessRuleBased = default(bool), bool onlyGatekeeperCalls = default(bool), decimal inactivityTimeout = default(decimal), string gatekeeperIp = default(string))
        {
            this.Enable = enable;
            this.AccessRuleBased = accessRuleBased;
            this.OnlyGatekeeperCalls = onlyGatekeeperCalls;
            this.InactivityTimeout = inactivityTimeout;
            this.GatekeeperIp = gatekeeperIp;
        }

        /// <summary>
        /// Enable H.323 transformations.
        /// </summary>
        /// <value>Enable H.323 transformations.</value>
        [DataMember(Name = "enable", EmitDefaultValue = true)]
        public bool Enable { get; set; }

        /// <summary>
        /// Set H.323 transformation will be performed only when it is enabled on the corresponding firewall access rule.
        /// </summary>
        /// <value>Set H.323 transformation will be performed only when it is enabled on the corresponding firewall access rule.</value>
        [DataMember(Name = "access_rule_based", EmitDefaultValue = true)]
        public bool AccessRuleBased { get; set; }

        /// <summary>
        /// Enable only accept incoming calls from gatekeeper.
        /// </summary>
        /// <value>Enable only accept incoming calls from gatekeeper.</value>
        [DataMember(Name = "only_gatekeeper_calls", EmitDefaultValue = true)]
        public bool OnlyGatekeeperCalls { get; set; }

        /// <summary>
        /// Set H.323 signaling/media inactivity time out (seconds).
        /// </summary>
        /// <value>Set H.323 signaling/media inactivity time out (seconds).</value>
        [DataMember(Name = "inactivity_timeout", EmitDefaultValue = false)]
        public decimal InactivityTimeout { get; set; }

        /// <summary>
        /// Set default wan/dmz gatekeeper IP address.
        /// </summary>
        /// <value>Set default wan/dmz gatekeeper IP address.</value>
        [DataMember(Name = "gatekeeper_ip", EmitDefaultValue = false)]
        public string GatekeeperIp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VoipVoipH323 {\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  AccessRuleBased: ").Append(AccessRuleBased).Append("\n");
            sb.Append("  OnlyGatekeeperCalls: ").Append(OnlyGatekeeperCalls).Append("\n");
            sb.Append("  InactivityTimeout: ").Append(InactivityTimeout).Append("\n");
            sb.Append("  GatekeeperIp: ").Append(GatekeeperIp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VoipVoipH323);
        }

        /// <summary>
        /// Returns true if VoipVoipH323 instances are equal
        /// </summary>
        /// <param name="input">Instance of VoipVoipH323 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VoipVoipH323 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.AccessRuleBased == input.AccessRuleBased ||
                    this.AccessRuleBased.Equals(input.AccessRuleBased)
                ) && 
                (
                    this.OnlyGatekeeperCalls == input.OnlyGatekeeperCalls ||
                    this.OnlyGatekeeperCalls.Equals(input.OnlyGatekeeperCalls)
                ) && 
                (
                    this.InactivityTimeout == input.InactivityTimeout ||
                    this.InactivityTimeout.Equals(input.InactivityTimeout)
                ) && 
                (
                    this.GatekeeperIp == input.GatekeeperIp ||
                    (this.GatekeeperIp != null &&
                    this.GatekeeperIp.Equals(input.GatekeeperIp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Enable.GetHashCode();
                hashCode = (hashCode * 59) + this.AccessRuleBased.GetHashCode();
                hashCode = (hashCode * 59) + this.OnlyGatekeeperCalls.GetHashCode();
                hashCode = (hashCode * 59) + this.InactivityTimeout.GetHashCode();
                if (this.GatekeeperIp != null)
                {
                    hashCode = (hashCode * 59) + this.GatekeeperIp.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
