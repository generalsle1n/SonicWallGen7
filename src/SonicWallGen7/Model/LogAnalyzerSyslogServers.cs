/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Log analyzer: syslog servers settings.
    /// </summary>
    [DataContract(Name = "log_analyzer_syslog_servers")]
    public partial class LogAnalyzerSyslogServers : IEquatable<LogAnalyzerSyslogServers>, IValidatableObject
    {
        /// <summary>
        /// Syslog server type.
        /// </summary>
        /// <value>Syslog server type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum SyslogServer for value: syslog-server
            /// </summary>
            [EnumMember(Value = "syslog-server")]
            SyslogServer = 1,

            /// <summary>
            /// Enum Analyzer for value: analyzer
            /// </summary>
            [EnumMember(Value = "analyzer")]
            Analyzer = 2
        }


        /// <summary>
        /// Syslog server type.
        /// </summary>
        /// <value>Syslog server type.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Syslog server facility.
        /// </summary>
        /// <value>Syslog server facility.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FacilityEnum
        {
            /// <summary>
            /// Enum Kernel for value: kernel
            /// </summary>
            [EnumMember(Value = "kernel")]
            Kernel = 1,

            /// <summary>
            /// Enum UserLevelMessages for value: user-level-messages
            /// </summary>
            [EnumMember(Value = "user-level-messages")]
            UserLevelMessages = 2,

            /// <summary>
            /// Enum MailSystem for value: mail-system
            /// </summary>
            [EnumMember(Value = "mail-system")]
            MailSystem = 3,

            /// <summary>
            /// Enum SystemDaemons for value: system-daemons
            /// </summary>
            [EnumMember(Value = "system-daemons")]
            SystemDaemons = 4,

            /// <summary>
            /// Enum SecurityAuthorizationMessages for value: security-authorization-messages
            /// </summary>
            [EnumMember(Value = "security-authorization-messages")]
            SecurityAuthorizationMessages = 5,

            /// <summary>
            /// Enum GeneratedInternally for value: generated-internally
            /// </summary>
            [EnumMember(Value = "generated-internally")]
            GeneratedInternally = 6,

            /// <summary>
            /// Enum LinePrinterSubsystem for value: line-printer-subsystem
            /// </summary>
            [EnumMember(Value = "line-printer-subsystem")]
            LinePrinterSubsystem = 7,

            /// <summary>
            /// Enum NetworkNewsSubsystem for value: network-news-subsystem
            /// </summary>
            [EnumMember(Value = "network-news-subsystem")]
            NetworkNewsSubsystem = 8,

            /// <summary>
            /// Enum UucpSubsystem for value: uucp-subsystem
            /// </summary>
            [EnumMember(Value = "uucp-subsystem")]
            UucpSubsystem = 9,

            /// <summary>
            /// Enum ClockDaemonLinuxBsd for value: clock-daemon-linux-bsd
            /// </summary>
            [EnumMember(Value = "clock-daemon-linux-bsd")]
            ClockDaemonLinuxBsd = 10,

            /// <summary>
            /// Enum AuthprivMessages for value: authpriv-messages
            /// </summary>
            [EnumMember(Value = "authpriv-messages")]
            AuthprivMessages = 11,

            /// <summary>
            /// Enum FtpDaemon for value: ftp-daemon
            /// </summary>
            [EnumMember(Value = "ftp-daemon")]
            FtpDaemon = 12,

            /// <summary>
            /// Enum NtpSubsystem for value: ntp-subsystem
            /// </summary>
            [EnumMember(Value = "ntp-subsystem")]
            NtpSubsystem = 13,

            /// <summary>
            /// Enum LogAudit for value: log-audit
            /// </summary>
            [EnumMember(Value = "log-audit")]
            LogAudit = 14,

            /// <summary>
            /// Enum LogAlert for value: log-alert
            /// </summary>
            [EnumMember(Value = "log-alert")]
            LogAlert = 15,

            /// <summary>
            /// Enum ClockDaemonSolaris for value: clock-daemon-solaris
            /// </summary>
            [EnumMember(Value = "clock-daemon-solaris")]
            ClockDaemonSolaris = 16,

            /// <summary>
            /// Enum LocalUse0 for value: local-use0
            /// </summary>
            [EnumMember(Value = "local-use0")]
            LocalUse0 = 17,

            /// <summary>
            /// Enum LocalUse1 for value: local-use1
            /// </summary>
            [EnumMember(Value = "local-use1")]
            LocalUse1 = 18,

            /// <summary>
            /// Enum LocalUse2 for value: local-use2
            /// </summary>
            [EnumMember(Value = "local-use2")]
            LocalUse2 = 19,

            /// <summary>
            /// Enum LocalUse3 for value: local-use3
            /// </summary>
            [EnumMember(Value = "local-use3")]
            LocalUse3 = 20,

            /// <summary>
            /// Enum LocalUse4 for value: local-use4
            /// </summary>
            [EnumMember(Value = "local-use4")]
            LocalUse4 = 21,

            /// <summary>
            /// Enum LocalUse5 for value: local-use5
            /// </summary>
            [EnumMember(Value = "local-use5")]
            LocalUse5 = 22,

            /// <summary>
            /// Enum LocalUse6 for value: local-use6
            /// </summary>
            [EnumMember(Value = "local-use6")]
            LocalUse6 = 23,

            /// <summary>
            /// Enum LocalUse7 for value: local-use7
            /// </summary>
            [EnumMember(Value = "local-use7")]
            LocalUse7 = 24
        }


        /// <summary>
        /// Syslog server facility.
        /// </summary>
        /// <value>Syslog server facility.</value>
        [DataMember(Name = "facility", EmitDefaultValue = false)]
        public FacilityEnum? Facility { get; set; }
        /// <summary>
        /// Syslog server format.
        /// </summary>
        /// <value>Syslog server format.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FormatEnum
        {
            /// <summary>
            /// Enum Default for value: default
            /// </summary>
            [EnumMember(Value = "default")]
            Default = 1,

            /// <summary>
            /// Enum Webtrends for value: webtrends
            /// </summary>
            [EnumMember(Value = "webtrends")]
            Webtrends = 2,

            /// <summary>
            /// Enum EnhancedSyslog for value: enhanced-syslog
            /// </summary>
            [EnumMember(Value = "enhanced-syslog")]
            EnhancedSyslog = 3,

            /// <summary>
            /// Enum ArcSight for value: arcSight
            /// </summary>
            [EnumMember(Value = "arcSight")]
            ArcSight = 4
        }


        /// <summary>
        /// Syslog server format.
        /// </summary>
        /// <value>Syslog server format.</value>
        [DataMember(Name = "format", EmitDefaultValue = false)]
        public FormatEnum? Format { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LogAnalyzerSyslogServers" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LogAnalyzerSyslogServers() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LogAnalyzerSyslogServers" /> class.
        /// </summary>
        /// <param name="address">address (required).</param>
        /// <param name="port">Syslog server port. * Set to null to represent an unconfigured state. (required).</param>
        /// <param name="profile">Syslog server profile. * Set to null to represent an unconfigured state. (required).</param>
        /// <param name="type">Syslog server type..</param>
        /// <param name="facility">Syslog server facility..</param>
        /// <param name="format">Syslog server format..</param>
        /// <param name="id">Syslog server ID..</param>
        /// <param name="enabled">Enable syslog server..</param>
        /// <param name="eventRateLimiting">eventRateLimiting.</param>
        /// <param name="dataRateLimiting">dataRateLimiting.</param>
        /// <param name="outboundInterface">Outbound interface..</param>
        /// <param name="localInterface">local interface..</param>
        public LogAnalyzerSyslogServers(LogSyslogServersAddress address = default(LogSyslogServersAddress), decimal? port = default(decimal?), decimal? profile = default(decimal?), TypeEnum? type = default(TypeEnum?), FacilityEnum? facility = default(FacilityEnum?), FormatEnum? format = default(FormatEnum?), string id = default(string), bool enabled = default(bool), LogSyslogServersEventRateLimiting eventRateLimiting = default(LogSyslogServersEventRateLimiting), LogSyslogServersDataRateLimiting dataRateLimiting = default(LogSyslogServersDataRateLimiting), string outboundInterface = default(string), string localInterface = default(string))
        {
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for LogAnalyzerSyslogServers and cannot be null");
            }
            this.Address = address;
            // to ensure "port" is required (not null)
            if (port == null)
            {
                throw new ArgumentNullException("port is a required property for LogAnalyzerSyslogServers and cannot be null");
            }
            this.Port = port;
            // to ensure "profile" is required (not null)
            if (profile == null)
            {
                throw new ArgumentNullException("profile is a required property for LogAnalyzerSyslogServers and cannot be null");
            }
            this.Profile = profile;
            this.Type = type;
            this.Facility = facility;
            this.Format = format;
            this.Id = id;
            this.Enabled = enabled;
            this.EventRateLimiting = eventRateLimiting;
            this.DataRateLimiting = dataRateLimiting;
            this.OutboundInterface = outboundInterface;
            this.LocalInterface = localInterface;
        }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public LogSyslogServersAddress Address { get; set; }

        /// <summary>
        /// Syslog server port. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Syslog server port. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "port", IsRequired = true, EmitDefaultValue = true)]
        public decimal? Port { get; set; }

        /// <summary>
        /// Syslog server profile. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Syslog server profile. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "profile", IsRequired = true, EmitDefaultValue = true)]
        public decimal? Profile { get; set; }

        /// <summary>
        /// Syslog server ID.
        /// </summary>
        /// <value>Syslog server ID.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Enable syslog server.
        /// </summary>
        /// <value>Enable syslog server.</value>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets EventRateLimiting
        /// </summary>
        [DataMember(Name = "event_rate_limiting", EmitDefaultValue = true)]
        public LogSyslogServersEventRateLimiting EventRateLimiting { get; set; }

        /// <summary>
        /// Gets or Sets DataRateLimiting
        /// </summary>
        [DataMember(Name = "data_rate_limiting", EmitDefaultValue = true)]
        public LogSyslogServersDataRateLimiting DataRateLimiting { get; set; }

        /// <summary>
        /// Outbound interface.
        /// </summary>
        /// <value>Outbound interface.</value>
        [DataMember(Name = "outbound_interface", EmitDefaultValue = false)]
        public string OutboundInterface { get; set; }

        /// <summary>
        /// local interface.
        /// </summary>
        /// <value>local interface.</value>
        [DataMember(Name = "local_interface", EmitDefaultValue = false)]
        public string LocalInterface { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LogAnalyzerSyslogServers {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Facility: ").Append(Facility).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  EventRateLimiting: ").Append(EventRateLimiting).Append("\n");
            sb.Append("  DataRateLimiting: ").Append(DataRateLimiting).Append("\n");
            sb.Append("  OutboundInterface: ").Append(OutboundInterface).Append("\n");
            sb.Append("  LocalInterface: ").Append(LocalInterface).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogAnalyzerSyslogServers);
        }

        /// <summary>
        /// Returns true if LogAnalyzerSyslogServers instances are equal
        /// </summary>
        /// <param name="input">Instance of LogAnalyzerSyslogServers to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogAnalyzerSyslogServers input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Port == input.Port ||
                    (this.Port != null &&
                    this.Port.Equals(input.Port))
                ) && 
                (
                    this.Profile == input.Profile ||
                    (this.Profile != null &&
                    this.Profile.Equals(input.Profile))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Facility == input.Facility ||
                    this.Facility.Equals(input.Facility)
                ) && 
                (
                    this.Format == input.Format ||
                    this.Format.Equals(input.Format)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                ) && 
                (
                    this.EventRateLimiting == input.EventRateLimiting ||
                    (this.EventRateLimiting != null &&
                    this.EventRateLimiting.Equals(input.EventRateLimiting))
                ) && 
                (
                    this.DataRateLimiting == input.DataRateLimiting ||
                    (this.DataRateLimiting != null &&
                    this.DataRateLimiting.Equals(input.DataRateLimiting))
                ) && 
                (
                    this.OutboundInterface == input.OutboundInterface ||
                    (this.OutboundInterface != null &&
                    this.OutboundInterface.Equals(input.OutboundInterface))
                ) && 
                (
                    this.LocalInterface == input.LocalInterface ||
                    (this.LocalInterface != null &&
                    this.LocalInterface.Equals(input.LocalInterface))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.Port != null)
                {
                    hashCode = (hashCode * 59) + this.Port.GetHashCode();
                }
                if (this.Profile != null)
                {
                    hashCode = (hashCode * 59) + this.Profile.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.Facility.GetHashCode();
                hashCode = (hashCode * 59) + this.Format.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
                if (this.EventRateLimiting != null)
                {
                    hashCode = (hashCode * 59) + this.EventRateLimiting.GetHashCode();
                }
                if (this.DataRateLimiting != null)
                {
                    hashCode = (hashCode * 59) + this.DataRateLimiting.GetHashCode();
                }
                if (this.OutboundInterface != null)
                {
                    hashCode = (hashCode * 59) + this.OutboundInterface.GetHashCode();
                }
                if (this.LocalInterface != null)
                {
                    hashCode = (hashCode * 59) + this.LocalInterface.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
