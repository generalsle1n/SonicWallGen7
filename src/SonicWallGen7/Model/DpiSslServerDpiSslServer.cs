/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enter server DPI-SSL configuration mode.
    /// </summary>
    [DataContract(Name = "dpi_ssl_server_dpi_ssl_server")]
    public partial class DpiSslServerDpiSslServer : IEquatable<DpiSslServerDpiSslServer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DpiSslServerDpiSslServer" /> class.
        /// </summary>
        /// <param name="enable">Enable SSL server inspection..</param>
        /// <param name="intrusionPrevention">Enable intrusion prevention for server DPI-SSL..</param>
        /// <param name="gateway">gateway.</param>
        /// <param name="applicationFirewall">Enable application firewall for server DPI-SSL..</param>
        /// <param name="include">include.</param>
        /// <param name="exclude">exclude.</param>
        public DpiSslServerDpiSslServer(bool enable = default(bool), bool intrusionPrevention = default(bool), DpiSslServerDpiSslServerGateway gateway = default(DpiSslServerDpiSslServerGateway), bool applicationFirewall = default(bool), DpiSslServerDpiSslServerInclude include = default(DpiSslServerDpiSslServerInclude), DpiSslServerDpiSslServerExclude exclude = default(DpiSslServerDpiSslServerExclude))
        {
            this.Enable = enable;
            this.IntrusionPrevention = intrusionPrevention;
            this.Gateway = gateway;
            this.ApplicationFirewall = applicationFirewall;
            this.Include = include;
            this.Exclude = exclude;
        }

        /// <summary>
        /// Enable SSL server inspection.
        /// </summary>
        /// <value>Enable SSL server inspection.</value>
        [DataMember(Name = "enable", EmitDefaultValue = true)]
        public bool Enable { get; set; }

        /// <summary>
        /// Enable intrusion prevention for server DPI-SSL.
        /// </summary>
        /// <value>Enable intrusion prevention for server DPI-SSL.</value>
        [DataMember(Name = "intrusion_prevention", EmitDefaultValue = true)]
        public bool IntrusionPrevention { get; set; }

        /// <summary>
        /// Gets or Sets Gateway
        /// </summary>
        [DataMember(Name = "gateway", EmitDefaultValue = false)]
        public DpiSslServerDpiSslServerGateway Gateway { get; set; }

        /// <summary>
        /// Enable application firewall for server DPI-SSL.
        /// </summary>
        /// <value>Enable application firewall for server DPI-SSL.</value>
        [DataMember(Name = "application_firewall", EmitDefaultValue = true)]
        public bool ApplicationFirewall { get; set; }

        /// <summary>
        /// Gets or Sets Include
        /// </summary>
        [DataMember(Name = "include", EmitDefaultValue = false)]
        public DpiSslServerDpiSslServerInclude Include { get; set; }

        /// <summary>
        /// Gets or Sets Exclude
        /// </summary>
        [DataMember(Name = "exclude", EmitDefaultValue = false)]
        public DpiSslServerDpiSslServerExclude Exclude { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DpiSslServerDpiSslServer {\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  IntrusionPrevention: ").Append(IntrusionPrevention).Append("\n");
            sb.Append("  Gateway: ").Append(Gateway).Append("\n");
            sb.Append("  ApplicationFirewall: ").Append(ApplicationFirewall).Append("\n");
            sb.Append("  Include: ").Append(Include).Append("\n");
            sb.Append("  Exclude: ").Append(Exclude).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DpiSslServerDpiSslServer);
        }

        /// <summary>
        /// Returns true if DpiSslServerDpiSslServer instances are equal
        /// </summary>
        /// <param name="input">Instance of DpiSslServerDpiSslServer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DpiSslServerDpiSslServer input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.IntrusionPrevention == input.IntrusionPrevention ||
                    this.IntrusionPrevention.Equals(input.IntrusionPrevention)
                ) && 
                (
                    this.Gateway == input.Gateway ||
                    (this.Gateway != null &&
                    this.Gateway.Equals(input.Gateway))
                ) && 
                (
                    this.ApplicationFirewall == input.ApplicationFirewall ||
                    this.ApplicationFirewall.Equals(input.ApplicationFirewall)
                ) && 
                (
                    this.Include == input.Include ||
                    (this.Include != null &&
                    this.Include.Equals(input.Include))
                ) && 
                (
                    this.Exclude == input.Exclude ||
                    (this.Exclude != null &&
                    this.Exclude.Equals(input.Exclude))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Enable.GetHashCode();
                hashCode = (hashCode * 59) + this.IntrusionPrevention.GetHashCode();
                if (this.Gateway != null)
                {
                    hashCode = (hashCode * 59) + this.Gateway.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ApplicationFirewall.GetHashCode();
                if (this.Include != null)
                {
                    hashCode = (hashCode * 59) + this.Include.GetHashCode();
                }
                if (this.Exclude != null)
                {
                    hashCode = (hashCode * 59) + this.Exclude.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
