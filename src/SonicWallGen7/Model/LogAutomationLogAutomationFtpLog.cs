/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enteringftp log automation mode * Set to null or {} to represent  an unconfigured state.
    /// </summary>
    [DataContract(Name = "log_automation_log_automation_ftp_log")]
    public partial class LogAutomationLogAutomationFtpLog : IEquatable<LogAutomationLogAutomationFtpLog>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogAutomationLogAutomationFtpLog" /> class.
        /// </summary>
        /// <param name="sendLogToFtp">Enable send log to ftp..</param>
        /// <param name="server">Set ftp server address..</param>
        /// <param name="userName">Set ftp user name..</param>
        /// <param name="password">Set ftp password..</param>
        /// <param name="directory">Set ftp directory..</param>
        /// <param name="sendLog">sendLog.</param>
        /// <param name="fileFormat">fileFormat.</param>
        /// <param name="includeAllLogInformation">Include all log information..</param>
        public LogAutomationLogAutomationFtpLog(bool sendLogToFtp = default(bool), string server = default(string), string userName = default(string), string password = default(string), string directory = default(string), LogAutomationLogAutomationFtpLogSendLog sendLog = default(LogAutomationLogAutomationFtpLogSendLog), LogAutomationLogAutomationFtpLogFileFormat fileFormat = default(LogAutomationLogAutomationFtpLogFileFormat), bool includeAllLogInformation = default(bool))
        {
            this.SendLogToFtp = sendLogToFtp;
            this.Server = server;
            this.UserName = userName;
            this.Password = password;
            this.Directory = directory;
            this.SendLog = sendLog;
            this.FileFormat = fileFormat;
            this.IncludeAllLogInformation = includeAllLogInformation;
        }

        /// <summary>
        /// Enable send log to ftp.
        /// </summary>
        /// <value>Enable send log to ftp.</value>
        [DataMember(Name = "send_log_to_ftp", EmitDefaultValue = true)]
        public bool SendLogToFtp { get; set; }

        /// <summary>
        /// Set ftp server address.
        /// </summary>
        /// <value>Set ftp server address.</value>
        [DataMember(Name = "server", EmitDefaultValue = false)]
        public string Server { get; set; }

        /// <summary>
        /// Set ftp user name.
        /// </summary>
        /// <value>Set ftp user name.</value>
        [DataMember(Name = "user_name", EmitDefaultValue = false)]
        public string UserName { get; set; }

        /// <summary>
        /// Set ftp password.
        /// </summary>
        /// <value>Set ftp password.</value>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Set ftp directory.
        /// </summary>
        /// <value>Set ftp directory.</value>
        [DataMember(Name = "directory", EmitDefaultValue = false)]
        public string Directory { get; set; }

        /// <summary>
        /// Gets or Sets SendLog
        /// </summary>
        [DataMember(Name = "send_log", EmitDefaultValue = false)]
        public LogAutomationLogAutomationFtpLogSendLog SendLog { get; set; }

        /// <summary>
        /// Gets or Sets FileFormat
        /// </summary>
        [DataMember(Name = "file_format", EmitDefaultValue = false)]
        public LogAutomationLogAutomationFtpLogFileFormat FileFormat { get; set; }

        /// <summary>
        /// Include all log information.
        /// </summary>
        /// <value>Include all log information.</value>
        [DataMember(Name = "include_all_log_information", EmitDefaultValue = true)]
        public bool IncludeAllLogInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LogAutomationLogAutomationFtpLog {\n");
            sb.Append("  SendLogToFtp: ").Append(SendLogToFtp).Append("\n");
            sb.Append("  Server: ").Append(Server).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Directory: ").Append(Directory).Append("\n");
            sb.Append("  SendLog: ").Append(SendLog).Append("\n");
            sb.Append("  FileFormat: ").Append(FileFormat).Append("\n");
            sb.Append("  IncludeAllLogInformation: ").Append(IncludeAllLogInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogAutomationLogAutomationFtpLog);
        }

        /// <summary>
        /// Returns true if LogAutomationLogAutomationFtpLog instances are equal
        /// </summary>
        /// <param name="input">Instance of LogAutomationLogAutomationFtpLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogAutomationLogAutomationFtpLog input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SendLogToFtp == input.SendLogToFtp ||
                    this.SendLogToFtp.Equals(input.SendLogToFtp)
                ) && 
                (
                    this.Server == input.Server ||
                    (this.Server != null &&
                    this.Server.Equals(input.Server))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Directory == input.Directory ||
                    (this.Directory != null &&
                    this.Directory.Equals(input.Directory))
                ) && 
                (
                    this.SendLog == input.SendLog ||
                    (this.SendLog != null &&
                    this.SendLog.Equals(input.SendLog))
                ) && 
                (
                    this.FileFormat == input.FileFormat ||
                    (this.FileFormat != null &&
                    this.FileFormat.Equals(input.FileFormat))
                ) && 
                (
                    this.IncludeAllLogInformation == input.IncludeAllLogInformation ||
                    this.IncludeAllLogInformation.Equals(input.IncludeAllLogInformation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SendLogToFtp.GetHashCode();
                if (this.Server != null)
                {
                    hashCode = (hashCode * 59) + this.Server.GetHashCode();
                }
                if (this.UserName != null)
                {
                    hashCode = (hashCode * 59) + this.UserName.GetHashCode();
                }
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                if (this.Directory != null)
                {
                    hashCode = (hashCode * 59) + this.Directory.GetHashCode();
                }
                if (this.SendLog != null)
                {
                    hashCode = (hashCode * 59) + this.SendLog.GetHashCode();
                }
                if (this.FileFormat != null)
                {
                    hashCode = (hashCode * 59) + this.FileFormat.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IncludeAllLogInformation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
