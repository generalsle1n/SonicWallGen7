/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// ShowStatusDhcps6LeasesListInner
    /// </summary>
    [DataContract(Name = "show_status_dhcps6_leases_list_inner")]
    public partial class ShowStatusDhcps6LeasesListInner : IEquatable<ShowStatusDhcps6LeasesListInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusDhcps6LeasesListInner" /> class.
        /// </summary>
        /// <param name="ipv6Address">ipv6Address.</param>
        /// <param name="leaseExpires">leaseExpires.</param>
        /// <param name="iaid">iaid.</param>
        /// <param name="duid">duid.</param>
        /// <param name="type">type.</param>
        public ShowStatusDhcps6LeasesListInner(string ipv6Address = default(string), string leaseExpires = default(string), string iaid = default(string), string duid = default(string), string type = default(string))
        {
            this.Ipv6Address = ipv6Address;
            this.LeaseExpires = leaseExpires;
            this.Iaid = iaid;
            this.Duid = duid;
            this.Type = type;
        }

        /// <summary>
        /// Gets or Sets Ipv6Address
        /// </summary>
        [DataMember(Name = "ipv6_address", EmitDefaultValue = false)]
        public string Ipv6Address { get; set; }

        /// <summary>
        /// Gets or Sets LeaseExpires
        /// </summary>
        [DataMember(Name = "lease_expires", EmitDefaultValue = false)]
        public string LeaseExpires { get; set; }

        /// <summary>
        /// Gets or Sets Iaid
        /// </summary>
        [DataMember(Name = "iaid", EmitDefaultValue = false)]
        public string Iaid { get; set; }

        /// <summary>
        /// Gets or Sets Duid
        /// </summary>
        [DataMember(Name = "duid", EmitDefaultValue = false)]
        public string Duid { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusDhcps6LeasesListInner {\n");
            sb.Append("  Ipv6Address: ").Append(Ipv6Address).Append("\n");
            sb.Append("  LeaseExpires: ").Append(LeaseExpires).Append("\n");
            sb.Append("  Iaid: ").Append(Iaid).Append("\n");
            sb.Append("  Duid: ").Append(Duid).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusDhcps6LeasesListInner);
        }

        /// <summary>
        /// Returns true if ShowStatusDhcps6LeasesListInner instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusDhcps6LeasesListInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusDhcps6LeasesListInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Ipv6Address == input.Ipv6Address ||
                    (this.Ipv6Address != null &&
                    this.Ipv6Address.Equals(input.Ipv6Address))
                ) && 
                (
                    this.LeaseExpires == input.LeaseExpires ||
                    (this.LeaseExpires != null &&
                    this.LeaseExpires.Equals(input.LeaseExpires))
                ) && 
                (
                    this.Iaid == input.Iaid ||
                    (this.Iaid != null &&
                    this.Iaid.Equals(input.Iaid))
                ) && 
                (
                    this.Duid == input.Duid ||
                    (this.Duid != null &&
                    this.Duid.Equals(input.Duid))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ipv6Address != null)
                {
                    hashCode = (hashCode * 59) + this.Ipv6Address.GetHashCode();
                }
                if (this.LeaseExpires != null)
                {
                    hashCode = (hashCode * 59) + this.LeaseExpires.GetHashCode();
                }
                if (this.Iaid != null)
                {
                    hashCode = (hashCode * 59) + this.Iaid.GetHashCode();
                }
                if (this.Duid != null)
                {
                    hashCode = (hashCode * 59) + this.Duid.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
