/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;
using System.Reflection;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Service object configuration.
    /// </summary>
    [JsonConverter(typeof(ServiceObjectJsonConverter))]
    [DataContract(Name = "service_object")]
    public partial class ServiceObject : AbstractOpenAPISchema, IEquatable<ServiceObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceObject" /> class
        /// with the <see cref="ServiceObjectCustom" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ServiceObjectCustom.</param>
        public ServiceObject(ServiceObjectCustom actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceObject" /> class
        /// with the <see cref="ServiceObjectIcmp" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ServiceObjectIcmp.</param>
        public ServiceObject(ServiceObjectIcmp actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceObject" /> class
        /// with the <see cref="ServiceObjectIgmp" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ServiceObjectIgmp.</param>
        public ServiceObject(ServiceObjectIgmp actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceObject" /> class
        /// with the <see cref="ServiceObjectTcp" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ServiceObjectTcp.</param>
        public ServiceObject(ServiceObjectTcp actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceObject" /> class
        /// with the <see cref="ServiceObjectUdp" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ServiceObjectUdp.</param>
        public ServiceObject(ServiceObjectUdp actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceObject" /> class
        /// with the <see cref="ServiceObjectGre" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ServiceObjectGre.</param>
        public ServiceObject(ServiceObjectGre actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceObject" /> class
        /// with the <see cref="ServiceObjectEsp" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ServiceObjectEsp.</param>
        public ServiceObject(ServiceObjectEsp actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceObject" /> class
        /// with the <see cref="ServiceObject6over4" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ServiceObject6over4.</param>
        public ServiceObject(ServiceObject6over4 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceObject" /> class
        /// with the <see cref="ServiceObjectAh" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ServiceObjectAh.</param>
        public ServiceObject(ServiceObjectAh actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceObject" /> class
        /// with the <see cref="ServiceObjectIcmpv6Custom" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ServiceObjectIcmpv6Custom.</param>
        public ServiceObject(ServiceObjectIcmpv6Custom actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceObject" /> class
        /// with the <see cref="ServiceObjectIcmpv6" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ServiceObjectIcmpv6.</param>
        public ServiceObject(ServiceObjectIcmpv6 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceObject" /> class
        /// with the <see cref="ServiceObjectEigrp" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ServiceObjectEigrp.</param>
        public ServiceObject(ServiceObjectEigrp actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceObject" /> class
        /// with the <see cref="ServiceObjectOspf" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ServiceObjectOspf.</param>
        public ServiceObject(ServiceObjectOspf actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceObject" /> class
        /// with the <see cref="ServiceObjectPim" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ServiceObjectPim.</param>
        public ServiceObject(ServiceObjectPim actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceObject" /> class
        /// with the <see cref="ServiceObjectL2tp" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ServiceObjectL2tp.</param>
        public ServiceObject(ServiceObjectL2tp actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceObject" /> class
        /// with the <see cref="ServiceObjectIpcomp" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ServiceObjectIpcomp.</param>
        public ServiceObject(ServiceObjectIpcomp actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(ServiceObject6over4))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ServiceObjectAh))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ServiceObjectCustom))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ServiceObjectEigrp))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ServiceObjectEsp))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ServiceObjectGre))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ServiceObjectIcmp))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ServiceObjectIcmpv6))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ServiceObjectIcmpv6Custom))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ServiceObjectIgmp))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ServiceObjectIpcomp))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ServiceObjectL2tp))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ServiceObjectOspf))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ServiceObjectPim))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ServiceObjectTcp))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ServiceObjectUdp))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: ServiceObject6over4, ServiceObjectAh, ServiceObjectCustom, ServiceObjectEigrp, ServiceObjectEsp, ServiceObjectGre, ServiceObjectIcmp, ServiceObjectIcmpv6, ServiceObjectIcmpv6Custom, ServiceObjectIgmp, ServiceObjectIpcomp, ServiceObjectL2tp, ServiceObjectOspf, ServiceObjectPim, ServiceObjectTcp, ServiceObjectUdp");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `ServiceObjectCustom`. If the actual instance is not `ServiceObjectCustom`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ServiceObjectCustom</returns>
        public ServiceObjectCustom GetServiceObjectCustom()
        {
            return (ServiceObjectCustom)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ServiceObjectIcmp`. If the actual instance is not `ServiceObjectIcmp`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ServiceObjectIcmp</returns>
        public ServiceObjectIcmp GetServiceObjectIcmp()
        {
            return (ServiceObjectIcmp)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ServiceObjectIgmp`. If the actual instance is not `ServiceObjectIgmp`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ServiceObjectIgmp</returns>
        public ServiceObjectIgmp GetServiceObjectIgmp()
        {
            return (ServiceObjectIgmp)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ServiceObjectTcp`. If the actual instance is not `ServiceObjectTcp`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ServiceObjectTcp</returns>
        public ServiceObjectTcp GetServiceObjectTcp()
        {
            return (ServiceObjectTcp)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ServiceObjectUdp`. If the actual instance is not `ServiceObjectUdp`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ServiceObjectUdp</returns>
        public ServiceObjectUdp GetServiceObjectUdp()
        {
            return (ServiceObjectUdp)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ServiceObjectGre`. If the actual instance is not `ServiceObjectGre`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ServiceObjectGre</returns>
        public ServiceObjectGre GetServiceObjectGre()
        {
            return (ServiceObjectGre)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ServiceObjectEsp`. If the actual instance is not `ServiceObjectEsp`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ServiceObjectEsp</returns>
        public ServiceObjectEsp GetServiceObjectEsp()
        {
            return (ServiceObjectEsp)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ServiceObject6over4`. If the actual instance is not `ServiceObject6over4`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ServiceObject6over4</returns>
        public ServiceObject6over4 GetServiceObject6over4()
        {
            return (ServiceObject6over4)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ServiceObjectAh`. If the actual instance is not `ServiceObjectAh`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ServiceObjectAh</returns>
        public ServiceObjectAh GetServiceObjectAh()
        {
            return (ServiceObjectAh)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ServiceObjectIcmpv6Custom`. If the actual instance is not `ServiceObjectIcmpv6Custom`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ServiceObjectIcmpv6Custom</returns>
        public ServiceObjectIcmpv6Custom GetServiceObjectIcmpv6Custom()
        {
            return (ServiceObjectIcmpv6Custom)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ServiceObjectIcmpv6`. If the actual instance is not `ServiceObjectIcmpv6`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ServiceObjectIcmpv6</returns>
        public ServiceObjectIcmpv6 GetServiceObjectIcmpv6()
        {
            return (ServiceObjectIcmpv6)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ServiceObjectEigrp`. If the actual instance is not `ServiceObjectEigrp`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ServiceObjectEigrp</returns>
        public ServiceObjectEigrp GetServiceObjectEigrp()
        {
            return (ServiceObjectEigrp)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ServiceObjectOspf`. If the actual instance is not `ServiceObjectOspf`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ServiceObjectOspf</returns>
        public ServiceObjectOspf GetServiceObjectOspf()
        {
            return (ServiceObjectOspf)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ServiceObjectPim`. If the actual instance is not `ServiceObjectPim`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ServiceObjectPim</returns>
        public ServiceObjectPim GetServiceObjectPim()
        {
            return (ServiceObjectPim)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ServiceObjectL2tp`. If the actual instance is not `ServiceObjectL2tp`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ServiceObjectL2tp</returns>
        public ServiceObjectL2tp GetServiceObjectL2tp()
        {
            return (ServiceObjectL2tp)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ServiceObjectIpcomp`. If the actual instance is not `ServiceObjectIpcomp`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ServiceObjectIpcomp</returns>
        public ServiceObjectIpcomp GetServiceObjectIpcomp()
        {
            return (ServiceObjectIpcomp)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServiceObject {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, ServiceObject.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of ServiceObject
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of ServiceObject</returns>
        public static ServiceObject FromJson(string jsonString)
        {
            ServiceObject newServiceObject = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newServiceObject;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ServiceObject6over4).GetProperty("AdditionalProperties") == null)
                {
                    newServiceObject = new ServiceObject(JsonConvert.DeserializeObject<ServiceObject6over4>(jsonString, ServiceObject.SerializerSettings));
                }
                else
                {
                    newServiceObject = new ServiceObject(JsonConvert.DeserializeObject<ServiceObject6over4>(jsonString, ServiceObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ServiceObject6over4");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ServiceObject6over4: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ServiceObjectAh).GetProperty("AdditionalProperties") == null)
                {
                    newServiceObject = new ServiceObject(JsonConvert.DeserializeObject<ServiceObjectAh>(jsonString, ServiceObject.SerializerSettings));
                }
                else
                {
                    newServiceObject = new ServiceObject(JsonConvert.DeserializeObject<ServiceObjectAh>(jsonString, ServiceObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ServiceObjectAh");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ServiceObjectAh: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ServiceObjectCustom).GetProperty("AdditionalProperties") == null)
                {
                    newServiceObject = new ServiceObject(JsonConvert.DeserializeObject<ServiceObjectCustom>(jsonString, ServiceObject.SerializerSettings));
                }
                else
                {
                    newServiceObject = new ServiceObject(JsonConvert.DeserializeObject<ServiceObjectCustom>(jsonString, ServiceObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ServiceObjectCustom");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ServiceObjectCustom: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ServiceObjectEigrp).GetProperty("AdditionalProperties") == null)
                {
                    newServiceObject = new ServiceObject(JsonConvert.DeserializeObject<ServiceObjectEigrp>(jsonString, ServiceObject.SerializerSettings));
                }
                else
                {
                    newServiceObject = new ServiceObject(JsonConvert.DeserializeObject<ServiceObjectEigrp>(jsonString, ServiceObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ServiceObjectEigrp");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ServiceObjectEigrp: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ServiceObjectEsp).GetProperty("AdditionalProperties") == null)
                {
                    newServiceObject = new ServiceObject(JsonConvert.DeserializeObject<ServiceObjectEsp>(jsonString, ServiceObject.SerializerSettings));
                }
                else
                {
                    newServiceObject = new ServiceObject(JsonConvert.DeserializeObject<ServiceObjectEsp>(jsonString, ServiceObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ServiceObjectEsp");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ServiceObjectEsp: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ServiceObjectGre).GetProperty("AdditionalProperties") == null)
                {
                    newServiceObject = new ServiceObject(JsonConvert.DeserializeObject<ServiceObjectGre>(jsonString, ServiceObject.SerializerSettings));
                }
                else
                {
                    newServiceObject = new ServiceObject(JsonConvert.DeserializeObject<ServiceObjectGre>(jsonString, ServiceObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ServiceObjectGre");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ServiceObjectGre: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ServiceObjectIcmp).GetProperty("AdditionalProperties") == null)
                {
                    newServiceObject = new ServiceObject(JsonConvert.DeserializeObject<ServiceObjectIcmp>(jsonString, ServiceObject.SerializerSettings));
                }
                else
                {
                    newServiceObject = new ServiceObject(JsonConvert.DeserializeObject<ServiceObjectIcmp>(jsonString, ServiceObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ServiceObjectIcmp");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ServiceObjectIcmp: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ServiceObjectIcmpv6).GetProperty("AdditionalProperties") == null)
                {
                    newServiceObject = new ServiceObject(JsonConvert.DeserializeObject<ServiceObjectIcmpv6>(jsonString, ServiceObject.SerializerSettings));
                }
                else
                {
                    newServiceObject = new ServiceObject(JsonConvert.DeserializeObject<ServiceObjectIcmpv6>(jsonString, ServiceObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ServiceObjectIcmpv6");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ServiceObjectIcmpv6: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ServiceObjectIcmpv6Custom).GetProperty("AdditionalProperties") == null)
                {
                    newServiceObject = new ServiceObject(JsonConvert.DeserializeObject<ServiceObjectIcmpv6Custom>(jsonString, ServiceObject.SerializerSettings));
                }
                else
                {
                    newServiceObject = new ServiceObject(JsonConvert.DeserializeObject<ServiceObjectIcmpv6Custom>(jsonString, ServiceObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ServiceObjectIcmpv6Custom");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ServiceObjectIcmpv6Custom: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ServiceObjectIgmp).GetProperty("AdditionalProperties") == null)
                {
                    newServiceObject = new ServiceObject(JsonConvert.DeserializeObject<ServiceObjectIgmp>(jsonString, ServiceObject.SerializerSettings));
                }
                else
                {
                    newServiceObject = new ServiceObject(JsonConvert.DeserializeObject<ServiceObjectIgmp>(jsonString, ServiceObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ServiceObjectIgmp");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ServiceObjectIgmp: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ServiceObjectIpcomp).GetProperty("AdditionalProperties") == null)
                {
                    newServiceObject = new ServiceObject(JsonConvert.DeserializeObject<ServiceObjectIpcomp>(jsonString, ServiceObject.SerializerSettings));
                }
                else
                {
                    newServiceObject = new ServiceObject(JsonConvert.DeserializeObject<ServiceObjectIpcomp>(jsonString, ServiceObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ServiceObjectIpcomp");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ServiceObjectIpcomp: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ServiceObjectL2tp).GetProperty("AdditionalProperties") == null)
                {
                    newServiceObject = new ServiceObject(JsonConvert.DeserializeObject<ServiceObjectL2tp>(jsonString, ServiceObject.SerializerSettings));
                }
                else
                {
                    newServiceObject = new ServiceObject(JsonConvert.DeserializeObject<ServiceObjectL2tp>(jsonString, ServiceObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ServiceObjectL2tp");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ServiceObjectL2tp: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ServiceObjectOspf).GetProperty("AdditionalProperties") == null)
                {
                    newServiceObject = new ServiceObject(JsonConvert.DeserializeObject<ServiceObjectOspf>(jsonString, ServiceObject.SerializerSettings));
                }
                else
                {
                    newServiceObject = new ServiceObject(JsonConvert.DeserializeObject<ServiceObjectOspf>(jsonString, ServiceObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ServiceObjectOspf");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ServiceObjectOspf: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ServiceObjectPim).GetProperty("AdditionalProperties") == null)
                {
                    newServiceObject = new ServiceObject(JsonConvert.DeserializeObject<ServiceObjectPim>(jsonString, ServiceObject.SerializerSettings));
                }
                else
                {
                    newServiceObject = new ServiceObject(JsonConvert.DeserializeObject<ServiceObjectPim>(jsonString, ServiceObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ServiceObjectPim");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ServiceObjectPim: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ServiceObjectTcp).GetProperty("AdditionalProperties") == null)
                {
                    newServiceObject = new ServiceObject(JsonConvert.DeserializeObject<ServiceObjectTcp>(jsonString, ServiceObject.SerializerSettings));
                }
                else
                {
                    newServiceObject = new ServiceObject(JsonConvert.DeserializeObject<ServiceObjectTcp>(jsonString, ServiceObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ServiceObjectTcp");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ServiceObjectTcp: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ServiceObjectUdp).GetProperty("AdditionalProperties") == null)
                {
                    newServiceObject = new ServiceObject(JsonConvert.DeserializeObject<ServiceObjectUdp>(jsonString, ServiceObject.SerializerSettings));
                }
                else
                {
                    newServiceObject = new ServiceObject(JsonConvert.DeserializeObject<ServiceObjectUdp>(jsonString, ServiceObject.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ServiceObjectUdp");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ServiceObjectUdp: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newServiceObject;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServiceObject);
        }

        /// <summary>
        /// Returns true if ServiceObject instances are equal
        /// </summary>
        /// <param name="input">Instance of ServiceObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceObject input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for ServiceObject
    /// </summary>
    public class ServiceObjectJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(ServiceObject).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return ServiceObject.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
