/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// authentication debug settings.
    /// </summary>
    [DataContract(Name = "debug_cmd_debug_auth")]
    public partial class DebugCmdDebugAuth : IEquatable<DebugCmdDebugAuth>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DebugCmdDebugAuth" /> class.
        /// </summary>
        /// <param name="tsa">Set the TSA debug level(0 ~ 10). * Set to null to represent an unconfigured state..</param>
        /// <param name="cia">Set the CIA debug level(0 ~ 10). * Set to null to represent an unconfigured state..</param>
        /// <param name="radiusAccount">Set radius account debug level(0 ~ 10). * Set to null to represent an unconfigured state..</param>
        /// <param name="ssoApi">Set sso-api debug level(0 ~ 10). * Set to null to represent an unconfigured state..</param>
        /// <param name="radius">Enable radius authentication debugging..</param>
        /// <param name="ldap">ldap.</param>
        /// <param name="tacas">Enable debug tacas..</param>
        public DebugCmdDebugAuth(decimal? tsa = default(decimal?), decimal? cia = default(decimal?), decimal? radiusAccount = default(decimal?), decimal? ssoApi = default(decimal?), bool radius = default(bool), DebugCmdDebugAuthLdap ldap = default(DebugCmdDebugAuthLdap), bool tacas = default(bool))
        {
            this.Tsa = tsa;
            this.Cia = cia;
            this.RadiusAccount = radiusAccount;
            this.SsoApi = ssoApi;
            this.Radius = radius;
            this.Ldap = ldap;
            this.Tacas = tacas;
        }

        /// <summary>
        /// Set the TSA debug level(0 ~ 10). * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Set the TSA debug level(0 ~ 10). * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "tsa", EmitDefaultValue = true)]
        public decimal? Tsa { get; set; }

        /// <summary>
        /// Set the CIA debug level(0 ~ 10). * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Set the CIA debug level(0 ~ 10). * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "cia", EmitDefaultValue = true)]
        public decimal? Cia { get; set; }

        /// <summary>
        /// Set radius account debug level(0 ~ 10). * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Set radius account debug level(0 ~ 10). * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "radius_account", EmitDefaultValue = true)]
        public decimal? RadiusAccount { get; set; }

        /// <summary>
        /// Set sso-api debug level(0 ~ 10). * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Set sso-api debug level(0 ~ 10). * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "sso_api", EmitDefaultValue = true)]
        public decimal? SsoApi { get; set; }

        /// <summary>
        /// Enable radius authentication debugging.
        /// </summary>
        /// <value>Enable radius authentication debugging.</value>
        [DataMember(Name = "radius", EmitDefaultValue = true)]
        public bool Radius { get; set; }

        /// <summary>
        /// Gets or Sets Ldap
        /// </summary>
        [DataMember(Name = "ldap", EmitDefaultValue = false)]
        public DebugCmdDebugAuthLdap Ldap { get; set; }

        /// <summary>
        /// Enable debug tacas.
        /// </summary>
        /// <value>Enable debug tacas.</value>
        [DataMember(Name = "tacas", EmitDefaultValue = true)]
        public bool Tacas { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DebugCmdDebugAuth {\n");
            sb.Append("  Tsa: ").Append(Tsa).Append("\n");
            sb.Append("  Cia: ").Append(Cia).Append("\n");
            sb.Append("  RadiusAccount: ").Append(RadiusAccount).Append("\n");
            sb.Append("  SsoApi: ").Append(SsoApi).Append("\n");
            sb.Append("  Radius: ").Append(Radius).Append("\n");
            sb.Append("  Ldap: ").Append(Ldap).Append("\n");
            sb.Append("  Tacas: ").Append(Tacas).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DebugCmdDebugAuth);
        }

        /// <summary>
        /// Returns true if DebugCmdDebugAuth instances are equal
        /// </summary>
        /// <param name="input">Instance of DebugCmdDebugAuth to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DebugCmdDebugAuth input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Tsa == input.Tsa ||
                    (this.Tsa != null &&
                    this.Tsa.Equals(input.Tsa))
                ) && 
                (
                    this.Cia == input.Cia ||
                    (this.Cia != null &&
                    this.Cia.Equals(input.Cia))
                ) && 
                (
                    this.RadiusAccount == input.RadiusAccount ||
                    (this.RadiusAccount != null &&
                    this.RadiusAccount.Equals(input.RadiusAccount))
                ) && 
                (
                    this.SsoApi == input.SsoApi ||
                    (this.SsoApi != null &&
                    this.SsoApi.Equals(input.SsoApi))
                ) && 
                (
                    this.Radius == input.Radius ||
                    this.Radius.Equals(input.Radius)
                ) && 
                (
                    this.Ldap == input.Ldap ||
                    (this.Ldap != null &&
                    this.Ldap.Equals(input.Ldap))
                ) && 
                (
                    this.Tacas == input.Tacas ||
                    this.Tacas.Equals(input.Tacas)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Tsa != null)
                {
                    hashCode = (hashCode * 59) + this.Tsa.GetHashCode();
                }
                if (this.Cia != null)
                {
                    hashCode = (hashCode * 59) + this.Cia.GetHashCode();
                }
                if (this.RadiusAccount != null)
                {
                    hashCode = (hashCode * 59) + this.RadiusAccount.GetHashCode();
                }
                if (this.SsoApi != null)
                {
                    hashCode = (hashCode * 59) + this.SsoApi.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Radius.GetHashCode();
                if (this.Ldap != null)
                {
                    hashCode = (hashCode * 59) + this.Ldap.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Tacas.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
