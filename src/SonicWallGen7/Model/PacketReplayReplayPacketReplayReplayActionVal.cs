/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// action-val for replaying uploadded pcap file
    /// </summary>
    [DataContract(Name = "packet_replay_replay_packet_replay_replay_action_val")]
    public partial class PacketReplayReplayPacketReplayReplayActionVal : IEquatable<PacketReplayReplayPacketReplayReplayActionVal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PacketReplayReplayPacketReplayReplayActionVal" /> class.
        /// </summary>
        /// <param name="destAddrOne">Enter Destination Address One * Set to null to represent an unconfigured state..</param>
        /// <param name="destPrefixOne">Enter Destination Prefix One.</param>
        /// <param name="destIfaceOne">Enter Destination Interface One * Set to null to represent an unconfigured state..</param>
        /// <param name="newDestFlagOne">Enter Destination Flag One * Set to null to represent an unconfigured state..</param>
        /// <param name="newDestAddrOne">Enter New Destination Address One * Set to null to represent an unconfigured state..</param>
        /// <param name="destAddrTwo">Enter Destination Address Two * Set to null to represent an unconfigured state..</param>
        /// <param name="destPrefixTwo">Enter Destination Prefix Two.</param>
        /// <param name="destIfaceTwo">Enter Destination Interface Two * Set to null to represent an unconfigured state..</param>
        /// <param name="newDestFlagTwo">Enter Destination Flag Two * Set to null to represent an unconfigured state..</param>
        /// <param name="newDestAddrTwo">Enter New Destination Address Two * Set to null to represent an unconfigured state..</param>
        public PacketReplayReplayPacketReplayReplayActionVal(string destAddrOne = default(string), decimal destPrefixOne = default(decimal), decimal? destIfaceOne = default(decimal?), decimal? newDestFlagOne = default(decimal?), string newDestAddrOne = default(string), string destAddrTwo = default(string), decimal destPrefixTwo = default(decimal), decimal? destIfaceTwo = default(decimal?), decimal? newDestFlagTwo = default(decimal?), string newDestAddrTwo = default(string))
        {
            this.DestAddrOne = destAddrOne;
            this.DestPrefixOne = destPrefixOne;
            this.DestIfaceOne = destIfaceOne;
            this.NewDestFlagOne = newDestFlagOne;
            this.NewDestAddrOne = newDestAddrOne;
            this.DestAddrTwo = destAddrTwo;
            this.DestPrefixTwo = destPrefixTwo;
            this.DestIfaceTwo = destIfaceTwo;
            this.NewDestFlagTwo = newDestFlagTwo;
            this.NewDestAddrTwo = newDestAddrTwo;
        }

        /// <summary>
        /// Enter Destination Address One * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Enter Destination Address One * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "dest_addr_one", EmitDefaultValue = true)]
        public string DestAddrOne { get; set; }

        /// <summary>
        /// Enter Destination Prefix One
        /// </summary>
        /// <value>Enter Destination Prefix One</value>
        [DataMember(Name = "dest_prefix_one", EmitDefaultValue = false)]
        public decimal DestPrefixOne { get; set; }

        /// <summary>
        /// Enter Destination Interface One * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Enter Destination Interface One * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "dest_iface_one", EmitDefaultValue = true)]
        public decimal? DestIfaceOne { get; set; }

        /// <summary>
        /// Enter Destination Flag One * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Enter Destination Flag One * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "new_dest_flag_one", EmitDefaultValue = true)]
        public decimal? NewDestFlagOne { get; set; }

        /// <summary>
        /// Enter New Destination Address One * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Enter New Destination Address One * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "new_dest_addr_one", EmitDefaultValue = true)]
        public string NewDestAddrOne { get; set; }

        /// <summary>
        /// Enter Destination Address Two * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Enter Destination Address Two * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "dest_addr_two", EmitDefaultValue = true)]
        public string DestAddrTwo { get; set; }

        /// <summary>
        /// Enter Destination Prefix Two
        /// </summary>
        /// <value>Enter Destination Prefix Two</value>
        [DataMember(Name = "dest_prefix_two", EmitDefaultValue = false)]
        public decimal DestPrefixTwo { get; set; }

        /// <summary>
        /// Enter Destination Interface Two * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Enter Destination Interface Two * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "dest_iface_two", EmitDefaultValue = true)]
        public decimal? DestIfaceTwo { get; set; }

        /// <summary>
        /// Enter Destination Flag Two * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Enter Destination Flag Two * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "new_dest_flag_two", EmitDefaultValue = true)]
        public decimal? NewDestFlagTwo { get; set; }

        /// <summary>
        /// Enter New Destination Address Two * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Enter New Destination Address Two * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "new_dest_addr_two", EmitDefaultValue = true)]
        public string NewDestAddrTwo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PacketReplayReplayPacketReplayReplayActionVal {\n");
            sb.Append("  DestAddrOne: ").Append(DestAddrOne).Append("\n");
            sb.Append("  DestPrefixOne: ").Append(DestPrefixOne).Append("\n");
            sb.Append("  DestIfaceOne: ").Append(DestIfaceOne).Append("\n");
            sb.Append("  NewDestFlagOne: ").Append(NewDestFlagOne).Append("\n");
            sb.Append("  NewDestAddrOne: ").Append(NewDestAddrOne).Append("\n");
            sb.Append("  DestAddrTwo: ").Append(DestAddrTwo).Append("\n");
            sb.Append("  DestPrefixTwo: ").Append(DestPrefixTwo).Append("\n");
            sb.Append("  DestIfaceTwo: ").Append(DestIfaceTwo).Append("\n");
            sb.Append("  NewDestFlagTwo: ").Append(NewDestFlagTwo).Append("\n");
            sb.Append("  NewDestAddrTwo: ").Append(NewDestAddrTwo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PacketReplayReplayPacketReplayReplayActionVal);
        }

        /// <summary>
        /// Returns true if PacketReplayReplayPacketReplayReplayActionVal instances are equal
        /// </summary>
        /// <param name="input">Instance of PacketReplayReplayPacketReplayReplayActionVal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PacketReplayReplayPacketReplayReplayActionVal input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DestAddrOne == input.DestAddrOne ||
                    (this.DestAddrOne != null &&
                    this.DestAddrOne.Equals(input.DestAddrOne))
                ) && 
                (
                    this.DestPrefixOne == input.DestPrefixOne ||
                    this.DestPrefixOne.Equals(input.DestPrefixOne)
                ) && 
                (
                    this.DestIfaceOne == input.DestIfaceOne ||
                    (this.DestIfaceOne != null &&
                    this.DestIfaceOne.Equals(input.DestIfaceOne))
                ) && 
                (
                    this.NewDestFlagOne == input.NewDestFlagOne ||
                    (this.NewDestFlagOne != null &&
                    this.NewDestFlagOne.Equals(input.NewDestFlagOne))
                ) && 
                (
                    this.NewDestAddrOne == input.NewDestAddrOne ||
                    (this.NewDestAddrOne != null &&
                    this.NewDestAddrOne.Equals(input.NewDestAddrOne))
                ) && 
                (
                    this.DestAddrTwo == input.DestAddrTwo ||
                    (this.DestAddrTwo != null &&
                    this.DestAddrTwo.Equals(input.DestAddrTwo))
                ) && 
                (
                    this.DestPrefixTwo == input.DestPrefixTwo ||
                    this.DestPrefixTwo.Equals(input.DestPrefixTwo)
                ) && 
                (
                    this.DestIfaceTwo == input.DestIfaceTwo ||
                    (this.DestIfaceTwo != null &&
                    this.DestIfaceTwo.Equals(input.DestIfaceTwo))
                ) && 
                (
                    this.NewDestFlagTwo == input.NewDestFlagTwo ||
                    (this.NewDestFlagTwo != null &&
                    this.NewDestFlagTwo.Equals(input.NewDestFlagTwo))
                ) && 
                (
                    this.NewDestAddrTwo == input.NewDestAddrTwo ||
                    (this.NewDestAddrTwo != null &&
                    this.NewDestAddrTwo.Equals(input.NewDestAddrTwo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DestAddrOne != null)
                {
                    hashCode = (hashCode * 59) + this.DestAddrOne.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DestPrefixOne.GetHashCode();
                if (this.DestIfaceOne != null)
                {
                    hashCode = (hashCode * 59) + this.DestIfaceOne.GetHashCode();
                }
                if (this.NewDestFlagOne != null)
                {
                    hashCode = (hashCode * 59) + this.NewDestFlagOne.GetHashCode();
                }
                if (this.NewDestAddrOne != null)
                {
                    hashCode = (hashCode * 59) + this.NewDestAddrOne.GetHashCode();
                }
                if (this.DestAddrTwo != null)
                {
                    hashCode = (hashCode * 59) + this.DestAddrTwo.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DestPrefixTwo.GetHashCode();
                if (this.DestIfaceTwo != null)
                {
                    hashCode = (hashCode * 59) + this.DestIfaceTwo.GetHashCode();
                }
                if (this.NewDestFlagTwo != null)
                {
                    hashCode = (hashCode * 59) + this.NewDestFlagTwo.GetHashCode();
                }
                if (this.NewDestAddrTwo != null)
                {
                    hashCode = (hashCode * 59) + this.NewDestAddrTwo.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
