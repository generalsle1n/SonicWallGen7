/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// log aws detail schema.
    /// </summary>
    [DataContract(Name = "show_status_log_aws_detail")]
    public partial class ShowStatusLogAwsDetail : IEquatable<ShowStatusLogAwsDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusLogAwsDetail" /> class.
        /// </summary>
        /// <param name="logEnabled">logEnabled.</param>
        /// <param name="logEnabledConfig">logEnabledConfig.</param>
        /// <param name="logSyncInProgress">logSyncInProgress.</param>
        /// <param name="logPushStatus">logPushStatus.</param>
        /// <param name="logPushRequests">logPushRequests.</param>
        /// <param name="logMessagesSent">logMessagesSent.</param>
        /// <param name="logPushBytesSent">logPushBytesSent.</param>
        /// <param name="logPushConnectionFailed">logPushConnectionFailed.</param>
        public ShowStatusLogAwsDetail(string logEnabled = default(string), string logEnabledConfig = default(string), string logSyncInProgress = default(string), string logPushStatus = default(string), string logPushRequests = default(string), string logMessagesSent = default(string), string logPushBytesSent = default(string), string logPushConnectionFailed = default(string))
        {
            this.LogEnabled = logEnabled;
            this.LogEnabledConfig = logEnabledConfig;
            this.LogSyncInProgress = logSyncInProgress;
            this.LogPushStatus = logPushStatus;
            this.LogPushRequests = logPushRequests;
            this.LogMessagesSent = logMessagesSent;
            this.LogPushBytesSent = logPushBytesSent;
            this.LogPushConnectionFailed = logPushConnectionFailed;
        }

        /// <summary>
        /// Gets or Sets LogEnabled
        /// </summary>
        [DataMember(Name = "log_enabled", EmitDefaultValue = false)]
        public string LogEnabled { get; set; }

        /// <summary>
        /// Gets or Sets LogEnabledConfig
        /// </summary>
        [DataMember(Name = "log_enabled_config", EmitDefaultValue = false)]
        public string LogEnabledConfig { get; set; }

        /// <summary>
        /// Gets or Sets LogSyncInProgress
        /// </summary>
        [DataMember(Name = "log_sync_in_progress", EmitDefaultValue = false)]
        public string LogSyncInProgress { get; set; }

        /// <summary>
        /// Gets or Sets LogPushStatus
        /// </summary>
        [DataMember(Name = "log_push_status", EmitDefaultValue = false)]
        public string LogPushStatus { get; set; }

        /// <summary>
        /// Gets or Sets LogPushRequests
        /// </summary>
        [DataMember(Name = "log_push_requests", EmitDefaultValue = false)]
        public string LogPushRequests { get; set; }

        /// <summary>
        /// Gets or Sets LogMessagesSent
        /// </summary>
        [DataMember(Name = "log_messages_sent", EmitDefaultValue = false)]
        public string LogMessagesSent { get; set; }

        /// <summary>
        /// Gets or Sets LogPushBytesSent
        /// </summary>
        [DataMember(Name = "log_push_bytes_sent", EmitDefaultValue = false)]
        public string LogPushBytesSent { get; set; }

        /// <summary>
        /// Gets or Sets LogPushConnectionFailed
        /// </summary>
        [DataMember(Name = "log_push_connection_failed", EmitDefaultValue = false)]
        public string LogPushConnectionFailed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusLogAwsDetail {\n");
            sb.Append("  LogEnabled: ").Append(LogEnabled).Append("\n");
            sb.Append("  LogEnabledConfig: ").Append(LogEnabledConfig).Append("\n");
            sb.Append("  LogSyncInProgress: ").Append(LogSyncInProgress).Append("\n");
            sb.Append("  LogPushStatus: ").Append(LogPushStatus).Append("\n");
            sb.Append("  LogPushRequests: ").Append(LogPushRequests).Append("\n");
            sb.Append("  LogMessagesSent: ").Append(LogMessagesSent).Append("\n");
            sb.Append("  LogPushBytesSent: ").Append(LogPushBytesSent).Append("\n");
            sb.Append("  LogPushConnectionFailed: ").Append(LogPushConnectionFailed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusLogAwsDetail);
        }

        /// <summary>
        /// Returns true if ShowStatusLogAwsDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusLogAwsDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusLogAwsDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LogEnabled == input.LogEnabled ||
                    (this.LogEnabled != null &&
                    this.LogEnabled.Equals(input.LogEnabled))
                ) && 
                (
                    this.LogEnabledConfig == input.LogEnabledConfig ||
                    (this.LogEnabledConfig != null &&
                    this.LogEnabledConfig.Equals(input.LogEnabledConfig))
                ) && 
                (
                    this.LogSyncInProgress == input.LogSyncInProgress ||
                    (this.LogSyncInProgress != null &&
                    this.LogSyncInProgress.Equals(input.LogSyncInProgress))
                ) && 
                (
                    this.LogPushStatus == input.LogPushStatus ||
                    (this.LogPushStatus != null &&
                    this.LogPushStatus.Equals(input.LogPushStatus))
                ) && 
                (
                    this.LogPushRequests == input.LogPushRequests ||
                    (this.LogPushRequests != null &&
                    this.LogPushRequests.Equals(input.LogPushRequests))
                ) && 
                (
                    this.LogMessagesSent == input.LogMessagesSent ||
                    (this.LogMessagesSent != null &&
                    this.LogMessagesSent.Equals(input.LogMessagesSent))
                ) && 
                (
                    this.LogPushBytesSent == input.LogPushBytesSent ||
                    (this.LogPushBytesSent != null &&
                    this.LogPushBytesSent.Equals(input.LogPushBytesSent))
                ) && 
                (
                    this.LogPushConnectionFailed == input.LogPushConnectionFailed ||
                    (this.LogPushConnectionFailed != null &&
                    this.LogPushConnectionFailed.Equals(input.LogPushConnectionFailed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LogEnabled != null)
                {
                    hashCode = (hashCode * 59) + this.LogEnabled.GetHashCode();
                }
                if (this.LogEnabledConfig != null)
                {
                    hashCode = (hashCode * 59) + this.LogEnabledConfig.GetHashCode();
                }
                if (this.LogSyncInProgress != null)
                {
                    hashCode = (hashCode * 59) + this.LogSyncInProgress.GetHashCode();
                }
                if (this.LogPushStatus != null)
                {
                    hashCode = (hashCode * 59) + this.LogPushStatus.GetHashCode();
                }
                if (this.LogPushRequests != null)
                {
                    hashCode = (hashCode * 59) + this.LogPushRequests.GetHashCode();
                }
                if (this.LogMessagesSent != null)
                {
                    hashCode = (hashCode * 59) + this.LogMessagesSent.GetHashCode();
                }
                if (this.LogPushBytesSent != null)
                {
                    hashCode = (hashCode * 59) + this.LogPushBytesSent.GetHashCode();
                }
                if (this.LogPushConnectionFailed != null)
                {
                    hashCode = (hashCode * 59) + this.LogPushConnectionFailed.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
