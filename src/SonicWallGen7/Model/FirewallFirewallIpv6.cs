/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure IPv6 firewall.
    /// </summary>
    [DataContract(Name = "firewall_firewall_ipv6")]
    public partial class FirewallFirewallIpv6 : IEquatable<FirewallFirewallIpv6>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FirewallFirewallIpv6" /> class.
        /// </summary>
        /// <param name="drop">drop.</param>
        /// <param name="decrement">decrement.</param>
        /// <param name="icmp">icmp.</param>
        /// <param name="siteLocalUnicast">Enable allow to use site-local-unicast address..</param>
        /// <param name="extensionHeaderCheck">Enable enforce IPv6 extension header validation..</param>
        /// <param name="extensionHeaderOrderCheck">Enable enforce IPv6 extension header order check..</param>
        /// <param name="netbiosForIsatap">Enable NetBIOS name query response for ISATAP..</param>
        public FirewallFirewallIpv6(FirewallFirewallIpv6Drop drop = default(FirewallFirewallIpv6Drop), FirewallFirewallIpv6Decrement decrement = default(FirewallFirewallIpv6Decrement), FirewallFirewallIpv6Icmp icmp = default(FirewallFirewallIpv6Icmp), bool siteLocalUnicast = default(bool), bool extensionHeaderCheck = default(bool), bool extensionHeaderOrderCheck = default(bool), bool netbiosForIsatap = default(bool))
        {
            this.Drop = drop;
            this.Decrement = decrement;
            this.Icmp = icmp;
            this.SiteLocalUnicast = siteLocalUnicast;
            this.ExtensionHeaderCheck = extensionHeaderCheck;
            this.ExtensionHeaderOrderCheck = extensionHeaderOrderCheck;
            this.NetbiosForIsatap = netbiosForIsatap;
        }

        /// <summary>
        /// Gets or Sets Drop
        /// </summary>
        [DataMember(Name = "drop", EmitDefaultValue = false)]
        public FirewallFirewallIpv6Drop Drop { get; set; }

        /// <summary>
        /// Gets or Sets Decrement
        /// </summary>
        [DataMember(Name = "decrement", EmitDefaultValue = false)]
        public FirewallFirewallIpv6Decrement Decrement { get; set; }

        /// <summary>
        /// Gets or Sets Icmp
        /// </summary>
        [DataMember(Name = "icmp", EmitDefaultValue = false)]
        public FirewallFirewallIpv6Icmp Icmp { get; set; }

        /// <summary>
        /// Enable allow to use site-local-unicast address.
        /// </summary>
        /// <value>Enable allow to use site-local-unicast address.</value>
        [DataMember(Name = "site_local_unicast", EmitDefaultValue = true)]
        public bool SiteLocalUnicast { get; set; }

        /// <summary>
        /// Enable enforce IPv6 extension header validation.
        /// </summary>
        /// <value>Enable enforce IPv6 extension header validation.</value>
        [DataMember(Name = "extension_header_check", EmitDefaultValue = true)]
        public bool ExtensionHeaderCheck { get; set; }

        /// <summary>
        /// Enable enforce IPv6 extension header order check.
        /// </summary>
        /// <value>Enable enforce IPv6 extension header order check.</value>
        [DataMember(Name = "extension_header_order_check", EmitDefaultValue = true)]
        public bool ExtensionHeaderOrderCheck { get; set; }

        /// <summary>
        /// Enable NetBIOS name query response for ISATAP.
        /// </summary>
        /// <value>Enable NetBIOS name query response for ISATAP.</value>
        [DataMember(Name = "netbios_for_isatap", EmitDefaultValue = true)]
        public bool NetbiosForIsatap { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FirewallFirewallIpv6 {\n");
            sb.Append("  Drop: ").Append(Drop).Append("\n");
            sb.Append("  Decrement: ").Append(Decrement).Append("\n");
            sb.Append("  Icmp: ").Append(Icmp).Append("\n");
            sb.Append("  SiteLocalUnicast: ").Append(SiteLocalUnicast).Append("\n");
            sb.Append("  ExtensionHeaderCheck: ").Append(ExtensionHeaderCheck).Append("\n");
            sb.Append("  ExtensionHeaderOrderCheck: ").Append(ExtensionHeaderOrderCheck).Append("\n");
            sb.Append("  NetbiosForIsatap: ").Append(NetbiosForIsatap).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FirewallFirewallIpv6);
        }

        /// <summary>
        /// Returns true if FirewallFirewallIpv6 instances are equal
        /// </summary>
        /// <param name="input">Instance of FirewallFirewallIpv6 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FirewallFirewallIpv6 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Drop == input.Drop ||
                    (this.Drop != null &&
                    this.Drop.Equals(input.Drop))
                ) && 
                (
                    this.Decrement == input.Decrement ||
                    (this.Decrement != null &&
                    this.Decrement.Equals(input.Decrement))
                ) && 
                (
                    this.Icmp == input.Icmp ||
                    (this.Icmp != null &&
                    this.Icmp.Equals(input.Icmp))
                ) && 
                (
                    this.SiteLocalUnicast == input.SiteLocalUnicast ||
                    this.SiteLocalUnicast.Equals(input.SiteLocalUnicast)
                ) && 
                (
                    this.ExtensionHeaderCheck == input.ExtensionHeaderCheck ||
                    this.ExtensionHeaderCheck.Equals(input.ExtensionHeaderCheck)
                ) && 
                (
                    this.ExtensionHeaderOrderCheck == input.ExtensionHeaderOrderCheck ||
                    this.ExtensionHeaderOrderCheck.Equals(input.ExtensionHeaderOrderCheck)
                ) && 
                (
                    this.NetbiosForIsatap == input.NetbiosForIsatap ||
                    this.NetbiosForIsatap.Equals(input.NetbiosForIsatap)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Drop != null)
                {
                    hashCode = (hashCode * 59) + this.Drop.GetHashCode();
                }
                if (this.Decrement != null)
                {
                    hashCode = (hashCode * 59) + this.Decrement.GetHashCode();
                }
                if (this.Icmp != null)
                {
                    hashCode = (hashCode * 59) + this.Icmp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SiteLocalUnicast.GetHashCode();
                hashCode = (hashCode * 59) + this.ExtensionHeaderCheck.GetHashCode();
                hashCode = (hashCode * 59) + this.ExtensionHeaderOrderCheck.GetHashCode();
                hashCode = (hashCode * 59) + this.NetbiosForIsatap.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
