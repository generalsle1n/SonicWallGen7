/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// ShowStatusLogViewListInner
    /// </summary>
    [DataContract(Name = "show_status_log_view_list_inner")]
    public partial class ShowStatusLogViewListInner : IEquatable<ShowStatusLogViewListInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusLogViewListInner" /> class.
        /// </summary>
        /// <param name="time">time.</param>
        /// <param name="id">id.</param>
        /// <param name="category">category.</param>
        /// <param name="priority">priority.</param>
        /// <param name="srcInt">srcInt.</param>
        /// <param name="dstInt">dstInt.</param>
        /// <param name="srcIp">srcIp.</param>
        /// <param name="srcPort">srcPort.</param>
        /// <param name="dstIp">dstIp.</param>
        /// <param name="dstPort">dstPort.</param>
        /// <param name="ipProtocol">ipProtocol.</param>
        /// <param name="userName">userName.</param>
        /// <param name="application">application.</param>
        /// <param name="notes">notes.</param>
        /// <param name="message">message.</param>
        public ShowStatusLogViewListInner(string time = default(string), string id = default(string), string category = default(string), string priority = default(string), string srcInt = default(string), string dstInt = default(string), string srcIp = default(string), string srcPort = default(string), string dstIp = default(string), string dstPort = default(string), string ipProtocol = default(string), string userName = default(string), string application = default(string), string notes = default(string), string message = default(string))
        {
            this.Time = time;
            this.Id = id;
            this.Category = category;
            this.Priority = priority;
            this.SrcInt = srcInt;
            this.DstInt = dstInt;
            this.SrcIp = srcIp;
            this.SrcPort = srcPort;
            this.DstIp = dstIp;
            this.DstPort = dstPort;
            this.IpProtocol = ipProtocol;
            this.UserName = userName;
            this.Application = application;
            this.Notes = notes;
            this.Message = message;
        }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name = "time", EmitDefaultValue = false)]
        public string Time { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name = "priority", EmitDefaultValue = false)]
        public string Priority { get; set; }

        /// <summary>
        /// Gets or Sets SrcInt
        /// </summary>
        [DataMember(Name = "src_int", EmitDefaultValue = false)]
        public string SrcInt { get; set; }

        /// <summary>
        /// Gets or Sets DstInt
        /// </summary>
        [DataMember(Name = "dst_int", EmitDefaultValue = false)]
        public string DstInt { get; set; }

        /// <summary>
        /// Gets or Sets SrcIp
        /// </summary>
        [DataMember(Name = "src_ip", EmitDefaultValue = false)]
        public string SrcIp { get; set; }

        /// <summary>
        /// Gets or Sets SrcPort
        /// </summary>
        [DataMember(Name = "src_port", EmitDefaultValue = false)]
        public string SrcPort { get; set; }

        /// <summary>
        /// Gets or Sets DstIp
        /// </summary>
        [DataMember(Name = "dst_ip", EmitDefaultValue = false)]
        public string DstIp { get; set; }

        /// <summary>
        /// Gets or Sets DstPort
        /// </summary>
        [DataMember(Name = "dst_port", EmitDefaultValue = false)]
        public string DstPort { get; set; }

        /// <summary>
        /// Gets or Sets IpProtocol
        /// </summary>
        [DataMember(Name = "ip_protocol", EmitDefaultValue = false)]
        public string IpProtocol { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name = "user_name", EmitDefaultValue = false)]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets Application
        /// </summary>
        [DataMember(Name = "application", EmitDefaultValue = false)]
        public string Application { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name = "notes", EmitDefaultValue = false)]
        public string Notes { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusLogViewListInner {\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  SrcInt: ").Append(SrcInt).Append("\n");
            sb.Append("  DstInt: ").Append(DstInt).Append("\n");
            sb.Append("  SrcIp: ").Append(SrcIp).Append("\n");
            sb.Append("  SrcPort: ").Append(SrcPort).Append("\n");
            sb.Append("  DstIp: ").Append(DstIp).Append("\n");
            sb.Append("  DstPort: ").Append(DstPort).Append("\n");
            sb.Append("  IpProtocol: ").Append(IpProtocol).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  Application: ").Append(Application).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusLogViewListInner);
        }

        /// <summary>
        /// Returns true if ShowStatusLogViewListInner instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusLogViewListInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusLogViewListInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.SrcInt == input.SrcInt ||
                    (this.SrcInt != null &&
                    this.SrcInt.Equals(input.SrcInt))
                ) && 
                (
                    this.DstInt == input.DstInt ||
                    (this.DstInt != null &&
                    this.DstInt.Equals(input.DstInt))
                ) && 
                (
                    this.SrcIp == input.SrcIp ||
                    (this.SrcIp != null &&
                    this.SrcIp.Equals(input.SrcIp))
                ) && 
                (
                    this.SrcPort == input.SrcPort ||
                    (this.SrcPort != null &&
                    this.SrcPort.Equals(input.SrcPort))
                ) && 
                (
                    this.DstIp == input.DstIp ||
                    (this.DstIp != null &&
                    this.DstIp.Equals(input.DstIp))
                ) && 
                (
                    this.DstPort == input.DstPort ||
                    (this.DstPort != null &&
                    this.DstPort.Equals(input.DstPort))
                ) && 
                (
                    this.IpProtocol == input.IpProtocol ||
                    (this.IpProtocol != null &&
                    this.IpProtocol.Equals(input.IpProtocol))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.Application == input.Application ||
                    (this.Application != null &&
                    this.Application.Equals(input.Application))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Time != null)
                {
                    hashCode = (hashCode * 59) + this.Time.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Category != null)
                {
                    hashCode = (hashCode * 59) + this.Category.GetHashCode();
                }
                if (this.Priority != null)
                {
                    hashCode = (hashCode * 59) + this.Priority.GetHashCode();
                }
                if (this.SrcInt != null)
                {
                    hashCode = (hashCode * 59) + this.SrcInt.GetHashCode();
                }
                if (this.DstInt != null)
                {
                    hashCode = (hashCode * 59) + this.DstInt.GetHashCode();
                }
                if (this.SrcIp != null)
                {
                    hashCode = (hashCode * 59) + this.SrcIp.GetHashCode();
                }
                if (this.SrcPort != null)
                {
                    hashCode = (hashCode * 59) + this.SrcPort.GetHashCode();
                }
                if (this.DstIp != null)
                {
                    hashCode = (hashCode * 59) + this.DstIp.GetHashCode();
                }
                if (this.DstPort != null)
                {
                    hashCode = (hashCode * 59) + this.DstPort.GetHashCode();
                }
                if (this.IpProtocol != null)
                {
                    hashCode = (hashCode * 59) + this.IpProtocol.GetHashCode();
                }
                if (this.UserName != null)
                {
                    hashCode = (hashCode * 59) + this.UserName.GetHashCode();
                }
                if (this.Application != null)
                {
                    hashCode = (hashCode * 59) + this.Application.GetHashCode();
                }
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
