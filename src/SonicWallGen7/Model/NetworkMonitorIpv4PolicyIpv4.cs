/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// IPv4 network monitor policy.
    /// </summary>
    [DataContract(Name = "network_monitor_ipv4_policy_ipv4")]
    public partial class NetworkMonitorIpv4PolicyIpv4 : IEquatable<NetworkMonitorIpv4PolicyIpv4>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkMonitorIpv4PolicyIpv4" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NetworkMonitorIpv4PolicyIpv4() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkMonitorIpv4PolicyIpv4" /> class.
        /// </summary>
        /// <param name="name">Edit a network monitor policy name. (required).</param>
        /// <param name="probe">probe.</param>
        /// <param name="outboundInterface">Set outbound interface..</param>
        /// <param name="nextHop">nextHop.</param>
        /// <param name="localIp">localIp.</param>
        /// <param name="replyTimeout">Set probing reply timeout..</param>
        /// <param name="interval">interval.</param>
        /// <param name="mustRespond">Enable all hosts must respond..</param>
        /// <param name="rstAsMiss">Enable RST response counts as miss..</param>
        /// <param name="comment">Set network monitor policy comment..</param>
        public NetworkMonitorIpv4PolicyIpv4(string name = default(string), NetworkMonitorIpv4PolicyIpv4Probe probe = default(NetworkMonitorIpv4PolicyIpv4Probe), string outboundInterface = default(string), NetworkMonitorIpv4PolicyIpv4NextHop nextHop = default(NetworkMonitorIpv4PolicyIpv4NextHop), NetworkMonitorIpv4PolicyIpv4LocalIp localIp = default(NetworkMonitorIpv4PolicyIpv4LocalIp), decimal replyTimeout = default(decimal), NetworkMonitorIpv4PolicyIpv4Interval interval = default(NetworkMonitorIpv4PolicyIpv4Interval), bool mustRespond = default(bool), bool rstAsMiss = default(bool), string comment = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for NetworkMonitorIpv4PolicyIpv4 and cannot be null");
            }
            this.Name = name;
            this.Probe = probe;
            this.OutboundInterface = outboundInterface;
            this.NextHop = nextHop;
            this.LocalIp = localIp;
            this.ReplyTimeout = replyTimeout;
            this.Interval = interval;
            this.MustRespond = mustRespond;
            this.RstAsMiss = rstAsMiss;
            this.Comment = comment;
        }

        /// <summary>
        /// Edit a network monitor policy name.
        /// </summary>
        /// <value>Edit a network monitor policy name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Probe
        /// </summary>
        [DataMember(Name = "probe", EmitDefaultValue = false)]
        public NetworkMonitorIpv4PolicyIpv4Probe Probe { get; set; }

        /// <summary>
        /// Set outbound interface.
        /// </summary>
        /// <value>Set outbound interface.</value>
        [DataMember(Name = "outbound_interface", EmitDefaultValue = false)]
        public string OutboundInterface { get; set; }

        /// <summary>
        /// Gets or Sets NextHop
        /// </summary>
        [DataMember(Name = "next_hop", EmitDefaultValue = false)]
        public NetworkMonitorIpv4PolicyIpv4NextHop NextHop { get; set; }

        /// <summary>
        /// Gets or Sets LocalIp
        /// </summary>
        [DataMember(Name = "local_ip", EmitDefaultValue = false)]
        public NetworkMonitorIpv4PolicyIpv4LocalIp LocalIp { get; set; }

        /// <summary>
        /// Set probing reply timeout.
        /// </summary>
        /// <value>Set probing reply timeout.</value>
        [DataMember(Name = "reply_timeout", EmitDefaultValue = false)]
        public decimal ReplyTimeout { get; set; }

        /// <summary>
        /// Gets or Sets Interval
        /// </summary>
        [DataMember(Name = "interval", EmitDefaultValue = false)]
        public NetworkMonitorIpv4PolicyIpv4Interval Interval { get; set; }

        /// <summary>
        /// Enable all hosts must respond.
        /// </summary>
        /// <value>Enable all hosts must respond.</value>
        [DataMember(Name = "must_respond", EmitDefaultValue = true)]
        public bool MustRespond { get; set; }

        /// <summary>
        /// Enable RST response counts as miss.
        /// </summary>
        /// <value>Enable RST response counts as miss.</value>
        [DataMember(Name = "rst_as_miss", EmitDefaultValue = true)]
        public bool RstAsMiss { get; set; }

        /// <summary>
        /// Network monitor UUID.
        /// </summary>
        /// <value>Network monitor UUID.</value>
        [DataMember(Name = "uuid", EmitDefaultValue = false)]
        public string Uuid { get; private set; }

        /// <summary>
        /// Returns false as Uuid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUuid()
        {
            return false;
        }
        /// <summary>
        /// Set network monitor policy comment.
        /// </summary>
        /// <value>Set network monitor policy comment.</value>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NetworkMonitorIpv4PolicyIpv4 {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Probe: ").Append(Probe).Append("\n");
            sb.Append("  OutboundInterface: ").Append(OutboundInterface).Append("\n");
            sb.Append("  NextHop: ").Append(NextHop).Append("\n");
            sb.Append("  LocalIp: ").Append(LocalIp).Append("\n");
            sb.Append("  ReplyTimeout: ").Append(ReplyTimeout).Append("\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  MustRespond: ").Append(MustRespond).Append("\n");
            sb.Append("  RstAsMiss: ").Append(RstAsMiss).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NetworkMonitorIpv4PolicyIpv4);
        }

        /// <summary>
        /// Returns true if NetworkMonitorIpv4PolicyIpv4 instances are equal
        /// </summary>
        /// <param name="input">Instance of NetworkMonitorIpv4PolicyIpv4 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NetworkMonitorIpv4PolicyIpv4 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Probe == input.Probe ||
                    (this.Probe != null &&
                    this.Probe.Equals(input.Probe))
                ) && 
                (
                    this.OutboundInterface == input.OutboundInterface ||
                    (this.OutboundInterface != null &&
                    this.OutboundInterface.Equals(input.OutboundInterface))
                ) && 
                (
                    this.NextHop == input.NextHop ||
                    (this.NextHop != null &&
                    this.NextHop.Equals(input.NextHop))
                ) && 
                (
                    this.LocalIp == input.LocalIp ||
                    (this.LocalIp != null &&
                    this.LocalIp.Equals(input.LocalIp))
                ) && 
                (
                    this.ReplyTimeout == input.ReplyTimeout ||
                    this.ReplyTimeout.Equals(input.ReplyTimeout)
                ) && 
                (
                    this.Interval == input.Interval ||
                    (this.Interval != null &&
                    this.Interval.Equals(input.Interval))
                ) && 
                (
                    this.MustRespond == input.MustRespond ||
                    this.MustRespond.Equals(input.MustRespond)
                ) && 
                (
                    this.RstAsMiss == input.RstAsMiss ||
                    this.RstAsMiss.Equals(input.RstAsMiss)
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Probe != null)
                {
                    hashCode = (hashCode * 59) + this.Probe.GetHashCode();
                }
                if (this.OutboundInterface != null)
                {
                    hashCode = (hashCode * 59) + this.OutboundInterface.GetHashCode();
                }
                if (this.NextHop != null)
                {
                    hashCode = (hashCode * 59) + this.NextHop.GetHashCode();
                }
                if (this.LocalIp != null)
                {
                    hashCode = (hashCode * 59) + this.LocalIp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReplyTimeout.GetHashCode();
                if (this.Interval != null)
                {
                    hashCode = (hashCode * 59) + this.Interval.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MustRespond.GetHashCode();
                hashCode = (hashCode * 59) + this.RstAsMiss.GetHashCode();
                if (this.Uuid != null)
                {
                    hashCode = (hashCode * 59) + this.Uuid.GetHashCode();
                }
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
