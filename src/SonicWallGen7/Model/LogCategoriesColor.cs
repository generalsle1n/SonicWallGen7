/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;
using System.Reflection;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Set the color of the category to be displayed in the Log Monitor.
    /// </summary>
    [JsonConverter(typeof(LogCategoriesColorJsonConverter))]
    [DataContract(Name = "log_categories_color")]
    public partial class LogCategoriesColor : AbstractOpenAPISchema, IEquatable<LogCategoriesColor>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogCategoriesColor" /> class
        /// with the <see cref="LogCategoriesColorLeaveUnchanged" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LogCategoriesColorLeaveUnchanged.</param>
        public LogCategoriesColor(LogCategoriesColorLeaveUnchanged actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogCategoriesColor" /> class
        /// with the <see cref="LogCategoriesColorRgb" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LogCategoriesColorRgb.</param>
        public LogCategoriesColor(LogCategoriesColorRgb actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogCategoriesColor" /> class
        /// with the <see cref="LogCategoriesColorHex" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LogCategoriesColorHex.</param>
        public LogCategoriesColor(LogCategoriesColorHex actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogCategoriesColor" /> class
        /// with the <see cref="LogCategoriesColorBlack" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LogCategoriesColorBlack.</param>
        public LogCategoriesColor(LogCategoriesColorBlack actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogCategoriesColor" /> class
        /// with the <see cref="LogCategoriesColorRed" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LogCategoriesColorRed.</param>
        public LogCategoriesColor(LogCategoriesColorRed actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogCategoriesColor" /> class
        /// with the <see cref="LogCategoriesColorYellow" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LogCategoriesColorYellow.</param>
        public LogCategoriesColor(LogCategoriesColorYellow actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogCategoriesColor" /> class
        /// with the <see cref="LogCategoriesColorBlue" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LogCategoriesColorBlue.</param>
        public LogCategoriesColor(LogCategoriesColorBlue actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogCategoriesColor" /> class
        /// with the <see cref="LogCategoriesColorGreen" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LogCategoriesColorGreen.</param>
        public LogCategoriesColor(LogCategoriesColorGreen actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogCategoriesColor" /> class
        /// with the <see cref="LogCategoriesColorOrange" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LogCategoriesColorOrange.</param>
        public LogCategoriesColor(LogCategoriesColorOrange actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogCategoriesColor" /> class
        /// with the <see cref="LogCategoriesColorPurple" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LogCategoriesColorPurple.</param>
        public LogCategoriesColor(LogCategoriesColorPurple actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(LogCategoriesColorBlack))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(LogCategoriesColorBlue))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(LogCategoriesColorGreen))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(LogCategoriesColorHex))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(LogCategoriesColorLeaveUnchanged))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(LogCategoriesColorOrange))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(LogCategoriesColorPurple))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(LogCategoriesColorRed))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(LogCategoriesColorRgb))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(LogCategoriesColorYellow))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: LogCategoriesColorBlack, LogCategoriesColorBlue, LogCategoriesColorGreen, LogCategoriesColorHex, LogCategoriesColorLeaveUnchanged, LogCategoriesColorOrange, LogCategoriesColorPurple, LogCategoriesColorRed, LogCategoriesColorRgb, LogCategoriesColorYellow");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `LogCategoriesColorLeaveUnchanged`. If the actual instance is not `LogCategoriesColorLeaveUnchanged`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LogCategoriesColorLeaveUnchanged</returns>
        public LogCategoriesColorLeaveUnchanged GetLogCategoriesColorLeaveUnchanged()
        {
            return (LogCategoriesColorLeaveUnchanged)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LogCategoriesColorRgb`. If the actual instance is not `LogCategoriesColorRgb`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LogCategoriesColorRgb</returns>
        public LogCategoriesColorRgb GetLogCategoriesColorRgb()
        {
            return (LogCategoriesColorRgb)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LogCategoriesColorHex`. If the actual instance is not `LogCategoriesColorHex`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LogCategoriesColorHex</returns>
        public LogCategoriesColorHex GetLogCategoriesColorHex()
        {
            return (LogCategoriesColorHex)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LogCategoriesColorBlack`. If the actual instance is not `LogCategoriesColorBlack`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LogCategoriesColorBlack</returns>
        public LogCategoriesColorBlack GetLogCategoriesColorBlack()
        {
            return (LogCategoriesColorBlack)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LogCategoriesColorRed`. If the actual instance is not `LogCategoriesColorRed`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LogCategoriesColorRed</returns>
        public LogCategoriesColorRed GetLogCategoriesColorRed()
        {
            return (LogCategoriesColorRed)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LogCategoriesColorYellow`. If the actual instance is not `LogCategoriesColorYellow`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LogCategoriesColorYellow</returns>
        public LogCategoriesColorYellow GetLogCategoriesColorYellow()
        {
            return (LogCategoriesColorYellow)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LogCategoriesColorBlue`. If the actual instance is not `LogCategoriesColorBlue`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LogCategoriesColorBlue</returns>
        public LogCategoriesColorBlue GetLogCategoriesColorBlue()
        {
            return (LogCategoriesColorBlue)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LogCategoriesColorGreen`. If the actual instance is not `LogCategoriesColorGreen`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LogCategoriesColorGreen</returns>
        public LogCategoriesColorGreen GetLogCategoriesColorGreen()
        {
            return (LogCategoriesColorGreen)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LogCategoriesColorOrange`. If the actual instance is not `LogCategoriesColorOrange`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LogCategoriesColorOrange</returns>
        public LogCategoriesColorOrange GetLogCategoriesColorOrange()
        {
            return (LogCategoriesColorOrange)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LogCategoriesColorPurple`. If the actual instance is not `LogCategoriesColorPurple`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LogCategoriesColorPurple</returns>
        public LogCategoriesColorPurple GetLogCategoriesColorPurple()
        {
            return (LogCategoriesColorPurple)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LogCategoriesColor {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, LogCategoriesColor.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of LogCategoriesColor
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of LogCategoriesColor</returns>
        public static LogCategoriesColor FromJson(string jsonString)
        {
            LogCategoriesColor newLogCategoriesColor = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newLogCategoriesColor;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LogCategoriesColorBlack).GetProperty("AdditionalProperties") == null)
                {
                    newLogCategoriesColor = new LogCategoriesColor(JsonConvert.DeserializeObject<LogCategoriesColorBlack>(jsonString, LogCategoriesColor.SerializerSettings));
                }
                else
                {
                    newLogCategoriesColor = new LogCategoriesColor(JsonConvert.DeserializeObject<LogCategoriesColorBlack>(jsonString, LogCategoriesColor.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LogCategoriesColorBlack");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LogCategoriesColorBlack: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LogCategoriesColorBlue).GetProperty("AdditionalProperties") == null)
                {
                    newLogCategoriesColor = new LogCategoriesColor(JsonConvert.DeserializeObject<LogCategoriesColorBlue>(jsonString, LogCategoriesColor.SerializerSettings));
                }
                else
                {
                    newLogCategoriesColor = new LogCategoriesColor(JsonConvert.DeserializeObject<LogCategoriesColorBlue>(jsonString, LogCategoriesColor.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LogCategoriesColorBlue");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LogCategoriesColorBlue: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LogCategoriesColorGreen).GetProperty("AdditionalProperties") == null)
                {
                    newLogCategoriesColor = new LogCategoriesColor(JsonConvert.DeserializeObject<LogCategoriesColorGreen>(jsonString, LogCategoriesColor.SerializerSettings));
                }
                else
                {
                    newLogCategoriesColor = new LogCategoriesColor(JsonConvert.DeserializeObject<LogCategoriesColorGreen>(jsonString, LogCategoriesColor.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LogCategoriesColorGreen");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LogCategoriesColorGreen: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LogCategoriesColorHex).GetProperty("AdditionalProperties") == null)
                {
                    newLogCategoriesColor = new LogCategoriesColor(JsonConvert.DeserializeObject<LogCategoriesColorHex>(jsonString, LogCategoriesColor.SerializerSettings));
                }
                else
                {
                    newLogCategoriesColor = new LogCategoriesColor(JsonConvert.DeserializeObject<LogCategoriesColorHex>(jsonString, LogCategoriesColor.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LogCategoriesColorHex");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LogCategoriesColorHex: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LogCategoriesColorLeaveUnchanged).GetProperty("AdditionalProperties") == null)
                {
                    newLogCategoriesColor = new LogCategoriesColor(JsonConvert.DeserializeObject<LogCategoriesColorLeaveUnchanged>(jsonString, LogCategoriesColor.SerializerSettings));
                }
                else
                {
                    newLogCategoriesColor = new LogCategoriesColor(JsonConvert.DeserializeObject<LogCategoriesColorLeaveUnchanged>(jsonString, LogCategoriesColor.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LogCategoriesColorLeaveUnchanged");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LogCategoriesColorLeaveUnchanged: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LogCategoriesColorOrange).GetProperty("AdditionalProperties") == null)
                {
                    newLogCategoriesColor = new LogCategoriesColor(JsonConvert.DeserializeObject<LogCategoriesColorOrange>(jsonString, LogCategoriesColor.SerializerSettings));
                }
                else
                {
                    newLogCategoriesColor = new LogCategoriesColor(JsonConvert.DeserializeObject<LogCategoriesColorOrange>(jsonString, LogCategoriesColor.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LogCategoriesColorOrange");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LogCategoriesColorOrange: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LogCategoriesColorPurple).GetProperty("AdditionalProperties") == null)
                {
                    newLogCategoriesColor = new LogCategoriesColor(JsonConvert.DeserializeObject<LogCategoriesColorPurple>(jsonString, LogCategoriesColor.SerializerSettings));
                }
                else
                {
                    newLogCategoriesColor = new LogCategoriesColor(JsonConvert.DeserializeObject<LogCategoriesColorPurple>(jsonString, LogCategoriesColor.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LogCategoriesColorPurple");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LogCategoriesColorPurple: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LogCategoriesColorRed).GetProperty("AdditionalProperties") == null)
                {
                    newLogCategoriesColor = new LogCategoriesColor(JsonConvert.DeserializeObject<LogCategoriesColorRed>(jsonString, LogCategoriesColor.SerializerSettings));
                }
                else
                {
                    newLogCategoriesColor = new LogCategoriesColor(JsonConvert.DeserializeObject<LogCategoriesColorRed>(jsonString, LogCategoriesColor.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LogCategoriesColorRed");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LogCategoriesColorRed: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LogCategoriesColorRgb).GetProperty("AdditionalProperties") == null)
                {
                    newLogCategoriesColor = new LogCategoriesColor(JsonConvert.DeserializeObject<LogCategoriesColorRgb>(jsonString, LogCategoriesColor.SerializerSettings));
                }
                else
                {
                    newLogCategoriesColor = new LogCategoriesColor(JsonConvert.DeserializeObject<LogCategoriesColorRgb>(jsonString, LogCategoriesColor.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LogCategoriesColorRgb");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LogCategoriesColorRgb: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LogCategoriesColorYellow).GetProperty("AdditionalProperties") == null)
                {
                    newLogCategoriesColor = new LogCategoriesColor(JsonConvert.DeserializeObject<LogCategoriesColorYellow>(jsonString, LogCategoriesColor.SerializerSettings));
                }
                else
                {
                    newLogCategoriesColor = new LogCategoriesColor(JsonConvert.DeserializeObject<LogCategoriesColorYellow>(jsonString, LogCategoriesColor.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LogCategoriesColorYellow");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LogCategoriesColorYellow: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newLogCategoriesColor;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogCategoriesColor);
        }

        /// <summary>
        /// Returns true if LogCategoriesColor instances are equal
        /// </summary>
        /// <param name="input">Instance of LogCategoriesColor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogCategoriesColor input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for LogCategoriesColor
    /// </summary>
    public class LogCategoriesColorJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(LogCategoriesColor).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return LogCategoriesColor.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
