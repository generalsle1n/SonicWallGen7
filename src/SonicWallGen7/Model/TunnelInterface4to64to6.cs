/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Set 4to6 tunnel interface.
    /// </summary>
    [DataContract(Name = "tunnel_interface_4to6_4to6")]
    public partial class TunnelInterface4to64to6 : IEquatable<TunnelInterface4to64to6>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TunnelInterface4to64to6" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TunnelInterface4to64to6() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TunnelInterface4to64to6" /> class.
        /// </summary>
        /// <param name="name">Set 4to6 tunnel interface name. (required).</param>
        /// <param name="comment">Set 4to6 tunnel interface comment..</param>
        /// <param name="flowReporting">Enable flow reporting on the interface..</param>
        /// <param name="sendIcmpFragmentation">Enable do not send ICMP Fragmentation Needed for outbound packets over the Interface MTU...</param>
        /// <param name="fragmentPackets">Enable fragment non-VPN outbound packets larger than this interface&#39;s MTU..</param>
        /// <param name="ignoreDfBit">Enable ignore don&#39;t fragment (DF) bit..</param>
        /// <param name="type">type.</param>
        public TunnelInterface4to64to6(string name = default(string), string comment = default(string), bool flowReporting = default(bool), bool sendIcmpFragmentation = default(bool), bool fragmentPackets = default(bool), bool ignoreDfBit = default(bool), TunnelInterface4to64to6Type type = default(TunnelInterface4to64to6Type))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for TunnelInterface4to64to6 and cannot be null");
            }
            this.Name = name;
            this.Comment = comment;
            this.FlowReporting = flowReporting;
            this.SendIcmpFragmentation = sendIcmpFragmentation;
            this.FragmentPackets = fragmentPackets;
            this.IgnoreDfBit = ignoreDfBit;
            this.Type = type;
        }

        /// <summary>
        /// Set 4to6 tunnel interface name.
        /// </summary>
        /// <value>Set 4to6 tunnel interface name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Set 4to6 tunnel interface comment.
        /// </summary>
        /// <value>Set 4to6 tunnel interface comment.</value>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Enable flow reporting on the interface.
        /// </summary>
        /// <value>Enable flow reporting on the interface.</value>
        [DataMember(Name = "flow_reporting", EmitDefaultValue = true)]
        public bool FlowReporting { get; set; }

        /// <summary>
        /// Enable do not send ICMP Fragmentation Needed for outbound packets over the Interface MTU..
        /// </summary>
        /// <value>Enable do not send ICMP Fragmentation Needed for outbound packets over the Interface MTU..</value>
        [DataMember(Name = "send_icmp_fragmentation", EmitDefaultValue = true)]
        public bool SendIcmpFragmentation { get; set; }

        /// <summary>
        /// Enable fragment non-VPN outbound packets larger than this interface&#39;s MTU.
        /// </summary>
        /// <value>Enable fragment non-VPN outbound packets larger than this interface&#39;s MTU.</value>
        [DataMember(Name = "fragment_packets", EmitDefaultValue = true)]
        public bool FragmentPackets { get; set; }

        /// <summary>
        /// Enable ignore don&#39;t fragment (DF) bit.
        /// </summary>
        /// <value>Enable ignore don&#39;t fragment (DF) bit.</value>
        [DataMember(Name = "ignore_df_bit", EmitDefaultValue = true)]
        public bool IgnoreDfBit { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TunnelInterface4to64to6Type Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TunnelInterface4to64to6 {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  FlowReporting: ").Append(FlowReporting).Append("\n");
            sb.Append("  SendIcmpFragmentation: ").Append(SendIcmpFragmentation).Append("\n");
            sb.Append("  FragmentPackets: ").Append(FragmentPackets).Append("\n");
            sb.Append("  IgnoreDfBit: ").Append(IgnoreDfBit).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TunnelInterface4to64to6);
        }

        /// <summary>
        /// Returns true if TunnelInterface4to64to6 instances are equal
        /// </summary>
        /// <param name="input">Instance of TunnelInterface4to64to6 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TunnelInterface4to64to6 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.FlowReporting == input.FlowReporting ||
                    this.FlowReporting.Equals(input.FlowReporting)
                ) && 
                (
                    this.SendIcmpFragmentation == input.SendIcmpFragmentation ||
                    this.SendIcmpFragmentation.Equals(input.SendIcmpFragmentation)
                ) && 
                (
                    this.FragmentPackets == input.FragmentPackets ||
                    this.FragmentPackets.Equals(input.FragmentPackets)
                ) && 
                (
                    this.IgnoreDfBit == input.IgnoreDfBit ||
                    this.IgnoreDfBit.Equals(input.IgnoreDfBit)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FlowReporting.GetHashCode();
                hashCode = (hashCode * 59) + this.SendIcmpFragmentation.GetHashCode();
                hashCode = (hashCode * 59) + this.FragmentPackets.GetHashCode();
                hashCode = (hashCode * 59) + this.IgnoreDfBit.GetHashCode();
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
