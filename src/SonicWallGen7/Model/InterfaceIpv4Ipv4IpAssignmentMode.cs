/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;
using System.Reflection;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Interface IP assignment mode.
    /// </summary>
    [JsonConverter(typeof(InterfaceIpv4Ipv4IpAssignmentModeJsonConverter))]
    [DataContract(Name = "interface_ipv4_ipv4_ip_assignment_mode")]
    public partial class InterfaceIpv4Ipv4IpAssignmentMode : AbstractOpenAPISchema, IEquatable<InterfaceIpv4Ipv4IpAssignmentMode>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InterfaceIpv4Ipv4IpAssignmentMode" /> class
        /// with the <see cref="InterfaceIpv4IpAssignmentModeStatic" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of InterfaceIpv4IpAssignmentModeStatic.</param>
        public InterfaceIpv4Ipv4IpAssignmentMode(InterfaceIpv4IpAssignmentModeStatic actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InterfaceIpv4Ipv4IpAssignmentMode" /> class
        /// with the <see cref="InterfaceIpv4IpAssignmentModeDhcp" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of InterfaceIpv4IpAssignmentModeDhcp.</param>
        public InterfaceIpv4Ipv4IpAssignmentMode(InterfaceIpv4IpAssignmentModeDhcp actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InterfaceIpv4Ipv4IpAssignmentMode" /> class
        /// with the <see cref="InterfaceIpv4IpAssignmentModeTransparent" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of InterfaceIpv4IpAssignmentModeTransparent.</param>
        public InterfaceIpv4Ipv4IpAssignmentMode(InterfaceIpv4IpAssignmentModeTransparent actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InterfaceIpv4Ipv4IpAssignmentMode" /> class
        /// with the <see cref="InterfaceIpv4IpAssignmentModeWireMode" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of InterfaceIpv4IpAssignmentModeWireMode.</param>
        public InterfaceIpv4Ipv4IpAssignmentMode(InterfaceIpv4IpAssignmentModeWireMode actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InterfaceIpv4Ipv4IpAssignmentMode" /> class
        /// with the <see cref="InterfaceIpv4IpAssignmentModeTapMode" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of InterfaceIpv4IpAssignmentModeTapMode.</param>
        public InterfaceIpv4Ipv4IpAssignmentMode(InterfaceIpv4IpAssignmentModeTapMode actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InterfaceIpv4Ipv4IpAssignmentMode" /> class
        /// with the <see cref="InterfaceIpv4IpAssignmentModeUnnumbered" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of InterfaceIpv4IpAssignmentModeUnnumbered.</param>
        public InterfaceIpv4Ipv4IpAssignmentMode(InterfaceIpv4IpAssignmentModeUnnumbered actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InterfaceIpv4Ipv4IpAssignmentMode" /> class
        /// with the <see cref="InterfaceIpv4IpAssignmentModePppoe" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of InterfaceIpv4IpAssignmentModePppoe.</param>
        public InterfaceIpv4Ipv4IpAssignmentMode(InterfaceIpv4IpAssignmentModePppoe actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(InterfaceIpv4IpAssignmentModeDhcp))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(InterfaceIpv4IpAssignmentModePppoe))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(InterfaceIpv4IpAssignmentModeStatic))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(InterfaceIpv4IpAssignmentModeTapMode))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(InterfaceIpv4IpAssignmentModeTransparent))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(InterfaceIpv4IpAssignmentModeUnnumbered))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(InterfaceIpv4IpAssignmentModeWireMode))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: InterfaceIpv4IpAssignmentModeDhcp, InterfaceIpv4IpAssignmentModePppoe, InterfaceIpv4IpAssignmentModeStatic, InterfaceIpv4IpAssignmentModeTapMode, InterfaceIpv4IpAssignmentModeTransparent, InterfaceIpv4IpAssignmentModeUnnumbered, InterfaceIpv4IpAssignmentModeWireMode");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `InterfaceIpv4IpAssignmentModeStatic`. If the actual instance is not `InterfaceIpv4IpAssignmentModeStatic`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of InterfaceIpv4IpAssignmentModeStatic</returns>
        public InterfaceIpv4IpAssignmentModeStatic GetInterfaceIpv4IpAssignmentModeStatic()
        {
            return (InterfaceIpv4IpAssignmentModeStatic)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `InterfaceIpv4IpAssignmentModeDhcp`. If the actual instance is not `InterfaceIpv4IpAssignmentModeDhcp`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of InterfaceIpv4IpAssignmentModeDhcp</returns>
        public InterfaceIpv4IpAssignmentModeDhcp GetInterfaceIpv4IpAssignmentModeDhcp()
        {
            return (InterfaceIpv4IpAssignmentModeDhcp)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `InterfaceIpv4IpAssignmentModeTransparent`. If the actual instance is not `InterfaceIpv4IpAssignmentModeTransparent`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of InterfaceIpv4IpAssignmentModeTransparent</returns>
        public InterfaceIpv4IpAssignmentModeTransparent GetInterfaceIpv4IpAssignmentModeTransparent()
        {
            return (InterfaceIpv4IpAssignmentModeTransparent)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `InterfaceIpv4IpAssignmentModeWireMode`. If the actual instance is not `InterfaceIpv4IpAssignmentModeWireMode`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of InterfaceIpv4IpAssignmentModeWireMode</returns>
        public InterfaceIpv4IpAssignmentModeWireMode GetInterfaceIpv4IpAssignmentModeWireMode()
        {
            return (InterfaceIpv4IpAssignmentModeWireMode)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `InterfaceIpv4IpAssignmentModeTapMode`. If the actual instance is not `InterfaceIpv4IpAssignmentModeTapMode`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of InterfaceIpv4IpAssignmentModeTapMode</returns>
        public InterfaceIpv4IpAssignmentModeTapMode GetInterfaceIpv4IpAssignmentModeTapMode()
        {
            return (InterfaceIpv4IpAssignmentModeTapMode)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `InterfaceIpv4IpAssignmentModeUnnumbered`. If the actual instance is not `InterfaceIpv4IpAssignmentModeUnnumbered`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of InterfaceIpv4IpAssignmentModeUnnumbered</returns>
        public InterfaceIpv4IpAssignmentModeUnnumbered GetInterfaceIpv4IpAssignmentModeUnnumbered()
        {
            return (InterfaceIpv4IpAssignmentModeUnnumbered)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `InterfaceIpv4IpAssignmentModePppoe`. If the actual instance is not `InterfaceIpv4IpAssignmentModePppoe`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of InterfaceIpv4IpAssignmentModePppoe</returns>
        public InterfaceIpv4IpAssignmentModePppoe GetInterfaceIpv4IpAssignmentModePppoe()
        {
            return (InterfaceIpv4IpAssignmentModePppoe)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InterfaceIpv4Ipv4IpAssignmentMode {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, InterfaceIpv4Ipv4IpAssignmentMode.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of InterfaceIpv4Ipv4IpAssignmentMode
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of InterfaceIpv4Ipv4IpAssignmentMode</returns>
        public static InterfaceIpv4Ipv4IpAssignmentMode FromJson(string jsonString)
        {
            InterfaceIpv4Ipv4IpAssignmentMode newInterfaceIpv4Ipv4IpAssignmentMode = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newInterfaceIpv4Ipv4IpAssignmentMode;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(InterfaceIpv4IpAssignmentModeDhcp).GetProperty("AdditionalProperties") == null)
                {
                    newInterfaceIpv4Ipv4IpAssignmentMode = new InterfaceIpv4Ipv4IpAssignmentMode(JsonConvert.DeserializeObject<InterfaceIpv4IpAssignmentModeDhcp>(jsonString, InterfaceIpv4Ipv4IpAssignmentMode.SerializerSettings));
                }
                else
                {
                    newInterfaceIpv4Ipv4IpAssignmentMode = new InterfaceIpv4Ipv4IpAssignmentMode(JsonConvert.DeserializeObject<InterfaceIpv4IpAssignmentModeDhcp>(jsonString, InterfaceIpv4Ipv4IpAssignmentMode.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("InterfaceIpv4IpAssignmentModeDhcp");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into InterfaceIpv4IpAssignmentModeDhcp: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(InterfaceIpv4IpAssignmentModePppoe).GetProperty("AdditionalProperties") == null)
                {
                    newInterfaceIpv4Ipv4IpAssignmentMode = new InterfaceIpv4Ipv4IpAssignmentMode(JsonConvert.DeserializeObject<InterfaceIpv4IpAssignmentModePppoe>(jsonString, InterfaceIpv4Ipv4IpAssignmentMode.SerializerSettings));
                }
                else
                {
                    newInterfaceIpv4Ipv4IpAssignmentMode = new InterfaceIpv4Ipv4IpAssignmentMode(JsonConvert.DeserializeObject<InterfaceIpv4IpAssignmentModePppoe>(jsonString, InterfaceIpv4Ipv4IpAssignmentMode.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("InterfaceIpv4IpAssignmentModePppoe");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into InterfaceIpv4IpAssignmentModePppoe: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(InterfaceIpv4IpAssignmentModeStatic).GetProperty("AdditionalProperties") == null)
                {
                    newInterfaceIpv4Ipv4IpAssignmentMode = new InterfaceIpv4Ipv4IpAssignmentMode(JsonConvert.DeserializeObject<InterfaceIpv4IpAssignmentModeStatic>(jsonString, InterfaceIpv4Ipv4IpAssignmentMode.SerializerSettings));
                }
                else
                {
                    newInterfaceIpv4Ipv4IpAssignmentMode = new InterfaceIpv4Ipv4IpAssignmentMode(JsonConvert.DeserializeObject<InterfaceIpv4IpAssignmentModeStatic>(jsonString, InterfaceIpv4Ipv4IpAssignmentMode.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("InterfaceIpv4IpAssignmentModeStatic");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into InterfaceIpv4IpAssignmentModeStatic: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(InterfaceIpv4IpAssignmentModeTapMode).GetProperty("AdditionalProperties") == null)
                {
                    newInterfaceIpv4Ipv4IpAssignmentMode = new InterfaceIpv4Ipv4IpAssignmentMode(JsonConvert.DeserializeObject<InterfaceIpv4IpAssignmentModeTapMode>(jsonString, InterfaceIpv4Ipv4IpAssignmentMode.SerializerSettings));
                }
                else
                {
                    newInterfaceIpv4Ipv4IpAssignmentMode = new InterfaceIpv4Ipv4IpAssignmentMode(JsonConvert.DeserializeObject<InterfaceIpv4IpAssignmentModeTapMode>(jsonString, InterfaceIpv4Ipv4IpAssignmentMode.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("InterfaceIpv4IpAssignmentModeTapMode");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into InterfaceIpv4IpAssignmentModeTapMode: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(InterfaceIpv4IpAssignmentModeTransparent).GetProperty("AdditionalProperties") == null)
                {
                    newInterfaceIpv4Ipv4IpAssignmentMode = new InterfaceIpv4Ipv4IpAssignmentMode(JsonConvert.DeserializeObject<InterfaceIpv4IpAssignmentModeTransparent>(jsonString, InterfaceIpv4Ipv4IpAssignmentMode.SerializerSettings));
                }
                else
                {
                    newInterfaceIpv4Ipv4IpAssignmentMode = new InterfaceIpv4Ipv4IpAssignmentMode(JsonConvert.DeserializeObject<InterfaceIpv4IpAssignmentModeTransparent>(jsonString, InterfaceIpv4Ipv4IpAssignmentMode.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("InterfaceIpv4IpAssignmentModeTransparent");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into InterfaceIpv4IpAssignmentModeTransparent: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(InterfaceIpv4IpAssignmentModeUnnumbered).GetProperty("AdditionalProperties") == null)
                {
                    newInterfaceIpv4Ipv4IpAssignmentMode = new InterfaceIpv4Ipv4IpAssignmentMode(JsonConvert.DeserializeObject<InterfaceIpv4IpAssignmentModeUnnumbered>(jsonString, InterfaceIpv4Ipv4IpAssignmentMode.SerializerSettings));
                }
                else
                {
                    newInterfaceIpv4Ipv4IpAssignmentMode = new InterfaceIpv4Ipv4IpAssignmentMode(JsonConvert.DeserializeObject<InterfaceIpv4IpAssignmentModeUnnumbered>(jsonString, InterfaceIpv4Ipv4IpAssignmentMode.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("InterfaceIpv4IpAssignmentModeUnnumbered");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into InterfaceIpv4IpAssignmentModeUnnumbered: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(InterfaceIpv4IpAssignmentModeWireMode).GetProperty("AdditionalProperties") == null)
                {
                    newInterfaceIpv4Ipv4IpAssignmentMode = new InterfaceIpv4Ipv4IpAssignmentMode(JsonConvert.DeserializeObject<InterfaceIpv4IpAssignmentModeWireMode>(jsonString, InterfaceIpv4Ipv4IpAssignmentMode.SerializerSettings));
                }
                else
                {
                    newInterfaceIpv4Ipv4IpAssignmentMode = new InterfaceIpv4Ipv4IpAssignmentMode(JsonConvert.DeserializeObject<InterfaceIpv4IpAssignmentModeWireMode>(jsonString, InterfaceIpv4Ipv4IpAssignmentMode.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("InterfaceIpv4IpAssignmentModeWireMode");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into InterfaceIpv4IpAssignmentModeWireMode: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newInterfaceIpv4Ipv4IpAssignmentMode;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InterfaceIpv4Ipv4IpAssignmentMode);
        }

        /// <summary>
        /// Returns true if InterfaceIpv4Ipv4IpAssignmentMode instances are equal
        /// </summary>
        /// <param name="input">Instance of InterfaceIpv4Ipv4IpAssignmentMode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InterfaceIpv4Ipv4IpAssignmentMode input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for InterfaceIpv4Ipv4IpAssignmentMode
    /// </summary>
    public class InterfaceIpv4Ipv4IpAssignmentModeJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(InterfaceIpv4Ipv4IpAssignmentMode).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return InterfaceIpv4Ipv4IpAssignmentMode.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
