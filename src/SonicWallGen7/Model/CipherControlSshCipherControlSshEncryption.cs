/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enable ssh encryption algorithm.
    /// </summary>
    [DataContract(Name = "cipher_control_ssh_cipher_control_ssh_encryption")]
    public partial class CipherControlSshCipherControlSshEncryption : IEquatable<CipherControlSshCipherControlSshEncryption>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CipherControlSshCipherControlSshEncryption" /> class.
        /// </summary>
        /// <param name="aes128Ctr">Aes128-ctr..</param>
        /// <param name="aes192Ctr">Aes192-ctr..</param>
        /// <param name="aes256Ctr">Aes256-ctr..</param>
        /// <param name="aes128Gcm">Aes128-gcm@openssh.com..</param>
        /// <param name="aes256Gcm">Aes256-gcm@openssh.com..</param>
        /// <param name="chacha20Poly1305">Chacha20-poly1305@openssh.com..</param>
        public CipherControlSshCipherControlSshEncryption(bool aes128Ctr = default(bool), bool aes192Ctr = default(bool), bool aes256Ctr = default(bool), bool aes128Gcm = default(bool), bool aes256Gcm = default(bool), bool chacha20Poly1305 = default(bool))
        {
            this.Aes128Ctr = aes128Ctr;
            this.Aes192Ctr = aes192Ctr;
            this.Aes256Ctr = aes256Ctr;
            this.Aes128Gcm = aes128Gcm;
            this.Aes256Gcm = aes256Gcm;
            this.Chacha20Poly1305 = chacha20Poly1305;
        }

        /// <summary>
        /// Aes128-ctr.
        /// </summary>
        /// <value>Aes128-ctr.</value>
        [DataMember(Name = "aes128_ctr", EmitDefaultValue = true)]
        public bool Aes128Ctr { get; set; }

        /// <summary>
        /// Aes192-ctr.
        /// </summary>
        /// <value>Aes192-ctr.</value>
        [DataMember(Name = "aes192_ctr", EmitDefaultValue = true)]
        public bool Aes192Ctr { get; set; }

        /// <summary>
        /// Aes256-ctr.
        /// </summary>
        /// <value>Aes256-ctr.</value>
        [DataMember(Name = "aes256_ctr", EmitDefaultValue = true)]
        public bool Aes256Ctr { get; set; }

        /// <summary>
        /// Aes128-gcm@openssh.com.
        /// </summary>
        /// <value>Aes128-gcm@openssh.com.</value>
        [DataMember(Name = "aes128_gcm", EmitDefaultValue = true)]
        public bool Aes128Gcm { get; set; }

        /// <summary>
        /// Aes256-gcm@openssh.com.
        /// </summary>
        /// <value>Aes256-gcm@openssh.com.</value>
        [DataMember(Name = "aes256_gcm", EmitDefaultValue = true)]
        public bool Aes256Gcm { get; set; }

        /// <summary>
        /// Chacha20-poly1305@openssh.com.
        /// </summary>
        /// <value>Chacha20-poly1305@openssh.com.</value>
        [DataMember(Name = "chacha20_poly1305", EmitDefaultValue = true)]
        public bool Chacha20Poly1305 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CipherControlSshCipherControlSshEncryption {\n");
            sb.Append("  Aes128Ctr: ").Append(Aes128Ctr).Append("\n");
            sb.Append("  Aes192Ctr: ").Append(Aes192Ctr).Append("\n");
            sb.Append("  Aes256Ctr: ").Append(Aes256Ctr).Append("\n");
            sb.Append("  Aes128Gcm: ").Append(Aes128Gcm).Append("\n");
            sb.Append("  Aes256Gcm: ").Append(Aes256Gcm).Append("\n");
            sb.Append("  Chacha20Poly1305: ").Append(Chacha20Poly1305).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CipherControlSshCipherControlSshEncryption);
        }

        /// <summary>
        /// Returns true if CipherControlSshCipherControlSshEncryption instances are equal
        /// </summary>
        /// <param name="input">Instance of CipherControlSshCipherControlSshEncryption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CipherControlSshCipherControlSshEncryption input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Aes128Ctr == input.Aes128Ctr ||
                    this.Aes128Ctr.Equals(input.Aes128Ctr)
                ) && 
                (
                    this.Aes192Ctr == input.Aes192Ctr ||
                    this.Aes192Ctr.Equals(input.Aes192Ctr)
                ) && 
                (
                    this.Aes256Ctr == input.Aes256Ctr ||
                    this.Aes256Ctr.Equals(input.Aes256Ctr)
                ) && 
                (
                    this.Aes128Gcm == input.Aes128Gcm ||
                    this.Aes128Gcm.Equals(input.Aes128Gcm)
                ) && 
                (
                    this.Aes256Gcm == input.Aes256Gcm ||
                    this.Aes256Gcm.Equals(input.Aes256Gcm)
                ) && 
                (
                    this.Chacha20Poly1305 == input.Chacha20Poly1305 ||
                    this.Chacha20Poly1305.Equals(input.Chacha20Poly1305)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Aes128Ctr.GetHashCode();
                hashCode = (hashCode * 59) + this.Aes192Ctr.GetHashCode();
                hashCode = (hashCode * 59) + this.Aes256Ctr.GetHashCode();
                hashCode = (hashCode * 59) + this.Aes128Gcm.GetHashCode();
                hashCode = (hashCode * 59) + this.Aes256Gcm.GetHashCode();
                hashCode = (hashCode * 59) + this.Chacha20Poly1305.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
