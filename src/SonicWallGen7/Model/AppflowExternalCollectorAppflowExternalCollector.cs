/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enter external collector configuration mode.
    /// </summary>
    [DataContract(Name = "appflow_external_collector_appflow_external_collector")]
    public partial class AppflowExternalCollectorAppflowExternalCollector : IEquatable<AppflowExternalCollectorAppflowExternalCollector>, IValidatableObject
    {
        /// <summary>
        /// Set the external appflow reporting format.
        /// </summary>
        /// <value>Set the external appflow reporting format.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReportingFormatEnum
        {
            /// <summary>
            /// Enum Netflow5 for value: netflow-5
            /// </summary>
            [EnumMember(Value = "netflow-5")]
            Netflow5 = 1,

            /// <summary>
            /// Enum Netflow9 for value: netflow-9
            /// </summary>
            [EnumMember(Value = "netflow-9")]
            Netflow9 = 2,

            /// <summary>
            /// Enum Ipfix for value: ipfix
            /// </summary>
            [EnumMember(Value = "ipfix")]
            Ipfix = 3,

            /// <summary>
            /// Enum IpfixWithExtensions for value: ipfix-with-extensions
            /// </summary>
            [EnumMember(Value = "ipfix-with-extensions")]
            IpfixWithExtensions = 4
        }


        /// <summary>
        /// Set the external appflow reporting format.
        /// </summary>
        /// <value>Set the external appflow reporting format.</value>
        [DataMember(Name = "reporting_format", EmitDefaultValue = false)]
        public ReportingFormatEnum? ReportingFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppflowExternalCollectorAppflowExternalCollector" /> class.
        /// </summary>
        /// <param name="flows">Enable sending appflow and real-time data to external collector..</param>
        /// <param name="reportingFormat">Set the external appflow reporting format..</param>
        /// <param name="server">server.</param>
        /// <param name="vpnSourceIp">vpnSourceIp.</param>
        /// <param name="port">Set external collector UDP port number..</param>
        /// <param name="send">send.</param>
        /// <param name="staticFlows">staticFlows.</param>
        /// <param name="dynamicFlows">dynamicFlows.</param>
        /// <param name="ipfixReports">ipfixReports.</param>
        /// <param name="report">report.</param>
        public AppflowExternalCollectorAppflowExternalCollector(bool flows = default(bool), ReportingFormatEnum? reportingFormat = default(ReportingFormatEnum?), AppflowExternalCollectorAppflowExternalCollectorServer server = default(AppflowExternalCollectorAppflowExternalCollectorServer), AppflowExternalCollectorAppflowExternalCollectorVpnSourceIp vpnSourceIp = default(AppflowExternalCollectorAppflowExternalCollectorVpnSourceIp), decimal port = default(decimal), AppflowExternalCollectorAppflowExternalCollectorSend send = default(AppflowExternalCollectorAppflowExternalCollectorSend), AppflowExternalCollectorAppflowExternalCollectorStaticFlows staticFlows = default(AppflowExternalCollectorAppflowExternalCollectorStaticFlows), AppflowExternalCollectorAppflowExternalCollectorDynamicFlows dynamicFlows = default(AppflowExternalCollectorAppflowExternalCollectorDynamicFlows), AppflowExternalCollectorAppflowExternalCollectorIpfixReports ipfixReports = default(AppflowExternalCollectorAppflowExternalCollectorIpfixReports), AppflowExternalCollectorAppflowExternalCollectorReport report = default(AppflowExternalCollectorAppflowExternalCollectorReport))
        {
            this.Flows = flows;
            this.ReportingFormat = reportingFormat;
            this.Server = server;
            this.VpnSourceIp = vpnSourceIp;
            this.Port = port;
            this.Send = send;
            this.StaticFlows = staticFlows;
            this.DynamicFlows = dynamicFlows;
            this.IpfixReports = ipfixReports;
            this.Report = report;
        }

        /// <summary>
        /// Enable sending appflow and real-time data to external collector.
        /// </summary>
        /// <value>Enable sending appflow and real-time data to external collector.</value>
        [DataMember(Name = "flows", EmitDefaultValue = true)]
        public bool Flows { get; set; }

        /// <summary>
        /// Gets or Sets Server
        /// </summary>
        [DataMember(Name = "server", EmitDefaultValue = false)]
        public AppflowExternalCollectorAppflowExternalCollectorServer Server { get; set; }

        /// <summary>
        /// Gets or Sets VpnSourceIp
        /// </summary>
        [DataMember(Name = "vpn_source_ip", EmitDefaultValue = true)]
        public AppflowExternalCollectorAppflowExternalCollectorVpnSourceIp VpnSourceIp { get; set; }

        /// <summary>
        /// Set external collector UDP port number.
        /// </summary>
        /// <value>Set external collector UDP port number.</value>
        [DataMember(Name = "port", EmitDefaultValue = false)]
        public decimal Port { get; set; }

        /// <summary>
        /// Gets or Sets Send
        /// </summary>
        [DataMember(Name = "send", EmitDefaultValue = false)]
        public AppflowExternalCollectorAppflowExternalCollectorSend Send { get; set; }

        /// <summary>
        /// Gets or Sets StaticFlows
        /// </summary>
        [DataMember(Name = "static_flows", EmitDefaultValue = false)]
        public AppflowExternalCollectorAppflowExternalCollectorStaticFlows StaticFlows { get; set; }

        /// <summary>
        /// Gets or Sets DynamicFlows
        /// </summary>
        [DataMember(Name = "dynamic_flows", EmitDefaultValue = false)]
        public AppflowExternalCollectorAppflowExternalCollectorDynamicFlows DynamicFlows { get; set; }

        /// <summary>
        /// Gets or Sets IpfixReports
        /// </summary>
        [DataMember(Name = "ipfix_reports", EmitDefaultValue = false)]
        public AppflowExternalCollectorAppflowExternalCollectorIpfixReports IpfixReports { get; set; }

        /// <summary>
        /// Gets or Sets Report
        /// </summary>
        [DataMember(Name = "report", EmitDefaultValue = false)]
        public AppflowExternalCollectorAppflowExternalCollectorReport Report { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppflowExternalCollectorAppflowExternalCollector {\n");
            sb.Append("  Flows: ").Append(Flows).Append("\n");
            sb.Append("  ReportingFormat: ").Append(ReportingFormat).Append("\n");
            sb.Append("  Server: ").Append(Server).Append("\n");
            sb.Append("  VpnSourceIp: ").Append(VpnSourceIp).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  Send: ").Append(Send).Append("\n");
            sb.Append("  StaticFlows: ").Append(StaticFlows).Append("\n");
            sb.Append("  DynamicFlows: ").Append(DynamicFlows).Append("\n");
            sb.Append("  IpfixReports: ").Append(IpfixReports).Append("\n");
            sb.Append("  Report: ").Append(Report).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppflowExternalCollectorAppflowExternalCollector);
        }

        /// <summary>
        /// Returns true if AppflowExternalCollectorAppflowExternalCollector instances are equal
        /// </summary>
        /// <param name="input">Instance of AppflowExternalCollectorAppflowExternalCollector to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppflowExternalCollectorAppflowExternalCollector input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Flows == input.Flows ||
                    this.Flows.Equals(input.Flows)
                ) && 
                (
                    this.ReportingFormat == input.ReportingFormat ||
                    this.ReportingFormat.Equals(input.ReportingFormat)
                ) && 
                (
                    this.Server == input.Server ||
                    (this.Server != null &&
                    this.Server.Equals(input.Server))
                ) && 
                (
                    this.VpnSourceIp == input.VpnSourceIp ||
                    (this.VpnSourceIp != null &&
                    this.VpnSourceIp.Equals(input.VpnSourceIp))
                ) && 
                (
                    this.Port == input.Port ||
                    this.Port.Equals(input.Port)
                ) && 
                (
                    this.Send == input.Send ||
                    (this.Send != null &&
                    this.Send.Equals(input.Send))
                ) && 
                (
                    this.StaticFlows == input.StaticFlows ||
                    (this.StaticFlows != null &&
                    this.StaticFlows.Equals(input.StaticFlows))
                ) && 
                (
                    this.DynamicFlows == input.DynamicFlows ||
                    (this.DynamicFlows != null &&
                    this.DynamicFlows.Equals(input.DynamicFlows))
                ) && 
                (
                    this.IpfixReports == input.IpfixReports ||
                    (this.IpfixReports != null &&
                    this.IpfixReports.Equals(input.IpfixReports))
                ) && 
                (
                    this.Report == input.Report ||
                    (this.Report != null &&
                    this.Report.Equals(input.Report))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Flows.GetHashCode();
                hashCode = (hashCode * 59) + this.ReportingFormat.GetHashCode();
                if (this.Server != null)
                {
                    hashCode = (hashCode * 59) + this.Server.GetHashCode();
                }
                if (this.VpnSourceIp != null)
                {
                    hashCode = (hashCode * 59) + this.VpnSourceIp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Port.GetHashCode();
                if (this.Send != null)
                {
                    hashCode = (hashCode * 59) + this.Send.GetHashCode();
                }
                if (this.StaticFlows != null)
                {
                    hashCode = (hashCode * 59) + this.StaticFlows.GetHashCode();
                }
                if (this.DynamicFlows != null)
                {
                    hashCode = (hashCode * 59) + this.DynamicFlows.GetHashCode();
                }
                if (this.IpfixReports != null)
                {
                    hashCode = (hashCode * 59) + this.IpfixReports.GetHashCode();
                }
                if (this.Report != null)
                {
                    hashCode = (hashCode * 59) + this.Report.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
