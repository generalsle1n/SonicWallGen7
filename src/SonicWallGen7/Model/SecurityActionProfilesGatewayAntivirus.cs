/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enter security policy gateway anti-Virus configuration mod.
    /// </summary>
    [DataContract(Name = "security_action_profiles_gateway_antivirus")]
    public partial class SecurityActionProfilesGatewayAntivirus : IEquatable<SecurityActionProfilesGatewayAntivirus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityActionProfilesGatewayAntivirus" /> class.
        /// </summary>
        /// <param name="enable">Enable gateway anti-virus..</param>
        /// <param name="cloud">Enable cloud gateway anti-virus database..</param>
        /// <param name="inbound">Enable inbound inspection..</param>
        /// <param name="outbound">Enable outbound inspection for the specified protocols..</param>
        /// <param name="prevent">Disable prevention..</param>
        /// <param name="packetMonitor">Enable packet monitor..</param>
        /// <param name="log">Enable log..</param>
        /// <param name="passwordProtectedZip">Disable restricting transfer of password-protected ZIP files..</param>
        /// <param name="msOfficeMacros">Disable restricting transfer of MS-Office type files containing macros (VBA 5 and above)..</param>
        /// <param name="packedExecutables">Disable restricting transfer of packed executable files (UPX, FSG, etc.)..</param>
        /// <param name="smtpResponses">Enable SMTP responses..</param>
        /// <param name="eicarDetection">Enable detection of EICAR test virus..</param>
        /// <param name="httpByteRange">Enable HTTP Byte-Range requests with Gateway AV..</param>
        /// <param name="ftpRest">Enable FTP &#39;REST&#39; requests with Gateway AV..</param>
        /// <param name="scanHighCompression">Scan parts of files with high compression ratios..</param>
        public SecurityActionProfilesGatewayAntivirus(bool enable = default(bool), bool cloud = default(bool), bool inbound = default(bool), bool outbound = default(bool), bool prevent = default(bool), bool packetMonitor = default(bool), bool log = default(bool), bool passwordProtectedZip = default(bool), bool msOfficeMacros = default(bool), bool packedExecutables = default(bool), bool smtpResponses = default(bool), bool eicarDetection = default(bool), bool httpByteRange = default(bool), bool ftpRest = default(bool), bool scanHighCompression = default(bool))
        {
            this.Enable = enable;
            this.Cloud = cloud;
            this.Inbound = inbound;
            this.Outbound = outbound;
            this.Prevent = prevent;
            this.PacketMonitor = packetMonitor;
            this.Log = log;
            this.PasswordProtectedZip = passwordProtectedZip;
            this.MsOfficeMacros = msOfficeMacros;
            this.PackedExecutables = packedExecutables;
            this.SmtpResponses = smtpResponses;
            this.EicarDetection = eicarDetection;
            this.HttpByteRange = httpByteRange;
            this.FtpRest = ftpRest;
            this.ScanHighCompression = scanHighCompression;
        }

        /// <summary>
        /// Enable gateway anti-virus.
        /// </summary>
        /// <value>Enable gateway anti-virus.</value>
        [DataMember(Name = "enable", EmitDefaultValue = true)]
        public bool Enable { get; set; }

        /// <summary>
        /// Enable cloud gateway anti-virus database.
        /// </summary>
        /// <value>Enable cloud gateway anti-virus database.</value>
        [DataMember(Name = "cloud", EmitDefaultValue = true)]
        public bool Cloud { get; set; }

        /// <summary>
        /// Enable inbound inspection.
        /// </summary>
        /// <value>Enable inbound inspection.</value>
        [DataMember(Name = "inbound", EmitDefaultValue = true)]
        public bool Inbound { get; set; }

        /// <summary>
        /// Enable outbound inspection for the specified protocols.
        /// </summary>
        /// <value>Enable outbound inspection for the specified protocols.</value>
        [DataMember(Name = "outbound", EmitDefaultValue = true)]
        public bool Outbound { get; set; }

        /// <summary>
        /// Disable prevention.
        /// </summary>
        /// <value>Disable prevention.</value>
        [DataMember(Name = "prevent", EmitDefaultValue = true)]
        public bool Prevent { get; set; }

        /// <summary>
        /// Enable packet monitor.
        /// </summary>
        /// <value>Enable packet monitor.</value>
        [DataMember(Name = "packet_monitor", EmitDefaultValue = true)]
        public bool PacketMonitor { get; set; }

        /// <summary>
        /// Enable log.
        /// </summary>
        /// <value>Enable log.</value>
        [DataMember(Name = "log", EmitDefaultValue = true)]
        public bool Log { get; set; }

        /// <summary>
        /// Disable restricting transfer of password-protected ZIP files.
        /// </summary>
        /// <value>Disable restricting transfer of password-protected ZIP files.</value>
        [DataMember(Name = "password_protected_zip", EmitDefaultValue = true)]
        public bool PasswordProtectedZip { get; set; }

        /// <summary>
        /// Disable restricting transfer of MS-Office type files containing macros (VBA 5 and above).
        /// </summary>
        /// <value>Disable restricting transfer of MS-Office type files containing macros (VBA 5 and above).</value>
        [DataMember(Name = "ms_office_macros", EmitDefaultValue = true)]
        public bool MsOfficeMacros { get; set; }

        /// <summary>
        /// Disable restricting transfer of packed executable files (UPX, FSG, etc.).
        /// </summary>
        /// <value>Disable restricting transfer of packed executable files (UPX, FSG, etc.).</value>
        [DataMember(Name = "packed_executables", EmitDefaultValue = true)]
        public bool PackedExecutables { get; set; }

        /// <summary>
        /// Enable SMTP responses.
        /// </summary>
        /// <value>Enable SMTP responses.</value>
        [DataMember(Name = "smtp_responses", EmitDefaultValue = true)]
        public bool SmtpResponses { get; set; }

        /// <summary>
        /// Enable detection of EICAR test virus.
        /// </summary>
        /// <value>Enable detection of EICAR test virus.</value>
        [DataMember(Name = "eicar_detection", EmitDefaultValue = true)]
        public bool EicarDetection { get; set; }

        /// <summary>
        /// Enable HTTP Byte-Range requests with Gateway AV.
        /// </summary>
        /// <value>Enable HTTP Byte-Range requests with Gateway AV.</value>
        [DataMember(Name = "http_byte_range", EmitDefaultValue = true)]
        public bool HttpByteRange { get; set; }

        /// <summary>
        /// Enable FTP &#39;REST&#39; requests with Gateway AV.
        /// </summary>
        /// <value>Enable FTP &#39;REST&#39; requests with Gateway AV.</value>
        [DataMember(Name = "ftp_rest", EmitDefaultValue = true)]
        public bool FtpRest { get; set; }

        /// <summary>
        /// Scan parts of files with high compression ratios.
        /// </summary>
        /// <value>Scan parts of files with high compression ratios.</value>
        [DataMember(Name = "scan_high_compression", EmitDefaultValue = true)]
        public bool ScanHighCompression { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SecurityActionProfilesGatewayAntivirus {\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  Cloud: ").Append(Cloud).Append("\n");
            sb.Append("  Inbound: ").Append(Inbound).Append("\n");
            sb.Append("  Outbound: ").Append(Outbound).Append("\n");
            sb.Append("  Prevent: ").Append(Prevent).Append("\n");
            sb.Append("  PacketMonitor: ").Append(PacketMonitor).Append("\n");
            sb.Append("  Log: ").Append(Log).Append("\n");
            sb.Append("  PasswordProtectedZip: ").Append(PasswordProtectedZip).Append("\n");
            sb.Append("  MsOfficeMacros: ").Append(MsOfficeMacros).Append("\n");
            sb.Append("  PackedExecutables: ").Append(PackedExecutables).Append("\n");
            sb.Append("  SmtpResponses: ").Append(SmtpResponses).Append("\n");
            sb.Append("  EicarDetection: ").Append(EicarDetection).Append("\n");
            sb.Append("  HttpByteRange: ").Append(HttpByteRange).Append("\n");
            sb.Append("  FtpRest: ").Append(FtpRest).Append("\n");
            sb.Append("  ScanHighCompression: ").Append(ScanHighCompression).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecurityActionProfilesGatewayAntivirus);
        }

        /// <summary>
        /// Returns true if SecurityActionProfilesGatewayAntivirus instances are equal
        /// </summary>
        /// <param name="input">Instance of SecurityActionProfilesGatewayAntivirus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecurityActionProfilesGatewayAntivirus input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.Cloud == input.Cloud ||
                    this.Cloud.Equals(input.Cloud)
                ) && 
                (
                    this.Inbound == input.Inbound ||
                    this.Inbound.Equals(input.Inbound)
                ) && 
                (
                    this.Outbound == input.Outbound ||
                    this.Outbound.Equals(input.Outbound)
                ) && 
                (
                    this.Prevent == input.Prevent ||
                    this.Prevent.Equals(input.Prevent)
                ) && 
                (
                    this.PacketMonitor == input.PacketMonitor ||
                    this.PacketMonitor.Equals(input.PacketMonitor)
                ) && 
                (
                    this.Log == input.Log ||
                    this.Log.Equals(input.Log)
                ) && 
                (
                    this.PasswordProtectedZip == input.PasswordProtectedZip ||
                    this.PasswordProtectedZip.Equals(input.PasswordProtectedZip)
                ) && 
                (
                    this.MsOfficeMacros == input.MsOfficeMacros ||
                    this.MsOfficeMacros.Equals(input.MsOfficeMacros)
                ) && 
                (
                    this.PackedExecutables == input.PackedExecutables ||
                    this.PackedExecutables.Equals(input.PackedExecutables)
                ) && 
                (
                    this.SmtpResponses == input.SmtpResponses ||
                    this.SmtpResponses.Equals(input.SmtpResponses)
                ) && 
                (
                    this.EicarDetection == input.EicarDetection ||
                    this.EicarDetection.Equals(input.EicarDetection)
                ) && 
                (
                    this.HttpByteRange == input.HttpByteRange ||
                    this.HttpByteRange.Equals(input.HttpByteRange)
                ) && 
                (
                    this.FtpRest == input.FtpRest ||
                    this.FtpRest.Equals(input.FtpRest)
                ) && 
                (
                    this.ScanHighCompression == input.ScanHighCompression ||
                    this.ScanHighCompression.Equals(input.ScanHighCompression)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Enable.GetHashCode();
                hashCode = (hashCode * 59) + this.Cloud.GetHashCode();
                hashCode = (hashCode * 59) + this.Inbound.GetHashCode();
                hashCode = (hashCode * 59) + this.Outbound.GetHashCode();
                hashCode = (hashCode * 59) + this.Prevent.GetHashCode();
                hashCode = (hashCode * 59) + this.PacketMonitor.GetHashCode();
                hashCode = (hashCode * 59) + this.Log.GetHashCode();
                hashCode = (hashCode * 59) + this.PasswordProtectedZip.GetHashCode();
                hashCode = (hashCode * 59) + this.MsOfficeMacros.GetHashCode();
                hashCode = (hashCode * 59) + this.PackedExecutables.GetHashCode();
                hashCode = (hashCode * 59) + this.SmtpResponses.GetHashCode();
                hashCode = (hashCode * 59) + this.EicarDetection.GetHashCode();
                hashCode = (hashCode * 59) + this.HttpByteRange.GetHashCode();
                hashCode = (hashCode * 59) + this.FtpRest.GetHashCode();
                hashCode = (hashCode * 59) + this.ScanHighCompression.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
