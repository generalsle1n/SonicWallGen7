/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure packet monitor settings.
    /// </summary>
    [DataContract(Name = "packet_monitor_packet_monitor")]
    public partial class PacketMonitorPacketMonitor : IEquatable<PacketMonitorPacketMonitor>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PacketMonitorPacketMonitor" /> class.
        /// </summary>
        /// <param name="bytesToCapture">Specify number of bytes to capture (per packet)..</param>
        /// <param name="wrapBuffer">Enable wrapping of capture buffer once full..</param>
        /// <param name="exclude">exclude.</param>
        /// <param name="monitorFilter">monitorFilter.</param>
        /// <param name="displayFilter">displayFilter.</param>
        /// <param name="ftp">ftp.</param>
        /// <param name="mirror">mirror.</param>
        public PacketMonitorPacketMonitor(decimal bytesToCapture = default(decimal), bool wrapBuffer = default(bool), PacketMonitorPacketMonitorExclude exclude = default(PacketMonitorPacketMonitorExclude), PacketMonitorPacketMonitorMonitorFilter monitorFilter = default(PacketMonitorPacketMonitorMonitorFilter), PacketMonitorPacketMonitorDisplayFilter displayFilter = default(PacketMonitorPacketMonitorDisplayFilter), PacketMonitorPacketMonitorFtp ftp = default(PacketMonitorPacketMonitorFtp), PacketMonitorPacketMonitorMirror mirror = default(PacketMonitorPacketMonitorMirror))
        {
            this.BytesToCapture = bytesToCapture;
            this.WrapBuffer = wrapBuffer;
            this.Exclude = exclude;
            this.MonitorFilter = monitorFilter;
            this.DisplayFilter = displayFilter;
            this.Ftp = ftp;
            this.Mirror = mirror;
        }

        /// <summary>
        /// Specify number of bytes to capture (per packet).
        /// </summary>
        /// <value>Specify number of bytes to capture (per packet).</value>
        [DataMember(Name = "bytes_to_capture", EmitDefaultValue = false)]
        public decimal BytesToCapture { get; set; }

        /// <summary>
        /// Enable wrapping of capture buffer once full.
        /// </summary>
        /// <value>Enable wrapping of capture buffer once full.</value>
        [DataMember(Name = "wrap_buffer", EmitDefaultValue = true)]
        public bool WrapBuffer { get; set; }

        /// <summary>
        /// Gets or Sets Exclude
        /// </summary>
        [DataMember(Name = "exclude", EmitDefaultValue = false)]
        public PacketMonitorPacketMonitorExclude Exclude { get; set; }

        /// <summary>
        /// Gets or Sets MonitorFilter
        /// </summary>
        [DataMember(Name = "monitor_filter", EmitDefaultValue = false)]
        public PacketMonitorPacketMonitorMonitorFilter MonitorFilter { get; set; }

        /// <summary>
        /// Gets or Sets DisplayFilter
        /// </summary>
        [DataMember(Name = "display_filter", EmitDefaultValue = false)]
        public PacketMonitorPacketMonitorDisplayFilter DisplayFilter { get; set; }

        /// <summary>
        /// Gets or Sets Ftp
        /// </summary>
        [DataMember(Name = "ftp", EmitDefaultValue = false)]
        public PacketMonitorPacketMonitorFtp Ftp { get; set; }

        /// <summary>
        /// Gets or Sets Mirror
        /// </summary>
        [DataMember(Name = "mirror", EmitDefaultValue = false)]
        public PacketMonitorPacketMonitorMirror Mirror { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PacketMonitorPacketMonitor {\n");
            sb.Append("  BytesToCapture: ").Append(BytesToCapture).Append("\n");
            sb.Append("  WrapBuffer: ").Append(WrapBuffer).Append("\n");
            sb.Append("  Exclude: ").Append(Exclude).Append("\n");
            sb.Append("  MonitorFilter: ").Append(MonitorFilter).Append("\n");
            sb.Append("  DisplayFilter: ").Append(DisplayFilter).Append("\n");
            sb.Append("  Ftp: ").Append(Ftp).Append("\n");
            sb.Append("  Mirror: ").Append(Mirror).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PacketMonitorPacketMonitor);
        }

        /// <summary>
        /// Returns true if PacketMonitorPacketMonitor instances are equal
        /// </summary>
        /// <param name="input">Instance of PacketMonitorPacketMonitor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PacketMonitorPacketMonitor input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BytesToCapture == input.BytesToCapture ||
                    this.BytesToCapture.Equals(input.BytesToCapture)
                ) && 
                (
                    this.WrapBuffer == input.WrapBuffer ||
                    this.WrapBuffer.Equals(input.WrapBuffer)
                ) && 
                (
                    this.Exclude == input.Exclude ||
                    (this.Exclude != null &&
                    this.Exclude.Equals(input.Exclude))
                ) && 
                (
                    this.MonitorFilter == input.MonitorFilter ||
                    (this.MonitorFilter != null &&
                    this.MonitorFilter.Equals(input.MonitorFilter))
                ) && 
                (
                    this.DisplayFilter == input.DisplayFilter ||
                    (this.DisplayFilter != null &&
                    this.DisplayFilter.Equals(input.DisplayFilter))
                ) && 
                (
                    this.Ftp == input.Ftp ||
                    (this.Ftp != null &&
                    this.Ftp.Equals(input.Ftp))
                ) && 
                (
                    this.Mirror == input.Mirror ||
                    (this.Mirror != null &&
                    this.Mirror.Equals(input.Mirror))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.BytesToCapture.GetHashCode();
                hashCode = (hashCode * 59) + this.WrapBuffer.GetHashCode();
                if (this.Exclude != null)
                {
                    hashCode = (hashCode * 59) + this.Exclude.GetHashCode();
                }
                if (this.MonitorFilter != null)
                {
                    hashCode = (hashCode * 59) + this.MonitorFilter.GetHashCode();
                }
                if (this.DisplayFilter != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayFilter.GetHashCode();
                }
                if (this.Ftp != null)
                {
                    hashCode = (hashCode * 59) + this.Ftp.GetHashCode();
                }
                if (this.Mirror != null)
                {
                    hashCode = (hashCode * 59) + this.Mirror.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
