/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// gms flow server detail schema.
    /// </summary>
    [DataContract(Name = "show_status_gms_flow_server_detail")]
    public partial class ShowStatusGmsFlowServerDetail : IEquatable<ShowStatusGmsFlowServerDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusGmsFlowServerDetail" /> class.
        /// </summary>
        /// <param name="hostName">hostName.</param>
        /// <param name="varVersion">varVersion.</param>
        /// <param name="revision">revision.</param>
        /// <param name="connectionStatus">connectionStatus.</param>
        /// <param name="registrationStatus">registrationStatus.</param>
        /// <param name="memoryPoolSize">memoryPoolSize.</param>
        /// <param name="dumpPeriod">dumpPeriod.</param>
        /// <param name="serialExists">serialExists.</param>
        /// <param name="maxDb">maxDb.</param>
        /// <param name="serialCount">serialCount.</param>
        /// <param name="lastSeen">lastSeen.</param>
        /// <param name="lastConfig">lastConfig.</param>
        /// <param name="gmsserverStartTime">gmsserverStartTime.</param>
        /// <param name="recordRate">recordRate.</param>
        /// <param name="packetRate">packetRate.</param>
        /// <param name="maxDbFiles">maxDbFiles.</param>
        /// <param name="currentDbFiles">currentDbFiles.</param>
        public ShowStatusGmsFlowServerDetail(string hostName = default(string), string varVersion = default(string), string revision = default(string), string connectionStatus = default(string), string registrationStatus = default(string), string memoryPoolSize = default(string), string dumpPeriod = default(string), string serialExists = default(string), string maxDb = default(string), string serialCount = default(string), string lastSeen = default(string), string lastConfig = default(string), string gmsserverStartTime = default(string), string recordRate = default(string), string packetRate = default(string), string maxDbFiles = default(string), string currentDbFiles = default(string))
        {
            this.HostName = hostName;
            this.VarVersion = varVersion;
            this.Revision = revision;
            this.ConnectionStatus = connectionStatus;
            this.RegistrationStatus = registrationStatus;
            this.MemoryPoolSize = memoryPoolSize;
            this.DumpPeriod = dumpPeriod;
            this.SerialExists = serialExists;
            this.MaxDb = maxDb;
            this.SerialCount = serialCount;
            this.LastSeen = lastSeen;
            this.LastConfig = lastConfig;
            this.GmsserverStartTime = gmsserverStartTime;
            this.RecordRate = recordRate;
            this.PacketRate = packetRate;
            this.MaxDbFiles = maxDbFiles;
            this.CurrentDbFiles = currentDbFiles;
        }

        /// <summary>
        /// Gets or Sets HostName
        /// </summary>
        [DataMember(Name = "host_name", EmitDefaultValue = false)]
        public string HostName { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets Revision
        /// </summary>
        [DataMember(Name = "revision", EmitDefaultValue = false)]
        public string Revision { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionStatus
        /// </summary>
        [DataMember(Name = "connection_status", EmitDefaultValue = false)]
        public string ConnectionStatus { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationStatus
        /// </summary>
        [DataMember(Name = "registration_status", EmitDefaultValue = false)]
        public string RegistrationStatus { get; set; }

        /// <summary>
        /// Gets or Sets MemoryPoolSize
        /// </summary>
        [DataMember(Name = "memory_pool_size", EmitDefaultValue = false)]
        public string MemoryPoolSize { get; set; }

        /// <summary>
        /// Gets or Sets DumpPeriod
        /// </summary>
        [DataMember(Name = "dump_period", EmitDefaultValue = false)]
        public string DumpPeriod { get; set; }

        /// <summary>
        /// Gets or Sets SerialExists
        /// </summary>
        [DataMember(Name = "serial_exists", EmitDefaultValue = false)]
        public string SerialExists { get; set; }

        /// <summary>
        /// Gets or Sets MaxDb
        /// </summary>
        [DataMember(Name = "max_db", EmitDefaultValue = false)]
        public string MaxDb { get; set; }

        /// <summary>
        /// Gets or Sets SerialCount
        /// </summary>
        [DataMember(Name = "serial_count", EmitDefaultValue = false)]
        public string SerialCount { get; set; }

        /// <summary>
        /// Gets or Sets LastSeen
        /// </summary>
        [DataMember(Name = "last_seen", EmitDefaultValue = false)]
        public string LastSeen { get; set; }

        /// <summary>
        /// Gets or Sets LastConfig
        /// </summary>
        [DataMember(Name = "last_config", EmitDefaultValue = false)]
        public string LastConfig { get; set; }

        /// <summary>
        /// Gets or Sets GmsserverStartTime
        /// </summary>
        [DataMember(Name = "gmsserver_start_time", EmitDefaultValue = false)]
        public string GmsserverStartTime { get; set; }

        /// <summary>
        /// Gets or Sets RecordRate
        /// </summary>
        [DataMember(Name = "record_rate", EmitDefaultValue = false)]
        public string RecordRate { get; set; }

        /// <summary>
        /// Gets or Sets PacketRate
        /// </summary>
        [DataMember(Name = "packet_rate", EmitDefaultValue = false)]
        public string PacketRate { get; set; }

        /// <summary>
        /// Gets or Sets MaxDbFiles
        /// </summary>
        [DataMember(Name = "max_db_files", EmitDefaultValue = false)]
        public string MaxDbFiles { get; set; }

        /// <summary>
        /// Gets or Sets CurrentDbFiles
        /// </summary>
        [DataMember(Name = "current_db_files", EmitDefaultValue = false)]
        public string CurrentDbFiles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusGmsFlowServerDetail {\n");
            sb.Append("  HostName: ").Append(HostName).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  ConnectionStatus: ").Append(ConnectionStatus).Append("\n");
            sb.Append("  RegistrationStatus: ").Append(RegistrationStatus).Append("\n");
            sb.Append("  MemoryPoolSize: ").Append(MemoryPoolSize).Append("\n");
            sb.Append("  DumpPeriod: ").Append(DumpPeriod).Append("\n");
            sb.Append("  SerialExists: ").Append(SerialExists).Append("\n");
            sb.Append("  MaxDb: ").Append(MaxDb).Append("\n");
            sb.Append("  SerialCount: ").Append(SerialCount).Append("\n");
            sb.Append("  LastSeen: ").Append(LastSeen).Append("\n");
            sb.Append("  LastConfig: ").Append(LastConfig).Append("\n");
            sb.Append("  GmsserverStartTime: ").Append(GmsserverStartTime).Append("\n");
            sb.Append("  RecordRate: ").Append(RecordRate).Append("\n");
            sb.Append("  PacketRate: ").Append(PacketRate).Append("\n");
            sb.Append("  MaxDbFiles: ").Append(MaxDbFiles).Append("\n");
            sb.Append("  CurrentDbFiles: ").Append(CurrentDbFiles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusGmsFlowServerDetail);
        }

        /// <summary>
        /// Returns true if ShowStatusGmsFlowServerDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusGmsFlowServerDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusGmsFlowServerDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.HostName == input.HostName ||
                    (this.HostName != null &&
                    this.HostName.Equals(input.HostName))
                ) && 
                (
                    this.VarVersion == input.VarVersion ||
                    (this.VarVersion != null &&
                    this.VarVersion.Equals(input.VarVersion))
                ) && 
                (
                    this.Revision == input.Revision ||
                    (this.Revision != null &&
                    this.Revision.Equals(input.Revision))
                ) && 
                (
                    this.ConnectionStatus == input.ConnectionStatus ||
                    (this.ConnectionStatus != null &&
                    this.ConnectionStatus.Equals(input.ConnectionStatus))
                ) && 
                (
                    this.RegistrationStatus == input.RegistrationStatus ||
                    (this.RegistrationStatus != null &&
                    this.RegistrationStatus.Equals(input.RegistrationStatus))
                ) && 
                (
                    this.MemoryPoolSize == input.MemoryPoolSize ||
                    (this.MemoryPoolSize != null &&
                    this.MemoryPoolSize.Equals(input.MemoryPoolSize))
                ) && 
                (
                    this.DumpPeriod == input.DumpPeriod ||
                    (this.DumpPeriod != null &&
                    this.DumpPeriod.Equals(input.DumpPeriod))
                ) && 
                (
                    this.SerialExists == input.SerialExists ||
                    (this.SerialExists != null &&
                    this.SerialExists.Equals(input.SerialExists))
                ) && 
                (
                    this.MaxDb == input.MaxDb ||
                    (this.MaxDb != null &&
                    this.MaxDb.Equals(input.MaxDb))
                ) && 
                (
                    this.SerialCount == input.SerialCount ||
                    (this.SerialCount != null &&
                    this.SerialCount.Equals(input.SerialCount))
                ) && 
                (
                    this.LastSeen == input.LastSeen ||
                    (this.LastSeen != null &&
                    this.LastSeen.Equals(input.LastSeen))
                ) && 
                (
                    this.LastConfig == input.LastConfig ||
                    (this.LastConfig != null &&
                    this.LastConfig.Equals(input.LastConfig))
                ) && 
                (
                    this.GmsserverStartTime == input.GmsserverStartTime ||
                    (this.GmsserverStartTime != null &&
                    this.GmsserverStartTime.Equals(input.GmsserverStartTime))
                ) && 
                (
                    this.RecordRate == input.RecordRate ||
                    (this.RecordRate != null &&
                    this.RecordRate.Equals(input.RecordRate))
                ) && 
                (
                    this.PacketRate == input.PacketRate ||
                    (this.PacketRate != null &&
                    this.PacketRate.Equals(input.PacketRate))
                ) && 
                (
                    this.MaxDbFiles == input.MaxDbFiles ||
                    (this.MaxDbFiles != null &&
                    this.MaxDbFiles.Equals(input.MaxDbFiles))
                ) && 
                (
                    this.CurrentDbFiles == input.CurrentDbFiles ||
                    (this.CurrentDbFiles != null &&
                    this.CurrentDbFiles.Equals(input.CurrentDbFiles))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HostName != null)
                {
                    hashCode = (hashCode * 59) + this.HostName.GetHashCode();
                }
                if (this.VarVersion != null)
                {
                    hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                }
                if (this.Revision != null)
                {
                    hashCode = (hashCode * 59) + this.Revision.GetHashCode();
                }
                if (this.ConnectionStatus != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionStatus.GetHashCode();
                }
                if (this.RegistrationStatus != null)
                {
                    hashCode = (hashCode * 59) + this.RegistrationStatus.GetHashCode();
                }
                if (this.MemoryPoolSize != null)
                {
                    hashCode = (hashCode * 59) + this.MemoryPoolSize.GetHashCode();
                }
                if (this.DumpPeriod != null)
                {
                    hashCode = (hashCode * 59) + this.DumpPeriod.GetHashCode();
                }
                if (this.SerialExists != null)
                {
                    hashCode = (hashCode * 59) + this.SerialExists.GetHashCode();
                }
                if (this.MaxDb != null)
                {
                    hashCode = (hashCode * 59) + this.MaxDb.GetHashCode();
                }
                if (this.SerialCount != null)
                {
                    hashCode = (hashCode * 59) + this.SerialCount.GetHashCode();
                }
                if (this.LastSeen != null)
                {
                    hashCode = (hashCode * 59) + this.LastSeen.GetHashCode();
                }
                if (this.LastConfig != null)
                {
                    hashCode = (hashCode * 59) + this.LastConfig.GetHashCode();
                }
                if (this.GmsserverStartTime != null)
                {
                    hashCode = (hashCode * 59) + this.GmsserverStartTime.GetHashCode();
                }
                if (this.RecordRate != null)
                {
                    hashCode = (hashCode * 59) + this.RecordRate.GetHashCode();
                }
                if (this.PacketRate != null)
                {
                    hashCode = (hashCode * 59) + this.PacketRate.GetHashCode();
                }
                if (this.MaxDbFiles != null)
                {
                    hashCode = (hashCode * 59) + this.MaxDbFiles.GetHashCode();
                }
                if (this.CurrentDbFiles != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentDbFiles.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
