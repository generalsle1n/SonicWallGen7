/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enter SFR mailing configuration mode.
    /// </summary>
    [DataContract(Name = "appflow_sfr_mailing_appflow_sfr_mailing")]
    public partial class AppflowSfrMailingAppflowSfrMailing : IEquatable<AppflowSfrMailingAppflowSfrMailing>, IValidatableObject
    {
        /// <summary>
        /// Set the connection security method.
        /// </summary>
        /// <value>Set the connection security method.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SecurityMethodEnum
        {
            /// <summary>
            /// Enum SslTls for value: ssl-tls
            /// </summary>
            [EnumMember(Value = "ssl-tls")]
            SslTls = 1,

            /// <summary>
            /// Enum Starttls for value: starttls
            /// </summary>
            [EnumMember(Value = "starttls")]
            Starttls = 2
        }


        /// <summary>
        /// Set the connection security method.
        /// </summary>
        /// <value>Set the connection security method.</value>
        [DataMember(Name = "security_method", EmitDefaultValue = false)]
        public SecurityMethodEnum? SecurityMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppflowSfrMailingAppflowSfrMailing" /> class.
        /// </summary>
        /// <param name="sendEmail">Enable sending report by email..</param>
        /// <param name="smtpServerHost">SMTP server host name..</param>
        /// <param name="reportToEmail">Email address to send report on..</param>
        /// <param name="reportFromEmail">Email address to send report from..</param>
        /// <param name="smtpServerPort">SMTP server port number..</param>
        /// <param name="securityMethod">Set the connection security method..</param>
        /// <param name="smtpAuth">Enable SMTP authentication..</param>
        /// <param name="smtpUser">SMTP server user name..</param>
        /// <param name="smtpPass">SMTP server password..</param>
        /// <param name="popBeforeSmtp">Enable POP before SMTP..</param>
        /// <param name="popServerAddress">POP server address..</param>
        /// <param name="popUsername">POP server user name..</param>
        /// <param name="popPass">POP server password..</param>
        public AppflowSfrMailingAppflowSfrMailing(bool sendEmail = default(bool), string smtpServerHost = default(string), string reportToEmail = default(string), string reportFromEmail = default(string), decimal smtpServerPort = default(decimal), SecurityMethodEnum? securityMethod = default(SecurityMethodEnum?), bool smtpAuth = default(bool), string smtpUser = default(string), string smtpPass = default(string), bool popBeforeSmtp = default(bool), string popServerAddress = default(string), string popUsername = default(string), string popPass = default(string))
        {
            this.SendEmail = sendEmail;
            this.SmtpServerHost = smtpServerHost;
            this.ReportToEmail = reportToEmail;
            this.ReportFromEmail = reportFromEmail;
            this.SmtpServerPort = smtpServerPort;
            this.SecurityMethod = securityMethod;
            this.SmtpAuth = smtpAuth;
            this.SmtpUser = smtpUser;
            this.SmtpPass = smtpPass;
            this.PopBeforeSmtp = popBeforeSmtp;
            this.PopServerAddress = popServerAddress;
            this.PopUsername = popUsername;
            this.PopPass = popPass;
        }

        /// <summary>
        /// Enable sending report by email.
        /// </summary>
        /// <value>Enable sending report by email.</value>
        [DataMember(Name = "send_email", EmitDefaultValue = true)]
        public bool SendEmail { get; set; }

        /// <summary>
        /// SMTP server host name.
        /// </summary>
        /// <value>SMTP server host name.</value>
        [DataMember(Name = "smtp_server_host", EmitDefaultValue = false)]
        public string SmtpServerHost { get; set; }

        /// <summary>
        /// Email address to send report on.
        /// </summary>
        /// <value>Email address to send report on.</value>
        [DataMember(Name = "report_to_email", EmitDefaultValue = false)]
        public string ReportToEmail { get; set; }

        /// <summary>
        /// Email address to send report from.
        /// </summary>
        /// <value>Email address to send report from.</value>
        [DataMember(Name = "report_from_email", EmitDefaultValue = false)]
        public string ReportFromEmail { get; set; }

        /// <summary>
        /// SMTP server port number.
        /// </summary>
        /// <value>SMTP server port number.</value>
        [DataMember(Name = "smtp_server_port", EmitDefaultValue = false)]
        public decimal SmtpServerPort { get; set; }

        /// <summary>
        /// Enable SMTP authentication.
        /// </summary>
        /// <value>Enable SMTP authentication.</value>
        [DataMember(Name = "smtp_auth", EmitDefaultValue = true)]
        public bool SmtpAuth { get; set; }

        /// <summary>
        /// SMTP server user name.
        /// </summary>
        /// <value>SMTP server user name.</value>
        [DataMember(Name = "smtp_user", EmitDefaultValue = false)]
        public string SmtpUser { get; set; }

        /// <summary>
        /// SMTP server password.
        /// </summary>
        /// <value>SMTP server password.</value>
        [DataMember(Name = "smtp_pass", EmitDefaultValue = false)]
        public string SmtpPass { get; set; }

        /// <summary>
        /// Enable POP before SMTP.
        /// </summary>
        /// <value>Enable POP before SMTP.</value>
        [DataMember(Name = "pop_before_smtp", EmitDefaultValue = true)]
        public bool PopBeforeSmtp { get; set; }

        /// <summary>
        /// POP server address.
        /// </summary>
        /// <value>POP server address.</value>
        [DataMember(Name = "pop_server_address", EmitDefaultValue = false)]
        public string PopServerAddress { get; set; }

        /// <summary>
        /// POP server user name.
        /// </summary>
        /// <value>POP server user name.</value>
        [DataMember(Name = "pop_username", EmitDefaultValue = false)]
        public string PopUsername { get; set; }

        /// <summary>
        /// POP server password.
        /// </summary>
        /// <value>POP server password.</value>
        [DataMember(Name = "pop_pass", EmitDefaultValue = false)]
        public string PopPass { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppflowSfrMailingAppflowSfrMailing {\n");
            sb.Append("  SendEmail: ").Append(SendEmail).Append("\n");
            sb.Append("  SmtpServerHost: ").Append(SmtpServerHost).Append("\n");
            sb.Append("  ReportToEmail: ").Append(ReportToEmail).Append("\n");
            sb.Append("  ReportFromEmail: ").Append(ReportFromEmail).Append("\n");
            sb.Append("  SmtpServerPort: ").Append(SmtpServerPort).Append("\n");
            sb.Append("  SecurityMethod: ").Append(SecurityMethod).Append("\n");
            sb.Append("  SmtpAuth: ").Append(SmtpAuth).Append("\n");
            sb.Append("  SmtpUser: ").Append(SmtpUser).Append("\n");
            sb.Append("  SmtpPass: ").Append(SmtpPass).Append("\n");
            sb.Append("  PopBeforeSmtp: ").Append(PopBeforeSmtp).Append("\n");
            sb.Append("  PopServerAddress: ").Append(PopServerAddress).Append("\n");
            sb.Append("  PopUsername: ").Append(PopUsername).Append("\n");
            sb.Append("  PopPass: ").Append(PopPass).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppflowSfrMailingAppflowSfrMailing);
        }

        /// <summary>
        /// Returns true if AppflowSfrMailingAppflowSfrMailing instances are equal
        /// </summary>
        /// <param name="input">Instance of AppflowSfrMailingAppflowSfrMailing to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppflowSfrMailingAppflowSfrMailing input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SendEmail == input.SendEmail ||
                    this.SendEmail.Equals(input.SendEmail)
                ) && 
                (
                    this.SmtpServerHost == input.SmtpServerHost ||
                    (this.SmtpServerHost != null &&
                    this.SmtpServerHost.Equals(input.SmtpServerHost))
                ) && 
                (
                    this.ReportToEmail == input.ReportToEmail ||
                    (this.ReportToEmail != null &&
                    this.ReportToEmail.Equals(input.ReportToEmail))
                ) && 
                (
                    this.ReportFromEmail == input.ReportFromEmail ||
                    (this.ReportFromEmail != null &&
                    this.ReportFromEmail.Equals(input.ReportFromEmail))
                ) && 
                (
                    this.SmtpServerPort == input.SmtpServerPort ||
                    this.SmtpServerPort.Equals(input.SmtpServerPort)
                ) && 
                (
                    this.SecurityMethod == input.SecurityMethod ||
                    this.SecurityMethod.Equals(input.SecurityMethod)
                ) && 
                (
                    this.SmtpAuth == input.SmtpAuth ||
                    this.SmtpAuth.Equals(input.SmtpAuth)
                ) && 
                (
                    this.SmtpUser == input.SmtpUser ||
                    (this.SmtpUser != null &&
                    this.SmtpUser.Equals(input.SmtpUser))
                ) && 
                (
                    this.SmtpPass == input.SmtpPass ||
                    (this.SmtpPass != null &&
                    this.SmtpPass.Equals(input.SmtpPass))
                ) && 
                (
                    this.PopBeforeSmtp == input.PopBeforeSmtp ||
                    this.PopBeforeSmtp.Equals(input.PopBeforeSmtp)
                ) && 
                (
                    this.PopServerAddress == input.PopServerAddress ||
                    (this.PopServerAddress != null &&
                    this.PopServerAddress.Equals(input.PopServerAddress))
                ) && 
                (
                    this.PopUsername == input.PopUsername ||
                    (this.PopUsername != null &&
                    this.PopUsername.Equals(input.PopUsername))
                ) && 
                (
                    this.PopPass == input.PopPass ||
                    (this.PopPass != null &&
                    this.PopPass.Equals(input.PopPass))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SendEmail.GetHashCode();
                if (this.SmtpServerHost != null)
                {
                    hashCode = (hashCode * 59) + this.SmtpServerHost.GetHashCode();
                }
                if (this.ReportToEmail != null)
                {
                    hashCode = (hashCode * 59) + this.ReportToEmail.GetHashCode();
                }
                if (this.ReportFromEmail != null)
                {
                    hashCode = (hashCode * 59) + this.ReportFromEmail.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SmtpServerPort.GetHashCode();
                hashCode = (hashCode * 59) + this.SecurityMethod.GetHashCode();
                hashCode = (hashCode * 59) + this.SmtpAuth.GetHashCode();
                if (this.SmtpUser != null)
                {
                    hashCode = (hashCode * 59) + this.SmtpUser.GetHashCode();
                }
                if (this.SmtpPass != null)
                {
                    hashCode = (hashCode * 59) + this.SmtpPass.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PopBeforeSmtp.GetHashCode();
                if (this.PopServerAddress != null)
                {
                    hashCode = (hashCode * 59) + this.PopServerAddress.GetHashCode();
                }
                if (this.PopUsername != null)
                {
                    hashCode = (hashCode * 59) + this.PopUsername.GetHashCode();
                }
                if (this.PopPass != null)
                {
                    hashCode = (hashCode * 59) + this.PopPass.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
