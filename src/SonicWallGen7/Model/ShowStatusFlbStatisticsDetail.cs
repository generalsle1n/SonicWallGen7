/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// flb statistics detail schema.
    /// </summary>
    [DataContract(Name = "show_status_flb_statistics_detail")]
    public partial class ShowStatusFlbStatisticsDetail : IEquatable<ShowStatusFlbStatisticsDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusFlbStatisticsDetail" /> class.
        /// </summary>
        /// <param name="groupName">groupName.</param>
        /// <param name="memberName">memberName.</param>
        /// <param name="totalConnection">totalConnection.</param>
        /// <param name="newConnection">newConnection.</param>
        /// <param name="configuredRatio">configuredRatio.</param>
        /// <param name="averageRatio">averageRatio.</param>
        /// <param name="currentRatio">currentRatio.</param>
        /// <param name="totalUnicastBytes">totalUnicastBytes.</param>
        /// <param name="rxUnicast">rxUnicast.</param>
        /// <param name="rxBytes">rxBytes.</param>
        /// <param name="txUnicast">txUnicast.</param>
        /// <param name="txBytes">txBytes.</param>
        /// <param name="thoughputKbitsS">thoughputKbitsS.</param>
        /// <param name="thoughputKbS">thoughputKbS.</param>
        public ShowStatusFlbStatisticsDetail(string groupName = default(string), string memberName = default(string), string totalConnection = default(string), string newConnection = default(string), string configuredRatio = default(string), string averageRatio = default(string), string currentRatio = default(string), string totalUnicastBytes = default(string), string rxUnicast = default(string), string rxBytes = default(string), string txUnicast = default(string), string txBytes = default(string), string thoughputKbitsS = default(string), string thoughputKbS = default(string))
        {
            this.GroupName = groupName;
            this.MemberName = memberName;
            this.TotalConnection = totalConnection;
            this.NewConnection = newConnection;
            this.ConfiguredRatio = configuredRatio;
            this.AverageRatio = averageRatio;
            this.CurrentRatio = currentRatio;
            this.TotalUnicastBytes = totalUnicastBytes;
            this.RxUnicast = rxUnicast;
            this.RxBytes = rxBytes;
            this.TxUnicast = txUnicast;
            this.TxBytes = txBytes;
            this.ThoughputKbitsS = thoughputKbitsS;
            this.ThoughputKbS = thoughputKbS;
        }

        /// <summary>
        /// Gets or Sets GroupName
        /// </summary>
        [DataMember(Name = "group_name", EmitDefaultValue = false)]
        public string GroupName { get; set; }

        /// <summary>
        /// Gets or Sets MemberName
        /// </summary>
        [DataMember(Name = "member_name", EmitDefaultValue = false)]
        public string MemberName { get; set; }

        /// <summary>
        /// Gets or Sets TotalConnection
        /// </summary>
        [DataMember(Name = "total_connection", EmitDefaultValue = false)]
        public string TotalConnection { get; set; }

        /// <summary>
        /// Gets or Sets NewConnection
        /// </summary>
        [DataMember(Name = "new_connection", EmitDefaultValue = false)]
        public string NewConnection { get; set; }

        /// <summary>
        /// Gets or Sets ConfiguredRatio
        /// </summary>
        [DataMember(Name = "configured_ratio", EmitDefaultValue = false)]
        public string ConfiguredRatio { get; set; }

        /// <summary>
        /// Gets or Sets AverageRatio
        /// </summary>
        [DataMember(Name = "average_ratio", EmitDefaultValue = false)]
        public string AverageRatio { get; set; }

        /// <summary>
        /// Gets or Sets CurrentRatio
        /// </summary>
        [DataMember(Name = "current_ratio", EmitDefaultValue = false)]
        public string CurrentRatio { get; set; }

        /// <summary>
        /// Gets or Sets TotalUnicastBytes
        /// </summary>
        [DataMember(Name = "total_unicast_bytes", EmitDefaultValue = false)]
        public string TotalUnicastBytes { get; set; }

        /// <summary>
        /// Gets or Sets RxUnicast
        /// </summary>
        [DataMember(Name = "rx_unicast", EmitDefaultValue = false)]
        public string RxUnicast { get; set; }

        /// <summary>
        /// Gets or Sets RxBytes
        /// </summary>
        [DataMember(Name = "rx_bytes", EmitDefaultValue = false)]
        public string RxBytes { get; set; }

        /// <summary>
        /// Gets or Sets TxUnicast
        /// </summary>
        [DataMember(Name = "tx_unicast", EmitDefaultValue = false)]
        public string TxUnicast { get; set; }

        /// <summary>
        /// Gets or Sets TxBytes
        /// </summary>
        [DataMember(Name = "tx_bytes", EmitDefaultValue = false)]
        public string TxBytes { get; set; }

        /// <summary>
        /// Gets or Sets ThoughputKbitsS
        /// </summary>
        [DataMember(Name = "thoughput_kbits_s", EmitDefaultValue = false)]
        public string ThoughputKbitsS { get; set; }

        /// <summary>
        /// Gets or Sets ThoughputKbS
        /// </summary>
        [DataMember(Name = "thoughput_kb_s", EmitDefaultValue = false)]
        public string ThoughputKbS { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusFlbStatisticsDetail {\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  MemberName: ").Append(MemberName).Append("\n");
            sb.Append("  TotalConnection: ").Append(TotalConnection).Append("\n");
            sb.Append("  NewConnection: ").Append(NewConnection).Append("\n");
            sb.Append("  ConfiguredRatio: ").Append(ConfiguredRatio).Append("\n");
            sb.Append("  AverageRatio: ").Append(AverageRatio).Append("\n");
            sb.Append("  CurrentRatio: ").Append(CurrentRatio).Append("\n");
            sb.Append("  TotalUnicastBytes: ").Append(TotalUnicastBytes).Append("\n");
            sb.Append("  RxUnicast: ").Append(RxUnicast).Append("\n");
            sb.Append("  RxBytes: ").Append(RxBytes).Append("\n");
            sb.Append("  TxUnicast: ").Append(TxUnicast).Append("\n");
            sb.Append("  TxBytes: ").Append(TxBytes).Append("\n");
            sb.Append("  ThoughputKbitsS: ").Append(ThoughputKbitsS).Append("\n");
            sb.Append("  ThoughputKbS: ").Append(ThoughputKbS).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusFlbStatisticsDetail);
        }

        /// <summary>
        /// Returns true if ShowStatusFlbStatisticsDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusFlbStatisticsDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusFlbStatisticsDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.GroupName == input.GroupName ||
                    (this.GroupName != null &&
                    this.GroupName.Equals(input.GroupName))
                ) && 
                (
                    this.MemberName == input.MemberName ||
                    (this.MemberName != null &&
                    this.MemberName.Equals(input.MemberName))
                ) && 
                (
                    this.TotalConnection == input.TotalConnection ||
                    (this.TotalConnection != null &&
                    this.TotalConnection.Equals(input.TotalConnection))
                ) && 
                (
                    this.NewConnection == input.NewConnection ||
                    (this.NewConnection != null &&
                    this.NewConnection.Equals(input.NewConnection))
                ) && 
                (
                    this.ConfiguredRatio == input.ConfiguredRatio ||
                    (this.ConfiguredRatio != null &&
                    this.ConfiguredRatio.Equals(input.ConfiguredRatio))
                ) && 
                (
                    this.AverageRatio == input.AverageRatio ||
                    (this.AverageRatio != null &&
                    this.AverageRatio.Equals(input.AverageRatio))
                ) && 
                (
                    this.CurrentRatio == input.CurrentRatio ||
                    (this.CurrentRatio != null &&
                    this.CurrentRatio.Equals(input.CurrentRatio))
                ) && 
                (
                    this.TotalUnicastBytes == input.TotalUnicastBytes ||
                    (this.TotalUnicastBytes != null &&
                    this.TotalUnicastBytes.Equals(input.TotalUnicastBytes))
                ) && 
                (
                    this.RxUnicast == input.RxUnicast ||
                    (this.RxUnicast != null &&
                    this.RxUnicast.Equals(input.RxUnicast))
                ) && 
                (
                    this.RxBytes == input.RxBytes ||
                    (this.RxBytes != null &&
                    this.RxBytes.Equals(input.RxBytes))
                ) && 
                (
                    this.TxUnicast == input.TxUnicast ||
                    (this.TxUnicast != null &&
                    this.TxUnicast.Equals(input.TxUnicast))
                ) && 
                (
                    this.TxBytes == input.TxBytes ||
                    (this.TxBytes != null &&
                    this.TxBytes.Equals(input.TxBytes))
                ) && 
                (
                    this.ThoughputKbitsS == input.ThoughputKbitsS ||
                    (this.ThoughputKbitsS != null &&
                    this.ThoughputKbitsS.Equals(input.ThoughputKbitsS))
                ) && 
                (
                    this.ThoughputKbS == input.ThoughputKbS ||
                    (this.ThoughputKbS != null &&
                    this.ThoughputKbS.Equals(input.ThoughputKbS))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GroupName != null)
                {
                    hashCode = (hashCode * 59) + this.GroupName.GetHashCode();
                }
                if (this.MemberName != null)
                {
                    hashCode = (hashCode * 59) + this.MemberName.GetHashCode();
                }
                if (this.TotalConnection != null)
                {
                    hashCode = (hashCode * 59) + this.TotalConnection.GetHashCode();
                }
                if (this.NewConnection != null)
                {
                    hashCode = (hashCode * 59) + this.NewConnection.GetHashCode();
                }
                if (this.ConfiguredRatio != null)
                {
                    hashCode = (hashCode * 59) + this.ConfiguredRatio.GetHashCode();
                }
                if (this.AverageRatio != null)
                {
                    hashCode = (hashCode * 59) + this.AverageRatio.GetHashCode();
                }
                if (this.CurrentRatio != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentRatio.GetHashCode();
                }
                if (this.TotalUnicastBytes != null)
                {
                    hashCode = (hashCode * 59) + this.TotalUnicastBytes.GetHashCode();
                }
                if (this.RxUnicast != null)
                {
                    hashCode = (hashCode * 59) + this.RxUnicast.GetHashCode();
                }
                if (this.RxBytes != null)
                {
                    hashCode = (hashCode * 59) + this.RxBytes.GetHashCode();
                }
                if (this.TxUnicast != null)
                {
                    hashCode = (hashCode * 59) + this.TxUnicast.GetHashCode();
                }
                if (this.TxBytes != null)
                {
                    hashCode = (hashCode * 59) + this.TxBytes.GetHashCode();
                }
                if (this.ThoughputKbitsS != null)
                {
                    hashCode = (hashCode * 59) + this.ThoughputKbitsS.GetHashCode();
                }
                if (this.ThoughputKbS != null)
                {
                    hashCode = (hashCode * 59) + this.ThoughputKbS.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
