/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Client Enforcement Profile object configuration.
    /// </summary>
    [DataContract(Name = "endpoint_security_profile")]
    public partial class EndpointSecurityProfile : IEquatable<EndpointSecurityProfile>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EndpointSecurityProfile" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EndpointSecurityProfile() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EndpointSecurityProfile" /> class.
        /// </summary>
        /// <param name="name">Set profile object name. (required).</param>
        /// <param name="gracePeriod">Configure grace period of profile object..</param>
        /// <param name="bypassGuestCe">Enable Bypass Guest Endpoint Security Service..</param>
        /// <param name="serviceCaptureClient">Enable capture client endpoint security service..</param>
        public EndpointSecurityProfile(string name = default(string), decimal gracePeriod = default(decimal), bool bypassGuestCe = default(bool), bool serviceCaptureClient = default(bool))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for EndpointSecurityProfile and cannot be null");
            }
            this.Name = name;
            this.GracePeriod = gracePeriod;
            this.BypassGuestCe = bypassGuestCe;
            this.ServiceCaptureClient = serviceCaptureClient;
        }

        /// <summary>
        /// Set profile object name.
        /// </summary>
        /// <value>Set profile object name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Configure grace period of profile object.
        /// </summary>
        /// <value>Configure grace period of profile object.</value>
        [DataMember(Name = "grace_period", EmitDefaultValue = false)]
        public decimal GracePeriod { get; set; }

        /// <summary>
        /// Enable Bypass Guest Endpoint Security Service.
        /// </summary>
        /// <value>Enable Bypass Guest Endpoint Security Service.</value>
        [DataMember(Name = "bypass_guest_ce", EmitDefaultValue = true)]
        public bool BypassGuestCe { get; set; }

        /// <summary>
        /// Enable capture client endpoint security service.
        /// </summary>
        /// <value>Enable capture client endpoint security service.</value>
        [DataMember(Name = "service_capture_client", EmitDefaultValue = true)]
        public bool ServiceCaptureClient { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EndpointSecurityProfile {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  GracePeriod: ").Append(GracePeriod).Append("\n");
            sb.Append("  BypassGuestCe: ").Append(BypassGuestCe).Append("\n");
            sb.Append("  ServiceCaptureClient: ").Append(ServiceCaptureClient).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EndpointSecurityProfile);
        }

        /// <summary>
        /// Returns true if EndpointSecurityProfile instances are equal
        /// </summary>
        /// <param name="input">Instance of EndpointSecurityProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EndpointSecurityProfile input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.GracePeriod == input.GracePeriod ||
                    this.GracePeriod.Equals(input.GracePeriod)
                ) && 
                (
                    this.BypassGuestCe == input.BypassGuestCe ||
                    this.BypassGuestCe.Equals(input.BypassGuestCe)
                ) && 
                (
                    this.ServiceCaptureClient == input.ServiceCaptureClient ||
                    this.ServiceCaptureClient.Equals(input.ServiceCaptureClient)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GracePeriod.GetHashCode();
                hashCode = (hashCode * 59) + this.BypassGuestCe.GetHashCode();
                hashCode = (hashCode * 59) + this.ServiceCaptureClient.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
