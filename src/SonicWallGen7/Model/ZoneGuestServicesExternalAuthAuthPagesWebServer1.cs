/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Set the external authentication web server 1 pages.
    /// </summary>
    [DataContract(Name = "zone_guest_services_external_auth_auth_pages_web_server_1")]
    public partial class ZoneGuestServicesExternalAuthAuthPagesWebServer1 : IEquatable<ZoneGuestServicesExternalAuthAuthPagesWebServer1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ZoneGuestServicesExternalAuthAuthPagesWebServer1" /> class.
        /// </summary>
        /// <param name="login">Set the external authentication web server 1 login page..</param>
        /// <param name="expiration">Set the external authentication web server 1 session expiration page..</param>
        /// <param name="timeout">Set the external authentication web server 1 idle timeout page..</param>
        /// <param name="maxSessions">Set the external authentication web server 1 max sessions page..</param>
        /// <param name="trafficExceeded">Set the external authentication web server 1 traffic exceeded page..</param>
        public ZoneGuestServicesExternalAuthAuthPagesWebServer1(string login = default(string), string expiration = default(string), string timeout = default(string), string maxSessions = default(string), string trafficExceeded = default(string))
        {
            this.Login = login;
            this.Expiration = expiration;
            this.Timeout = timeout;
            this.MaxSessions = maxSessions;
            this.TrafficExceeded = trafficExceeded;
        }

        /// <summary>
        /// Set the external authentication web server 1 login page.
        /// </summary>
        /// <value>Set the external authentication web server 1 login page.</value>
        [DataMember(Name = "login", EmitDefaultValue = false)]
        public string Login { get; set; }

        /// <summary>
        /// Set the external authentication web server 1 session expiration page.
        /// </summary>
        /// <value>Set the external authentication web server 1 session expiration page.</value>
        [DataMember(Name = "expiration", EmitDefaultValue = false)]
        public string Expiration { get; set; }

        /// <summary>
        /// Set the external authentication web server 1 idle timeout page.
        /// </summary>
        /// <value>Set the external authentication web server 1 idle timeout page.</value>
        [DataMember(Name = "timeout", EmitDefaultValue = false)]
        public string Timeout { get; set; }

        /// <summary>
        /// Set the external authentication web server 1 max sessions page.
        /// </summary>
        /// <value>Set the external authentication web server 1 max sessions page.</value>
        [DataMember(Name = "max_sessions", EmitDefaultValue = false)]
        public string MaxSessions { get; set; }

        /// <summary>
        /// Set the external authentication web server 1 traffic exceeded page.
        /// </summary>
        /// <value>Set the external authentication web server 1 traffic exceeded page.</value>
        [DataMember(Name = "traffic_exceeded", EmitDefaultValue = false)]
        public string TrafficExceeded { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ZoneGuestServicesExternalAuthAuthPagesWebServer1 {\n");
            sb.Append("  Login: ").Append(Login).Append("\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  MaxSessions: ").Append(MaxSessions).Append("\n");
            sb.Append("  TrafficExceeded: ").Append(TrafficExceeded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ZoneGuestServicesExternalAuthAuthPagesWebServer1);
        }

        /// <summary>
        /// Returns true if ZoneGuestServicesExternalAuthAuthPagesWebServer1 instances are equal
        /// </summary>
        /// <param name="input">Instance of ZoneGuestServicesExternalAuthAuthPagesWebServer1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ZoneGuestServicesExternalAuthAuthPagesWebServer1 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Login == input.Login ||
                    (this.Login != null &&
                    this.Login.Equals(input.Login))
                ) && 
                (
                    this.Expiration == input.Expiration ||
                    (this.Expiration != null &&
                    this.Expiration.Equals(input.Expiration))
                ) && 
                (
                    this.Timeout == input.Timeout ||
                    (this.Timeout != null &&
                    this.Timeout.Equals(input.Timeout))
                ) && 
                (
                    this.MaxSessions == input.MaxSessions ||
                    (this.MaxSessions != null &&
                    this.MaxSessions.Equals(input.MaxSessions))
                ) && 
                (
                    this.TrafficExceeded == input.TrafficExceeded ||
                    (this.TrafficExceeded != null &&
                    this.TrafficExceeded.Equals(input.TrafficExceeded))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Login != null)
                {
                    hashCode = (hashCode * 59) + this.Login.GetHashCode();
                }
                if (this.Expiration != null)
                {
                    hashCode = (hashCode * 59) + this.Expiration.GetHashCode();
                }
                if (this.Timeout != null)
                {
                    hashCode = (hashCode * 59) + this.Timeout.GetHashCode();
                }
                if (this.MaxSessions != null)
                {
                    hashCode = (hashCode * 59) + this.MaxSessions.GetHashCode();
                }
                if (this.TrafficExceeded != null)
                {
                    hashCode = (hashCode * 59) + this.TrafficExceeded.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
