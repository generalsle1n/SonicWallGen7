/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// anti spyware detail schema.
    /// </summary>
    [DataContract(Name = "show_status_anti_spyware_detail")]
    public partial class ShowStatusAntiSpywareDetail : IEquatable<ShowStatusAntiSpywareDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusAntiSpywareDetail" /> class.
        /// </summary>
        /// <param name="signatureDatabase">signatureDatabase.</param>
        /// <param name="signatureDatabaseTimestamp">signatureDatabaseTimestamp.</param>
        /// <param name="lastChecked">lastChecked.</param>
        /// <param name="antiSpywareExpirationDate">antiSpywareExpirationDate.</param>
        public ShowStatusAntiSpywareDetail(string signatureDatabase = default(string), string signatureDatabaseTimestamp = default(string), string lastChecked = default(string), string antiSpywareExpirationDate = default(string))
        {
            this.SignatureDatabase = signatureDatabase;
            this.SignatureDatabaseTimestamp = signatureDatabaseTimestamp;
            this.LastChecked = lastChecked;
            this.AntiSpywareExpirationDate = antiSpywareExpirationDate;
        }

        /// <summary>
        /// Gets or Sets SignatureDatabase
        /// </summary>
        [DataMember(Name = "signature_database", EmitDefaultValue = false)]
        public string SignatureDatabase { get; set; }

        /// <summary>
        /// Gets or Sets SignatureDatabaseTimestamp
        /// </summary>
        [DataMember(Name = "signature_database_timestamp", EmitDefaultValue = false)]
        public string SignatureDatabaseTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets LastChecked
        /// </summary>
        [DataMember(Name = "last_checked", EmitDefaultValue = false)]
        public string LastChecked { get; set; }

        /// <summary>
        /// Gets or Sets AntiSpywareExpirationDate
        /// </summary>
        [DataMember(Name = "anti_spyware_expiration_date", EmitDefaultValue = false)]
        public string AntiSpywareExpirationDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusAntiSpywareDetail {\n");
            sb.Append("  SignatureDatabase: ").Append(SignatureDatabase).Append("\n");
            sb.Append("  SignatureDatabaseTimestamp: ").Append(SignatureDatabaseTimestamp).Append("\n");
            sb.Append("  LastChecked: ").Append(LastChecked).Append("\n");
            sb.Append("  AntiSpywareExpirationDate: ").Append(AntiSpywareExpirationDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusAntiSpywareDetail);
        }

        /// <summary>
        /// Returns true if ShowStatusAntiSpywareDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusAntiSpywareDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusAntiSpywareDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SignatureDatabase == input.SignatureDatabase ||
                    (this.SignatureDatabase != null &&
                    this.SignatureDatabase.Equals(input.SignatureDatabase))
                ) && 
                (
                    this.SignatureDatabaseTimestamp == input.SignatureDatabaseTimestamp ||
                    (this.SignatureDatabaseTimestamp != null &&
                    this.SignatureDatabaseTimestamp.Equals(input.SignatureDatabaseTimestamp))
                ) && 
                (
                    this.LastChecked == input.LastChecked ||
                    (this.LastChecked != null &&
                    this.LastChecked.Equals(input.LastChecked))
                ) && 
                (
                    this.AntiSpywareExpirationDate == input.AntiSpywareExpirationDate ||
                    (this.AntiSpywareExpirationDate != null &&
                    this.AntiSpywareExpirationDate.Equals(input.AntiSpywareExpirationDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SignatureDatabase != null)
                {
                    hashCode = (hashCode * 59) + this.SignatureDatabase.GetHashCode();
                }
                if (this.SignatureDatabaseTimestamp != null)
                {
                    hashCode = (hashCode * 59) + this.SignatureDatabaseTimestamp.GetHashCode();
                }
                if (this.LastChecked != null)
                {
                    hashCode = (hashCode * 59) + this.LastChecked.GetHashCode();
                }
                if (this.AntiSpywareExpirationDate != null)
                {
                    hashCode = (hashCode * 59) + this.AntiSpywareExpirationDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
