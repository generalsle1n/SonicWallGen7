/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// ShowStatusRadiusServerStatisticsListInner
    /// </summary>
    [DataContract(Name = "show_status_radius_server_statistics_list_inner")]
    public partial class ShowStatusRadiusServerStatisticsListInner : IEquatable<ShowStatusRadiusServerStatisticsListInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusRadiusServerStatisticsListInner" /> class.
        /// </summary>
        /// <param name="server">server.</param>
        /// <param name="ip">ip.</param>
        /// <param name="idleFor">idleFor.</param>
        /// <param name="status">status.</param>
        /// <param name="numOfRequestsSent">numOfRequestsSent.</param>
        /// <param name="numOfRepliesReceived">numOfRepliesReceived.</param>
        /// <param name="numOfTimeouts">numOfTimeouts.</param>
        /// <param name="numOfReplyDigestCheckFails">numOfReplyDigestCheckFails.</param>
        /// <param name="numOfOtherErrors">numOfOtherErrors.</param>
        public ShowStatusRadiusServerStatisticsListInner(string server = default(string), string ip = default(string), string idleFor = default(string), string status = default(string), string numOfRequestsSent = default(string), string numOfRepliesReceived = default(string), string numOfTimeouts = default(string), string numOfReplyDigestCheckFails = default(string), string numOfOtherErrors = default(string))
        {
            this.Server = server;
            this.Ip = ip;
            this.IdleFor = idleFor;
            this.Status = status;
            this.NumOfRequestsSent = numOfRequestsSent;
            this.NumOfRepliesReceived = numOfRepliesReceived;
            this.NumOfTimeouts = numOfTimeouts;
            this.NumOfReplyDigestCheckFails = numOfReplyDigestCheckFails;
            this.NumOfOtherErrors = numOfOtherErrors;
        }

        /// <summary>
        /// Gets or Sets Server
        /// </summary>
        [DataMember(Name = "server", EmitDefaultValue = false)]
        public string Server { get; set; }

        /// <summary>
        /// Gets or Sets Ip
        /// </summary>
        [DataMember(Name = "ip", EmitDefaultValue = false)]
        public string Ip { get; set; }

        /// <summary>
        /// Gets or Sets IdleFor
        /// </summary>
        [DataMember(Name = "idle_for", EmitDefaultValue = false)]
        public string IdleFor { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets NumOfRequestsSent
        /// </summary>
        [DataMember(Name = "num_of_requests_sent", EmitDefaultValue = false)]
        public string NumOfRequestsSent { get; set; }

        /// <summary>
        /// Gets or Sets NumOfRepliesReceived
        /// </summary>
        [DataMember(Name = "num_of_replies_received", EmitDefaultValue = false)]
        public string NumOfRepliesReceived { get; set; }

        /// <summary>
        /// Gets or Sets NumOfTimeouts
        /// </summary>
        [DataMember(Name = "num_of_timeouts", EmitDefaultValue = false)]
        public string NumOfTimeouts { get; set; }

        /// <summary>
        /// Gets or Sets NumOfReplyDigestCheckFails
        /// </summary>
        [DataMember(Name = "num_of_reply_digest_check_fails", EmitDefaultValue = false)]
        public string NumOfReplyDigestCheckFails { get; set; }

        /// <summary>
        /// Gets or Sets NumOfOtherErrors
        /// </summary>
        [DataMember(Name = "num_of_other_errors", EmitDefaultValue = false)]
        public string NumOfOtherErrors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusRadiusServerStatisticsListInner {\n");
            sb.Append("  Server: ").Append(Server).Append("\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  IdleFor: ").Append(IdleFor).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  NumOfRequestsSent: ").Append(NumOfRequestsSent).Append("\n");
            sb.Append("  NumOfRepliesReceived: ").Append(NumOfRepliesReceived).Append("\n");
            sb.Append("  NumOfTimeouts: ").Append(NumOfTimeouts).Append("\n");
            sb.Append("  NumOfReplyDigestCheckFails: ").Append(NumOfReplyDigestCheckFails).Append("\n");
            sb.Append("  NumOfOtherErrors: ").Append(NumOfOtherErrors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusRadiusServerStatisticsListInner);
        }

        /// <summary>
        /// Returns true if ShowStatusRadiusServerStatisticsListInner instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusRadiusServerStatisticsListInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusRadiusServerStatisticsListInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Server == input.Server ||
                    (this.Server != null &&
                    this.Server.Equals(input.Server))
                ) && 
                (
                    this.Ip == input.Ip ||
                    (this.Ip != null &&
                    this.Ip.Equals(input.Ip))
                ) && 
                (
                    this.IdleFor == input.IdleFor ||
                    (this.IdleFor != null &&
                    this.IdleFor.Equals(input.IdleFor))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.NumOfRequestsSent == input.NumOfRequestsSent ||
                    (this.NumOfRequestsSent != null &&
                    this.NumOfRequestsSent.Equals(input.NumOfRequestsSent))
                ) && 
                (
                    this.NumOfRepliesReceived == input.NumOfRepliesReceived ||
                    (this.NumOfRepliesReceived != null &&
                    this.NumOfRepliesReceived.Equals(input.NumOfRepliesReceived))
                ) && 
                (
                    this.NumOfTimeouts == input.NumOfTimeouts ||
                    (this.NumOfTimeouts != null &&
                    this.NumOfTimeouts.Equals(input.NumOfTimeouts))
                ) && 
                (
                    this.NumOfReplyDigestCheckFails == input.NumOfReplyDigestCheckFails ||
                    (this.NumOfReplyDigestCheckFails != null &&
                    this.NumOfReplyDigestCheckFails.Equals(input.NumOfReplyDigestCheckFails))
                ) && 
                (
                    this.NumOfOtherErrors == input.NumOfOtherErrors ||
                    (this.NumOfOtherErrors != null &&
                    this.NumOfOtherErrors.Equals(input.NumOfOtherErrors))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Server != null)
                {
                    hashCode = (hashCode * 59) + this.Server.GetHashCode();
                }
                if (this.Ip != null)
                {
                    hashCode = (hashCode * 59) + this.Ip.GetHashCode();
                }
                if (this.IdleFor != null)
                {
                    hashCode = (hashCode * 59) + this.IdleFor.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.NumOfRequestsSent != null)
                {
                    hashCode = (hashCode * 59) + this.NumOfRequestsSent.GetHashCode();
                }
                if (this.NumOfRepliesReceived != null)
                {
                    hashCode = (hashCode * 59) + this.NumOfRepliesReceived.GetHashCode();
                }
                if (this.NumOfTimeouts != null)
                {
                    hashCode = (hashCode * 59) + this.NumOfTimeouts.GetHashCode();
                }
                if (this.NumOfReplyDigestCheckFails != null)
                {
                    hashCode = (hashCode * 59) + this.NumOfReplyDigestCheckFails.GetHashCode();
                }
                if (this.NumOfOtherErrors != null)
                {
                    hashCode = (hashCode * 59) + this.NumOfOtherErrors.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
