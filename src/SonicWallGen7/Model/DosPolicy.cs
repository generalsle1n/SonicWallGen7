/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Dos policy configuration.
    /// </summary>
    [DataContract(Name = "dos_policy")]
    public partial class DosPolicy : IEquatable<DosPolicy>, IValidatableObject
    {
        /// <summary>
        /// IP version.
        /// </summary>
        /// <value>IP version.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IpVersionEnum
        {
            /// <summary>
            /// Enum Ipv4 for value: ipv4
            /// </summary>
            [EnumMember(Value = "ipv4")]
            Ipv4 = 1,

            /// <summary>
            /// Enum Ipv6 for value: ipv6
            /// </summary>
            [EnumMember(Value = "ipv6")]
            Ipv6 = 2,

            /// <summary>
            /// Enum Mixed for value: mixed
            /// </summary>
            [EnumMember(Value = "mixed")]
            Mixed = 3
        }


        /// <summary>
        /// IP version.
        /// </summary>
        /// <value>IP version.</value>
        [DataMember(Name = "ip_version", EmitDefaultValue = false)]
        public IpVersionEnum? IpVersion { get; set; }
        /// <summary>
        /// Set the action for this DoS policy.
        /// </summary>
        /// <value>Set the action for this DoS policy.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            /// <summary>
            /// Enum Protect for value: protect
            /// </summary>
            [EnumMember(Value = "protect")]
            Protect = 1,

            /// <summary>
            /// Enum Bypass for value: bypass
            /// </summary>
            [EnumMember(Value = "bypass")]
            Bypass = 2
        }


        /// <summary>
        /// Set the action for this DoS policy.
        /// </summary>
        /// <value>Set the action for this DoS policy.</value>
        [DataMember(Name = "action", EmitDefaultValue = false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DosPolicy" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DosPolicy() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DosPolicy" /> class.
        /// </summary>
        /// <param name="uuid">Name of DoS policy. (required).</param>
        /// <param name="name">Name of DoS policy..</param>
        /// <param name="priority">priority.</param>
        /// <param name="enable">Enable this DoS policy..</param>
        /// <param name="comment">Set comment to help identify this DoS policy..</param>
        /// <param name="ipVersion">IP version..</param>
        /// <param name="destination">destination.</param>
        /// <param name="source">source.</param>
        /// <param name="service">service.</param>
        /// <param name="schedule">schedule.</param>
        /// <param name="action">Set the action for this DoS policy..</param>
        /// <param name="actionProfile">Assign DoS profile..</param>
        /// <param name="ticket">ticket.</param>
        public DosPolicy(string uuid = default(string), string name = default(string), DosPolicyPriority priority = default(DosPolicyPriority), bool enable = default(bool), string comment = default(string), IpVersionEnum? ipVersion = default(IpVersionEnum?), DosPolicyDestination destination = default(DosPolicyDestination), DosPolicySource source = default(DosPolicySource), DosPolicyService service = default(DosPolicyService), DosPolicySchedule schedule = default(DosPolicySchedule), ActionEnum? action = default(ActionEnum?), string actionProfile = default(string), DosPolicyTicket ticket = default(DosPolicyTicket))
        {
            // to ensure "uuid" is required (not null)
            if (uuid == null)
            {
                throw new ArgumentNullException("uuid is a required property for DosPolicy and cannot be null");
            }
            this.Uuid = uuid;
            this.Name = name;
            this.Priority = priority;
            this.Enable = enable;
            this.Comment = comment;
            this.IpVersion = ipVersion;
            this.Destination = destination;
            this.Source = source;
            this.Service = service;
            this.Schedule = schedule;
            this.Action = action;
            this.ActionProfile = actionProfile;
            this.Ticket = ticket;
        }

        /// <summary>
        /// Name of DoS policy.
        /// </summary>
        /// <value>Name of DoS policy.</value>
        [DataMember(Name = "uuid", IsRequired = true, EmitDefaultValue = true)]
        public string Uuid { get; set; }

        /// <summary>
        /// Name of DoS policy.
        /// </summary>
        /// <value>Name of DoS policy.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name = "priority", EmitDefaultValue = false)]
        public DosPolicyPriority Priority { get; set; }

        /// <summary>
        /// Enable this DoS policy.
        /// </summary>
        /// <value>Enable this DoS policy.</value>
        [DataMember(Name = "enable", EmitDefaultValue = true)]
        public bool Enable { get; set; }

        /// <summary>
        /// Set comment to help identify this DoS policy.
        /// </summary>
        /// <value>Set comment to help identify this DoS policy.</value>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [DataMember(Name = "destination", EmitDefaultValue = false)]
        public DosPolicyDestination Destination { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public DosPolicySource Source { get; set; }

        /// <summary>
        /// Gets or Sets Service
        /// </summary>
        [DataMember(Name = "service", EmitDefaultValue = false)]
        public DosPolicyService Service { get; set; }

        /// <summary>
        /// Gets or Sets Schedule
        /// </summary>
        [DataMember(Name = "schedule", EmitDefaultValue = false)]
        public DosPolicySchedule Schedule { get; set; }

        /// <summary>
        /// Assign DoS profile.
        /// </summary>
        /// <value>Assign DoS profile.</value>
        [DataMember(Name = "action_profile", EmitDefaultValue = false)]
        public string ActionProfile { get; set; }

        /// <summary>
        /// Gets or Sets Ticket
        /// </summary>
        [DataMember(Name = "ticket", EmitDefaultValue = false)]
        public DosPolicyTicket Ticket { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DosPolicy {\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  IpVersion: ").Append(IpVersion).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  Schedule: ").Append(Schedule).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  ActionProfile: ").Append(ActionProfile).Append("\n");
            sb.Append("  Ticket: ").Append(Ticket).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DosPolicy);
        }

        /// <summary>
        /// Returns true if DosPolicy instances are equal
        /// </summary>
        /// <param name="input">Instance of DosPolicy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DosPolicy input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.IpVersion == input.IpVersion ||
                    this.IpVersion.Equals(input.IpVersion)
                ) && 
                (
                    this.Destination == input.Destination ||
                    (this.Destination != null &&
                    this.Destination.Equals(input.Destination))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.Service == input.Service ||
                    (this.Service != null &&
                    this.Service.Equals(input.Service))
                ) && 
                (
                    this.Schedule == input.Schedule ||
                    (this.Schedule != null &&
                    this.Schedule.Equals(input.Schedule))
                ) && 
                (
                    this.Action == input.Action ||
                    this.Action.Equals(input.Action)
                ) && 
                (
                    this.ActionProfile == input.ActionProfile ||
                    (this.ActionProfile != null &&
                    this.ActionProfile.Equals(input.ActionProfile))
                ) && 
                (
                    this.Ticket == input.Ticket ||
                    (this.Ticket != null &&
                    this.Ticket.Equals(input.Ticket))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uuid != null)
                {
                    hashCode = (hashCode * 59) + this.Uuid.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Priority != null)
                {
                    hashCode = (hashCode * 59) + this.Priority.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Enable.GetHashCode();
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IpVersion.GetHashCode();
                if (this.Destination != null)
                {
                    hashCode = (hashCode * 59) + this.Destination.GetHashCode();
                }
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                if (this.Service != null)
                {
                    hashCode = (hashCode * 59) + this.Service.GetHashCode();
                }
                if (this.Schedule != null)
                {
                    hashCode = (hashCode * 59) + this.Schedule.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Action.GetHashCode();
                if (this.ActionProfile != null)
                {
                    hashCode = (hashCode * 59) + this.ActionProfile.GetHashCode();
                }
                if (this.Ticket != null)
                {
                    hashCode = (hashCode * 59) + this.Ticket.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
