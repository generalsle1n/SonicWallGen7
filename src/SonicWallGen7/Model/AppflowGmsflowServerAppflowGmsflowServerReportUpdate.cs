/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enable report connections on the specified updates.
    /// </summary>
    [DataContract(Name = "appflow_gmsflow_server_appflow_gmsflow_server_report_update")]
    public partial class AppflowGmsflowServerAppflowGmsflowServerReportUpdate : IEquatable<AppflowGmsflowServerAppflowGmsflowServerReportUpdate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppflowGmsflowServerAppflowGmsflowServerReportUpdate" /> class.
        /// </summary>
        /// <param name="threat">Threat detection..</param>
        /// <param name="application">Application detection..</param>
        /// <param name="user">User detection..</param>
        /// <param name="vpnTunnel">VPN tunnel detection..</param>
        /// <param name="url">URL detection..</param>
        public AppflowGmsflowServerAppflowGmsflowServerReportUpdate(bool threat = default(bool), bool application = default(bool), bool user = default(bool), bool vpnTunnel = default(bool), bool url = default(bool))
        {
            this.Threat = threat;
            this.Application = application;
            this.User = user;
            this.VpnTunnel = vpnTunnel;
            this.Url = url;
        }

        /// <summary>
        /// Threat detection.
        /// </summary>
        /// <value>Threat detection.</value>
        [DataMember(Name = "threat", EmitDefaultValue = true)]
        public bool Threat { get; set; }

        /// <summary>
        /// Application detection.
        /// </summary>
        /// <value>Application detection.</value>
        [DataMember(Name = "application", EmitDefaultValue = true)]
        public bool Application { get; set; }

        /// <summary>
        /// User detection.
        /// </summary>
        /// <value>User detection.</value>
        [DataMember(Name = "user", EmitDefaultValue = true)]
        public bool User { get; set; }

        /// <summary>
        /// VPN tunnel detection.
        /// </summary>
        /// <value>VPN tunnel detection.</value>
        [DataMember(Name = "vpn_tunnel", EmitDefaultValue = true)]
        public bool VpnTunnel { get; set; }

        /// <summary>
        /// URL detection.
        /// </summary>
        /// <value>URL detection.</value>
        [DataMember(Name = "url", EmitDefaultValue = true)]
        public bool Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppflowGmsflowServerAppflowGmsflowServerReportUpdate {\n");
            sb.Append("  Threat: ").Append(Threat).Append("\n");
            sb.Append("  Application: ").Append(Application).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  VpnTunnel: ").Append(VpnTunnel).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppflowGmsflowServerAppflowGmsflowServerReportUpdate);
        }

        /// <summary>
        /// Returns true if AppflowGmsflowServerAppflowGmsflowServerReportUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of AppflowGmsflowServerAppflowGmsflowServerReportUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppflowGmsflowServerAppflowGmsflowServerReportUpdate input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Threat == input.Threat ||
                    this.Threat.Equals(input.Threat)
                ) && 
                (
                    this.Application == input.Application ||
                    this.Application.Equals(input.Application)
                ) && 
                (
                    this.User == input.User ||
                    this.User.Equals(input.User)
                ) && 
                (
                    this.VpnTunnel == input.VpnTunnel ||
                    this.VpnTunnel.Equals(input.VpnTunnel)
                ) && 
                (
                    this.Url == input.Url ||
                    this.Url.Equals(input.Url)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Threat.GetHashCode();
                hashCode = (hashCode * 59) + this.Application.GetHashCode();
                hashCode = (hashCode * 59) + this.User.GetHashCode();
                hashCode = (hashCode * 59) + this.VpnTunnel.GetHashCode();
                hashCode = (hashCode * 59) + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
