/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// DHCP server IPv6 dynamic scopes configuration.
    /// </summary>
    [DataContract(Name = "dhcp_server_ipv6_scope_dynamic")]
    public partial class DhcpServerIpv6ScopeDynamic : IEquatable<DhcpServerIpv6ScopeDynamic>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DhcpServerIpv6ScopeDynamic" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DhcpServerIpv6ScopeDynamic() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DhcpServerIpv6ScopeDynamic" /> class.
        /// </summary>
        /// <param name="name">Set IPv6 DHCP server dynamic scope name. (required).</param>
        /// <param name="range">range.</param>
        /// <param name="enable">Enable IPv6 DHCP server dynamic scope..</param>
        /// <param name="prefix">Set IPv6 DHCP server dynamic scope prefix..</param>
        /// <param name="lifetime">lifetime.</param>
        /// <param name="comment">Set IPv6 DHCP server dynamic scope comment. * Set to null to represent an unconfigured state..</param>
        /// <param name="domainName">Set IPv6 DHCP server dynamic scope domain name. * Set to null to represent an unconfigured state..</param>
        /// <param name="dns">dns.</param>
        /// <param name="genericOption">genericOption.</param>
        /// <param name="alwaysSendOption">Enable IPv6 DHCP server dynamic scope always send IPv6 options..</param>
        public DhcpServerIpv6ScopeDynamic(string name = default(string), DhcpServerIpv6ScopeDynamicRange range = default(DhcpServerIpv6ScopeDynamicRange), bool enable = default(bool), string prefix = default(string), DhcpServerIpv6ScopeDynamicLifetime lifetime = default(DhcpServerIpv6ScopeDynamicLifetime), string comment = default(string), string domainName = default(string), DhcpServerIpv6ScopeDynamicDns dns = default(DhcpServerIpv6ScopeDynamicDns), DhcpServerIpv6ScopeDynamicGenericOption genericOption = default(DhcpServerIpv6ScopeDynamicGenericOption), bool alwaysSendOption = default(bool))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for DhcpServerIpv6ScopeDynamic and cannot be null");
            }
            this.Name = name;
            this.Range = range;
            this.Enable = enable;
            this.Prefix = prefix;
            this.Lifetime = lifetime;
            this.Comment = comment;
            this.DomainName = domainName;
            this.Dns = dns;
            this.GenericOption = genericOption;
            this.AlwaysSendOption = alwaysSendOption;
        }

        /// <summary>
        /// Set IPv6 DHCP server dynamic scope name.
        /// </summary>
        /// <value>Set IPv6 DHCP server dynamic scope name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Range
        /// </summary>
        [DataMember(Name = "range", EmitDefaultValue = false)]
        public DhcpServerIpv6ScopeDynamicRange Range { get; set; }

        /// <summary>
        /// Enable IPv6 DHCP server dynamic scope.
        /// </summary>
        /// <value>Enable IPv6 DHCP server dynamic scope.</value>
        [DataMember(Name = "enable", EmitDefaultValue = true)]
        public bool Enable { get; set; }

        /// <summary>
        /// Set IPv6 DHCP server dynamic scope prefix.
        /// </summary>
        /// <value>Set IPv6 DHCP server dynamic scope prefix.</value>
        [DataMember(Name = "prefix", EmitDefaultValue = false)]
        public string Prefix { get; set; }

        /// <summary>
        /// Gets or Sets Lifetime
        /// </summary>
        [DataMember(Name = "lifetime", EmitDefaultValue = false)]
        public DhcpServerIpv6ScopeDynamicLifetime Lifetime { get; set; }

        /// <summary>
        /// Set IPv6 DHCP server dynamic scope comment. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Set IPv6 DHCP server dynamic scope comment. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "comment", EmitDefaultValue = true)]
        public string Comment { get; set; }

        /// <summary>
        /// Set IPv6 DHCP server dynamic scope domain name. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Set IPv6 DHCP server dynamic scope domain name. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "domain_name", EmitDefaultValue = true)]
        public string DomainName { get; set; }

        /// <summary>
        /// Gets or Sets Dns
        /// </summary>
        [DataMember(Name = "dns", EmitDefaultValue = false)]
        public DhcpServerIpv6ScopeDynamicDns Dns { get; set; }

        /// <summary>
        /// Gets or Sets GenericOption
        /// </summary>
        [DataMember(Name = "generic_option", EmitDefaultValue = false)]
        public DhcpServerIpv6ScopeDynamicGenericOption GenericOption { get; set; }

        /// <summary>
        /// Enable IPv6 DHCP server dynamic scope always send IPv6 options.
        /// </summary>
        /// <value>Enable IPv6 DHCP server dynamic scope always send IPv6 options.</value>
        [DataMember(Name = "always_send_option", EmitDefaultValue = true)]
        public bool AlwaysSendOption { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DhcpServerIpv6ScopeDynamic {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Range: ").Append(Range).Append("\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  Prefix: ").Append(Prefix).Append("\n");
            sb.Append("  Lifetime: ").Append(Lifetime).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  DomainName: ").Append(DomainName).Append("\n");
            sb.Append("  Dns: ").Append(Dns).Append("\n");
            sb.Append("  GenericOption: ").Append(GenericOption).Append("\n");
            sb.Append("  AlwaysSendOption: ").Append(AlwaysSendOption).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DhcpServerIpv6ScopeDynamic);
        }

        /// <summary>
        /// Returns true if DhcpServerIpv6ScopeDynamic instances are equal
        /// </summary>
        /// <param name="input">Instance of DhcpServerIpv6ScopeDynamic to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DhcpServerIpv6ScopeDynamic input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Range == input.Range ||
                    (this.Range != null &&
                    this.Range.Equals(input.Range))
                ) && 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.Prefix == input.Prefix ||
                    (this.Prefix != null &&
                    this.Prefix.Equals(input.Prefix))
                ) && 
                (
                    this.Lifetime == input.Lifetime ||
                    (this.Lifetime != null &&
                    this.Lifetime.Equals(input.Lifetime))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.DomainName == input.DomainName ||
                    (this.DomainName != null &&
                    this.DomainName.Equals(input.DomainName))
                ) && 
                (
                    this.Dns == input.Dns ||
                    (this.Dns != null &&
                    this.Dns.Equals(input.Dns))
                ) && 
                (
                    this.GenericOption == input.GenericOption ||
                    (this.GenericOption != null &&
                    this.GenericOption.Equals(input.GenericOption))
                ) && 
                (
                    this.AlwaysSendOption == input.AlwaysSendOption ||
                    this.AlwaysSendOption.Equals(input.AlwaysSendOption)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Range != null)
                {
                    hashCode = (hashCode * 59) + this.Range.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Enable.GetHashCode();
                if (this.Prefix != null)
                {
                    hashCode = (hashCode * 59) + this.Prefix.GetHashCode();
                }
                if (this.Lifetime != null)
                {
                    hashCode = (hashCode * 59) + this.Lifetime.GetHashCode();
                }
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                if (this.DomainName != null)
                {
                    hashCode = (hashCode * 59) + this.DomainName.GetHashCode();
                }
                if (this.Dns != null)
                {
                    hashCode = (hashCode * 59) + this.Dns.GetHashCode();
                }
                if (this.GenericOption != null)
                {
                    hashCode = (hashCode * 59) + this.GenericOption.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AlwaysSendOption.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
