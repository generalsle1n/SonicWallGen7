/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Active-active DPI mode.
    /// </summary>
    [DataContract(Name = "ha_base_mode_active_active_dpi_active_active_dpi")]
    public partial class HaBaseModeActiveActiveDpiActiveActiveDpi : IEquatable<HaBaseModeActiveActiveDpiActiveActiveDpi>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HaBaseModeActiveActiveDpiActiveActiveDpi" /> class.
        /// </summary>
        /// <param name="primarySerial">Set high availability primary serial number..</param>
        /// <param name="secondarySerial">Set high availability secondary serial number..</param>
        /// <param name="dpiInterface">Configure active/active DPI interface..</param>
        /// <param name="controlInterface">Configure HA control interface..</param>
        /// <param name="dataInterface">Configure HA data interface..</param>
        /// <param name="preempt">Enable preempt mode..</param>
        /// <param name="encryption">Enable encryption for control communication..</param>
        public HaBaseModeActiveActiveDpiActiveActiveDpi(string primarySerial = default(string), string secondarySerial = default(string), List<HaBaseModeActiveActiveDpiActiveActiveDpiDpiInterfaceInner> dpiInterface = default(List<HaBaseModeActiveActiveDpiActiveActiveDpiDpiInterfaceInner>), string controlInterface = default(string), string dataInterface = default(string), bool preempt = default(bool), bool encryption = default(bool))
        {
            this.PrimarySerial = primarySerial;
            this.SecondarySerial = secondarySerial;
            this.DpiInterface = dpiInterface;
            this.ControlInterface = controlInterface;
            this.DataInterface = dataInterface;
            this.Preempt = preempt;
            this.Encryption = encryption;
        }

        /// <summary>
        /// Set high availability primary serial number.
        /// </summary>
        /// <value>Set high availability primary serial number.</value>
        [DataMember(Name = "primary_serial", EmitDefaultValue = false)]
        public string PrimarySerial { get; set; }

        /// <summary>
        /// Set high availability secondary serial number.
        /// </summary>
        /// <value>Set high availability secondary serial number.</value>
        [DataMember(Name = "secondary_serial", EmitDefaultValue = false)]
        public string SecondarySerial { get; set; }

        /// <summary>
        /// Configure active/active DPI interface.
        /// </summary>
        /// <value>Configure active/active DPI interface.</value>
        [DataMember(Name = "dpi_interface", EmitDefaultValue = false)]
        public List<HaBaseModeActiveActiveDpiActiveActiveDpiDpiInterfaceInner> DpiInterface { get; set; }

        /// <summary>
        /// Configure HA control interface.
        /// </summary>
        /// <value>Configure HA control interface.</value>
        [DataMember(Name = "control_interface", EmitDefaultValue = false)]
        public string ControlInterface { get; set; }

        /// <summary>
        /// Configure HA data interface.
        /// </summary>
        /// <value>Configure HA data interface.</value>
        [DataMember(Name = "data_interface", EmitDefaultValue = false)]
        public string DataInterface { get; set; }

        /// <summary>
        /// Enable preempt mode.
        /// </summary>
        /// <value>Enable preempt mode.</value>
        [DataMember(Name = "preempt", EmitDefaultValue = true)]
        public bool Preempt { get; set; }

        /// <summary>
        /// Enable encryption for control communication.
        /// </summary>
        /// <value>Enable encryption for control communication.</value>
        [DataMember(Name = "encryption", EmitDefaultValue = true)]
        public bool Encryption { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HaBaseModeActiveActiveDpiActiveActiveDpi {\n");
            sb.Append("  PrimarySerial: ").Append(PrimarySerial).Append("\n");
            sb.Append("  SecondarySerial: ").Append(SecondarySerial).Append("\n");
            sb.Append("  DpiInterface: ").Append(DpiInterface).Append("\n");
            sb.Append("  ControlInterface: ").Append(ControlInterface).Append("\n");
            sb.Append("  DataInterface: ").Append(DataInterface).Append("\n");
            sb.Append("  Preempt: ").Append(Preempt).Append("\n");
            sb.Append("  Encryption: ").Append(Encryption).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HaBaseModeActiveActiveDpiActiveActiveDpi);
        }

        /// <summary>
        /// Returns true if HaBaseModeActiveActiveDpiActiveActiveDpi instances are equal
        /// </summary>
        /// <param name="input">Instance of HaBaseModeActiveActiveDpiActiveActiveDpi to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HaBaseModeActiveActiveDpiActiveActiveDpi input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PrimarySerial == input.PrimarySerial ||
                    (this.PrimarySerial != null &&
                    this.PrimarySerial.Equals(input.PrimarySerial))
                ) && 
                (
                    this.SecondarySerial == input.SecondarySerial ||
                    (this.SecondarySerial != null &&
                    this.SecondarySerial.Equals(input.SecondarySerial))
                ) && 
                (
                    this.DpiInterface == input.DpiInterface ||
                    this.DpiInterface != null &&
                    input.DpiInterface != null &&
                    this.DpiInterface.SequenceEqual(input.DpiInterface)
                ) && 
                (
                    this.ControlInterface == input.ControlInterface ||
                    (this.ControlInterface != null &&
                    this.ControlInterface.Equals(input.ControlInterface))
                ) && 
                (
                    this.DataInterface == input.DataInterface ||
                    (this.DataInterface != null &&
                    this.DataInterface.Equals(input.DataInterface))
                ) && 
                (
                    this.Preempt == input.Preempt ||
                    this.Preempt.Equals(input.Preempt)
                ) && 
                (
                    this.Encryption == input.Encryption ||
                    this.Encryption.Equals(input.Encryption)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PrimarySerial != null)
                {
                    hashCode = (hashCode * 59) + this.PrimarySerial.GetHashCode();
                }
                if (this.SecondarySerial != null)
                {
                    hashCode = (hashCode * 59) + this.SecondarySerial.GetHashCode();
                }
                if (this.DpiInterface != null)
                {
                    hashCode = (hashCode * 59) + this.DpiInterface.GetHashCode();
                }
                if (this.ControlInterface != null)
                {
                    hashCode = (hashCode * 59) + this.ControlInterface.GetHashCode();
                }
                if (this.DataInterface != null)
                {
                    hashCode = (hashCode * 59) + this.DataInterface.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Preempt.GetHashCode();
                hashCode = (hashCode * 59) + this.Encryption.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
