/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enable specified RBL blocked responses.
    /// </summary>
    [DataContract(Name = "rbl_services_blocked_responses")]
    public partial class RblServicesBlockedResponses : IEquatable<RblServicesBlockedResponses>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RblServicesBlockedResponses" /> class.
        /// </summary>
        /// <param name="blockAll">Block all responses..</param>
        /// <param name="openRelay">127.0.0.2 - Open Relay..</param>
        /// <param name="dialupSpamSource">127.0.0.3 - Dialup Spam Source..</param>
        /// <param name="spamSource">127.0.0.4 - Spam Source..</param>
        /// <param name="smartHost">127.0.0.5 - Smart Host..</param>
        /// <param name="spamwareSite">127.0.0.6 - Spamware Site..</param>
        /// <param name="badListServer">127.0.0.7 - Bad List Server..</param>
        /// <param name="insecureScript">127.0.0.8 - Insecure Script..</param>
        /// <param name="openProxyServer">127.0.0.9 - Open Proxy Server..</param>
        /// <param name="policyBlockListIsp">127.0.0.10 - Policy Block List ISP..</param>
        /// <param name="policyBlockListDomain">127.0.0.11 - Policy Block List Domain Owner..</param>
        public RblServicesBlockedResponses(bool blockAll = default(bool), bool openRelay = default(bool), bool dialupSpamSource = default(bool), bool spamSource = default(bool), bool smartHost = default(bool), bool spamwareSite = default(bool), bool badListServer = default(bool), bool insecureScript = default(bool), bool openProxyServer = default(bool), bool policyBlockListIsp = default(bool), bool policyBlockListDomain = default(bool))
        {
            this.BlockAll = blockAll;
            this.OpenRelay = openRelay;
            this.DialupSpamSource = dialupSpamSource;
            this.SpamSource = spamSource;
            this.SmartHost = smartHost;
            this.SpamwareSite = spamwareSite;
            this.BadListServer = badListServer;
            this.InsecureScript = insecureScript;
            this.OpenProxyServer = openProxyServer;
            this.PolicyBlockListIsp = policyBlockListIsp;
            this.PolicyBlockListDomain = policyBlockListDomain;
        }

        /// <summary>
        /// Block all responses.
        /// </summary>
        /// <value>Block all responses.</value>
        [DataMember(Name = "block_all", EmitDefaultValue = true)]
        public bool BlockAll { get; set; }

        /// <summary>
        /// 127.0.0.2 - Open Relay.
        /// </summary>
        /// <value>127.0.0.2 - Open Relay.</value>
        [DataMember(Name = "open_relay", EmitDefaultValue = true)]
        public bool OpenRelay { get; set; }

        /// <summary>
        /// 127.0.0.3 - Dialup Spam Source.
        /// </summary>
        /// <value>127.0.0.3 - Dialup Spam Source.</value>
        [DataMember(Name = "dialup_spam_source", EmitDefaultValue = true)]
        public bool DialupSpamSource { get; set; }

        /// <summary>
        /// 127.0.0.4 - Spam Source.
        /// </summary>
        /// <value>127.0.0.4 - Spam Source.</value>
        [DataMember(Name = "spam_source", EmitDefaultValue = true)]
        public bool SpamSource { get; set; }

        /// <summary>
        /// 127.0.0.5 - Smart Host.
        /// </summary>
        /// <value>127.0.0.5 - Smart Host.</value>
        [DataMember(Name = "smart_host", EmitDefaultValue = true)]
        public bool SmartHost { get; set; }

        /// <summary>
        /// 127.0.0.6 - Spamware Site.
        /// </summary>
        /// <value>127.0.0.6 - Spamware Site.</value>
        [DataMember(Name = "spamware_site", EmitDefaultValue = true)]
        public bool SpamwareSite { get; set; }

        /// <summary>
        /// 127.0.0.7 - Bad List Server.
        /// </summary>
        /// <value>127.0.0.7 - Bad List Server.</value>
        [DataMember(Name = "bad_list_server", EmitDefaultValue = true)]
        public bool BadListServer { get; set; }

        /// <summary>
        /// 127.0.0.8 - Insecure Script.
        /// </summary>
        /// <value>127.0.0.8 - Insecure Script.</value>
        [DataMember(Name = "insecure_script", EmitDefaultValue = true)]
        public bool InsecureScript { get; set; }

        /// <summary>
        /// 127.0.0.9 - Open Proxy Server.
        /// </summary>
        /// <value>127.0.0.9 - Open Proxy Server.</value>
        [DataMember(Name = "open_proxy_server", EmitDefaultValue = true)]
        public bool OpenProxyServer { get; set; }

        /// <summary>
        /// 127.0.0.10 - Policy Block List ISP.
        /// </summary>
        /// <value>127.0.0.10 - Policy Block List ISP.</value>
        [DataMember(Name = "policy_block_list_isp", EmitDefaultValue = true)]
        public bool PolicyBlockListIsp { get; set; }

        /// <summary>
        /// 127.0.0.11 - Policy Block List Domain Owner.
        /// </summary>
        /// <value>127.0.0.11 - Policy Block List Domain Owner.</value>
        [DataMember(Name = "policy_block_list_domain", EmitDefaultValue = true)]
        public bool PolicyBlockListDomain { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RblServicesBlockedResponses {\n");
            sb.Append("  BlockAll: ").Append(BlockAll).Append("\n");
            sb.Append("  OpenRelay: ").Append(OpenRelay).Append("\n");
            sb.Append("  DialupSpamSource: ").Append(DialupSpamSource).Append("\n");
            sb.Append("  SpamSource: ").Append(SpamSource).Append("\n");
            sb.Append("  SmartHost: ").Append(SmartHost).Append("\n");
            sb.Append("  SpamwareSite: ").Append(SpamwareSite).Append("\n");
            sb.Append("  BadListServer: ").Append(BadListServer).Append("\n");
            sb.Append("  InsecureScript: ").Append(InsecureScript).Append("\n");
            sb.Append("  OpenProxyServer: ").Append(OpenProxyServer).Append("\n");
            sb.Append("  PolicyBlockListIsp: ").Append(PolicyBlockListIsp).Append("\n");
            sb.Append("  PolicyBlockListDomain: ").Append(PolicyBlockListDomain).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RblServicesBlockedResponses);
        }

        /// <summary>
        /// Returns true if RblServicesBlockedResponses instances are equal
        /// </summary>
        /// <param name="input">Instance of RblServicesBlockedResponses to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RblServicesBlockedResponses input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BlockAll == input.BlockAll ||
                    this.BlockAll.Equals(input.BlockAll)
                ) && 
                (
                    this.OpenRelay == input.OpenRelay ||
                    this.OpenRelay.Equals(input.OpenRelay)
                ) && 
                (
                    this.DialupSpamSource == input.DialupSpamSource ||
                    this.DialupSpamSource.Equals(input.DialupSpamSource)
                ) && 
                (
                    this.SpamSource == input.SpamSource ||
                    this.SpamSource.Equals(input.SpamSource)
                ) && 
                (
                    this.SmartHost == input.SmartHost ||
                    this.SmartHost.Equals(input.SmartHost)
                ) && 
                (
                    this.SpamwareSite == input.SpamwareSite ||
                    this.SpamwareSite.Equals(input.SpamwareSite)
                ) && 
                (
                    this.BadListServer == input.BadListServer ||
                    this.BadListServer.Equals(input.BadListServer)
                ) && 
                (
                    this.InsecureScript == input.InsecureScript ||
                    this.InsecureScript.Equals(input.InsecureScript)
                ) && 
                (
                    this.OpenProxyServer == input.OpenProxyServer ||
                    this.OpenProxyServer.Equals(input.OpenProxyServer)
                ) && 
                (
                    this.PolicyBlockListIsp == input.PolicyBlockListIsp ||
                    this.PolicyBlockListIsp.Equals(input.PolicyBlockListIsp)
                ) && 
                (
                    this.PolicyBlockListDomain == input.PolicyBlockListDomain ||
                    this.PolicyBlockListDomain.Equals(input.PolicyBlockListDomain)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.BlockAll.GetHashCode();
                hashCode = (hashCode * 59) + this.OpenRelay.GetHashCode();
                hashCode = (hashCode * 59) + this.DialupSpamSource.GetHashCode();
                hashCode = (hashCode * 59) + this.SpamSource.GetHashCode();
                hashCode = (hashCode * 59) + this.SmartHost.GetHashCode();
                hashCode = (hashCode * 59) + this.SpamwareSite.GetHashCode();
                hashCode = (hashCode * 59) + this.BadListServer.GetHashCode();
                hashCode = (hashCode * 59) + this.InsecureScript.GetHashCode();
                hashCode = (hashCode * 59) + this.OpenProxyServer.GetHashCode();
                hashCode = (hashCode * 59) + this.PolicyBlockListIsp.GetHashCode();
                hashCode = (hashCode * 59) + this.PolicyBlockListDomain.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
