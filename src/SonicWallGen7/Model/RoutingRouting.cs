/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enter routing configuration mode.
    /// </summary>
    [DataContract(Name = "routing_routing")]
    public partial class RoutingRouting : IEquatable<RoutingRouting>, IValidatableObject
    {
        /// <summary>
        /// Routing mode.
        /// </summary>
        /// <value>Routing mode.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModeEnum
        {
            /// <summary>
            /// Enum Simple for value: simple
            /// </summary>
            [EnumMember(Value = "simple")]
            Simple = 1,

            /// <summary>
            /// Enum Advanced for value: advanced
            /// </summary>
            [EnumMember(Value = "advanced")]
            Advanced = 2
        }


        /// <summary>
        /// Routing mode.
        /// </summary>
        /// <value>Routing mode.</value>
        [DataMember(Name = "mode", EmitDefaultValue = false)]
        public ModeEnum? Mode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RoutingRouting" /> class.
        /// </summary>
        /// <param name="mode">Routing mode..</param>
        /// <param name="bgp">Enable and configure border gateway protocol (BGP)..</param>
        /// <param name="defaultRouteMetric">Set metric for default routes received from advanced routing protocols metric..</param>
        /// <param name="metricPriority">Enable prioritize routes by metric within route classes..</param>
        /// <param name="ipv6">ipv6.</param>
        public RoutingRouting(ModeEnum? mode = default(ModeEnum?), bool bgp = default(bool), decimal defaultRouteMetric = default(decimal), bool metricPriority = default(bool), RoutingRoutingIpv6 ipv6 = default(RoutingRoutingIpv6))
        {
            this.Mode = mode;
            this.Bgp = bgp;
            this.DefaultRouteMetric = defaultRouteMetric;
            this.MetricPriority = metricPriority;
            this.Ipv6 = ipv6;
        }

        /// <summary>
        /// Enable and configure border gateway protocol (BGP).
        /// </summary>
        /// <value>Enable and configure border gateway protocol (BGP).</value>
        [DataMember(Name = "bgp", EmitDefaultValue = true)]
        public bool Bgp { get; set; }

        /// <summary>
        /// Set metric for default routes received from advanced routing protocols metric.
        /// </summary>
        /// <value>Set metric for default routes received from advanced routing protocols metric.</value>
        [DataMember(Name = "default_route_metric", EmitDefaultValue = false)]
        public decimal DefaultRouteMetric { get; set; }

        /// <summary>
        /// Enable prioritize routes by metric within route classes.
        /// </summary>
        /// <value>Enable prioritize routes by metric within route classes.</value>
        [DataMember(Name = "metric_priority", EmitDefaultValue = true)]
        public bool MetricPriority { get; set; }

        /// <summary>
        /// Gets or Sets Ipv6
        /// </summary>
        [DataMember(Name = "ipv6", EmitDefaultValue = false)]
        public RoutingRoutingIpv6 Ipv6 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RoutingRouting {\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Bgp: ").Append(Bgp).Append("\n");
            sb.Append("  DefaultRouteMetric: ").Append(DefaultRouteMetric).Append("\n");
            sb.Append("  MetricPriority: ").Append(MetricPriority).Append("\n");
            sb.Append("  Ipv6: ").Append(Ipv6).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RoutingRouting);
        }

        /// <summary>
        /// Returns true if RoutingRouting instances are equal
        /// </summary>
        /// <param name="input">Instance of RoutingRouting to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RoutingRouting input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Mode == input.Mode ||
                    this.Mode.Equals(input.Mode)
                ) && 
                (
                    this.Bgp == input.Bgp ||
                    this.Bgp.Equals(input.Bgp)
                ) && 
                (
                    this.DefaultRouteMetric == input.DefaultRouteMetric ||
                    this.DefaultRouteMetric.Equals(input.DefaultRouteMetric)
                ) && 
                (
                    this.MetricPriority == input.MetricPriority ||
                    this.MetricPriority.Equals(input.MetricPriority)
                ) && 
                (
                    this.Ipv6 == input.Ipv6 ||
                    (this.Ipv6 != null &&
                    this.Ipv6.Equals(input.Ipv6))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Mode.GetHashCode();
                hashCode = (hashCode * 59) + this.Bgp.GetHashCode();
                hashCode = (hashCode * 59) + this.DefaultRouteMetric.GetHashCode();
                hashCode = (hashCode * 59) + this.MetricPriority.GetHashCode();
                if (this.Ipv6 != null)
                {
                    hashCode = (hashCode * 59) + this.Ipv6.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
