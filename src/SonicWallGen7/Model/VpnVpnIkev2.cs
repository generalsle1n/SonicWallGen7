/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure IKEv2.
    /// </summary>
    [DataContract(Name = "vpn_vpn_ikev2")]
    public partial class VpnVpnIkev2 : IEquatable<VpnVpnIkev2>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VpnVpnIkev2" /> class.
        /// </summary>
        /// <param name="sendCookie">Enable send IKEv2 cookie notify..</param>
        /// <param name="sendInvalidSpi">Enable send IKEv2 invalid spi notify..</param>
        /// <param name="proposal">proposal.</param>
        public VpnVpnIkev2(bool sendCookie = default(bool), bool sendInvalidSpi = default(bool), VpnVpnIkev2Proposal proposal = default(VpnVpnIkev2Proposal))
        {
            this.SendCookie = sendCookie;
            this.SendInvalidSpi = sendInvalidSpi;
            this.Proposal = proposal;
        }

        /// <summary>
        /// Enable send IKEv2 cookie notify.
        /// </summary>
        /// <value>Enable send IKEv2 cookie notify.</value>
        [DataMember(Name = "send_cookie", EmitDefaultValue = true)]
        public bool SendCookie { get; set; }

        /// <summary>
        /// Enable send IKEv2 invalid spi notify.
        /// </summary>
        /// <value>Enable send IKEv2 invalid spi notify.</value>
        [DataMember(Name = "send_invalid_spi", EmitDefaultValue = true)]
        public bool SendInvalidSpi { get; set; }

        /// <summary>
        /// Gets or Sets Proposal
        /// </summary>
        [DataMember(Name = "proposal", EmitDefaultValue = false)]
        public VpnVpnIkev2Proposal Proposal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VpnVpnIkev2 {\n");
            sb.Append("  SendCookie: ").Append(SendCookie).Append("\n");
            sb.Append("  SendInvalidSpi: ").Append(SendInvalidSpi).Append("\n");
            sb.Append("  Proposal: ").Append(Proposal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VpnVpnIkev2);
        }

        /// <summary>
        /// Returns true if VpnVpnIkev2 instances are equal
        /// </summary>
        /// <param name="input">Instance of VpnVpnIkev2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VpnVpnIkev2 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SendCookie == input.SendCookie ||
                    this.SendCookie.Equals(input.SendCookie)
                ) && 
                (
                    this.SendInvalidSpi == input.SendInvalidSpi ||
                    this.SendInvalidSpi.Equals(input.SendInvalidSpi)
                ) && 
                (
                    this.Proposal == input.Proposal ||
                    (this.Proposal != null &&
                    this.Proposal.Equals(input.Proposal))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SendCookie.GetHashCode();
                hashCode = (hashCode * 59) + this.SendInvalidSpi.GetHashCode();
                if (this.Proposal != null)
                {
                    hashCode = (hashCode * 59) + this.Proposal.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
