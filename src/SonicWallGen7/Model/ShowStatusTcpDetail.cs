/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// tcp detail schema.
    /// </summary>
    [DataContract(Name = "show_status_tcp_detail")]
    public partial class ShowStatusTcpDetail : IEquatable<ShowStatusTcpDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusTcpDetail" /> class.
        /// </summary>
        /// <param name="connectionsOpened">connectionsOpened.</param>
        /// <param name="connectionsClosed">connectionsClosed.</param>
        /// <param name="connectionsRefused">connectionsRefused.</param>
        /// <param name="connectionsAborted">connectionsAborted.</param>
        /// <param name="connectionHandshakeErrors">connectionHandshakeErrors.</param>
        /// <param name="connectionHandshakeTimeouts">connectionHandshakeTimeouts.</param>
        /// <param name="totalTcpPackets">totalTcpPackets.</param>
        /// <param name="validatedPacketsPassed">validatedPacketsPassed.</param>
        /// <param name="malformedPacketsDropped">malformedPacketsDropped.</param>
        /// <param name="invalidFlagPacketsDropped">invalidFlagPacketsDropped.</param>
        /// <param name="invalidSequencePacketsDropped">invalidSequencePacketsDropped.</param>
        /// <param name="invalidAcknowledgementPacketsDropped">invalidAcknowledgementPacketsDropped.</param>
        /// <param name="maxIncompleteWanConnectionsSec">maxIncompleteWanConnectionsSec.</param>
        /// <param name="averageIncompleteWanConnectionsSec">averageIncompleteWanConnectionsSec.</param>
        /// <param name="suggestedSynAttackThreshold">suggestedSynAttackThreshold.</param>
        /// <param name="synFloodsInProgress">synFloodsInProgress.</param>
        /// <param name="rstFloodsInProgress">rstFloodsInProgress.</param>
        /// <param name="finFloodsInProgress">finFloodsInProgress.</param>
        /// <param name="tcpFloodsInProgress">tcpFloodsInProgress.</param>
        /// <param name="totalSynRstOrFinFloodsDetected">totalSynRstOrFinFloodsDetected.</param>
        /// <param name="tcpConnectionSynProxyStateWanOnly">tcpConnectionSynProxyStateWanOnly.</param>
        /// <param name="currentSynBlacklistedMachines">currentSynBlacklistedMachines.</param>
        /// <param name="currentRstBlacklistedMachines">currentRstBlacklistedMachines.</param>
        /// <param name="currentFinBlacklistedMachines">currentFinBlacklistedMachines.</param>
        /// <param name="currentTcpBlacklistedMachines">currentTcpBlacklistedMachines.</param>
        /// <param name="totalSynBlacklistingEvents">totalSynBlacklistingEvents.</param>
        /// <param name="totalRstBlacklistingEvents">totalRstBlacklistingEvents.</param>
        /// <param name="totalFinBlacklistingEvents">totalFinBlacklistingEvents.</param>
        /// <param name="totalTcpBlacklistingEvents">totalTcpBlacklistingEvents.</param>
        /// <param name="totalSynBlacklistPacketsRejected">totalSynBlacklistPacketsRejected.</param>
        /// <param name="totalRstBlacklistPacketsRejected">totalRstBlacklistPacketsRejected.</param>
        /// <param name="totalFinBlacklistPacketsRejected">totalFinBlacklistPacketsRejected.</param>
        /// <param name="totalTcpBlacklistPacketsRejected">totalTcpBlacklistPacketsRejected.</param>
        /// <param name="invalidSynFloodCookiesReceived">invalidSynFloodCookiesReceived.</param>
        /// <param name="wanDdosFilterState">wanDdosFilterState.</param>
        /// <param name="wanDdosFilterPacketsRejected">wanDdosFilterPacketsRejected.</param>
        /// <param name="wanDdosFilterPacketsLeaked">wanDdosFilterPacketsLeaked.</param>
        /// <param name="wanDdosFilterAllowListCount">wanDdosFilterAllowListCount.</param>
        public ShowStatusTcpDetail(string connectionsOpened = default(string), string connectionsClosed = default(string), string connectionsRefused = default(string), string connectionsAborted = default(string), string connectionHandshakeErrors = default(string), string connectionHandshakeTimeouts = default(string), string totalTcpPackets = default(string), string validatedPacketsPassed = default(string), string malformedPacketsDropped = default(string), string invalidFlagPacketsDropped = default(string), string invalidSequencePacketsDropped = default(string), string invalidAcknowledgementPacketsDropped = default(string), string maxIncompleteWanConnectionsSec = default(string), string averageIncompleteWanConnectionsSec = default(string), string suggestedSynAttackThreshold = default(string), string synFloodsInProgress = default(string), string rstFloodsInProgress = default(string), string finFloodsInProgress = default(string), string tcpFloodsInProgress = default(string), string totalSynRstOrFinFloodsDetected = default(string), string tcpConnectionSynProxyStateWanOnly = default(string), string currentSynBlacklistedMachines = default(string), string currentRstBlacklistedMachines = default(string), string currentFinBlacklistedMachines = default(string), string currentTcpBlacklistedMachines = default(string), string totalSynBlacklistingEvents = default(string), string totalRstBlacklistingEvents = default(string), string totalFinBlacklistingEvents = default(string), string totalTcpBlacklistingEvents = default(string), string totalSynBlacklistPacketsRejected = default(string), string totalRstBlacklistPacketsRejected = default(string), string totalFinBlacklistPacketsRejected = default(string), string totalTcpBlacklistPacketsRejected = default(string), string invalidSynFloodCookiesReceived = default(string), string wanDdosFilterState = default(string), string wanDdosFilterPacketsRejected = default(string), string wanDdosFilterPacketsLeaked = default(string), string wanDdosFilterAllowListCount = default(string))
        {
            this.ConnectionsOpened = connectionsOpened;
            this.ConnectionsClosed = connectionsClosed;
            this.ConnectionsRefused = connectionsRefused;
            this.ConnectionsAborted = connectionsAborted;
            this.ConnectionHandshakeErrors = connectionHandshakeErrors;
            this.ConnectionHandshakeTimeouts = connectionHandshakeTimeouts;
            this.TotalTcpPackets = totalTcpPackets;
            this.ValidatedPacketsPassed = validatedPacketsPassed;
            this.MalformedPacketsDropped = malformedPacketsDropped;
            this.InvalidFlagPacketsDropped = invalidFlagPacketsDropped;
            this.InvalidSequencePacketsDropped = invalidSequencePacketsDropped;
            this.InvalidAcknowledgementPacketsDropped = invalidAcknowledgementPacketsDropped;
            this.MaxIncompleteWanConnectionsSec = maxIncompleteWanConnectionsSec;
            this.AverageIncompleteWanConnectionsSec = averageIncompleteWanConnectionsSec;
            this.SuggestedSynAttackThreshold = suggestedSynAttackThreshold;
            this.SynFloodsInProgress = synFloodsInProgress;
            this.RstFloodsInProgress = rstFloodsInProgress;
            this.FinFloodsInProgress = finFloodsInProgress;
            this.TcpFloodsInProgress = tcpFloodsInProgress;
            this.TotalSynRstOrFinFloodsDetected = totalSynRstOrFinFloodsDetected;
            this.TcpConnectionSynProxyStateWanOnly = tcpConnectionSynProxyStateWanOnly;
            this.CurrentSynBlacklistedMachines = currentSynBlacklistedMachines;
            this.CurrentRstBlacklistedMachines = currentRstBlacklistedMachines;
            this.CurrentFinBlacklistedMachines = currentFinBlacklistedMachines;
            this.CurrentTcpBlacklistedMachines = currentTcpBlacklistedMachines;
            this.TotalSynBlacklistingEvents = totalSynBlacklistingEvents;
            this.TotalRstBlacklistingEvents = totalRstBlacklistingEvents;
            this.TotalFinBlacklistingEvents = totalFinBlacklistingEvents;
            this.TotalTcpBlacklistingEvents = totalTcpBlacklistingEvents;
            this.TotalSynBlacklistPacketsRejected = totalSynBlacklistPacketsRejected;
            this.TotalRstBlacklistPacketsRejected = totalRstBlacklistPacketsRejected;
            this.TotalFinBlacklistPacketsRejected = totalFinBlacklistPacketsRejected;
            this.TotalTcpBlacklistPacketsRejected = totalTcpBlacklistPacketsRejected;
            this.InvalidSynFloodCookiesReceived = invalidSynFloodCookiesReceived;
            this.WanDdosFilterState = wanDdosFilterState;
            this.WanDdosFilterPacketsRejected = wanDdosFilterPacketsRejected;
            this.WanDdosFilterPacketsLeaked = wanDdosFilterPacketsLeaked;
            this.WanDdosFilterAllowListCount = wanDdosFilterAllowListCount;
        }

        /// <summary>
        /// Gets or Sets ConnectionsOpened
        /// </summary>
        [DataMember(Name = "connections_opened", EmitDefaultValue = false)]
        public string ConnectionsOpened { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionsClosed
        /// </summary>
        [DataMember(Name = "connections_closed", EmitDefaultValue = false)]
        public string ConnectionsClosed { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionsRefused
        /// </summary>
        [DataMember(Name = "connections_refused", EmitDefaultValue = false)]
        public string ConnectionsRefused { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionsAborted
        /// </summary>
        [DataMember(Name = "connections_aborted", EmitDefaultValue = false)]
        public string ConnectionsAborted { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionHandshakeErrors
        /// </summary>
        [DataMember(Name = "connection_handshake_errors", EmitDefaultValue = false)]
        public string ConnectionHandshakeErrors { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionHandshakeTimeouts
        /// </summary>
        [DataMember(Name = "connection_handshake_timeouts", EmitDefaultValue = false)]
        public string ConnectionHandshakeTimeouts { get; set; }

        /// <summary>
        /// Gets or Sets TotalTcpPackets
        /// </summary>
        [DataMember(Name = "total_tcp_packets", EmitDefaultValue = false)]
        public string TotalTcpPackets { get; set; }

        /// <summary>
        /// Gets or Sets ValidatedPacketsPassed
        /// </summary>
        [DataMember(Name = "validated_packets_passed", EmitDefaultValue = false)]
        public string ValidatedPacketsPassed { get; set; }

        /// <summary>
        /// Gets or Sets MalformedPacketsDropped
        /// </summary>
        [DataMember(Name = "malformed_packets_dropped", EmitDefaultValue = false)]
        public string MalformedPacketsDropped { get; set; }

        /// <summary>
        /// Gets or Sets InvalidFlagPacketsDropped
        /// </summary>
        [DataMember(Name = "invalid_flag_packets_dropped", EmitDefaultValue = false)]
        public string InvalidFlagPacketsDropped { get; set; }

        /// <summary>
        /// Gets or Sets InvalidSequencePacketsDropped
        /// </summary>
        [DataMember(Name = "invalid_sequence_packets_dropped", EmitDefaultValue = false)]
        public string InvalidSequencePacketsDropped { get; set; }

        /// <summary>
        /// Gets or Sets InvalidAcknowledgementPacketsDropped
        /// </summary>
        [DataMember(Name = "invalid_acknowledgement_packets_dropped", EmitDefaultValue = false)]
        public string InvalidAcknowledgementPacketsDropped { get; set; }

        /// <summary>
        /// Gets or Sets MaxIncompleteWanConnectionsSec
        /// </summary>
        [DataMember(Name = "max_incomplete_wan_connections_sec", EmitDefaultValue = false)]
        public string MaxIncompleteWanConnectionsSec { get; set; }

        /// <summary>
        /// Gets or Sets AverageIncompleteWanConnectionsSec
        /// </summary>
        [DataMember(Name = "average_incomplete_wan_connections_sec", EmitDefaultValue = false)]
        public string AverageIncompleteWanConnectionsSec { get; set; }

        /// <summary>
        /// Gets or Sets SuggestedSynAttackThreshold
        /// </summary>
        [DataMember(Name = "suggested_syn_attack_threshold", EmitDefaultValue = false)]
        public string SuggestedSynAttackThreshold { get; set; }

        /// <summary>
        /// Gets or Sets SynFloodsInProgress
        /// </summary>
        [DataMember(Name = "syn_floods_in_progress", EmitDefaultValue = false)]
        public string SynFloodsInProgress { get; set; }

        /// <summary>
        /// Gets or Sets RstFloodsInProgress
        /// </summary>
        [DataMember(Name = "rst_floods_in_progress", EmitDefaultValue = false)]
        public string RstFloodsInProgress { get; set; }

        /// <summary>
        /// Gets or Sets FinFloodsInProgress
        /// </summary>
        [DataMember(Name = "fin_floods_in_progress", EmitDefaultValue = false)]
        public string FinFloodsInProgress { get; set; }

        /// <summary>
        /// Gets or Sets TcpFloodsInProgress
        /// </summary>
        [DataMember(Name = "tcp_floods_in_progress", EmitDefaultValue = false)]
        public string TcpFloodsInProgress { get; set; }

        /// <summary>
        /// Gets or Sets TotalSynRstOrFinFloodsDetected
        /// </summary>
        [DataMember(Name = "total_syn_rst_or_fin_floods_detected", EmitDefaultValue = false)]
        public string TotalSynRstOrFinFloodsDetected { get; set; }

        /// <summary>
        /// Gets or Sets TcpConnectionSynProxyStateWanOnly
        /// </summary>
        [DataMember(Name = "tcp_connection_syn_proxy_state_wan_only", EmitDefaultValue = false)]
        public string TcpConnectionSynProxyStateWanOnly { get; set; }

        /// <summary>
        /// Gets or Sets CurrentSynBlacklistedMachines
        /// </summary>
        [DataMember(Name = "current_syn_blacklisted_machines", EmitDefaultValue = false)]
        public string CurrentSynBlacklistedMachines { get; set; }

        /// <summary>
        /// Gets or Sets CurrentRstBlacklistedMachines
        /// </summary>
        [DataMember(Name = "current_rst_blacklisted_machines", EmitDefaultValue = false)]
        public string CurrentRstBlacklistedMachines { get; set; }

        /// <summary>
        /// Gets or Sets CurrentFinBlacklistedMachines
        /// </summary>
        [DataMember(Name = "current_fin_blacklisted_machines", EmitDefaultValue = false)]
        public string CurrentFinBlacklistedMachines { get; set; }

        /// <summary>
        /// Gets or Sets CurrentTcpBlacklistedMachines
        /// </summary>
        [DataMember(Name = "current_tcp_blacklisted_machines", EmitDefaultValue = false)]
        public string CurrentTcpBlacklistedMachines { get; set; }

        /// <summary>
        /// Gets or Sets TotalSynBlacklistingEvents
        /// </summary>
        [DataMember(Name = "total_syn_blacklisting_events", EmitDefaultValue = false)]
        public string TotalSynBlacklistingEvents { get; set; }

        /// <summary>
        /// Gets or Sets TotalRstBlacklistingEvents
        /// </summary>
        [DataMember(Name = "total_rst_blacklisting_events", EmitDefaultValue = false)]
        public string TotalRstBlacklistingEvents { get; set; }

        /// <summary>
        /// Gets or Sets TotalFinBlacklistingEvents
        /// </summary>
        [DataMember(Name = "total_fin_blacklisting_events", EmitDefaultValue = false)]
        public string TotalFinBlacklistingEvents { get; set; }

        /// <summary>
        /// Gets or Sets TotalTcpBlacklistingEvents
        /// </summary>
        [DataMember(Name = "total_tcp_blacklisting_events", EmitDefaultValue = false)]
        public string TotalTcpBlacklistingEvents { get; set; }

        /// <summary>
        /// Gets or Sets TotalSynBlacklistPacketsRejected
        /// </summary>
        [DataMember(Name = "total_syn_blacklist_packets_rejected", EmitDefaultValue = false)]
        public string TotalSynBlacklistPacketsRejected { get; set; }

        /// <summary>
        /// Gets or Sets TotalRstBlacklistPacketsRejected
        /// </summary>
        [DataMember(Name = "total_rst_blacklist_packets_rejected", EmitDefaultValue = false)]
        public string TotalRstBlacklistPacketsRejected { get; set; }

        /// <summary>
        /// Gets or Sets TotalFinBlacklistPacketsRejected
        /// </summary>
        [DataMember(Name = "total_fin_blacklist_packets_rejected", EmitDefaultValue = false)]
        public string TotalFinBlacklistPacketsRejected { get; set; }

        /// <summary>
        /// Gets or Sets TotalTcpBlacklistPacketsRejected
        /// </summary>
        [DataMember(Name = "total_tcp_blacklist_packets_rejected", EmitDefaultValue = false)]
        public string TotalTcpBlacklistPacketsRejected { get; set; }

        /// <summary>
        /// Gets or Sets InvalidSynFloodCookiesReceived
        /// </summary>
        [DataMember(Name = "invalid_syn_flood_cookies_received", EmitDefaultValue = false)]
        public string InvalidSynFloodCookiesReceived { get; set; }

        /// <summary>
        /// Gets or Sets WanDdosFilterState
        /// </summary>
        [DataMember(Name = "wan_ddos_filter_state", EmitDefaultValue = false)]
        public string WanDdosFilterState { get; set; }

        /// <summary>
        /// Gets or Sets WanDdosFilterPacketsRejected
        /// </summary>
        [DataMember(Name = "wan_ddos_filter_packets_rejected", EmitDefaultValue = false)]
        public string WanDdosFilterPacketsRejected { get; set; }

        /// <summary>
        /// Gets or Sets WanDdosFilterPacketsLeaked
        /// </summary>
        [DataMember(Name = "wan_ddos_filter_packets_leaked", EmitDefaultValue = false)]
        public string WanDdosFilterPacketsLeaked { get; set; }

        /// <summary>
        /// Gets or Sets WanDdosFilterAllowListCount
        /// </summary>
        [DataMember(Name = "wan_ddos_filter_allow_list_count", EmitDefaultValue = false)]
        public string WanDdosFilterAllowListCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusTcpDetail {\n");
            sb.Append("  ConnectionsOpened: ").Append(ConnectionsOpened).Append("\n");
            sb.Append("  ConnectionsClosed: ").Append(ConnectionsClosed).Append("\n");
            sb.Append("  ConnectionsRefused: ").Append(ConnectionsRefused).Append("\n");
            sb.Append("  ConnectionsAborted: ").Append(ConnectionsAborted).Append("\n");
            sb.Append("  ConnectionHandshakeErrors: ").Append(ConnectionHandshakeErrors).Append("\n");
            sb.Append("  ConnectionHandshakeTimeouts: ").Append(ConnectionHandshakeTimeouts).Append("\n");
            sb.Append("  TotalTcpPackets: ").Append(TotalTcpPackets).Append("\n");
            sb.Append("  ValidatedPacketsPassed: ").Append(ValidatedPacketsPassed).Append("\n");
            sb.Append("  MalformedPacketsDropped: ").Append(MalformedPacketsDropped).Append("\n");
            sb.Append("  InvalidFlagPacketsDropped: ").Append(InvalidFlagPacketsDropped).Append("\n");
            sb.Append("  InvalidSequencePacketsDropped: ").Append(InvalidSequencePacketsDropped).Append("\n");
            sb.Append("  InvalidAcknowledgementPacketsDropped: ").Append(InvalidAcknowledgementPacketsDropped).Append("\n");
            sb.Append("  MaxIncompleteWanConnectionsSec: ").Append(MaxIncompleteWanConnectionsSec).Append("\n");
            sb.Append("  AverageIncompleteWanConnectionsSec: ").Append(AverageIncompleteWanConnectionsSec).Append("\n");
            sb.Append("  SuggestedSynAttackThreshold: ").Append(SuggestedSynAttackThreshold).Append("\n");
            sb.Append("  SynFloodsInProgress: ").Append(SynFloodsInProgress).Append("\n");
            sb.Append("  RstFloodsInProgress: ").Append(RstFloodsInProgress).Append("\n");
            sb.Append("  FinFloodsInProgress: ").Append(FinFloodsInProgress).Append("\n");
            sb.Append("  TcpFloodsInProgress: ").Append(TcpFloodsInProgress).Append("\n");
            sb.Append("  TotalSynRstOrFinFloodsDetected: ").Append(TotalSynRstOrFinFloodsDetected).Append("\n");
            sb.Append("  TcpConnectionSynProxyStateWanOnly: ").Append(TcpConnectionSynProxyStateWanOnly).Append("\n");
            sb.Append("  CurrentSynBlacklistedMachines: ").Append(CurrentSynBlacklistedMachines).Append("\n");
            sb.Append("  CurrentRstBlacklistedMachines: ").Append(CurrentRstBlacklistedMachines).Append("\n");
            sb.Append("  CurrentFinBlacklistedMachines: ").Append(CurrentFinBlacklistedMachines).Append("\n");
            sb.Append("  CurrentTcpBlacklistedMachines: ").Append(CurrentTcpBlacklistedMachines).Append("\n");
            sb.Append("  TotalSynBlacklistingEvents: ").Append(TotalSynBlacklistingEvents).Append("\n");
            sb.Append("  TotalRstBlacklistingEvents: ").Append(TotalRstBlacklistingEvents).Append("\n");
            sb.Append("  TotalFinBlacklistingEvents: ").Append(TotalFinBlacklistingEvents).Append("\n");
            sb.Append("  TotalTcpBlacklistingEvents: ").Append(TotalTcpBlacklistingEvents).Append("\n");
            sb.Append("  TotalSynBlacklistPacketsRejected: ").Append(TotalSynBlacklistPacketsRejected).Append("\n");
            sb.Append("  TotalRstBlacklistPacketsRejected: ").Append(TotalRstBlacklistPacketsRejected).Append("\n");
            sb.Append("  TotalFinBlacklistPacketsRejected: ").Append(TotalFinBlacklistPacketsRejected).Append("\n");
            sb.Append("  TotalTcpBlacklistPacketsRejected: ").Append(TotalTcpBlacklistPacketsRejected).Append("\n");
            sb.Append("  InvalidSynFloodCookiesReceived: ").Append(InvalidSynFloodCookiesReceived).Append("\n");
            sb.Append("  WanDdosFilterState: ").Append(WanDdosFilterState).Append("\n");
            sb.Append("  WanDdosFilterPacketsRejected: ").Append(WanDdosFilterPacketsRejected).Append("\n");
            sb.Append("  WanDdosFilterPacketsLeaked: ").Append(WanDdosFilterPacketsLeaked).Append("\n");
            sb.Append("  WanDdosFilterAllowListCount: ").Append(WanDdosFilterAllowListCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusTcpDetail);
        }

        /// <summary>
        /// Returns true if ShowStatusTcpDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusTcpDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusTcpDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ConnectionsOpened == input.ConnectionsOpened ||
                    (this.ConnectionsOpened != null &&
                    this.ConnectionsOpened.Equals(input.ConnectionsOpened))
                ) && 
                (
                    this.ConnectionsClosed == input.ConnectionsClosed ||
                    (this.ConnectionsClosed != null &&
                    this.ConnectionsClosed.Equals(input.ConnectionsClosed))
                ) && 
                (
                    this.ConnectionsRefused == input.ConnectionsRefused ||
                    (this.ConnectionsRefused != null &&
                    this.ConnectionsRefused.Equals(input.ConnectionsRefused))
                ) && 
                (
                    this.ConnectionsAborted == input.ConnectionsAborted ||
                    (this.ConnectionsAborted != null &&
                    this.ConnectionsAborted.Equals(input.ConnectionsAborted))
                ) && 
                (
                    this.ConnectionHandshakeErrors == input.ConnectionHandshakeErrors ||
                    (this.ConnectionHandshakeErrors != null &&
                    this.ConnectionHandshakeErrors.Equals(input.ConnectionHandshakeErrors))
                ) && 
                (
                    this.ConnectionHandshakeTimeouts == input.ConnectionHandshakeTimeouts ||
                    (this.ConnectionHandshakeTimeouts != null &&
                    this.ConnectionHandshakeTimeouts.Equals(input.ConnectionHandshakeTimeouts))
                ) && 
                (
                    this.TotalTcpPackets == input.TotalTcpPackets ||
                    (this.TotalTcpPackets != null &&
                    this.TotalTcpPackets.Equals(input.TotalTcpPackets))
                ) && 
                (
                    this.ValidatedPacketsPassed == input.ValidatedPacketsPassed ||
                    (this.ValidatedPacketsPassed != null &&
                    this.ValidatedPacketsPassed.Equals(input.ValidatedPacketsPassed))
                ) && 
                (
                    this.MalformedPacketsDropped == input.MalformedPacketsDropped ||
                    (this.MalformedPacketsDropped != null &&
                    this.MalformedPacketsDropped.Equals(input.MalformedPacketsDropped))
                ) && 
                (
                    this.InvalidFlagPacketsDropped == input.InvalidFlagPacketsDropped ||
                    (this.InvalidFlagPacketsDropped != null &&
                    this.InvalidFlagPacketsDropped.Equals(input.InvalidFlagPacketsDropped))
                ) && 
                (
                    this.InvalidSequencePacketsDropped == input.InvalidSequencePacketsDropped ||
                    (this.InvalidSequencePacketsDropped != null &&
                    this.InvalidSequencePacketsDropped.Equals(input.InvalidSequencePacketsDropped))
                ) && 
                (
                    this.InvalidAcknowledgementPacketsDropped == input.InvalidAcknowledgementPacketsDropped ||
                    (this.InvalidAcknowledgementPacketsDropped != null &&
                    this.InvalidAcknowledgementPacketsDropped.Equals(input.InvalidAcknowledgementPacketsDropped))
                ) && 
                (
                    this.MaxIncompleteWanConnectionsSec == input.MaxIncompleteWanConnectionsSec ||
                    (this.MaxIncompleteWanConnectionsSec != null &&
                    this.MaxIncompleteWanConnectionsSec.Equals(input.MaxIncompleteWanConnectionsSec))
                ) && 
                (
                    this.AverageIncompleteWanConnectionsSec == input.AverageIncompleteWanConnectionsSec ||
                    (this.AverageIncompleteWanConnectionsSec != null &&
                    this.AverageIncompleteWanConnectionsSec.Equals(input.AverageIncompleteWanConnectionsSec))
                ) && 
                (
                    this.SuggestedSynAttackThreshold == input.SuggestedSynAttackThreshold ||
                    (this.SuggestedSynAttackThreshold != null &&
                    this.SuggestedSynAttackThreshold.Equals(input.SuggestedSynAttackThreshold))
                ) && 
                (
                    this.SynFloodsInProgress == input.SynFloodsInProgress ||
                    (this.SynFloodsInProgress != null &&
                    this.SynFloodsInProgress.Equals(input.SynFloodsInProgress))
                ) && 
                (
                    this.RstFloodsInProgress == input.RstFloodsInProgress ||
                    (this.RstFloodsInProgress != null &&
                    this.RstFloodsInProgress.Equals(input.RstFloodsInProgress))
                ) && 
                (
                    this.FinFloodsInProgress == input.FinFloodsInProgress ||
                    (this.FinFloodsInProgress != null &&
                    this.FinFloodsInProgress.Equals(input.FinFloodsInProgress))
                ) && 
                (
                    this.TcpFloodsInProgress == input.TcpFloodsInProgress ||
                    (this.TcpFloodsInProgress != null &&
                    this.TcpFloodsInProgress.Equals(input.TcpFloodsInProgress))
                ) && 
                (
                    this.TotalSynRstOrFinFloodsDetected == input.TotalSynRstOrFinFloodsDetected ||
                    (this.TotalSynRstOrFinFloodsDetected != null &&
                    this.TotalSynRstOrFinFloodsDetected.Equals(input.TotalSynRstOrFinFloodsDetected))
                ) && 
                (
                    this.TcpConnectionSynProxyStateWanOnly == input.TcpConnectionSynProxyStateWanOnly ||
                    (this.TcpConnectionSynProxyStateWanOnly != null &&
                    this.TcpConnectionSynProxyStateWanOnly.Equals(input.TcpConnectionSynProxyStateWanOnly))
                ) && 
                (
                    this.CurrentSynBlacklistedMachines == input.CurrentSynBlacklistedMachines ||
                    (this.CurrentSynBlacklistedMachines != null &&
                    this.CurrentSynBlacklistedMachines.Equals(input.CurrentSynBlacklistedMachines))
                ) && 
                (
                    this.CurrentRstBlacklistedMachines == input.CurrentRstBlacklistedMachines ||
                    (this.CurrentRstBlacklistedMachines != null &&
                    this.CurrentRstBlacklistedMachines.Equals(input.CurrentRstBlacklistedMachines))
                ) && 
                (
                    this.CurrentFinBlacklistedMachines == input.CurrentFinBlacklistedMachines ||
                    (this.CurrentFinBlacklistedMachines != null &&
                    this.CurrentFinBlacklistedMachines.Equals(input.CurrentFinBlacklistedMachines))
                ) && 
                (
                    this.CurrentTcpBlacklistedMachines == input.CurrentTcpBlacklistedMachines ||
                    (this.CurrentTcpBlacklistedMachines != null &&
                    this.CurrentTcpBlacklistedMachines.Equals(input.CurrentTcpBlacklistedMachines))
                ) && 
                (
                    this.TotalSynBlacklistingEvents == input.TotalSynBlacklistingEvents ||
                    (this.TotalSynBlacklistingEvents != null &&
                    this.TotalSynBlacklistingEvents.Equals(input.TotalSynBlacklistingEvents))
                ) && 
                (
                    this.TotalRstBlacklistingEvents == input.TotalRstBlacklistingEvents ||
                    (this.TotalRstBlacklistingEvents != null &&
                    this.TotalRstBlacklistingEvents.Equals(input.TotalRstBlacklistingEvents))
                ) && 
                (
                    this.TotalFinBlacklistingEvents == input.TotalFinBlacklistingEvents ||
                    (this.TotalFinBlacklistingEvents != null &&
                    this.TotalFinBlacklistingEvents.Equals(input.TotalFinBlacklistingEvents))
                ) && 
                (
                    this.TotalTcpBlacklistingEvents == input.TotalTcpBlacklistingEvents ||
                    (this.TotalTcpBlacklistingEvents != null &&
                    this.TotalTcpBlacklistingEvents.Equals(input.TotalTcpBlacklistingEvents))
                ) && 
                (
                    this.TotalSynBlacklistPacketsRejected == input.TotalSynBlacklistPacketsRejected ||
                    (this.TotalSynBlacklistPacketsRejected != null &&
                    this.TotalSynBlacklistPacketsRejected.Equals(input.TotalSynBlacklistPacketsRejected))
                ) && 
                (
                    this.TotalRstBlacklistPacketsRejected == input.TotalRstBlacklistPacketsRejected ||
                    (this.TotalRstBlacklistPacketsRejected != null &&
                    this.TotalRstBlacklistPacketsRejected.Equals(input.TotalRstBlacklistPacketsRejected))
                ) && 
                (
                    this.TotalFinBlacklistPacketsRejected == input.TotalFinBlacklistPacketsRejected ||
                    (this.TotalFinBlacklistPacketsRejected != null &&
                    this.TotalFinBlacklistPacketsRejected.Equals(input.TotalFinBlacklistPacketsRejected))
                ) && 
                (
                    this.TotalTcpBlacklistPacketsRejected == input.TotalTcpBlacklistPacketsRejected ||
                    (this.TotalTcpBlacklistPacketsRejected != null &&
                    this.TotalTcpBlacklistPacketsRejected.Equals(input.TotalTcpBlacklistPacketsRejected))
                ) && 
                (
                    this.InvalidSynFloodCookiesReceived == input.InvalidSynFloodCookiesReceived ||
                    (this.InvalidSynFloodCookiesReceived != null &&
                    this.InvalidSynFloodCookiesReceived.Equals(input.InvalidSynFloodCookiesReceived))
                ) && 
                (
                    this.WanDdosFilterState == input.WanDdosFilterState ||
                    (this.WanDdosFilterState != null &&
                    this.WanDdosFilterState.Equals(input.WanDdosFilterState))
                ) && 
                (
                    this.WanDdosFilterPacketsRejected == input.WanDdosFilterPacketsRejected ||
                    (this.WanDdosFilterPacketsRejected != null &&
                    this.WanDdosFilterPacketsRejected.Equals(input.WanDdosFilterPacketsRejected))
                ) && 
                (
                    this.WanDdosFilterPacketsLeaked == input.WanDdosFilterPacketsLeaked ||
                    (this.WanDdosFilterPacketsLeaked != null &&
                    this.WanDdosFilterPacketsLeaked.Equals(input.WanDdosFilterPacketsLeaked))
                ) && 
                (
                    this.WanDdosFilterAllowListCount == input.WanDdosFilterAllowListCount ||
                    (this.WanDdosFilterAllowListCount != null &&
                    this.WanDdosFilterAllowListCount.Equals(input.WanDdosFilterAllowListCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConnectionsOpened != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionsOpened.GetHashCode();
                }
                if (this.ConnectionsClosed != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionsClosed.GetHashCode();
                }
                if (this.ConnectionsRefused != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionsRefused.GetHashCode();
                }
                if (this.ConnectionsAborted != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionsAborted.GetHashCode();
                }
                if (this.ConnectionHandshakeErrors != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionHandshakeErrors.GetHashCode();
                }
                if (this.ConnectionHandshakeTimeouts != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionHandshakeTimeouts.GetHashCode();
                }
                if (this.TotalTcpPackets != null)
                {
                    hashCode = (hashCode * 59) + this.TotalTcpPackets.GetHashCode();
                }
                if (this.ValidatedPacketsPassed != null)
                {
                    hashCode = (hashCode * 59) + this.ValidatedPacketsPassed.GetHashCode();
                }
                if (this.MalformedPacketsDropped != null)
                {
                    hashCode = (hashCode * 59) + this.MalformedPacketsDropped.GetHashCode();
                }
                if (this.InvalidFlagPacketsDropped != null)
                {
                    hashCode = (hashCode * 59) + this.InvalidFlagPacketsDropped.GetHashCode();
                }
                if (this.InvalidSequencePacketsDropped != null)
                {
                    hashCode = (hashCode * 59) + this.InvalidSequencePacketsDropped.GetHashCode();
                }
                if (this.InvalidAcknowledgementPacketsDropped != null)
                {
                    hashCode = (hashCode * 59) + this.InvalidAcknowledgementPacketsDropped.GetHashCode();
                }
                if (this.MaxIncompleteWanConnectionsSec != null)
                {
                    hashCode = (hashCode * 59) + this.MaxIncompleteWanConnectionsSec.GetHashCode();
                }
                if (this.AverageIncompleteWanConnectionsSec != null)
                {
                    hashCode = (hashCode * 59) + this.AverageIncompleteWanConnectionsSec.GetHashCode();
                }
                if (this.SuggestedSynAttackThreshold != null)
                {
                    hashCode = (hashCode * 59) + this.SuggestedSynAttackThreshold.GetHashCode();
                }
                if (this.SynFloodsInProgress != null)
                {
                    hashCode = (hashCode * 59) + this.SynFloodsInProgress.GetHashCode();
                }
                if (this.RstFloodsInProgress != null)
                {
                    hashCode = (hashCode * 59) + this.RstFloodsInProgress.GetHashCode();
                }
                if (this.FinFloodsInProgress != null)
                {
                    hashCode = (hashCode * 59) + this.FinFloodsInProgress.GetHashCode();
                }
                if (this.TcpFloodsInProgress != null)
                {
                    hashCode = (hashCode * 59) + this.TcpFloodsInProgress.GetHashCode();
                }
                if (this.TotalSynRstOrFinFloodsDetected != null)
                {
                    hashCode = (hashCode * 59) + this.TotalSynRstOrFinFloodsDetected.GetHashCode();
                }
                if (this.TcpConnectionSynProxyStateWanOnly != null)
                {
                    hashCode = (hashCode * 59) + this.TcpConnectionSynProxyStateWanOnly.GetHashCode();
                }
                if (this.CurrentSynBlacklistedMachines != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentSynBlacklistedMachines.GetHashCode();
                }
                if (this.CurrentRstBlacklistedMachines != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentRstBlacklistedMachines.GetHashCode();
                }
                if (this.CurrentFinBlacklistedMachines != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentFinBlacklistedMachines.GetHashCode();
                }
                if (this.CurrentTcpBlacklistedMachines != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentTcpBlacklistedMachines.GetHashCode();
                }
                if (this.TotalSynBlacklistingEvents != null)
                {
                    hashCode = (hashCode * 59) + this.TotalSynBlacklistingEvents.GetHashCode();
                }
                if (this.TotalRstBlacklistingEvents != null)
                {
                    hashCode = (hashCode * 59) + this.TotalRstBlacklistingEvents.GetHashCode();
                }
                if (this.TotalFinBlacklistingEvents != null)
                {
                    hashCode = (hashCode * 59) + this.TotalFinBlacklistingEvents.GetHashCode();
                }
                if (this.TotalTcpBlacklistingEvents != null)
                {
                    hashCode = (hashCode * 59) + this.TotalTcpBlacklistingEvents.GetHashCode();
                }
                if (this.TotalSynBlacklistPacketsRejected != null)
                {
                    hashCode = (hashCode * 59) + this.TotalSynBlacklistPacketsRejected.GetHashCode();
                }
                if (this.TotalRstBlacklistPacketsRejected != null)
                {
                    hashCode = (hashCode * 59) + this.TotalRstBlacklistPacketsRejected.GetHashCode();
                }
                if (this.TotalFinBlacklistPacketsRejected != null)
                {
                    hashCode = (hashCode * 59) + this.TotalFinBlacklistPacketsRejected.GetHashCode();
                }
                if (this.TotalTcpBlacklistPacketsRejected != null)
                {
                    hashCode = (hashCode * 59) + this.TotalTcpBlacklistPacketsRejected.GetHashCode();
                }
                if (this.InvalidSynFloodCookiesReceived != null)
                {
                    hashCode = (hashCode * 59) + this.InvalidSynFloodCookiesReceived.GetHashCode();
                }
                if (this.WanDdosFilterState != null)
                {
                    hashCode = (hashCode * 59) + this.WanDdosFilterState.GetHashCode();
                }
                if (this.WanDdosFilterPacketsRejected != null)
                {
                    hashCode = (hashCode * 59) + this.WanDdosFilterPacketsRejected.GetHashCode();
                }
                if (this.WanDdosFilterPacketsLeaked != null)
                {
                    hashCode = (hashCode * 59) + this.WanDdosFilterPacketsLeaked.GetHashCode();
                }
                if (this.WanDdosFilterAllowListCount != null)
                {
                    hashCode = (hashCode * 59) + this.WanDdosFilterAllowListCount.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
