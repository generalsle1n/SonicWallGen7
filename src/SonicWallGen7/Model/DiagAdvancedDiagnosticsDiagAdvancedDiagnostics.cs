/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure advanced diag diagnostics settings.
    /// </summary>
    [DataContract(Name = "diag_advanced_diagnostics_diag_advanced_diagnostics")]
    public partial class DiagAdvancedDiagnosticsDiagAdvancedDiagnostics : IEquatable<DiagAdvancedDiagnosticsDiagAdvancedDiagnostics>, IValidatableObject
    {
        /// <summary>
        /// Set the trace message level.
        /// </summary>
        /// <value>Set the trace message level.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TraceMessageLevelEnum
        {
            /// <summary>
            /// Enum Fatal for value: fatal
            /// </summary>
            [EnumMember(Value = "fatal")]
            Fatal = 1,

            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")]
            Error = 2,

            /// <summary>
            /// Enum Warning for value: warning
            /// </summary>
            [EnumMember(Value = "warning")]
            Warning = 3,

            /// <summary>
            /// Enum Info for value: info
            /// </summary>
            [EnumMember(Value = "info")]
            Info = 4,

            /// <summary>
            /// Enum Verbose for value: verbose
            /// </summary>
            [EnumMember(Value = "verbose")]
            Verbose = 5
        }


        /// <summary>
        /// Set the trace message level.
        /// </summary>
        /// <value>Set the trace message level.</value>
        [DataMember(Name = "trace_message_level", EmitDefaultValue = false)]
        public TraceMessageLevelEnum? TraceMessageLevel { get; set; }
        /// <summary>
        /// Enable logging of LDAP mirroring events to the user.log file in SonicCore.
        /// </summary>
        /// <value>Enable logging of LDAP mirroring events to the user.log file in SonicCore.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LogLdapMirrorEnum
        {
            /// <summary>
            /// Enum UpdatesOnly for value: updates-only
            /// </summary>
            [EnumMember(Value = "updates-only")]
            UpdatesOnly = 1,

            /// <summary>
            /// Enum WithContentFromLdap for value: with-content-from-ldap
            /// </summary>
            [EnumMember(Value = "with-content-from-ldap")]
            WithContentFromLdap = 2,

            /// <summary>
            /// Enum WithXmlFromLdap for value: with-xml-from-ldap
            /// </summary>
            [EnumMember(Value = "with-xml-from-ldap")]
            WithXmlFromLdap = 3
        }


        /// <summary>
        /// Enable logging of LDAP mirroring events to the user.log file in SonicCore.
        /// </summary>
        /// <value>Enable logging of LDAP mirroring events to the user.log file in SonicCore.</value>
        [DataMember(Name = "log_ldap_mirror", EmitDefaultValue = false)]
        public LogLdapMirrorEnum? LogLdapMirror { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagAdvancedDiagnosticsDiagAdvancedDiagnostics" /> class.
        /// </summary>
        /// <param name="traceMessageLevel">Set the trace message level..</param>
        /// <param name="autoRestart">autoRestart.</param>
        /// <param name="setupToolServer">Enable SonicSetup/Setuptool server..</param>
        /// <param name="showUserDiagnostics">Enable to show user diagnostics on web block by CFS..</param>
        /// <param name="wanConnectivityTest">wanConnectivityTest.</param>
        /// <param name="memoryFreeCallTracking">memoryFreeCallTracking.</param>
        /// <param name="logLdapMirror">Enable logging of LDAP mirroring events to the user.log file in SonicCore..</param>
        public DiagAdvancedDiagnosticsDiagAdvancedDiagnostics(TraceMessageLevelEnum? traceMessageLevel = default(TraceMessageLevelEnum?), DiagAdvancedDiagnosticsDiagAdvancedDiagnosticsAutoRestart autoRestart = default(DiagAdvancedDiagnosticsDiagAdvancedDiagnosticsAutoRestart), bool setupToolServer = default(bool), bool showUserDiagnostics = default(bool), DiagAdvancedDiagnosticsDiagAdvancedDiagnosticsWanConnectivityTest wanConnectivityTest = default(DiagAdvancedDiagnosticsDiagAdvancedDiagnosticsWanConnectivityTest), DiagAdvancedDiagnosticsDiagAdvancedDiagnosticsMemoryFreeCallTracking memoryFreeCallTracking = default(DiagAdvancedDiagnosticsDiagAdvancedDiagnosticsMemoryFreeCallTracking), LogLdapMirrorEnum? logLdapMirror = default(LogLdapMirrorEnum?))
        {
            this.TraceMessageLevel = traceMessageLevel;
            this.AutoRestart = autoRestart;
            this.SetupToolServer = setupToolServer;
            this.ShowUserDiagnostics = showUserDiagnostics;
            this.WanConnectivityTest = wanConnectivityTest;
            this.MemoryFreeCallTracking = memoryFreeCallTracking;
            this.LogLdapMirror = logLdapMirror;
        }

        /// <summary>
        /// Gets or Sets AutoRestart
        /// </summary>
        [DataMember(Name = "auto_restart", EmitDefaultValue = true)]
        public DiagAdvancedDiagnosticsDiagAdvancedDiagnosticsAutoRestart AutoRestart { get; set; }

        /// <summary>
        /// Enable SonicSetup/Setuptool server.
        /// </summary>
        /// <value>Enable SonicSetup/Setuptool server.</value>
        [DataMember(Name = "setup_tool_server", EmitDefaultValue = true)]
        public bool SetupToolServer { get; set; }

        /// <summary>
        /// Enable to show user diagnostics on web block by CFS.
        /// </summary>
        /// <value>Enable to show user diagnostics on web block by CFS.</value>
        [DataMember(Name = "show_user_diagnostics", EmitDefaultValue = true)]
        public bool ShowUserDiagnostics { get; set; }

        /// <summary>
        /// Gets or Sets WanConnectivityTest
        /// </summary>
        [DataMember(Name = "wan_connectivity_test", EmitDefaultValue = false)]
        public DiagAdvancedDiagnosticsDiagAdvancedDiagnosticsWanConnectivityTest WanConnectivityTest { get; set; }

        /// <summary>
        /// Gets or Sets MemoryFreeCallTracking
        /// </summary>
        [DataMember(Name = "memory_free_call_tracking", EmitDefaultValue = false)]
        public DiagAdvancedDiagnosticsDiagAdvancedDiagnosticsMemoryFreeCallTracking MemoryFreeCallTracking { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DiagAdvancedDiagnosticsDiagAdvancedDiagnostics {\n");
            sb.Append("  TraceMessageLevel: ").Append(TraceMessageLevel).Append("\n");
            sb.Append("  AutoRestart: ").Append(AutoRestart).Append("\n");
            sb.Append("  SetupToolServer: ").Append(SetupToolServer).Append("\n");
            sb.Append("  ShowUserDiagnostics: ").Append(ShowUserDiagnostics).Append("\n");
            sb.Append("  WanConnectivityTest: ").Append(WanConnectivityTest).Append("\n");
            sb.Append("  MemoryFreeCallTracking: ").Append(MemoryFreeCallTracking).Append("\n");
            sb.Append("  LogLdapMirror: ").Append(LogLdapMirror).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiagAdvancedDiagnosticsDiagAdvancedDiagnostics);
        }

        /// <summary>
        /// Returns true if DiagAdvancedDiagnosticsDiagAdvancedDiagnostics instances are equal
        /// </summary>
        /// <param name="input">Instance of DiagAdvancedDiagnosticsDiagAdvancedDiagnostics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiagAdvancedDiagnosticsDiagAdvancedDiagnostics input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TraceMessageLevel == input.TraceMessageLevel ||
                    this.TraceMessageLevel.Equals(input.TraceMessageLevel)
                ) && 
                (
                    this.AutoRestart == input.AutoRestart ||
                    (this.AutoRestart != null &&
                    this.AutoRestart.Equals(input.AutoRestart))
                ) && 
                (
                    this.SetupToolServer == input.SetupToolServer ||
                    this.SetupToolServer.Equals(input.SetupToolServer)
                ) && 
                (
                    this.ShowUserDiagnostics == input.ShowUserDiagnostics ||
                    this.ShowUserDiagnostics.Equals(input.ShowUserDiagnostics)
                ) && 
                (
                    this.WanConnectivityTest == input.WanConnectivityTest ||
                    (this.WanConnectivityTest != null &&
                    this.WanConnectivityTest.Equals(input.WanConnectivityTest))
                ) && 
                (
                    this.MemoryFreeCallTracking == input.MemoryFreeCallTracking ||
                    (this.MemoryFreeCallTracking != null &&
                    this.MemoryFreeCallTracking.Equals(input.MemoryFreeCallTracking))
                ) && 
                (
                    this.LogLdapMirror == input.LogLdapMirror ||
                    this.LogLdapMirror.Equals(input.LogLdapMirror)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.TraceMessageLevel.GetHashCode();
                if (this.AutoRestart != null)
                {
                    hashCode = (hashCode * 59) + this.AutoRestart.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SetupToolServer.GetHashCode();
                hashCode = (hashCode * 59) + this.ShowUserDiagnostics.GetHashCode();
                if (this.WanConnectivityTest != null)
                {
                    hashCode = (hashCode * 59) + this.WanConnectivityTest.GetHashCode();
                }
                if (this.MemoryFreeCallTracking != null)
                {
                    hashCode = (hashCode * 59) + this.MemoryFreeCallTracking.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LogLdapMirror.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
