/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// radius acct client detail schema.
    /// </summary>
    [DataContract(Name = "show_status_radius_acct_client_detail")]
    public partial class ShowStatusRadiusAcctClientDetail : IEquatable<ShowStatusRadiusAcctClientDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusRadiusAcctClientDetail" /> class.
        /// </summary>
        /// <param name="varClient">varClient.</param>
        /// <param name="ipAddress">ipAddress.</param>
        /// <param name="status">status.</param>
        /// <param name="timeIdleSeconds">timeIdleSeconds.</param>
        /// <param name="totalAccountingRequests">totalAccountingRequests.</param>
        /// <param name="goodAccountingRequests">goodAccountingRequests.</param>
        /// <param name="badAccountingRequests">badAccountingRequests.</param>
        /// <param name="nonAccountingRequestsReceivedDropped">nonAccountingRequestsReceivedDropped.</param>
        /// <param name="startUserRequestsRcvd">startUserRequestsRcvd.</param>
        /// <param name="startUserRequestsRepeats">startUserRequestsRepeats.</param>
        /// <param name="startUserRequestsErrors">startUserRequestsErrors.</param>
        /// <param name="stopUserRequestsReceived">stopUserRequestsReceived.</param>
        /// <param name="stopUserRequestsErrors">stopUserRequestsErrors.</param>
        /// <param name="successfulUserLogins">successfulUserLogins.</param>
        /// <param name="failedUserLogins">failedUserLogins.</param>
        /// <param name="userLogouts">userLogouts.</param>
        /// <param name="userNotFoundErrorsWithStopUser">userNotFoundErrorsWithStopUser.</param>
        /// <param name="proxyForwardingRequestsSent">proxyForwardingRequestsSent.</param>
        /// <param name="proxyForwardingRequestsResponsesRcvd">proxyForwardingRequestsResponsesRcvd.</param>
        /// <param name="proxyForwardingResponseErrors">proxyForwardingResponseErrors.</param>
        /// <param name="proxyForwardingResponseTimeouts">proxyForwardingResponseTimeouts.</param>
        /// <param name="responseTimeToProxyForwardedRqstAvg">responseTimeToProxyForwardedRqstAvg.</param>
        /// <param name="responseTimeToProxyForwardedRqstMax">responseTimeToProxyForwardedRqstMax.</param>
        public ShowStatusRadiusAcctClientDetail(string varClient = default(string), string ipAddress = default(string), string status = default(string), string timeIdleSeconds = default(string), string totalAccountingRequests = default(string), string goodAccountingRequests = default(string), string badAccountingRequests = default(string), string nonAccountingRequestsReceivedDropped = default(string), string startUserRequestsRcvd = default(string), string startUserRequestsRepeats = default(string), string startUserRequestsErrors = default(string), string stopUserRequestsReceived = default(string), string stopUserRequestsErrors = default(string), string successfulUserLogins = default(string), string failedUserLogins = default(string), string userLogouts = default(string), string userNotFoundErrorsWithStopUser = default(string), string proxyForwardingRequestsSent = default(string), string proxyForwardingRequestsResponsesRcvd = default(string), string proxyForwardingResponseErrors = default(string), string proxyForwardingResponseTimeouts = default(string), string responseTimeToProxyForwardedRqstAvg = default(string), string responseTimeToProxyForwardedRqstMax = default(string))
        {
            this.VarClient = varClient;
            this.IpAddress = ipAddress;
            this.Status = status;
            this.TimeIdleSeconds = timeIdleSeconds;
            this.TotalAccountingRequests = totalAccountingRequests;
            this.GoodAccountingRequests = goodAccountingRequests;
            this.BadAccountingRequests = badAccountingRequests;
            this.NonAccountingRequestsReceivedDropped = nonAccountingRequestsReceivedDropped;
            this.StartUserRequestsRcvd = startUserRequestsRcvd;
            this.StartUserRequestsRepeats = startUserRequestsRepeats;
            this.StartUserRequestsErrors = startUserRequestsErrors;
            this.StopUserRequestsReceived = stopUserRequestsReceived;
            this.StopUserRequestsErrors = stopUserRequestsErrors;
            this.SuccessfulUserLogins = successfulUserLogins;
            this.FailedUserLogins = failedUserLogins;
            this.UserLogouts = userLogouts;
            this.UserNotFoundErrorsWithStopUser = userNotFoundErrorsWithStopUser;
            this.ProxyForwardingRequestsSent = proxyForwardingRequestsSent;
            this.ProxyForwardingRequestsResponsesRcvd = proxyForwardingRequestsResponsesRcvd;
            this.ProxyForwardingResponseErrors = proxyForwardingResponseErrors;
            this.ProxyForwardingResponseTimeouts = proxyForwardingResponseTimeouts;
            this.ResponseTimeToProxyForwardedRqstAvg = responseTimeToProxyForwardedRqstAvg;
            this.ResponseTimeToProxyForwardedRqstMax = responseTimeToProxyForwardedRqstMax;
        }

        /// <summary>
        /// Gets or Sets VarClient
        /// </summary>
        [DataMember(Name = "client", EmitDefaultValue = false)]
        public string VarClient { get; set; }

        /// <summary>
        /// Gets or Sets IpAddress
        /// </summary>
        [DataMember(Name = "ip_address", EmitDefaultValue = false)]
        public string IpAddress { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets TimeIdleSeconds
        /// </summary>
        [DataMember(Name = "time_idle_seconds", EmitDefaultValue = false)]
        public string TimeIdleSeconds { get; set; }

        /// <summary>
        /// Gets or Sets TotalAccountingRequests
        /// </summary>
        [DataMember(Name = "total_accounting_requests", EmitDefaultValue = false)]
        public string TotalAccountingRequests { get; set; }

        /// <summary>
        /// Gets or Sets GoodAccountingRequests
        /// </summary>
        [DataMember(Name = "good_accounting_requests", EmitDefaultValue = false)]
        public string GoodAccountingRequests { get; set; }

        /// <summary>
        /// Gets or Sets BadAccountingRequests
        /// </summary>
        [DataMember(Name = "bad_accounting_requests", EmitDefaultValue = false)]
        public string BadAccountingRequests { get; set; }

        /// <summary>
        /// Gets or Sets NonAccountingRequestsReceivedDropped
        /// </summary>
        [DataMember(Name = "non_accounting_requests_received_dropped", EmitDefaultValue = false)]
        public string NonAccountingRequestsReceivedDropped { get; set; }

        /// <summary>
        /// Gets or Sets StartUserRequestsRcvd
        /// </summary>
        [DataMember(Name = "start_user_requests_rcvd", EmitDefaultValue = false)]
        public string StartUserRequestsRcvd { get; set; }

        /// <summary>
        /// Gets or Sets StartUserRequestsRepeats
        /// </summary>
        [DataMember(Name = "start_user_requests_repeats", EmitDefaultValue = false)]
        public string StartUserRequestsRepeats { get; set; }

        /// <summary>
        /// Gets or Sets StartUserRequestsErrors
        /// </summary>
        [DataMember(Name = "start_user_requests_errors", EmitDefaultValue = false)]
        public string StartUserRequestsErrors { get; set; }

        /// <summary>
        /// Gets or Sets StopUserRequestsReceived
        /// </summary>
        [DataMember(Name = "stop_user_requests_received", EmitDefaultValue = false)]
        public string StopUserRequestsReceived { get; set; }

        /// <summary>
        /// Gets or Sets StopUserRequestsErrors
        /// </summary>
        [DataMember(Name = "stop_user_requests_errors", EmitDefaultValue = false)]
        public string StopUserRequestsErrors { get; set; }

        /// <summary>
        /// Gets or Sets SuccessfulUserLogins
        /// </summary>
        [DataMember(Name = "successful_user_logins", EmitDefaultValue = false)]
        public string SuccessfulUserLogins { get; set; }

        /// <summary>
        /// Gets or Sets FailedUserLogins
        /// </summary>
        [DataMember(Name = "failed_user_logins", EmitDefaultValue = false)]
        public string FailedUserLogins { get; set; }

        /// <summary>
        /// Gets or Sets UserLogouts
        /// </summary>
        [DataMember(Name = "user_logouts", EmitDefaultValue = false)]
        public string UserLogouts { get; set; }

        /// <summary>
        /// Gets or Sets UserNotFoundErrorsWithStopUser
        /// </summary>
        [DataMember(Name = "user_not_found_errors_with_stop_user", EmitDefaultValue = false)]
        public string UserNotFoundErrorsWithStopUser { get; set; }

        /// <summary>
        /// Gets or Sets ProxyForwardingRequestsSent
        /// </summary>
        [DataMember(Name = "proxy_forwarding_requests_sent", EmitDefaultValue = false)]
        public string ProxyForwardingRequestsSent { get; set; }

        /// <summary>
        /// Gets or Sets ProxyForwardingRequestsResponsesRcvd
        /// </summary>
        [DataMember(Name = "proxy_forwarding_requests_responses_rcvd", EmitDefaultValue = false)]
        public string ProxyForwardingRequestsResponsesRcvd { get; set; }

        /// <summary>
        /// Gets or Sets ProxyForwardingResponseErrors
        /// </summary>
        [DataMember(Name = "proxy_forwarding_response_errors", EmitDefaultValue = false)]
        public string ProxyForwardingResponseErrors { get; set; }

        /// <summary>
        /// Gets or Sets ProxyForwardingResponseTimeouts
        /// </summary>
        [DataMember(Name = "proxy_forwarding_response_timeouts", EmitDefaultValue = false)]
        public string ProxyForwardingResponseTimeouts { get; set; }

        /// <summary>
        /// Gets or Sets ResponseTimeToProxyForwardedRqstAvg
        /// </summary>
        [DataMember(Name = "response_time_to_proxy_forwarded_rqst_avg", EmitDefaultValue = false)]
        public string ResponseTimeToProxyForwardedRqstAvg { get; set; }

        /// <summary>
        /// Gets or Sets ResponseTimeToProxyForwardedRqstMax
        /// </summary>
        [DataMember(Name = "response_time_to_proxy_forwarded_rqst_max", EmitDefaultValue = false)]
        public string ResponseTimeToProxyForwardedRqstMax { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusRadiusAcctClientDetail {\n");
            sb.Append("  VarClient: ").Append(VarClient).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TimeIdleSeconds: ").Append(TimeIdleSeconds).Append("\n");
            sb.Append("  TotalAccountingRequests: ").Append(TotalAccountingRequests).Append("\n");
            sb.Append("  GoodAccountingRequests: ").Append(GoodAccountingRequests).Append("\n");
            sb.Append("  BadAccountingRequests: ").Append(BadAccountingRequests).Append("\n");
            sb.Append("  NonAccountingRequestsReceivedDropped: ").Append(NonAccountingRequestsReceivedDropped).Append("\n");
            sb.Append("  StartUserRequestsRcvd: ").Append(StartUserRequestsRcvd).Append("\n");
            sb.Append("  StartUserRequestsRepeats: ").Append(StartUserRequestsRepeats).Append("\n");
            sb.Append("  StartUserRequestsErrors: ").Append(StartUserRequestsErrors).Append("\n");
            sb.Append("  StopUserRequestsReceived: ").Append(StopUserRequestsReceived).Append("\n");
            sb.Append("  StopUserRequestsErrors: ").Append(StopUserRequestsErrors).Append("\n");
            sb.Append("  SuccessfulUserLogins: ").Append(SuccessfulUserLogins).Append("\n");
            sb.Append("  FailedUserLogins: ").Append(FailedUserLogins).Append("\n");
            sb.Append("  UserLogouts: ").Append(UserLogouts).Append("\n");
            sb.Append("  UserNotFoundErrorsWithStopUser: ").Append(UserNotFoundErrorsWithStopUser).Append("\n");
            sb.Append("  ProxyForwardingRequestsSent: ").Append(ProxyForwardingRequestsSent).Append("\n");
            sb.Append("  ProxyForwardingRequestsResponsesRcvd: ").Append(ProxyForwardingRequestsResponsesRcvd).Append("\n");
            sb.Append("  ProxyForwardingResponseErrors: ").Append(ProxyForwardingResponseErrors).Append("\n");
            sb.Append("  ProxyForwardingResponseTimeouts: ").Append(ProxyForwardingResponseTimeouts).Append("\n");
            sb.Append("  ResponseTimeToProxyForwardedRqstAvg: ").Append(ResponseTimeToProxyForwardedRqstAvg).Append("\n");
            sb.Append("  ResponseTimeToProxyForwardedRqstMax: ").Append(ResponseTimeToProxyForwardedRqstMax).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusRadiusAcctClientDetail);
        }

        /// <summary>
        /// Returns true if ShowStatusRadiusAcctClientDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusRadiusAcctClientDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusRadiusAcctClientDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VarClient == input.VarClient ||
                    (this.VarClient != null &&
                    this.VarClient.Equals(input.VarClient))
                ) && 
                (
                    this.IpAddress == input.IpAddress ||
                    (this.IpAddress != null &&
                    this.IpAddress.Equals(input.IpAddress))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TimeIdleSeconds == input.TimeIdleSeconds ||
                    (this.TimeIdleSeconds != null &&
                    this.TimeIdleSeconds.Equals(input.TimeIdleSeconds))
                ) && 
                (
                    this.TotalAccountingRequests == input.TotalAccountingRequests ||
                    (this.TotalAccountingRequests != null &&
                    this.TotalAccountingRequests.Equals(input.TotalAccountingRequests))
                ) && 
                (
                    this.GoodAccountingRequests == input.GoodAccountingRequests ||
                    (this.GoodAccountingRequests != null &&
                    this.GoodAccountingRequests.Equals(input.GoodAccountingRequests))
                ) && 
                (
                    this.BadAccountingRequests == input.BadAccountingRequests ||
                    (this.BadAccountingRequests != null &&
                    this.BadAccountingRequests.Equals(input.BadAccountingRequests))
                ) && 
                (
                    this.NonAccountingRequestsReceivedDropped == input.NonAccountingRequestsReceivedDropped ||
                    (this.NonAccountingRequestsReceivedDropped != null &&
                    this.NonAccountingRequestsReceivedDropped.Equals(input.NonAccountingRequestsReceivedDropped))
                ) && 
                (
                    this.StartUserRequestsRcvd == input.StartUserRequestsRcvd ||
                    (this.StartUserRequestsRcvd != null &&
                    this.StartUserRequestsRcvd.Equals(input.StartUserRequestsRcvd))
                ) && 
                (
                    this.StartUserRequestsRepeats == input.StartUserRequestsRepeats ||
                    (this.StartUserRequestsRepeats != null &&
                    this.StartUserRequestsRepeats.Equals(input.StartUserRequestsRepeats))
                ) && 
                (
                    this.StartUserRequestsErrors == input.StartUserRequestsErrors ||
                    (this.StartUserRequestsErrors != null &&
                    this.StartUserRequestsErrors.Equals(input.StartUserRequestsErrors))
                ) && 
                (
                    this.StopUserRequestsReceived == input.StopUserRequestsReceived ||
                    (this.StopUserRequestsReceived != null &&
                    this.StopUserRequestsReceived.Equals(input.StopUserRequestsReceived))
                ) && 
                (
                    this.StopUserRequestsErrors == input.StopUserRequestsErrors ||
                    (this.StopUserRequestsErrors != null &&
                    this.StopUserRequestsErrors.Equals(input.StopUserRequestsErrors))
                ) && 
                (
                    this.SuccessfulUserLogins == input.SuccessfulUserLogins ||
                    (this.SuccessfulUserLogins != null &&
                    this.SuccessfulUserLogins.Equals(input.SuccessfulUserLogins))
                ) && 
                (
                    this.FailedUserLogins == input.FailedUserLogins ||
                    (this.FailedUserLogins != null &&
                    this.FailedUserLogins.Equals(input.FailedUserLogins))
                ) && 
                (
                    this.UserLogouts == input.UserLogouts ||
                    (this.UserLogouts != null &&
                    this.UserLogouts.Equals(input.UserLogouts))
                ) && 
                (
                    this.UserNotFoundErrorsWithStopUser == input.UserNotFoundErrorsWithStopUser ||
                    (this.UserNotFoundErrorsWithStopUser != null &&
                    this.UserNotFoundErrorsWithStopUser.Equals(input.UserNotFoundErrorsWithStopUser))
                ) && 
                (
                    this.ProxyForwardingRequestsSent == input.ProxyForwardingRequestsSent ||
                    (this.ProxyForwardingRequestsSent != null &&
                    this.ProxyForwardingRequestsSent.Equals(input.ProxyForwardingRequestsSent))
                ) && 
                (
                    this.ProxyForwardingRequestsResponsesRcvd == input.ProxyForwardingRequestsResponsesRcvd ||
                    (this.ProxyForwardingRequestsResponsesRcvd != null &&
                    this.ProxyForwardingRequestsResponsesRcvd.Equals(input.ProxyForwardingRequestsResponsesRcvd))
                ) && 
                (
                    this.ProxyForwardingResponseErrors == input.ProxyForwardingResponseErrors ||
                    (this.ProxyForwardingResponseErrors != null &&
                    this.ProxyForwardingResponseErrors.Equals(input.ProxyForwardingResponseErrors))
                ) && 
                (
                    this.ProxyForwardingResponseTimeouts == input.ProxyForwardingResponseTimeouts ||
                    (this.ProxyForwardingResponseTimeouts != null &&
                    this.ProxyForwardingResponseTimeouts.Equals(input.ProxyForwardingResponseTimeouts))
                ) && 
                (
                    this.ResponseTimeToProxyForwardedRqstAvg == input.ResponseTimeToProxyForwardedRqstAvg ||
                    (this.ResponseTimeToProxyForwardedRqstAvg != null &&
                    this.ResponseTimeToProxyForwardedRqstAvg.Equals(input.ResponseTimeToProxyForwardedRqstAvg))
                ) && 
                (
                    this.ResponseTimeToProxyForwardedRqstMax == input.ResponseTimeToProxyForwardedRqstMax ||
                    (this.ResponseTimeToProxyForwardedRqstMax != null &&
                    this.ResponseTimeToProxyForwardedRqstMax.Equals(input.ResponseTimeToProxyForwardedRqstMax))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VarClient != null)
                {
                    hashCode = (hashCode * 59) + this.VarClient.GetHashCode();
                }
                if (this.IpAddress != null)
                {
                    hashCode = (hashCode * 59) + this.IpAddress.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.TimeIdleSeconds != null)
                {
                    hashCode = (hashCode * 59) + this.TimeIdleSeconds.GetHashCode();
                }
                if (this.TotalAccountingRequests != null)
                {
                    hashCode = (hashCode * 59) + this.TotalAccountingRequests.GetHashCode();
                }
                if (this.GoodAccountingRequests != null)
                {
                    hashCode = (hashCode * 59) + this.GoodAccountingRequests.GetHashCode();
                }
                if (this.BadAccountingRequests != null)
                {
                    hashCode = (hashCode * 59) + this.BadAccountingRequests.GetHashCode();
                }
                if (this.NonAccountingRequestsReceivedDropped != null)
                {
                    hashCode = (hashCode * 59) + this.NonAccountingRequestsReceivedDropped.GetHashCode();
                }
                if (this.StartUserRequestsRcvd != null)
                {
                    hashCode = (hashCode * 59) + this.StartUserRequestsRcvd.GetHashCode();
                }
                if (this.StartUserRequestsRepeats != null)
                {
                    hashCode = (hashCode * 59) + this.StartUserRequestsRepeats.GetHashCode();
                }
                if (this.StartUserRequestsErrors != null)
                {
                    hashCode = (hashCode * 59) + this.StartUserRequestsErrors.GetHashCode();
                }
                if (this.StopUserRequestsReceived != null)
                {
                    hashCode = (hashCode * 59) + this.StopUserRequestsReceived.GetHashCode();
                }
                if (this.StopUserRequestsErrors != null)
                {
                    hashCode = (hashCode * 59) + this.StopUserRequestsErrors.GetHashCode();
                }
                if (this.SuccessfulUserLogins != null)
                {
                    hashCode = (hashCode * 59) + this.SuccessfulUserLogins.GetHashCode();
                }
                if (this.FailedUserLogins != null)
                {
                    hashCode = (hashCode * 59) + this.FailedUserLogins.GetHashCode();
                }
                if (this.UserLogouts != null)
                {
                    hashCode = (hashCode * 59) + this.UserLogouts.GetHashCode();
                }
                if (this.UserNotFoundErrorsWithStopUser != null)
                {
                    hashCode = (hashCode * 59) + this.UserNotFoundErrorsWithStopUser.GetHashCode();
                }
                if (this.ProxyForwardingRequestsSent != null)
                {
                    hashCode = (hashCode * 59) + this.ProxyForwardingRequestsSent.GetHashCode();
                }
                if (this.ProxyForwardingRequestsResponsesRcvd != null)
                {
                    hashCode = (hashCode * 59) + this.ProxyForwardingRequestsResponsesRcvd.GetHashCode();
                }
                if (this.ProxyForwardingResponseErrors != null)
                {
                    hashCode = (hashCode * 59) + this.ProxyForwardingResponseErrors.GetHashCode();
                }
                if (this.ProxyForwardingResponseTimeouts != null)
                {
                    hashCode = (hashCode * 59) + this.ProxyForwardingResponseTimeouts.GetHashCode();
                }
                if (this.ResponseTimeToProxyForwardedRqstAvg != null)
                {
                    hashCode = (hashCode * 59) + this.ResponseTimeToProxyForwardedRqstAvg.GetHashCode();
                }
                if (this.ResponseTimeToProxyForwardedRqstMax != null)
                {
                    hashCode = (hashCode * 59) + this.ResponseTimeToProxyForwardedRqstMax.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
