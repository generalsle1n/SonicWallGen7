/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// SchedulerOccursRecurringRecurringRecurringInner
    /// </summary>
    [DataContract(Name = "scheduler_occurs_recurring_recurring_recurring_inner")]
    public partial class SchedulerOccursRecurringRecurringRecurringInner : IEquatable<SchedulerOccursRecurringRecurringRecurringInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SchedulerOccursRecurringRecurringRecurringInner" /> class.
        /// </summary>
        /// <param name="start">start.</param>
        /// <param name="end">end.</param>
        /// <param name="sun">Day of the week..</param>
        /// <param name="mon">Day of the week..</param>
        /// <param name="tue">Day of the week..</param>
        /// <param name="wed">Day of the week..</param>
        /// <param name="thu">Day of the week..</param>
        /// <param name="fri">Day of the week..</param>
        /// <param name="sat">Day of the week..</param>
        public SchedulerOccursRecurringRecurringRecurringInner(string start = default(string), string end = default(string), bool sun = default(bool), bool mon = default(bool), bool tue = default(bool), bool wed = default(bool), bool thu = default(bool), bool fri = default(bool), bool sat = default(bool))
        {
            this.Start = start;
            this.End = end;
            this.Sun = sun;
            this.Mon = mon;
            this.Tue = tue;
            this.Wed = wed;
            this.Thu = thu;
            this.Fri = fri;
            this.Sat = sat;
        }

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name = "start", EmitDefaultValue = false)]
        public string Start { get; set; }

        /// <summary>
        /// Gets or Sets End
        /// </summary>
        [DataMember(Name = "end", EmitDefaultValue = false)]
        public string End { get; set; }

        /// <summary>
        /// Day of the week.
        /// </summary>
        /// <value>Day of the week.</value>
        [DataMember(Name = "sun", EmitDefaultValue = true)]
        public bool Sun { get; set; }

        /// <summary>
        /// Day of the week.
        /// </summary>
        /// <value>Day of the week.</value>
        [DataMember(Name = "mon", EmitDefaultValue = true)]
        public bool Mon { get; set; }

        /// <summary>
        /// Day of the week.
        /// </summary>
        /// <value>Day of the week.</value>
        [DataMember(Name = "tue", EmitDefaultValue = true)]
        public bool Tue { get; set; }

        /// <summary>
        /// Day of the week.
        /// </summary>
        /// <value>Day of the week.</value>
        [DataMember(Name = "wed", EmitDefaultValue = true)]
        public bool Wed { get; set; }

        /// <summary>
        /// Day of the week.
        /// </summary>
        /// <value>Day of the week.</value>
        [DataMember(Name = "thu", EmitDefaultValue = true)]
        public bool Thu { get; set; }

        /// <summary>
        /// Day of the week.
        /// </summary>
        /// <value>Day of the week.</value>
        [DataMember(Name = "fri", EmitDefaultValue = true)]
        public bool Fri { get; set; }

        /// <summary>
        /// Day of the week.
        /// </summary>
        /// <value>Day of the week.</value>
        [DataMember(Name = "sat", EmitDefaultValue = true)]
        public bool Sat { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SchedulerOccursRecurringRecurringRecurringInner {\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  Sun: ").Append(Sun).Append("\n");
            sb.Append("  Mon: ").Append(Mon).Append("\n");
            sb.Append("  Tue: ").Append(Tue).Append("\n");
            sb.Append("  Wed: ").Append(Wed).Append("\n");
            sb.Append("  Thu: ").Append(Thu).Append("\n");
            sb.Append("  Fri: ").Append(Fri).Append("\n");
            sb.Append("  Sat: ").Append(Sat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SchedulerOccursRecurringRecurringRecurringInner);
        }

        /// <summary>
        /// Returns true if SchedulerOccursRecurringRecurringRecurringInner instances are equal
        /// </summary>
        /// <param name="input">Instance of SchedulerOccursRecurringRecurringRecurringInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SchedulerOccursRecurringRecurringRecurringInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.End == input.End ||
                    (this.End != null &&
                    this.End.Equals(input.End))
                ) && 
                (
                    this.Sun == input.Sun ||
                    this.Sun.Equals(input.Sun)
                ) && 
                (
                    this.Mon == input.Mon ||
                    this.Mon.Equals(input.Mon)
                ) && 
                (
                    this.Tue == input.Tue ||
                    this.Tue.Equals(input.Tue)
                ) && 
                (
                    this.Wed == input.Wed ||
                    this.Wed.Equals(input.Wed)
                ) && 
                (
                    this.Thu == input.Thu ||
                    this.Thu.Equals(input.Thu)
                ) && 
                (
                    this.Fri == input.Fri ||
                    this.Fri.Equals(input.Fri)
                ) && 
                (
                    this.Sat == input.Sat ||
                    this.Sat.Equals(input.Sat)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Start != null)
                {
                    hashCode = (hashCode * 59) + this.Start.GetHashCode();
                }
                if (this.End != null)
                {
                    hashCode = (hashCode * 59) + this.End.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Sun.GetHashCode();
                hashCode = (hashCode * 59) + this.Mon.GetHashCode();
                hashCode = (hashCode * 59) + this.Tue.GetHashCode();
                hashCode = (hashCode * 59) + this.Wed.GetHashCode();
                hashCode = (hashCode * 59) + this.Thu.GetHashCode();
                hashCode = (hashCode * 59) + this.Fri.GetHashCode();
                hashCode = (hashCode * 59) + this.Sat.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
