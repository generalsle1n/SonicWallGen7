/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enter IPv4 DHCP server configuration mode.
    /// </summary>
    [DataContract(Name = "dhcp_server_base_dhcp_server_ipv4")]
    public partial class DhcpServerBaseDhcpServerIpv4 : IEquatable<DhcpServerBaseDhcpServerIpv4>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DhcpServerBaseDhcpServerIpv4" /> class.
        /// </summary>
        /// <param name="enable">Enable DHCP server..</param>
        /// <param name="conflictDetection">Enable DHCP server conflict detection..</param>
        /// <param name="persistence">Enable DHCP server persistence..</param>
        /// <param name="persistenceMonitoringInterval">Set DHCP server persistence monitoring interval in minutes..</param>
        /// <param name="trustedRelayAgents">Enable and set trusted DHCP relay agent list. * Set to null to represent an unconfigured state..</param>
        /// <param name="recycleExpiredLease">Enable aggressively recycle expired DHCP leases in advance. * Set to null to represent an unconfigured state..</param>
        public DhcpServerBaseDhcpServerIpv4(bool enable = default(bool), bool conflictDetection = default(bool), bool persistence = default(bool), decimal persistenceMonitoringInterval = default(decimal), string trustedRelayAgents = default(string), decimal? recycleExpiredLease = default(decimal?))
        {
            this.Enable = enable;
            this.ConflictDetection = conflictDetection;
            this.Persistence = persistence;
            this.PersistenceMonitoringInterval = persistenceMonitoringInterval;
            this.TrustedRelayAgents = trustedRelayAgents;
            this.RecycleExpiredLease = recycleExpiredLease;
        }

        /// <summary>
        /// Enable DHCP server.
        /// </summary>
        /// <value>Enable DHCP server.</value>
        [DataMember(Name = "enable", EmitDefaultValue = true)]
        public bool Enable { get; set; }

        /// <summary>
        /// Enable DHCP server conflict detection.
        /// </summary>
        /// <value>Enable DHCP server conflict detection.</value>
        [DataMember(Name = "conflict_detection", EmitDefaultValue = true)]
        public bool ConflictDetection { get; set; }

        /// <summary>
        /// Enable DHCP server persistence.
        /// </summary>
        /// <value>Enable DHCP server persistence.</value>
        [DataMember(Name = "persistence", EmitDefaultValue = true)]
        public bool Persistence { get; set; }

        /// <summary>
        /// Set DHCP server persistence monitoring interval in minutes.
        /// </summary>
        /// <value>Set DHCP server persistence monitoring interval in minutes.</value>
        [DataMember(Name = "persistence_monitoring_interval", EmitDefaultValue = false)]
        public decimal PersistenceMonitoringInterval { get; set; }

        /// <summary>
        /// Enable and set trusted DHCP relay agent list. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Enable and set trusted DHCP relay agent list. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "trusted_relay_agents", EmitDefaultValue = true)]
        public string TrustedRelayAgents { get; set; }

        /// <summary>
        /// Enable aggressively recycle expired DHCP leases in advance. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Enable aggressively recycle expired DHCP leases in advance. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "recycle_expired_lease", EmitDefaultValue = true)]
        public decimal? RecycleExpiredLease { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DhcpServerBaseDhcpServerIpv4 {\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  ConflictDetection: ").Append(ConflictDetection).Append("\n");
            sb.Append("  Persistence: ").Append(Persistence).Append("\n");
            sb.Append("  PersistenceMonitoringInterval: ").Append(PersistenceMonitoringInterval).Append("\n");
            sb.Append("  TrustedRelayAgents: ").Append(TrustedRelayAgents).Append("\n");
            sb.Append("  RecycleExpiredLease: ").Append(RecycleExpiredLease).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DhcpServerBaseDhcpServerIpv4);
        }

        /// <summary>
        /// Returns true if DhcpServerBaseDhcpServerIpv4 instances are equal
        /// </summary>
        /// <param name="input">Instance of DhcpServerBaseDhcpServerIpv4 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DhcpServerBaseDhcpServerIpv4 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.ConflictDetection == input.ConflictDetection ||
                    this.ConflictDetection.Equals(input.ConflictDetection)
                ) && 
                (
                    this.Persistence == input.Persistence ||
                    this.Persistence.Equals(input.Persistence)
                ) && 
                (
                    this.PersistenceMonitoringInterval == input.PersistenceMonitoringInterval ||
                    this.PersistenceMonitoringInterval.Equals(input.PersistenceMonitoringInterval)
                ) && 
                (
                    this.TrustedRelayAgents == input.TrustedRelayAgents ||
                    (this.TrustedRelayAgents != null &&
                    this.TrustedRelayAgents.Equals(input.TrustedRelayAgents))
                ) && 
                (
                    this.RecycleExpiredLease == input.RecycleExpiredLease ||
                    (this.RecycleExpiredLease != null &&
                    this.RecycleExpiredLease.Equals(input.RecycleExpiredLease))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Enable.GetHashCode();
                hashCode = (hashCode * 59) + this.ConflictDetection.GetHashCode();
                hashCode = (hashCode * 59) + this.Persistence.GetHashCode();
                hashCode = (hashCode * 59) + this.PersistenceMonitoringInterval.GetHashCode();
                if (this.TrustedRelayAgents != null)
                {
                    hashCode = (hashCode * 59) + this.TrustedRelayAgents.GetHashCode();
                }
                if (this.RecycleExpiredLease != null)
                {
                    hashCode = (hashCode * 59) + this.RecycleExpiredLease.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
