/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure RADIUS accounting settings.
    /// </summary>
    [DataContract(Name = "user_radius_accounting_base_user_radius_accounting")]
    public partial class UserRadiusAccountingBaseUserRadiusAccounting : IEquatable<UserRadiusAccountingBaseUserRadiusAccounting>, IValidatableObject
    {
        /// <summary>
        /// Include different users in user accounting.
        /// </summary>
        /// <value>Include different users in user accounting.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IncludeEnum
        {
            /// <summary>
            /// Enum DomainUsers for value: domain-users
            /// </summary>
            [EnumMember(Value = "domain-users")]
            DomainUsers = 1,

            /// <summary>
            /// Enum LocalUsers for value: local-users
            /// </summary>
            [EnumMember(Value = "local-users")]
            LocalUsers = 2,

            /// <summary>
            /// Enum DomainAndLocalUsers for value: domain-and-local-users
            /// </summary>
            [EnumMember(Value = "domain-and-local-users")]
            DomainAndLocalUsers = 3
        }


        /// <summary>
        /// Include different users in user accounting.
        /// </summary>
        /// <value>Include different users in user accounting.</value>
        [DataMember(Name = "include", EmitDefaultValue = false)]
        public IncludeEnum? Include { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRadiusAccountingBaseUserRadiusAccounting" /> class.
        /// </summary>
        /// <param name="timeout">Set the timeout for the RADIUS accounting servers..</param>
        /// <param name="retries">Set the number of retries for the RADIUS accounting servers..</param>
        /// <param name="interimUpdates">Set the send interim updates for user accounting. * Set to null to represent an unconfigured state..</param>
        /// <param name="data">data.</param>
        /// <param name="include">Include different users in user accounting..</param>
        public UserRadiusAccountingBaseUserRadiusAccounting(decimal timeout = default(decimal), decimal retries = default(decimal), decimal? interimUpdates = default(decimal?), UserRadiusAccountingBaseUserRadiusAccountingData data = default(UserRadiusAccountingBaseUserRadiusAccountingData), IncludeEnum? include = default(IncludeEnum?))
        {
            this.Timeout = timeout;
            this.Retries = retries;
            this.InterimUpdates = interimUpdates;
            this.Data = data;
            this.Include = include;
        }

        /// <summary>
        /// Set the timeout for the RADIUS accounting servers.
        /// </summary>
        /// <value>Set the timeout for the RADIUS accounting servers.</value>
        [DataMember(Name = "timeout", EmitDefaultValue = false)]
        public decimal Timeout { get; set; }

        /// <summary>
        /// Set the number of retries for the RADIUS accounting servers.
        /// </summary>
        /// <value>Set the number of retries for the RADIUS accounting servers.</value>
        [DataMember(Name = "retries", EmitDefaultValue = false)]
        public decimal Retries { get; set; }

        /// <summary>
        /// Set the send interim updates for user accounting. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Set the send interim updates for user accounting. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "interim_updates", EmitDefaultValue = true)]
        public decimal? InterimUpdates { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public UserRadiusAccountingBaseUserRadiusAccountingData Data { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserRadiusAccountingBaseUserRadiusAccounting {\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  Retries: ").Append(Retries).Append("\n");
            sb.Append("  InterimUpdates: ").Append(InterimUpdates).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Include: ").Append(Include).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserRadiusAccountingBaseUserRadiusAccounting);
        }

        /// <summary>
        /// Returns true if UserRadiusAccountingBaseUserRadiusAccounting instances are equal
        /// </summary>
        /// <param name="input">Instance of UserRadiusAccountingBaseUserRadiusAccounting to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserRadiusAccountingBaseUserRadiusAccounting input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Timeout == input.Timeout ||
                    this.Timeout.Equals(input.Timeout)
                ) && 
                (
                    this.Retries == input.Retries ||
                    this.Retries.Equals(input.Retries)
                ) && 
                (
                    this.InterimUpdates == input.InterimUpdates ||
                    (this.InterimUpdates != null &&
                    this.InterimUpdates.Equals(input.InterimUpdates))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.Include == input.Include ||
                    this.Include.Equals(input.Include)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Timeout.GetHashCode();
                hashCode = (hashCode * 59) + this.Retries.GetHashCode();
                if (this.InterimUpdates != null)
                {
                    hashCode = (hashCode * 59) + this.InterimUpdates.GetHashCode();
                }
                if (this.Data != null)
                {
                    hashCode = (hashCode * 59) + this.Data.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Include.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Timeout (decimal) maximum
            if (this.Timeout > (decimal)300)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Timeout, must be a value less than or equal to 300.", new [] { "Timeout" });
            }

            // Timeout (decimal) minimum
            if (this.Timeout < (decimal)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Timeout, must be a value greater than or equal to 1.", new [] { "Timeout" });
            }

            yield break;
        }
    }

}
