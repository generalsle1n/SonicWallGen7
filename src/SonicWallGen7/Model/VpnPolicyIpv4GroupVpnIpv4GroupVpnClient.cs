/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Client configuration.
    /// </summary>
    [DataContract(Name = "vpn_policy_ipv4_group_vpn_ipv4_group_vpn_client")]
    public partial class VpnPolicyIpv4GroupVpnIpv4GroupVpnClient : IEquatable<VpnPolicyIpv4GroupVpnIpv4GroupVpnClient>, IValidatableObject
    {
        /// <summary>
        /// Configure cache XAUTH user name and password on client.
        /// </summary>
        /// <value>Configure cache XAUTH user name and password on client.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CacheXauthEnum
        {
            /// <summary>
            /// Enum Never for value: never
            /// </summary>
            [EnumMember(Value = "never")]
            Never = 1,

            /// <summary>
            /// Enum SingleSession for value: single-session
            /// </summary>
            [EnumMember(Value = "single-session")]
            SingleSession = 2,

            /// <summary>
            /// Enum Always for value: always
            /// </summary>
            [EnumMember(Value = "always")]
            Always = 3
        }


        /// <summary>
        /// Configure cache XAUTH user name and password on client.
        /// </summary>
        /// <value>Configure cache XAUTH user name and password on client.</value>
        [DataMember(Name = "cache_xauth", EmitDefaultValue = false)]
        public CacheXauthEnum? CacheXauth { get; set; }
        /// <summary>
        /// Configure virtual adaptor lease settings.
        /// </summary>
        /// <value>Configure virtual adaptor lease settings.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VirtualAdaptorEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum DhcpOnly for value: dhcp-only
            /// </summary>
            [EnumMember(Value = "dhcp-only")]
            DhcpOnly = 2,

            /// <summary>
            /// Enum DhcpAndManual for value: dhcp-and-manual
            /// </summary>
            [EnumMember(Value = "dhcp-and-manual")]
            DhcpAndManual = 3
        }


        /// <summary>
        /// Configure virtual adaptor lease settings.
        /// </summary>
        /// <value>Configure virtual adaptor lease settings.</value>
        [DataMember(Name = "virtual_adaptor", EmitDefaultValue = false)]
        public VirtualAdaptorEnum? VirtualAdaptor { get; set; }
        /// <summary>
        /// Configure what connections to allow to.
        /// </summary>
        /// <value>Configure what connections to allow to.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AllowConnectionsToEnum
        {
            /// <summary>
            /// Enum ThisGatewayOnly for value: this-gateway-only
            /// </summary>
            [EnumMember(Value = "this-gateway-only")]
            ThisGatewayOnly = 1,

            /// <summary>
            /// Enum AllSecuredGateways for value: all-secured-gateways
            /// </summary>
            [EnumMember(Value = "all-secured-gateways")]
            AllSecuredGateways = 2,

            /// <summary>
            /// Enum SplitTunnels for value: split-tunnels
            /// </summary>
            [EnumMember(Value = "split-tunnels")]
            SplitTunnels = 3
        }


        /// <summary>
        /// Configure what connections to allow to.
        /// </summary>
        /// <value>Configure what connections to allow to.</value>
        [DataMember(Name = "allow_connections_to", EmitDefaultValue = false)]
        public AllowConnectionsToEnum? AllowConnectionsTo { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VpnPolicyIpv4GroupVpnIpv4GroupVpnClient" /> class.
        /// </summary>
        /// <param name="cacheXauth">Configure cache XAUTH user name and password on client..</param>
        /// <param name="virtualAdaptor">Configure virtual adaptor lease settings..</param>
        /// <param name="allowConnectionsTo">Configure what connections to allow to..</param>
        /// <param name="defaultRoute">Configure default route as this gateway..</param>
        /// <param name="accessList">Enable apply VPN access control list..</param>
        /// <param name="simpleProvisioning">Enable use default key for simple client provisioning..</param>
        public VpnPolicyIpv4GroupVpnIpv4GroupVpnClient(CacheXauthEnum? cacheXauth = default(CacheXauthEnum?), VirtualAdaptorEnum? virtualAdaptor = default(VirtualAdaptorEnum?), AllowConnectionsToEnum? allowConnectionsTo = default(AllowConnectionsToEnum?), bool defaultRoute = default(bool), bool accessList = default(bool), bool simpleProvisioning = default(bool))
        {
            this.CacheXauth = cacheXauth;
            this.VirtualAdaptor = virtualAdaptor;
            this.AllowConnectionsTo = allowConnectionsTo;
            this.DefaultRoute = defaultRoute;
            this.AccessList = accessList;
            this.SimpleProvisioning = simpleProvisioning;
        }

        /// <summary>
        /// Configure default route as this gateway.
        /// </summary>
        /// <value>Configure default route as this gateway.</value>
        [DataMember(Name = "default_route", EmitDefaultValue = true)]
        public bool DefaultRoute { get; set; }

        /// <summary>
        /// Enable apply VPN access control list.
        /// </summary>
        /// <value>Enable apply VPN access control list.</value>
        [DataMember(Name = "access_list", EmitDefaultValue = true)]
        public bool AccessList { get; set; }

        /// <summary>
        /// Enable use default key for simple client provisioning.
        /// </summary>
        /// <value>Enable use default key for simple client provisioning.</value>
        [DataMember(Name = "simple_provisioning", EmitDefaultValue = true)]
        public bool SimpleProvisioning { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VpnPolicyIpv4GroupVpnIpv4GroupVpnClient {\n");
            sb.Append("  CacheXauth: ").Append(CacheXauth).Append("\n");
            sb.Append("  VirtualAdaptor: ").Append(VirtualAdaptor).Append("\n");
            sb.Append("  AllowConnectionsTo: ").Append(AllowConnectionsTo).Append("\n");
            sb.Append("  DefaultRoute: ").Append(DefaultRoute).Append("\n");
            sb.Append("  AccessList: ").Append(AccessList).Append("\n");
            sb.Append("  SimpleProvisioning: ").Append(SimpleProvisioning).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VpnPolicyIpv4GroupVpnIpv4GroupVpnClient);
        }

        /// <summary>
        /// Returns true if VpnPolicyIpv4GroupVpnIpv4GroupVpnClient instances are equal
        /// </summary>
        /// <param name="input">Instance of VpnPolicyIpv4GroupVpnIpv4GroupVpnClient to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VpnPolicyIpv4GroupVpnIpv4GroupVpnClient input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CacheXauth == input.CacheXauth ||
                    this.CacheXauth.Equals(input.CacheXauth)
                ) && 
                (
                    this.VirtualAdaptor == input.VirtualAdaptor ||
                    this.VirtualAdaptor.Equals(input.VirtualAdaptor)
                ) && 
                (
                    this.AllowConnectionsTo == input.AllowConnectionsTo ||
                    this.AllowConnectionsTo.Equals(input.AllowConnectionsTo)
                ) && 
                (
                    this.DefaultRoute == input.DefaultRoute ||
                    this.DefaultRoute.Equals(input.DefaultRoute)
                ) && 
                (
                    this.AccessList == input.AccessList ||
                    this.AccessList.Equals(input.AccessList)
                ) && 
                (
                    this.SimpleProvisioning == input.SimpleProvisioning ||
                    this.SimpleProvisioning.Equals(input.SimpleProvisioning)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CacheXauth.GetHashCode();
                hashCode = (hashCode * 59) + this.VirtualAdaptor.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowConnectionsTo.GetHashCode();
                hashCode = (hashCode * 59) + this.DefaultRoute.GetHashCode();
                hashCode = (hashCode * 59) + this.AccessList.GetHashCode();
                hashCode = (hashCode * 59) + this.SimpleProvisioning.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
