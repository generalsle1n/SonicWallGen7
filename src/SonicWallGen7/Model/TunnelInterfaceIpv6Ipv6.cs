/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Set IPv6 tunnel interface.
    /// </summary>
    [DataContract(Name = "tunnel_interface_ipv6_ipv6")]
    public partial class TunnelInterfaceIpv6Ipv6 : IEquatable<TunnelInterfaceIpv6Ipv6>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TunnelInterfaceIpv6Ipv6" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TunnelInterfaceIpv6Ipv6() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TunnelInterfaceIpv6Ipv6" /> class.
        /// </summary>
        /// <param name="name">Set tunnel interface name. (required).</param>
        /// <param name="zone">Set tunnel interface zone..</param>
        /// <param name="type">type.</param>
        /// <param name="comment">Set tunnel interface comment..</param>
        /// <param name="management">management.</param>
        /// <param name="userLogin">userLogin.</param>
        /// <param name="httpsRedirect">Enable redirection from HTTP to HTTPS..</param>
        public TunnelInterfaceIpv6Ipv6(string name = default(string), string zone = default(string), TunnelInterfaceIpv6Ipv6Type type = default(TunnelInterfaceIpv6Ipv6Type), string comment = default(string), InterfaceIpv6BaseIpv6Management management = default(InterfaceIpv6BaseIpv6Management), InterfaceIpv4Ipv4UserLogin userLogin = default(InterfaceIpv4Ipv4UserLogin), bool httpsRedirect = default(bool))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for TunnelInterfaceIpv6Ipv6 and cannot be null");
            }
            this.Name = name;
            this.Zone = zone;
            this.Type = type;
            this.Comment = comment;
            this.Management = management;
            this.UserLogin = userLogin;
            this.HttpsRedirect = httpsRedirect;
        }

        /// <summary>
        /// Set tunnel interface name.
        /// </summary>
        /// <value>Set tunnel interface name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Set tunnel interface zone.
        /// </summary>
        /// <value>Set tunnel interface zone.</value>
        [DataMember(Name = "zone", EmitDefaultValue = false)]
        public string Zone { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TunnelInterfaceIpv6Ipv6Type Type { get; set; }

        /// <summary>
        /// Set tunnel interface comment.
        /// </summary>
        /// <value>Set tunnel interface comment.</value>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets Management
        /// </summary>
        [DataMember(Name = "management", EmitDefaultValue = false)]
        public InterfaceIpv6BaseIpv6Management Management { get; set; }

        /// <summary>
        /// Gets or Sets UserLogin
        /// </summary>
        [DataMember(Name = "user_login", EmitDefaultValue = false)]
        public InterfaceIpv4Ipv4UserLogin UserLogin { get; set; }

        /// <summary>
        /// Enable redirection from HTTP to HTTPS.
        /// </summary>
        /// <value>Enable redirection from HTTP to HTTPS.</value>
        [DataMember(Name = "https_redirect", EmitDefaultValue = true)]
        public bool HttpsRedirect { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TunnelInterfaceIpv6Ipv6 {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Zone: ").Append(Zone).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Management: ").Append(Management).Append("\n");
            sb.Append("  UserLogin: ").Append(UserLogin).Append("\n");
            sb.Append("  HttpsRedirect: ").Append(HttpsRedirect).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TunnelInterfaceIpv6Ipv6);
        }

        /// <summary>
        /// Returns true if TunnelInterfaceIpv6Ipv6 instances are equal
        /// </summary>
        /// <param name="input">Instance of TunnelInterfaceIpv6Ipv6 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TunnelInterfaceIpv6Ipv6 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Zone == input.Zone ||
                    (this.Zone != null &&
                    this.Zone.Equals(input.Zone))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Management == input.Management ||
                    (this.Management != null &&
                    this.Management.Equals(input.Management))
                ) && 
                (
                    this.UserLogin == input.UserLogin ||
                    (this.UserLogin != null &&
                    this.UserLogin.Equals(input.UserLogin))
                ) && 
                (
                    this.HttpsRedirect == input.HttpsRedirect ||
                    this.HttpsRedirect.Equals(input.HttpsRedirect)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Zone != null)
                {
                    hashCode = (hashCode * 59) + this.Zone.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                if (this.Management != null)
                {
                    hashCode = (hashCode * 59) + this.Management.GetHashCode();
                }
                if (this.UserLogin != null)
                {
                    hashCode = (hashCode * 59) + this.UserLogin.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HttpsRedirect.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
