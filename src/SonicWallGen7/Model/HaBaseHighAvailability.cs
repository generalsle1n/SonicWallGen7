/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure high availability.
    /// </summary>
    [DataContract(Name = "ha_base_high_availability")]
    public partial class HaBaseHighAvailability : IEquatable<HaBaseHighAvailability>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HaBaseHighAvailability" /> class.
        /// </summary>
        /// <param name="heartbeatInterval">Set heartbeat interval in milliseconds..</param>
        /// <param name="failoverTriggerLevel">Set Failover trigger level (missed heartbeats)..</param>
        /// <param name="probe">probe.</param>
        /// <param name="electionDelayTime">Set election delay time in seconds..</param>
        /// <param name="routeHoldDownTime">routeHoldDownTime.</param>
        /// <param name="sdwanHoldDownTime">Set SD-WAN probes hold-down time in seconds..</param>
        /// <param name="includeCertificatesKeys">Enable include certificates and keys..</param>
        /// <param name="l3Mode">l3Mode.</param>
        /// <param name="mode">mode.</param>
        public HaBaseHighAvailability(decimal heartbeatInterval = default(decimal), decimal failoverTriggerLevel = default(decimal), HaBaseHighAvailabilityProbe probe = default(HaBaseHighAvailabilityProbe), decimal electionDelayTime = default(decimal), HaBaseHighAvailabilityRouteHoldDownTime routeHoldDownTime = default(HaBaseHighAvailabilityRouteHoldDownTime), decimal sdwanHoldDownTime = default(decimal), bool includeCertificatesKeys = default(bool), HaBaseHighAvailabilityL3Mode l3Mode = default(HaBaseHighAvailabilityL3Mode), HaBaseHighAvailabilityMode mode = default(HaBaseHighAvailabilityMode))
        {
            this.HeartbeatInterval = heartbeatInterval;
            this.FailoverTriggerLevel = failoverTriggerLevel;
            this.Probe = probe;
            this.ElectionDelayTime = electionDelayTime;
            this.RouteHoldDownTime = routeHoldDownTime;
            this.SdwanHoldDownTime = sdwanHoldDownTime;
            this.IncludeCertificatesKeys = includeCertificatesKeys;
            this.L3Mode = l3Mode;
            this.Mode = mode;
        }

        /// <summary>
        /// Set heartbeat interval in milliseconds.
        /// </summary>
        /// <value>Set heartbeat interval in milliseconds.</value>
        [DataMember(Name = "heartbeat_interval", EmitDefaultValue = false)]
        public decimal HeartbeatInterval { get; set; }

        /// <summary>
        /// Set Failover trigger level (missed heartbeats).
        /// </summary>
        /// <value>Set Failover trigger level (missed heartbeats).</value>
        [DataMember(Name = "failover_trigger_level", EmitDefaultValue = false)]
        public decimal FailoverTriggerLevel { get; set; }

        /// <summary>
        /// Gets or Sets Probe
        /// </summary>
        [DataMember(Name = "probe", EmitDefaultValue = false)]
        public HaBaseHighAvailabilityProbe Probe { get; set; }

        /// <summary>
        /// Set election delay time in seconds.
        /// </summary>
        /// <value>Set election delay time in seconds.</value>
        [DataMember(Name = "election_delay_time", EmitDefaultValue = false)]
        public decimal ElectionDelayTime { get; set; }

        /// <summary>
        /// Gets or Sets RouteHoldDownTime
        /// </summary>
        [DataMember(Name = "route_hold_down_time", EmitDefaultValue = true)]
        public HaBaseHighAvailabilityRouteHoldDownTime RouteHoldDownTime { get; set; }

        /// <summary>
        /// Set SD-WAN probes hold-down time in seconds.
        /// </summary>
        /// <value>Set SD-WAN probes hold-down time in seconds.</value>
        [DataMember(Name = "sdwan_hold_down_time", EmitDefaultValue = false)]
        public decimal SdwanHoldDownTime { get; set; }

        /// <summary>
        /// Enable include certificates and keys.
        /// </summary>
        /// <value>Enable include certificates and keys.</value>
        [DataMember(Name = "include_certificates_keys", EmitDefaultValue = true)]
        public bool IncludeCertificatesKeys { get; set; }

        /// <summary>
        /// Gets or Sets L3Mode
        /// </summary>
        [DataMember(Name = "l3_mode", EmitDefaultValue = false)]
        public HaBaseHighAvailabilityL3Mode L3Mode { get; set; }

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name = "mode", EmitDefaultValue = false)]
        public HaBaseHighAvailabilityMode Mode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HaBaseHighAvailability {\n");
            sb.Append("  HeartbeatInterval: ").Append(HeartbeatInterval).Append("\n");
            sb.Append("  FailoverTriggerLevel: ").Append(FailoverTriggerLevel).Append("\n");
            sb.Append("  Probe: ").Append(Probe).Append("\n");
            sb.Append("  ElectionDelayTime: ").Append(ElectionDelayTime).Append("\n");
            sb.Append("  RouteHoldDownTime: ").Append(RouteHoldDownTime).Append("\n");
            sb.Append("  SdwanHoldDownTime: ").Append(SdwanHoldDownTime).Append("\n");
            sb.Append("  IncludeCertificatesKeys: ").Append(IncludeCertificatesKeys).Append("\n");
            sb.Append("  L3Mode: ").Append(L3Mode).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HaBaseHighAvailability);
        }

        /// <summary>
        /// Returns true if HaBaseHighAvailability instances are equal
        /// </summary>
        /// <param name="input">Instance of HaBaseHighAvailability to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HaBaseHighAvailability input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.HeartbeatInterval == input.HeartbeatInterval ||
                    this.HeartbeatInterval.Equals(input.HeartbeatInterval)
                ) && 
                (
                    this.FailoverTriggerLevel == input.FailoverTriggerLevel ||
                    this.FailoverTriggerLevel.Equals(input.FailoverTriggerLevel)
                ) && 
                (
                    this.Probe == input.Probe ||
                    (this.Probe != null &&
                    this.Probe.Equals(input.Probe))
                ) && 
                (
                    this.ElectionDelayTime == input.ElectionDelayTime ||
                    this.ElectionDelayTime.Equals(input.ElectionDelayTime)
                ) && 
                (
                    this.RouteHoldDownTime == input.RouteHoldDownTime ||
                    (this.RouteHoldDownTime != null &&
                    this.RouteHoldDownTime.Equals(input.RouteHoldDownTime))
                ) && 
                (
                    this.SdwanHoldDownTime == input.SdwanHoldDownTime ||
                    this.SdwanHoldDownTime.Equals(input.SdwanHoldDownTime)
                ) && 
                (
                    this.IncludeCertificatesKeys == input.IncludeCertificatesKeys ||
                    this.IncludeCertificatesKeys.Equals(input.IncludeCertificatesKeys)
                ) && 
                (
                    this.L3Mode == input.L3Mode ||
                    (this.L3Mode != null &&
                    this.L3Mode.Equals(input.L3Mode))
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.HeartbeatInterval.GetHashCode();
                hashCode = (hashCode * 59) + this.FailoverTriggerLevel.GetHashCode();
                if (this.Probe != null)
                {
                    hashCode = (hashCode * 59) + this.Probe.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ElectionDelayTime.GetHashCode();
                if (this.RouteHoldDownTime != null)
                {
                    hashCode = (hashCode * 59) + this.RouteHoldDownTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SdwanHoldDownTime.GetHashCode();
                hashCode = (hashCode * 59) + this.IncludeCertificatesKeys.GetHashCode();
                if (this.L3Mode != null)
                {
                    hashCode = (hashCode * 59) + this.L3Mode.GetHashCode();
                }
                if (this.Mode != null)
                {
                    hashCode = (hashCode * 59) + this.Mode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
