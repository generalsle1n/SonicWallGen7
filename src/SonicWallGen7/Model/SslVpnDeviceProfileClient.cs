/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure client for the device profile.
    /// </summary>
    [DataContract(Name = "ssl_vpn_device_profile_client")]
    public partial class SslVpnDeviceProfileClient : IEquatable<SslVpnDeviceProfileClient>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SslVpnDeviceProfileClient" /> class.
        /// </summary>
        /// <param name="dns">dns.</param>
        /// <param name="wins">wins.</param>
        /// <param name="autoUpdate">Enable client auto update..</param>
        /// <param name="exitAfterDisconnect">Enable exit client after disconnect..</param>
        /// <param name="netbiosOverSslvpn">Enable NetBIOS over SSL VPN..</param>
        /// <param name="touchIdAuthentication">Allow Touch ID on IOS devices..</param>
        /// <param name="fingerprintAuthentication">Allow fingerprint authentication on Android devices..</param>
        /// <param name="uninstallAfterExit">Enable uninstall client after exit..</param>
        /// <param name="createConnectionProfile">Enable create client connection profile..</param>
        /// <param name="cache">cache.</param>
        public SslVpnDeviceProfileClient(SslVpnDeviceProfileClientDns dns = default(SslVpnDeviceProfileClientDns), SslVpnDeviceProfileClientWins wins = default(SslVpnDeviceProfileClientWins), bool autoUpdate = default(bool), bool exitAfterDisconnect = default(bool), bool netbiosOverSslvpn = default(bool), bool touchIdAuthentication = default(bool), bool fingerprintAuthentication = default(bool), bool uninstallAfterExit = default(bool), bool createConnectionProfile = default(bool), SslVpnDeviceProfileClientCache cache = default(SslVpnDeviceProfileClientCache))
        {
            this.Dns = dns;
            this.Wins = wins;
            this.AutoUpdate = autoUpdate;
            this.ExitAfterDisconnect = exitAfterDisconnect;
            this.NetbiosOverSslvpn = netbiosOverSslvpn;
            this.TouchIdAuthentication = touchIdAuthentication;
            this.FingerprintAuthentication = fingerprintAuthentication;
            this.UninstallAfterExit = uninstallAfterExit;
            this.CreateConnectionProfile = createConnectionProfile;
            this.Cache = cache;
        }

        /// <summary>
        /// Gets or Sets Dns
        /// </summary>
        [DataMember(Name = "dns", EmitDefaultValue = false)]
        public SslVpnDeviceProfileClientDns Dns { get; set; }

        /// <summary>
        /// Gets or Sets Wins
        /// </summary>
        [DataMember(Name = "wins", EmitDefaultValue = false)]
        public SslVpnDeviceProfileClientWins Wins { get; set; }

        /// <summary>
        /// Enable client auto update.
        /// </summary>
        /// <value>Enable client auto update.</value>
        [DataMember(Name = "auto_update", EmitDefaultValue = true)]
        public bool AutoUpdate { get; set; }

        /// <summary>
        /// Enable exit client after disconnect.
        /// </summary>
        /// <value>Enable exit client after disconnect.</value>
        [DataMember(Name = "exit_after_disconnect", EmitDefaultValue = true)]
        public bool ExitAfterDisconnect { get; set; }

        /// <summary>
        /// Enable NetBIOS over SSL VPN.
        /// </summary>
        /// <value>Enable NetBIOS over SSL VPN.</value>
        [DataMember(Name = "netbios_over_sslvpn", EmitDefaultValue = true)]
        public bool NetbiosOverSslvpn { get; set; }

        /// <summary>
        /// Allow Touch ID on IOS devices.
        /// </summary>
        /// <value>Allow Touch ID on IOS devices.</value>
        [DataMember(Name = "touch_id_authentication", EmitDefaultValue = true)]
        public bool TouchIdAuthentication { get; set; }

        /// <summary>
        /// Allow fingerprint authentication on Android devices.
        /// </summary>
        /// <value>Allow fingerprint authentication on Android devices.</value>
        [DataMember(Name = "fingerprint_authentication", EmitDefaultValue = true)]
        public bool FingerprintAuthentication { get; set; }

        /// <summary>
        /// Enable uninstall client after exit.
        /// </summary>
        /// <value>Enable uninstall client after exit.</value>
        [DataMember(Name = "uninstall_after_exit", EmitDefaultValue = true)]
        public bool UninstallAfterExit { get; set; }

        /// <summary>
        /// Enable create client connection profile.
        /// </summary>
        /// <value>Enable create client connection profile.</value>
        [DataMember(Name = "create_connection_profile", EmitDefaultValue = true)]
        public bool CreateConnectionProfile { get; set; }

        /// <summary>
        /// Gets or Sets Cache
        /// </summary>
        [DataMember(Name = "cache", EmitDefaultValue = false)]
        public SslVpnDeviceProfileClientCache Cache { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SslVpnDeviceProfileClient {\n");
            sb.Append("  Dns: ").Append(Dns).Append("\n");
            sb.Append("  Wins: ").Append(Wins).Append("\n");
            sb.Append("  AutoUpdate: ").Append(AutoUpdate).Append("\n");
            sb.Append("  ExitAfterDisconnect: ").Append(ExitAfterDisconnect).Append("\n");
            sb.Append("  NetbiosOverSslvpn: ").Append(NetbiosOverSslvpn).Append("\n");
            sb.Append("  TouchIdAuthentication: ").Append(TouchIdAuthentication).Append("\n");
            sb.Append("  FingerprintAuthentication: ").Append(FingerprintAuthentication).Append("\n");
            sb.Append("  UninstallAfterExit: ").Append(UninstallAfterExit).Append("\n");
            sb.Append("  CreateConnectionProfile: ").Append(CreateConnectionProfile).Append("\n");
            sb.Append("  Cache: ").Append(Cache).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SslVpnDeviceProfileClient);
        }

        /// <summary>
        /// Returns true if SslVpnDeviceProfileClient instances are equal
        /// </summary>
        /// <param name="input">Instance of SslVpnDeviceProfileClient to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SslVpnDeviceProfileClient input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Dns == input.Dns ||
                    (this.Dns != null &&
                    this.Dns.Equals(input.Dns))
                ) && 
                (
                    this.Wins == input.Wins ||
                    (this.Wins != null &&
                    this.Wins.Equals(input.Wins))
                ) && 
                (
                    this.AutoUpdate == input.AutoUpdate ||
                    this.AutoUpdate.Equals(input.AutoUpdate)
                ) && 
                (
                    this.ExitAfterDisconnect == input.ExitAfterDisconnect ||
                    this.ExitAfterDisconnect.Equals(input.ExitAfterDisconnect)
                ) && 
                (
                    this.NetbiosOverSslvpn == input.NetbiosOverSslvpn ||
                    this.NetbiosOverSslvpn.Equals(input.NetbiosOverSslvpn)
                ) && 
                (
                    this.TouchIdAuthentication == input.TouchIdAuthentication ||
                    this.TouchIdAuthentication.Equals(input.TouchIdAuthentication)
                ) && 
                (
                    this.FingerprintAuthentication == input.FingerprintAuthentication ||
                    this.FingerprintAuthentication.Equals(input.FingerprintAuthentication)
                ) && 
                (
                    this.UninstallAfterExit == input.UninstallAfterExit ||
                    this.UninstallAfterExit.Equals(input.UninstallAfterExit)
                ) && 
                (
                    this.CreateConnectionProfile == input.CreateConnectionProfile ||
                    this.CreateConnectionProfile.Equals(input.CreateConnectionProfile)
                ) && 
                (
                    this.Cache == input.Cache ||
                    (this.Cache != null &&
                    this.Cache.Equals(input.Cache))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Dns != null)
                {
                    hashCode = (hashCode * 59) + this.Dns.GetHashCode();
                }
                if (this.Wins != null)
                {
                    hashCode = (hashCode * 59) + this.Wins.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AutoUpdate.GetHashCode();
                hashCode = (hashCode * 59) + this.ExitAfterDisconnect.GetHashCode();
                hashCode = (hashCode * 59) + this.NetbiosOverSslvpn.GetHashCode();
                hashCode = (hashCode * 59) + this.TouchIdAuthentication.GetHashCode();
                hashCode = (hashCode * 59) + this.FingerprintAuthentication.GetHashCode();
                hashCode = (hashCode * 59) + this.UninstallAfterExit.GetHashCode();
                hashCode = (hashCode * 59) + this.CreateConnectionProfile.GetHashCode();
                if (this.Cache != null)
                {
                    hashCode = (hashCode * 59) + this.Cache.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
