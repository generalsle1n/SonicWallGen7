/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// botnet cache statistics detail schema.
    /// </summary>
    [DataContract(Name = "show_status_botnet_cache_statistics_detail")]
    public partial class ShowStatusBotnetCacheStatisticsDetail : IEquatable<ShowStatusBotnetCacheStatisticsDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusBotnetCacheStatisticsDetail" /> class.
        /// </summary>
        /// <param name="locationServerIp">locationServerIp.</param>
        /// <param name="resolvedEntries">resolvedEntries.</param>
        /// <param name="unresolvedEntries">unresolvedEntries.</param>
        /// <param name="currentEntryCount">currentEntryCount.</param>
        /// <param name="maxEntryCount">maxEntryCount.</param>
        /// <param name="botnetsDetected">botnetsDetected.</param>
        public ShowStatusBotnetCacheStatisticsDetail(string locationServerIp = default(string), string resolvedEntries = default(string), string unresolvedEntries = default(string), string currentEntryCount = default(string), string maxEntryCount = default(string), string botnetsDetected = default(string))
        {
            this.LocationServerIp = locationServerIp;
            this.ResolvedEntries = resolvedEntries;
            this.UnresolvedEntries = unresolvedEntries;
            this.CurrentEntryCount = currentEntryCount;
            this.MaxEntryCount = maxEntryCount;
            this.BotnetsDetected = botnetsDetected;
        }

        /// <summary>
        /// Gets or Sets LocationServerIp
        /// </summary>
        [DataMember(Name = "location_server_ip", EmitDefaultValue = false)]
        public string LocationServerIp { get; set; }

        /// <summary>
        /// Gets or Sets ResolvedEntries
        /// </summary>
        [DataMember(Name = "resolved_entries", EmitDefaultValue = false)]
        public string ResolvedEntries { get; set; }

        /// <summary>
        /// Gets or Sets UnresolvedEntries
        /// </summary>
        [DataMember(Name = "unresolved_entries", EmitDefaultValue = false)]
        public string UnresolvedEntries { get; set; }

        /// <summary>
        /// Gets or Sets CurrentEntryCount
        /// </summary>
        [DataMember(Name = "current_entry_count", EmitDefaultValue = false)]
        public string CurrentEntryCount { get; set; }

        /// <summary>
        /// Gets or Sets MaxEntryCount
        /// </summary>
        [DataMember(Name = "max_entry_count", EmitDefaultValue = false)]
        public string MaxEntryCount { get; set; }

        /// <summary>
        /// Gets or Sets BotnetsDetected
        /// </summary>
        [DataMember(Name = "botnets_detected", EmitDefaultValue = false)]
        public string BotnetsDetected { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusBotnetCacheStatisticsDetail {\n");
            sb.Append("  LocationServerIp: ").Append(LocationServerIp).Append("\n");
            sb.Append("  ResolvedEntries: ").Append(ResolvedEntries).Append("\n");
            sb.Append("  UnresolvedEntries: ").Append(UnresolvedEntries).Append("\n");
            sb.Append("  CurrentEntryCount: ").Append(CurrentEntryCount).Append("\n");
            sb.Append("  MaxEntryCount: ").Append(MaxEntryCount).Append("\n");
            sb.Append("  BotnetsDetected: ").Append(BotnetsDetected).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusBotnetCacheStatisticsDetail);
        }

        /// <summary>
        /// Returns true if ShowStatusBotnetCacheStatisticsDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusBotnetCacheStatisticsDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusBotnetCacheStatisticsDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LocationServerIp == input.LocationServerIp ||
                    (this.LocationServerIp != null &&
                    this.LocationServerIp.Equals(input.LocationServerIp))
                ) && 
                (
                    this.ResolvedEntries == input.ResolvedEntries ||
                    (this.ResolvedEntries != null &&
                    this.ResolvedEntries.Equals(input.ResolvedEntries))
                ) && 
                (
                    this.UnresolvedEntries == input.UnresolvedEntries ||
                    (this.UnresolvedEntries != null &&
                    this.UnresolvedEntries.Equals(input.UnresolvedEntries))
                ) && 
                (
                    this.CurrentEntryCount == input.CurrentEntryCount ||
                    (this.CurrentEntryCount != null &&
                    this.CurrentEntryCount.Equals(input.CurrentEntryCount))
                ) && 
                (
                    this.MaxEntryCount == input.MaxEntryCount ||
                    (this.MaxEntryCount != null &&
                    this.MaxEntryCount.Equals(input.MaxEntryCount))
                ) && 
                (
                    this.BotnetsDetected == input.BotnetsDetected ||
                    (this.BotnetsDetected != null &&
                    this.BotnetsDetected.Equals(input.BotnetsDetected))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LocationServerIp != null)
                {
                    hashCode = (hashCode * 59) + this.LocationServerIp.GetHashCode();
                }
                if (this.ResolvedEntries != null)
                {
                    hashCode = (hashCode * 59) + this.ResolvedEntries.GetHashCode();
                }
                if (this.UnresolvedEntries != null)
                {
                    hashCode = (hashCode * 59) + this.UnresolvedEntries.GetHashCode();
                }
                if (this.CurrentEntryCount != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentEntryCount.GetHashCode();
                }
                if (this.MaxEntryCount != null)
                {
                    hashCode = (hashCode * 59) + this.MaxEntryCount.GetHashCode();
                }
                if (this.BotnetsDetected != null)
                {
                    hashCode = (hashCode * 59) + this.BotnetsDetected.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
