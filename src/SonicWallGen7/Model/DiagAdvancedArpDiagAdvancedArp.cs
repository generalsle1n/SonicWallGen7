/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure advanced diag ARP settings.
    /// </summary>
    [DataContract(Name = "diag_advanced_arp_diag_advanced_arp")]
    public partial class DiagAdvancedArpDiagAdvancedArp : IEquatable<DiagAdvancedArpDiagAdvancedArp>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagAdvancedArpDiagAdvancedArp" /> class.
        /// </summary>
        /// <param name="bridging">Enable ARP bridging..</param>
        /// <param name="openArpBehavior">Enable open ARP behavior (WARNING: Insecure!!)..</param>
        /// <param name="sourceIpValidation">Enable source IP address validation for being directly connected..</param>
        /// <param name="onlyUnicast">Enable only allowing ARP entries with unicast addresses..</param>
        /// <param name="limitNonresponsive">Enable limiting ARPs of non-responsive IPs..</param>
        /// <param name="redundantIpResolutionRate">redundantIpResolutionRate.</param>
        /// <param name="gratuitousArpCompatibility">Enable gratuitous ARP compatibility mode..</param>
        /// <param name="secondarySubnet">Enable ARP responses for secondary subnets on WAN Interfaces..</param>
        /// <param name="gratuitousArpLimit">gratuitousArpLimit.</param>
        /// <param name="systemBroadcast">systemBroadcast.</param>
        /// <param name="ignoreArpsWithPrimaryMacFromOtherIf">Enable ignore ARPs with primary-gateway&#39;s MAC received on other interfaces..</param>
        /// <param name="displayMacTracking">Enable displaying of MAC tracking..</param>
        public DiagAdvancedArpDiagAdvancedArp(bool bridging = default(bool), bool openArpBehavior = default(bool), bool sourceIpValidation = default(bool), bool onlyUnicast = default(bool), bool limitNonresponsive = default(bool), DiagAdvancedArpDiagAdvancedArpRedundantIpResolutionRate redundantIpResolutionRate = default(DiagAdvancedArpDiagAdvancedArpRedundantIpResolutionRate), bool gratuitousArpCompatibility = default(bool), bool secondarySubnet = default(bool), DiagAdvancedArpDiagAdvancedArpGratuitousArpLimit gratuitousArpLimit = default(DiagAdvancedArpDiagAdvancedArpGratuitousArpLimit), DiagAdvancedArpDiagAdvancedArpSystemBroadcast systemBroadcast = default(DiagAdvancedArpDiagAdvancedArpSystemBroadcast), bool ignoreArpsWithPrimaryMacFromOtherIf = default(bool), bool displayMacTracking = default(bool))
        {
            this.Bridging = bridging;
            this.OpenArpBehavior = openArpBehavior;
            this.SourceIpValidation = sourceIpValidation;
            this.OnlyUnicast = onlyUnicast;
            this.LimitNonresponsive = limitNonresponsive;
            this.RedundantIpResolutionRate = redundantIpResolutionRate;
            this.GratuitousArpCompatibility = gratuitousArpCompatibility;
            this.SecondarySubnet = secondarySubnet;
            this.GratuitousArpLimit = gratuitousArpLimit;
            this.SystemBroadcast = systemBroadcast;
            this.IgnoreArpsWithPrimaryMacFromOtherIf = ignoreArpsWithPrimaryMacFromOtherIf;
            this.DisplayMacTracking = displayMacTracking;
        }

        /// <summary>
        /// Enable ARP bridging.
        /// </summary>
        /// <value>Enable ARP bridging.</value>
        [DataMember(Name = "bridging", EmitDefaultValue = true)]
        public bool Bridging { get; set; }

        /// <summary>
        /// Enable open ARP behavior (WARNING: Insecure!!).
        /// </summary>
        /// <value>Enable open ARP behavior (WARNING: Insecure!!).</value>
        [DataMember(Name = "open_arp_behavior", EmitDefaultValue = true)]
        public bool OpenArpBehavior { get; set; }

        /// <summary>
        /// Enable source IP address validation for being directly connected.
        /// </summary>
        /// <value>Enable source IP address validation for being directly connected.</value>
        [DataMember(Name = "source_ip_validation", EmitDefaultValue = true)]
        public bool SourceIpValidation { get; set; }

        /// <summary>
        /// Enable only allowing ARP entries with unicast addresses.
        /// </summary>
        /// <value>Enable only allowing ARP entries with unicast addresses.</value>
        [DataMember(Name = "only_unicast", EmitDefaultValue = true)]
        public bool OnlyUnicast { get; set; }

        /// <summary>
        /// Enable limiting ARPs of non-responsive IPs.
        /// </summary>
        /// <value>Enable limiting ARPs of non-responsive IPs.</value>
        [DataMember(Name = "limit_nonresponsive", EmitDefaultValue = true)]
        public bool LimitNonresponsive { get; set; }

        /// <summary>
        /// Gets or Sets RedundantIpResolutionRate
        /// </summary>
        [DataMember(Name = "redundant_ip_resolution_rate", EmitDefaultValue = true)]
        public DiagAdvancedArpDiagAdvancedArpRedundantIpResolutionRate RedundantIpResolutionRate { get; set; }

        /// <summary>
        /// Enable gratuitous ARP compatibility mode.
        /// </summary>
        /// <value>Enable gratuitous ARP compatibility mode.</value>
        [DataMember(Name = "gratuitous_arp_compatibility", EmitDefaultValue = true)]
        public bool GratuitousArpCompatibility { get; set; }

        /// <summary>
        /// Enable ARP responses for secondary subnets on WAN Interfaces.
        /// </summary>
        /// <value>Enable ARP responses for secondary subnets on WAN Interfaces.</value>
        [DataMember(Name = "secondary_subnet", EmitDefaultValue = true)]
        public bool SecondarySubnet { get; set; }

        /// <summary>
        /// Gets or Sets GratuitousArpLimit
        /// </summary>
        [DataMember(Name = "gratuitous_arp_limit", EmitDefaultValue = true)]
        public DiagAdvancedArpDiagAdvancedArpGratuitousArpLimit GratuitousArpLimit { get; set; }

        /// <summary>
        /// Gets or Sets SystemBroadcast
        /// </summary>
        [DataMember(Name = "system_broadcast", EmitDefaultValue = true)]
        public DiagAdvancedArpDiagAdvancedArpSystemBroadcast SystemBroadcast { get; set; }

        /// <summary>
        /// Enable ignore ARPs with primary-gateway&#39;s MAC received on other interfaces.
        /// </summary>
        /// <value>Enable ignore ARPs with primary-gateway&#39;s MAC received on other interfaces.</value>
        [DataMember(Name = "ignore_arps_with_primary_mac_from_other_if", EmitDefaultValue = true)]
        public bool IgnoreArpsWithPrimaryMacFromOtherIf { get; set; }

        /// <summary>
        /// Enable displaying of MAC tracking.
        /// </summary>
        /// <value>Enable displaying of MAC tracking.</value>
        [DataMember(Name = "display_mac_tracking", EmitDefaultValue = true)]
        public bool DisplayMacTracking { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DiagAdvancedArpDiagAdvancedArp {\n");
            sb.Append("  Bridging: ").Append(Bridging).Append("\n");
            sb.Append("  OpenArpBehavior: ").Append(OpenArpBehavior).Append("\n");
            sb.Append("  SourceIpValidation: ").Append(SourceIpValidation).Append("\n");
            sb.Append("  OnlyUnicast: ").Append(OnlyUnicast).Append("\n");
            sb.Append("  LimitNonresponsive: ").Append(LimitNonresponsive).Append("\n");
            sb.Append("  RedundantIpResolutionRate: ").Append(RedundantIpResolutionRate).Append("\n");
            sb.Append("  GratuitousArpCompatibility: ").Append(GratuitousArpCompatibility).Append("\n");
            sb.Append("  SecondarySubnet: ").Append(SecondarySubnet).Append("\n");
            sb.Append("  GratuitousArpLimit: ").Append(GratuitousArpLimit).Append("\n");
            sb.Append("  SystemBroadcast: ").Append(SystemBroadcast).Append("\n");
            sb.Append("  IgnoreArpsWithPrimaryMacFromOtherIf: ").Append(IgnoreArpsWithPrimaryMacFromOtherIf).Append("\n");
            sb.Append("  DisplayMacTracking: ").Append(DisplayMacTracking).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiagAdvancedArpDiagAdvancedArp);
        }

        /// <summary>
        /// Returns true if DiagAdvancedArpDiagAdvancedArp instances are equal
        /// </summary>
        /// <param name="input">Instance of DiagAdvancedArpDiagAdvancedArp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiagAdvancedArpDiagAdvancedArp input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Bridging == input.Bridging ||
                    this.Bridging.Equals(input.Bridging)
                ) && 
                (
                    this.OpenArpBehavior == input.OpenArpBehavior ||
                    this.OpenArpBehavior.Equals(input.OpenArpBehavior)
                ) && 
                (
                    this.SourceIpValidation == input.SourceIpValidation ||
                    this.SourceIpValidation.Equals(input.SourceIpValidation)
                ) && 
                (
                    this.OnlyUnicast == input.OnlyUnicast ||
                    this.OnlyUnicast.Equals(input.OnlyUnicast)
                ) && 
                (
                    this.LimitNonresponsive == input.LimitNonresponsive ||
                    this.LimitNonresponsive.Equals(input.LimitNonresponsive)
                ) && 
                (
                    this.RedundantIpResolutionRate == input.RedundantIpResolutionRate ||
                    (this.RedundantIpResolutionRate != null &&
                    this.RedundantIpResolutionRate.Equals(input.RedundantIpResolutionRate))
                ) && 
                (
                    this.GratuitousArpCompatibility == input.GratuitousArpCompatibility ||
                    this.GratuitousArpCompatibility.Equals(input.GratuitousArpCompatibility)
                ) && 
                (
                    this.SecondarySubnet == input.SecondarySubnet ||
                    this.SecondarySubnet.Equals(input.SecondarySubnet)
                ) && 
                (
                    this.GratuitousArpLimit == input.GratuitousArpLimit ||
                    (this.GratuitousArpLimit != null &&
                    this.GratuitousArpLimit.Equals(input.GratuitousArpLimit))
                ) && 
                (
                    this.SystemBroadcast == input.SystemBroadcast ||
                    (this.SystemBroadcast != null &&
                    this.SystemBroadcast.Equals(input.SystemBroadcast))
                ) && 
                (
                    this.IgnoreArpsWithPrimaryMacFromOtherIf == input.IgnoreArpsWithPrimaryMacFromOtherIf ||
                    this.IgnoreArpsWithPrimaryMacFromOtherIf.Equals(input.IgnoreArpsWithPrimaryMacFromOtherIf)
                ) && 
                (
                    this.DisplayMacTracking == input.DisplayMacTracking ||
                    this.DisplayMacTracking.Equals(input.DisplayMacTracking)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Bridging.GetHashCode();
                hashCode = (hashCode * 59) + this.OpenArpBehavior.GetHashCode();
                hashCode = (hashCode * 59) + this.SourceIpValidation.GetHashCode();
                hashCode = (hashCode * 59) + this.OnlyUnicast.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitNonresponsive.GetHashCode();
                if (this.RedundantIpResolutionRate != null)
                {
                    hashCode = (hashCode * 59) + this.RedundantIpResolutionRate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GratuitousArpCompatibility.GetHashCode();
                hashCode = (hashCode * 59) + this.SecondarySubnet.GetHashCode();
                if (this.GratuitousArpLimit != null)
                {
                    hashCode = (hashCode * 59) + this.GratuitousArpLimit.GetHashCode();
                }
                if (this.SystemBroadcast != null)
                {
                    hashCode = (hashCode * 59) + this.SystemBroadcast.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IgnoreArpsWithPrimaryMacFromOtherIf.GetHashCode();
                hashCode = (hashCode * 59) + this.DisplayMacTracking.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
