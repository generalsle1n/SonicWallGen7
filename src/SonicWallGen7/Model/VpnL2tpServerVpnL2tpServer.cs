/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// L2TP Server settings.
    /// </summary>
    [DataContract(Name = "vpn_l2tp_server_vpn_l2tp_server")]
    public partial class VpnL2tpServerVpnL2tpServer : IEquatable<VpnL2tpServerVpnL2tpServer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VpnL2tpServerVpnL2tpServer" /> class.
        /// </summary>
        /// <param name="enable">Disable L2TP Server..</param>
        /// <param name="keepAlive">Set the Keep alive time (seconds)..</param>
        /// <param name="SonicDns">SonicDns.</param>
        /// <param name="wins">wins.</param>
        /// <param name="ipPool">ipPool.</param>
        /// <param name="userGroup">Set user group for L2TP users. * Set to null to represent an unconfigured state..</param>
        public VpnL2tpServerVpnL2tpServer(bool enable = default(bool), decimal keepAlive = default(decimal), VpnL2tpServerVpnL2tpServerSonicDns SonicDns = default(VpnL2tpServerVpnL2tpServerSonicDns), DhcpServerScopeDynamicWins wins = default(DhcpServerScopeDynamicWins), VpnL2tpServerVpnL2tpServerIpPool ipPool = default(VpnL2tpServerVpnL2tpServerIpPool), string userGroup = default(string))
        {
            this.Enable = enable;
            this.KeepAlive = keepAlive;
            this.SonicDns = SonicDns;
            this.Wins = wins;
            this.IpPool = ipPool;
            this.UserGroup = userGroup;
        }

        /// <summary>
        /// Disable L2TP Server.
        /// </summary>
        /// <value>Disable L2TP Server.</value>
        [DataMember(Name = "enable", EmitDefaultValue = true)]
        public bool Enable { get; set; }

        /// <summary>
        /// Set the Keep alive time (seconds).
        /// </summary>
        /// <value>Set the Keep alive time (seconds).</value>
        [DataMember(Name = "keep_alive", EmitDefaultValue = false)]
        public decimal KeepAlive { get; set; }

        /// <summary>
        /// Gets or Sets SonicDns
        /// </summary>
        [DataMember(Name = "SonicDns", EmitDefaultValue = false)]
        public VpnL2tpServerVpnL2tpServerSonicDns SonicDns { get; set; }

        /// <summary>
        /// Gets or Sets Wins
        /// </summary>
        [DataMember(Name = "wins", EmitDefaultValue = false)]
        public DhcpServerScopeDynamicWins Wins { get; set; }

        /// <summary>
        /// Gets or Sets IpPool
        /// </summary>
        [DataMember(Name = "ip_pool", EmitDefaultValue = false)]
        public VpnL2tpServerVpnL2tpServerIpPool IpPool { get; set; }

        /// <summary>
        /// Set user group for L2TP users. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Set user group for L2TP users. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "user_group", EmitDefaultValue = true)]
        public string UserGroup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VpnL2tpServerVpnL2tpServer {\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  KeepAlive: ").Append(KeepAlive).Append("\n");
            sb.Append("  SonicDns: ").Append(SonicDns).Append("\n");
            sb.Append("  Wins: ").Append(Wins).Append("\n");
            sb.Append("  IpPool: ").Append(IpPool).Append("\n");
            sb.Append("  UserGroup: ").Append(UserGroup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VpnL2tpServerVpnL2tpServer);
        }

        /// <summary>
        /// Returns true if VpnL2tpServerVpnL2tpServer instances are equal
        /// </summary>
        /// <param name="input">Instance of VpnL2tpServerVpnL2tpServer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VpnL2tpServerVpnL2tpServer input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.KeepAlive == input.KeepAlive ||
                    this.KeepAlive.Equals(input.KeepAlive)
                ) && 
                (
                    this.SonicDns == input.SonicDns ||
                    (this.SonicDns != null &&
                    this.SonicDns.Equals(input.SonicDns))
                ) && 
                (
                    this.Wins == input.Wins ||
                    (this.Wins != null &&
                    this.Wins.Equals(input.Wins))
                ) && 
                (
                    this.IpPool == input.IpPool ||
                    (this.IpPool != null &&
                    this.IpPool.Equals(input.IpPool))
                ) && 
                (
                    this.UserGroup == input.UserGroup ||
                    (this.UserGroup != null &&
                    this.UserGroup.Equals(input.UserGroup))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Enable.GetHashCode();
                hashCode = (hashCode * 59) + this.KeepAlive.GetHashCode();
                if (this.SonicDns != null)
                {
                    hashCode = (hashCode * 59) + this.SonicDns.GetHashCode();
                }
                if (this.Wins != null)
                {
                    hashCode = (hashCode * 59) + this.Wins.GetHashCode();
                }
                if (this.IpPool != null)
                {
                    hashCode = (hashCode * 59) + this.IpPool.GetHashCode();
                }
                if (this.UserGroup != null)
                {
                    hashCode = (hashCode * 59) + this.UserGroup.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
