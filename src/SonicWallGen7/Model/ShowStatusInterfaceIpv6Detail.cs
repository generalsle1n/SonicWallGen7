/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// interface ipv6 detail schema.
    /// </summary>
    [DataContract(Name = "show_status_interface_ipv6_detail")]
    public partial class ShowStatusInterfaceIpv6Detail : IEquatable<ShowStatusInterfaceIpv6Detail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusInterfaceIpv6Detail" /> class.
        /// </summary>
        /// <param name="interfaceName">interfaceName.</param>
        /// <param name="rxUnicastPackets">rxUnicastPackets.</param>
        /// <param name="rxBroadcastPackets">rxBroadcastPackets.</param>
        /// <param name="rxErrors">rxErrors.</param>
        /// <param name="rxBytes">rxBytes.</param>
        /// <param name="txUnicastPackets">txUnicastPackets.</param>
        /// <param name="txBroadcastPackets">txBroadcastPackets.</param>
        /// <param name="txErrors">txErrors.</param>
        /// <param name="txBytes">txBytes.</param>
        public ShowStatusInterfaceIpv6Detail(string interfaceName = default(string), string rxUnicastPackets = default(string), string rxBroadcastPackets = default(string), string rxErrors = default(string), string rxBytes = default(string), string txUnicastPackets = default(string), string txBroadcastPackets = default(string), string txErrors = default(string), string txBytes = default(string))
        {
            this.InterfaceName = interfaceName;
            this.RxUnicastPackets = rxUnicastPackets;
            this.RxBroadcastPackets = rxBroadcastPackets;
            this.RxErrors = rxErrors;
            this.RxBytes = rxBytes;
            this.TxUnicastPackets = txUnicastPackets;
            this.TxBroadcastPackets = txBroadcastPackets;
            this.TxErrors = txErrors;
            this.TxBytes = txBytes;
        }

        /// <summary>
        /// Gets or Sets InterfaceName
        /// </summary>
        [DataMember(Name = "interface_name", EmitDefaultValue = false)]
        public string InterfaceName { get; set; }

        /// <summary>
        /// Gets or Sets RxUnicastPackets
        /// </summary>
        [DataMember(Name = "rx_unicast_packets", EmitDefaultValue = false)]
        public string RxUnicastPackets { get; set; }

        /// <summary>
        /// Gets or Sets RxBroadcastPackets
        /// </summary>
        [DataMember(Name = "rx_broadcast_packets", EmitDefaultValue = false)]
        public string RxBroadcastPackets { get; set; }

        /// <summary>
        /// Gets or Sets RxErrors
        /// </summary>
        [DataMember(Name = "rx_errors", EmitDefaultValue = false)]
        public string RxErrors { get; set; }

        /// <summary>
        /// Gets or Sets RxBytes
        /// </summary>
        [DataMember(Name = "rx_bytes", EmitDefaultValue = false)]
        public string RxBytes { get; set; }

        /// <summary>
        /// Gets or Sets TxUnicastPackets
        /// </summary>
        [DataMember(Name = "tx_unicast_packets", EmitDefaultValue = false)]
        public string TxUnicastPackets { get; set; }

        /// <summary>
        /// Gets or Sets TxBroadcastPackets
        /// </summary>
        [DataMember(Name = "tx_broadcast_packets", EmitDefaultValue = false)]
        public string TxBroadcastPackets { get; set; }

        /// <summary>
        /// Gets or Sets TxErrors
        /// </summary>
        [DataMember(Name = "tx_errors", EmitDefaultValue = false)]
        public string TxErrors { get; set; }

        /// <summary>
        /// Gets or Sets TxBytes
        /// </summary>
        [DataMember(Name = "tx_bytes", EmitDefaultValue = false)]
        public string TxBytes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusInterfaceIpv6Detail {\n");
            sb.Append("  InterfaceName: ").Append(InterfaceName).Append("\n");
            sb.Append("  RxUnicastPackets: ").Append(RxUnicastPackets).Append("\n");
            sb.Append("  RxBroadcastPackets: ").Append(RxBroadcastPackets).Append("\n");
            sb.Append("  RxErrors: ").Append(RxErrors).Append("\n");
            sb.Append("  RxBytes: ").Append(RxBytes).Append("\n");
            sb.Append("  TxUnicastPackets: ").Append(TxUnicastPackets).Append("\n");
            sb.Append("  TxBroadcastPackets: ").Append(TxBroadcastPackets).Append("\n");
            sb.Append("  TxErrors: ").Append(TxErrors).Append("\n");
            sb.Append("  TxBytes: ").Append(TxBytes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusInterfaceIpv6Detail);
        }

        /// <summary>
        /// Returns true if ShowStatusInterfaceIpv6Detail instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusInterfaceIpv6Detail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusInterfaceIpv6Detail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InterfaceName == input.InterfaceName ||
                    (this.InterfaceName != null &&
                    this.InterfaceName.Equals(input.InterfaceName))
                ) && 
                (
                    this.RxUnicastPackets == input.RxUnicastPackets ||
                    (this.RxUnicastPackets != null &&
                    this.RxUnicastPackets.Equals(input.RxUnicastPackets))
                ) && 
                (
                    this.RxBroadcastPackets == input.RxBroadcastPackets ||
                    (this.RxBroadcastPackets != null &&
                    this.RxBroadcastPackets.Equals(input.RxBroadcastPackets))
                ) && 
                (
                    this.RxErrors == input.RxErrors ||
                    (this.RxErrors != null &&
                    this.RxErrors.Equals(input.RxErrors))
                ) && 
                (
                    this.RxBytes == input.RxBytes ||
                    (this.RxBytes != null &&
                    this.RxBytes.Equals(input.RxBytes))
                ) && 
                (
                    this.TxUnicastPackets == input.TxUnicastPackets ||
                    (this.TxUnicastPackets != null &&
                    this.TxUnicastPackets.Equals(input.TxUnicastPackets))
                ) && 
                (
                    this.TxBroadcastPackets == input.TxBroadcastPackets ||
                    (this.TxBroadcastPackets != null &&
                    this.TxBroadcastPackets.Equals(input.TxBroadcastPackets))
                ) && 
                (
                    this.TxErrors == input.TxErrors ||
                    (this.TxErrors != null &&
                    this.TxErrors.Equals(input.TxErrors))
                ) && 
                (
                    this.TxBytes == input.TxBytes ||
                    (this.TxBytes != null &&
                    this.TxBytes.Equals(input.TxBytes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InterfaceName != null)
                {
                    hashCode = (hashCode * 59) + this.InterfaceName.GetHashCode();
                }
                if (this.RxUnicastPackets != null)
                {
                    hashCode = (hashCode * 59) + this.RxUnicastPackets.GetHashCode();
                }
                if (this.RxBroadcastPackets != null)
                {
                    hashCode = (hashCode * 59) + this.RxBroadcastPackets.GetHashCode();
                }
                if (this.RxErrors != null)
                {
                    hashCode = (hashCode * 59) + this.RxErrors.GetHashCode();
                }
                if (this.RxBytes != null)
                {
                    hashCode = (hashCode * 59) + this.RxBytes.GetHashCode();
                }
                if (this.TxUnicastPackets != null)
                {
                    hashCode = (hashCode * 59) + this.TxUnicastPackets.GetHashCode();
                }
                if (this.TxBroadcastPackets != null)
                {
                    hashCode = (hashCode * 59) + this.TxBroadcastPackets.GetHashCode();
                }
                if (this.TxErrors != null)
                {
                    hashCode = (hashCode * 59) + this.TxErrors.GetHashCode();
                }
                if (this.TxBytes != null)
                {
                    hashCode = (hashCode * 59) + this.TxBytes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
