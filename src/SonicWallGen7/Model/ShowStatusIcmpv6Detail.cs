/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// icmpv6 detail schema.
    /// </summary>
    [DataContract(Name = "show_status_icmpv6_detail")]
    public partial class ShowStatusIcmpv6Detail : IEquatable<ShowStatusIcmpv6Detail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusIcmpv6Detail" /> class.
        /// </summary>
        /// <param name="connectionsOpened">connectionsOpened.</param>
        /// <param name="connectionsClosed">connectionsClosed.</param>
        /// <param name="totalIcmpv6Packets">totalIcmpv6Packets.</param>
        /// <param name="validatedPacketsPassed">validatedPacketsPassed.</param>
        /// <param name="malformedPacketsDropped">malformedPacketsDropped.</param>
        /// <param name="averageIcmpv6PacketRate">averageIcmpv6PacketRate.</param>
        /// <param name="icmpv6FloodsInProgress">icmpv6FloodsInProgress.</param>
        /// <param name="totalIcmpv6FloodsDetected">totalIcmpv6FloodsDetected.</param>
        /// <param name="totalIcmpv6FloodPacketsRejected">totalIcmpv6FloodPacketsRejected.</param>
        public ShowStatusIcmpv6Detail(string connectionsOpened = default(string), string connectionsClosed = default(string), string totalIcmpv6Packets = default(string), string validatedPacketsPassed = default(string), string malformedPacketsDropped = default(string), string averageIcmpv6PacketRate = default(string), string icmpv6FloodsInProgress = default(string), string totalIcmpv6FloodsDetected = default(string), string totalIcmpv6FloodPacketsRejected = default(string))
        {
            this.ConnectionsOpened = connectionsOpened;
            this.ConnectionsClosed = connectionsClosed;
            this.TotalIcmpv6Packets = totalIcmpv6Packets;
            this.ValidatedPacketsPassed = validatedPacketsPassed;
            this.MalformedPacketsDropped = malformedPacketsDropped;
            this.AverageIcmpv6PacketRate = averageIcmpv6PacketRate;
            this.Icmpv6FloodsInProgress = icmpv6FloodsInProgress;
            this.TotalIcmpv6FloodsDetected = totalIcmpv6FloodsDetected;
            this.TotalIcmpv6FloodPacketsRejected = totalIcmpv6FloodPacketsRejected;
        }

        /// <summary>
        /// Gets or Sets ConnectionsOpened
        /// </summary>
        [DataMember(Name = "connections_opened", EmitDefaultValue = false)]
        public string ConnectionsOpened { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionsClosed
        /// </summary>
        [DataMember(Name = "connections_closed", EmitDefaultValue = false)]
        public string ConnectionsClosed { get; set; }

        /// <summary>
        /// Gets or Sets TotalIcmpv6Packets
        /// </summary>
        [DataMember(Name = "total_icmpv6_packets", EmitDefaultValue = false)]
        public string TotalIcmpv6Packets { get; set; }

        /// <summary>
        /// Gets or Sets ValidatedPacketsPassed
        /// </summary>
        [DataMember(Name = "validated_packets_passed", EmitDefaultValue = false)]
        public string ValidatedPacketsPassed { get; set; }

        /// <summary>
        /// Gets or Sets MalformedPacketsDropped
        /// </summary>
        [DataMember(Name = "malformed_packets_dropped", EmitDefaultValue = false)]
        public string MalformedPacketsDropped { get; set; }

        /// <summary>
        /// Gets or Sets AverageIcmpv6PacketRate
        /// </summary>
        [DataMember(Name = "average_icmpv6_packet_rate", EmitDefaultValue = false)]
        public string AverageIcmpv6PacketRate { get; set; }

        /// <summary>
        /// Gets or Sets Icmpv6FloodsInProgress
        /// </summary>
        [DataMember(Name = "icmpv6_floods_in_progress", EmitDefaultValue = false)]
        public string Icmpv6FloodsInProgress { get; set; }

        /// <summary>
        /// Gets or Sets TotalIcmpv6FloodsDetected
        /// </summary>
        [DataMember(Name = "total_icmpv6_floods_detected", EmitDefaultValue = false)]
        public string TotalIcmpv6FloodsDetected { get; set; }

        /// <summary>
        /// Gets or Sets TotalIcmpv6FloodPacketsRejected
        /// </summary>
        [DataMember(Name = "total_icmpv6_flood_packets_rejected", EmitDefaultValue = false)]
        public string TotalIcmpv6FloodPacketsRejected { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusIcmpv6Detail {\n");
            sb.Append("  ConnectionsOpened: ").Append(ConnectionsOpened).Append("\n");
            sb.Append("  ConnectionsClosed: ").Append(ConnectionsClosed).Append("\n");
            sb.Append("  TotalIcmpv6Packets: ").Append(TotalIcmpv6Packets).Append("\n");
            sb.Append("  ValidatedPacketsPassed: ").Append(ValidatedPacketsPassed).Append("\n");
            sb.Append("  MalformedPacketsDropped: ").Append(MalformedPacketsDropped).Append("\n");
            sb.Append("  AverageIcmpv6PacketRate: ").Append(AverageIcmpv6PacketRate).Append("\n");
            sb.Append("  Icmpv6FloodsInProgress: ").Append(Icmpv6FloodsInProgress).Append("\n");
            sb.Append("  TotalIcmpv6FloodsDetected: ").Append(TotalIcmpv6FloodsDetected).Append("\n");
            sb.Append("  TotalIcmpv6FloodPacketsRejected: ").Append(TotalIcmpv6FloodPacketsRejected).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusIcmpv6Detail);
        }

        /// <summary>
        /// Returns true if ShowStatusIcmpv6Detail instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusIcmpv6Detail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusIcmpv6Detail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ConnectionsOpened == input.ConnectionsOpened ||
                    (this.ConnectionsOpened != null &&
                    this.ConnectionsOpened.Equals(input.ConnectionsOpened))
                ) && 
                (
                    this.ConnectionsClosed == input.ConnectionsClosed ||
                    (this.ConnectionsClosed != null &&
                    this.ConnectionsClosed.Equals(input.ConnectionsClosed))
                ) && 
                (
                    this.TotalIcmpv6Packets == input.TotalIcmpv6Packets ||
                    (this.TotalIcmpv6Packets != null &&
                    this.TotalIcmpv6Packets.Equals(input.TotalIcmpv6Packets))
                ) && 
                (
                    this.ValidatedPacketsPassed == input.ValidatedPacketsPassed ||
                    (this.ValidatedPacketsPassed != null &&
                    this.ValidatedPacketsPassed.Equals(input.ValidatedPacketsPassed))
                ) && 
                (
                    this.MalformedPacketsDropped == input.MalformedPacketsDropped ||
                    (this.MalformedPacketsDropped != null &&
                    this.MalformedPacketsDropped.Equals(input.MalformedPacketsDropped))
                ) && 
                (
                    this.AverageIcmpv6PacketRate == input.AverageIcmpv6PacketRate ||
                    (this.AverageIcmpv6PacketRate != null &&
                    this.AverageIcmpv6PacketRate.Equals(input.AverageIcmpv6PacketRate))
                ) && 
                (
                    this.Icmpv6FloodsInProgress == input.Icmpv6FloodsInProgress ||
                    (this.Icmpv6FloodsInProgress != null &&
                    this.Icmpv6FloodsInProgress.Equals(input.Icmpv6FloodsInProgress))
                ) && 
                (
                    this.TotalIcmpv6FloodsDetected == input.TotalIcmpv6FloodsDetected ||
                    (this.TotalIcmpv6FloodsDetected != null &&
                    this.TotalIcmpv6FloodsDetected.Equals(input.TotalIcmpv6FloodsDetected))
                ) && 
                (
                    this.TotalIcmpv6FloodPacketsRejected == input.TotalIcmpv6FloodPacketsRejected ||
                    (this.TotalIcmpv6FloodPacketsRejected != null &&
                    this.TotalIcmpv6FloodPacketsRejected.Equals(input.TotalIcmpv6FloodPacketsRejected))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConnectionsOpened != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionsOpened.GetHashCode();
                }
                if (this.ConnectionsClosed != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionsClosed.GetHashCode();
                }
                if (this.TotalIcmpv6Packets != null)
                {
                    hashCode = (hashCode * 59) + this.TotalIcmpv6Packets.GetHashCode();
                }
                if (this.ValidatedPacketsPassed != null)
                {
                    hashCode = (hashCode * 59) + this.ValidatedPacketsPassed.GetHashCode();
                }
                if (this.MalformedPacketsDropped != null)
                {
                    hashCode = (hashCode * 59) + this.MalformedPacketsDropped.GetHashCode();
                }
                if (this.AverageIcmpv6PacketRate != null)
                {
                    hashCode = (hashCode * 59) + this.AverageIcmpv6PacketRate.GetHashCode();
                }
                if (this.Icmpv6FloodsInProgress != null)
                {
                    hashCode = (hashCode * 59) + this.Icmpv6FloodsInProgress.GetHashCode();
                }
                if (this.TotalIcmpv6FloodsDetected != null)
                {
                    hashCode = (hashCode * 59) + this.TotalIcmpv6FloodsDetected.GetHashCode();
                }
                if (this.TotalIcmpv6FloodPacketsRejected != null)
                {
                    hashCode = (hashCode * 59) + this.TotalIcmpv6FloodPacketsRejected.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
