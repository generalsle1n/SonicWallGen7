/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enable arcsight syslog fields settings.
    /// </summary>
    [DataContract(Name = "log_syslog_log_syslog_arcsight")]
    public partial class LogSyslogLogSyslogArcsight : IEquatable<LogSyslogLogSyslogArcsight>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogSyslogLogSyslogArcsight" /> class.
        /// </summary>
        /// <param name="general">general.</param>
        /// <param name="varInterface">varInterface.</param>
        /// <param name="protocol">protocol.</param>
        /// <param name="connection">connection.</param>
        /// <param name="application">application.</param>
        /// <param name="others">others.</param>
        public LogSyslogLogSyslogArcsight(LogSyslogLogSyslogArcsightGeneral general = default(LogSyslogLogSyslogArcsightGeneral), LogSyslogLogSyslogArcsightInterface varInterface = default(LogSyslogLogSyslogArcsightInterface), LogSyslogLogSyslogArcsightProtocol protocol = default(LogSyslogLogSyslogArcsightProtocol), LogSyslogLogSyslogArcsightConnection connection = default(LogSyslogLogSyslogArcsightConnection), LogSyslogLogSyslogArcsightApplication application = default(LogSyslogLogSyslogArcsightApplication), LogSyslogLogSyslogArcsightOthers others = default(LogSyslogLogSyslogArcsightOthers))
        {
            this.General = general;
            this.VarInterface = varInterface;
            this.Protocol = protocol;
            this.Connection = connection;
            this.Application = application;
            this.Others = others;
        }

        /// <summary>
        /// Gets or Sets General
        /// </summary>
        [DataMember(Name = "general", EmitDefaultValue = false)]
        public LogSyslogLogSyslogArcsightGeneral General { get; set; }

        /// <summary>
        /// Gets or Sets VarInterface
        /// </summary>
        [DataMember(Name = "interface", EmitDefaultValue = false)]
        public LogSyslogLogSyslogArcsightInterface VarInterface { get; set; }

        /// <summary>
        /// Gets or Sets Protocol
        /// </summary>
        [DataMember(Name = "protocol", EmitDefaultValue = false)]
        public LogSyslogLogSyslogArcsightProtocol Protocol { get; set; }

        /// <summary>
        /// Gets or Sets Connection
        /// </summary>
        [DataMember(Name = "connection", EmitDefaultValue = false)]
        public LogSyslogLogSyslogArcsightConnection Connection { get; set; }

        /// <summary>
        /// Gets or Sets Application
        /// </summary>
        [DataMember(Name = "application", EmitDefaultValue = false)]
        public LogSyslogLogSyslogArcsightApplication Application { get; set; }

        /// <summary>
        /// Gets or Sets Others
        /// </summary>
        [DataMember(Name = "others", EmitDefaultValue = false)]
        public LogSyslogLogSyslogArcsightOthers Others { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LogSyslogLogSyslogArcsight {\n");
            sb.Append("  General: ").Append(General).Append("\n");
            sb.Append("  VarInterface: ").Append(VarInterface).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  Connection: ").Append(Connection).Append("\n");
            sb.Append("  Application: ").Append(Application).Append("\n");
            sb.Append("  Others: ").Append(Others).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogSyslogLogSyslogArcsight);
        }

        /// <summary>
        /// Returns true if LogSyslogLogSyslogArcsight instances are equal
        /// </summary>
        /// <param name="input">Instance of LogSyslogLogSyslogArcsight to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogSyslogLogSyslogArcsight input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.General == input.General ||
                    (this.General != null &&
                    this.General.Equals(input.General))
                ) && 
                (
                    this.VarInterface == input.VarInterface ||
                    (this.VarInterface != null &&
                    this.VarInterface.Equals(input.VarInterface))
                ) && 
                (
                    this.Protocol == input.Protocol ||
                    (this.Protocol != null &&
                    this.Protocol.Equals(input.Protocol))
                ) && 
                (
                    this.Connection == input.Connection ||
                    (this.Connection != null &&
                    this.Connection.Equals(input.Connection))
                ) && 
                (
                    this.Application == input.Application ||
                    (this.Application != null &&
                    this.Application.Equals(input.Application))
                ) && 
                (
                    this.Others == input.Others ||
                    (this.Others != null &&
                    this.Others.Equals(input.Others))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.General != null)
                {
                    hashCode = (hashCode * 59) + this.General.GetHashCode();
                }
                if (this.VarInterface != null)
                {
                    hashCode = (hashCode * 59) + this.VarInterface.GetHashCode();
                }
                if (this.Protocol != null)
                {
                    hashCode = (hashCode * 59) + this.Protocol.GetHashCode();
                }
                if (this.Connection != null)
                {
                    hashCode = (hashCode * 59) + this.Connection.GetHashCode();
                }
                if (this.Application != null)
                {
                    hashCode = (hashCode * 59) + this.Application.GetHashCode();
                }
                if (this.Others != null)
                {
                    hashCode = (hashCode * 59) + this.Others.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
