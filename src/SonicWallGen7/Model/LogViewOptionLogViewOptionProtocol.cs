/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enable view log protocol option settings.
    /// </summary>
    [DataContract(Name = "log_view_option_log_view_option_protocol")]
    public partial class LogViewOptionLogViewOptionProtocol : IEquatable<LogViewOptionLogViewOptionProtocol>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogViewOptionLogViewOptionProtocol" /> class.
        /// </summary>
        /// <param name="srcName">Src-name..</param>
        /// <param name="srcNatIp">Src-nat-ip..</param>
        /// <param name="srcNatPort">Src-nat-port..</param>
        /// <param name="inSpi">In-spi..</param>
        /// <param name="dstName">Dst-name..</param>
        /// <param name="dstNatIp">Dst-nat-ip..</param>
        /// <param name="dstNatPort">Dst-nat-port..</param>
        /// <param name="outSpi">Out-spi..</param>
        /// <param name="inProtocol">In-protocol..</param>
        /// <param name="icmpType">Icmp-type..</param>
        /// <param name="icmpCode">Icmp-code..</param>
        public LogViewOptionLogViewOptionProtocol(bool srcName = default(bool), bool srcNatIp = default(bool), bool srcNatPort = default(bool), bool inSpi = default(bool), bool dstName = default(bool), bool dstNatIp = default(bool), bool dstNatPort = default(bool), bool outSpi = default(bool), bool inProtocol = default(bool), bool icmpType = default(bool), bool icmpCode = default(bool))
        {
            this.SrcName = srcName;
            this.SrcNatIp = srcNatIp;
            this.SrcNatPort = srcNatPort;
            this.InSpi = inSpi;
            this.DstName = dstName;
            this.DstNatIp = dstNatIp;
            this.DstNatPort = dstNatPort;
            this.OutSpi = outSpi;
            this.InProtocol = inProtocol;
            this.IcmpType = icmpType;
            this.IcmpCode = icmpCode;
        }

        /// <summary>
        /// Src-name.
        /// </summary>
        /// <value>Src-name.</value>
        [DataMember(Name = "src_name", EmitDefaultValue = true)]
        public bool SrcName { get; set; }

        /// <summary>
        /// Src-nat-ip.
        /// </summary>
        /// <value>Src-nat-ip.</value>
        [DataMember(Name = "src_nat_ip", EmitDefaultValue = true)]
        public bool SrcNatIp { get; set; }

        /// <summary>
        /// Src-nat-port.
        /// </summary>
        /// <value>Src-nat-port.</value>
        [DataMember(Name = "src_nat_port", EmitDefaultValue = true)]
        public bool SrcNatPort { get; set; }

        /// <summary>
        /// In-spi.
        /// </summary>
        /// <value>In-spi.</value>
        [DataMember(Name = "in_spi", EmitDefaultValue = true)]
        public bool InSpi { get; set; }

        /// <summary>
        /// Dst-name.
        /// </summary>
        /// <value>Dst-name.</value>
        [DataMember(Name = "dst_name", EmitDefaultValue = true)]
        public bool DstName { get; set; }

        /// <summary>
        /// Dst-nat-ip.
        /// </summary>
        /// <value>Dst-nat-ip.</value>
        [DataMember(Name = "dst_nat_ip", EmitDefaultValue = true)]
        public bool DstNatIp { get; set; }

        /// <summary>
        /// Dst-nat-port.
        /// </summary>
        /// <value>Dst-nat-port.</value>
        [DataMember(Name = "dst_nat_port", EmitDefaultValue = true)]
        public bool DstNatPort { get; set; }

        /// <summary>
        /// Out-spi.
        /// </summary>
        /// <value>Out-spi.</value>
        [DataMember(Name = "out_spi", EmitDefaultValue = true)]
        public bool OutSpi { get; set; }

        /// <summary>
        /// In-protocol.
        /// </summary>
        /// <value>In-protocol.</value>
        [DataMember(Name = "in_protocol", EmitDefaultValue = true)]
        public bool InProtocol { get; set; }

        /// <summary>
        /// Icmp-type.
        /// </summary>
        /// <value>Icmp-type.</value>
        [DataMember(Name = "icmp_type", EmitDefaultValue = true)]
        public bool IcmpType { get; set; }

        /// <summary>
        /// Icmp-code.
        /// </summary>
        /// <value>Icmp-code.</value>
        [DataMember(Name = "icmp_code", EmitDefaultValue = true)]
        public bool IcmpCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LogViewOptionLogViewOptionProtocol {\n");
            sb.Append("  SrcName: ").Append(SrcName).Append("\n");
            sb.Append("  SrcNatIp: ").Append(SrcNatIp).Append("\n");
            sb.Append("  SrcNatPort: ").Append(SrcNatPort).Append("\n");
            sb.Append("  InSpi: ").Append(InSpi).Append("\n");
            sb.Append("  DstName: ").Append(DstName).Append("\n");
            sb.Append("  DstNatIp: ").Append(DstNatIp).Append("\n");
            sb.Append("  DstNatPort: ").Append(DstNatPort).Append("\n");
            sb.Append("  OutSpi: ").Append(OutSpi).Append("\n");
            sb.Append("  InProtocol: ").Append(InProtocol).Append("\n");
            sb.Append("  IcmpType: ").Append(IcmpType).Append("\n");
            sb.Append("  IcmpCode: ").Append(IcmpCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogViewOptionLogViewOptionProtocol);
        }

        /// <summary>
        /// Returns true if LogViewOptionLogViewOptionProtocol instances are equal
        /// </summary>
        /// <param name="input">Instance of LogViewOptionLogViewOptionProtocol to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogViewOptionLogViewOptionProtocol input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SrcName == input.SrcName ||
                    this.SrcName.Equals(input.SrcName)
                ) && 
                (
                    this.SrcNatIp == input.SrcNatIp ||
                    this.SrcNatIp.Equals(input.SrcNatIp)
                ) && 
                (
                    this.SrcNatPort == input.SrcNatPort ||
                    this.SrcNatPort.Equals(input.SrcNatPort)
                ) && 
                (
                    this.InSpi == input.InSpi ||
                    this.InSpi.Equals(input.InSpi)
                ) && 
                (
                    this.DstName == input.DstName ||
                    this.DstName.Equals(input.DstName)
                ) && 
                (
                    this.DstNatIp == input.DstNatIp ||
                    this.DstNatIp.Equals(input.DstNatIp)
                ) && 
                (
                    this.DstNatPort == input.DstNatPort ||
                    this.DstNatPort.Equals(input.DstNatPort)
                ) && 
                (
                    this.OutSpi == input.OutSpi ||
                    this.OutSpi.Equals(input.OutSpi)
                ) && 
                (
                    this.InProtocol == input.InProtocol ||
                    this.InProtocol.Equals(input.InProtocol)
                ) && 
                (
                    this.IcmpType == input.IcmpType ||
                    this.IcmpType.Equals(input.IcmpType)
                ) && 
                (
                    this.IcmpCode == input.IcmpCode ||
                    this.IcmpCode.Equals(input.IcmpCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SrcName.GetHashCode();
                hashCode = (hashCode * 59) + this.SrcNatIp.GetHashCode();
                hashCode = (hashCode * 59) + this.SrcNatPort.GetHashCode();
                hashCode = (hashCode * 59) + this.InSpi.GetHashCode();
                hashCode = (hashCode * 59) + this.DstName.GetHashCode();
                hashCode = (hashCode * 59) + this.DstNatIp.GetHashCode();
                hashCode = (hashCode * 59) + this.DstNatPort.GetHashCode();
                hashCode = (hashCode * 59) + this.OutSpi.GetHashCode();
                hashCode = (hashCode * 59) + this.InProtocol.GetHashCode();
                hashCode = (hashCode * 59) + this.IcmpType.GetHashCode();
                hashCode = (hashCode * 59) + this.IcmpCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
