/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enable tooltips in web management UI and configure.
    /// </summary>
    [DataContract(Name = "administration_administration_web_management_tooltip")]
    public partial class AdministrationAdministrationWebManagementTooltip : IEquatable<AdministrationAdministrationWebManagementTooltip>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdministrationAdministrationWebManagementTooltip" /> class.
        /// </summary>
        /// <param name="enable">Enable tooltips in web management configure..</param>
        /// <param name="formDelay">Set form tooltip delay..</param>
        /// <param name="buttonDelay">Set button tooltip delay..</param>
        /// <param name="textDelay">Set text tooltip delay..</param>
        public AdministrationAdministrationWebManagementTooltip(bool enable = default(bool), decimal formDelay = default(decimal), decimal buttonDelay = default(decimal), decimal textDelay = default(decimal))
        {
            this.Enable = enable;
            this.FormDelay = formDelay;
            this.ButtonDelay = buttonDelay;
            this.TextDelay = textDelay;
        }

        /// <summary>
        /// Enable tooltips in web management configure.
        /// </summary>
        /// <value>Enable tooltips in web management configure.</value>
        [DataMember(Name = "enable", EmitDefaultValue = true)]
        public bool Enable { get; set; }

        /// <summary>
        /// Set form tooltip delay.
        /// </summary>
        /// <value>Set form tooltip delay.</value>
        [DataMember(Name = "form_delay", EmitDefaultValue = false)]
        public decimal FormDelay { get; set; }

        /// <summary>
        /// Set button tooltip delay.
        /// </summary>
        /// <value>Set button tooltip delay.</value>
        [DataMember(Name = "button_delay", EmitDefaultValue = false)]
        public decimal ButtonDelay { get; set; }

        /// <summary>
        /// Set text tooltip delay.
        /// </summary>
        /// <value>Set text tooltip delay.</value>
        [DataMember(Name = "text_delay", EmitDefaultValue = false)]
        public decimal TextDelay { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdministrationAdministrationWebManagementTooltip {\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  FormDelay: ").Append(FormDelay).Append("\n");
            sb.Append("  ButtonDelay: ").Append(ButtonDelay).Append("\n");
            sb.Append("  TextDelay: ").Append(TextDelay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdministrationAdministrationWebManagementTooltip);
        }

        /// <summary>
        /// Returns true if AdministrationAdministrationWebManagementTooltip instances are equal
        /// </summary>
        /// <param name="input">Instance of AdministrationAdministrationWebManagementTooltip to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdministrationAdministrationWebManagementTooltip input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.FormDelay == input.FormDelay ||
                    this.FormDelay.Equals(input.FormDelay)
                ) && 
                (
                    this.ButtonDelay == input.ButtonDelay ||
                    this.ButtonDelay.Equals(input.ButtonDelay)
                ) && 
                (
                    this.TextDelay == input.TextDelay ||
                    this.TextDelay.Equals(input.TextDelay)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Enable.GetHashCode();
                hashCode = (hashCode * 59) + this.FormDelay.GetHashCode();
                hashCode = (hashCode * 59) + this.ButtonDelay.GetHashCode();
                hashCode = (hashCode * 59) + this.TextDelay.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
