/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Specify an agent to test.
    /// </summary>
    [DataContract(Name = "user_sso_test_sso_test_agent_agent")]
    public partial class UserSsoTestSsoTestAgentAgent : IEquatable<UserSsoTestSsoTestAgentAgent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserSsoTestSsoTestAgentAgent" /> class.
        /// </summary>
        /// <param name="nameOrIpAddr">nameOrIpAddr.</param>
        /// <param name="userIp">The IP address of a user to test..</param>
        /// <param name="mechanism">mechanism.</param>
        public UserSsoTestSsoTestAgentAgent(string nameOrIpAddr = default(string), string userIp = default(string), UserSsoTestSsoTestAgentAgentMechanism mechanism = default(UserSsoTestSsoTestAgentAgentMechanism))
        {
            this.NameOrIpAddr = nameOrIpAddr;
            this.UserIp = userIp;
            this.Mechanism = mechanism;
        }

        /// <summary>
        /// Gets or Sets NameOrIpAddr
        /// </summary>
        [DataMember(Name = "name_or_ip_addr", EmitDefaultValue = false)]
        public string NameOrIpAddr { get; set; }

        /// <summary>
        /// The IP address of a user to test.
        /// </summary>
        /// <value>The IP address of a user to test.</value>
        [DataMember(Name = "user_ip", EmitDefaultValue = false)]
        public string UserIp { get; set; }

        /// <summary>
        /// Gets or Sets Mechanism
        /// </summary>
        [DataMember(Name = "mechanism", EmitDefaultValue = false)]
        public UserSsoTestSsoTestAgentAgentMechanism Mechanism { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserSsoTestSsoTestAgentAgent {\n");
            sb.Append("  NameOrIpAddr: ").Append(NameOrIpAddr).Append("\n");
            sb.Append("  UserIp: ").Append(UserIp).Append("\n");
            sb.Append("  Mechanism: ").Append(Mechanism).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserSsoTestSsoTestAgentAgent);
        }

        /// <summary>
        /// Returns true if UserSsoTestSsoTestAgentAgent instances are equal
        /// </summary>
        /// <param name="input">Instance of UserSsoTestSsoTestAgentAgent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserSsoTestSsoTestAgentAgent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.NameOrIpAddr == input.NameOrIpAddr ||
                    (this.NameOrIpAddr != null &&
                    this.NameOrIpAddr.Equals(input.NameOrIpAddr))
                ) && 
                (
                    this.UserIp == input.UserIp ||
                    (this.UserIp != null &&
                    this.UserIp.Equals(input.UserIp))
                ) && 
                (
                    this.Mechanism == input.Mechanism ||
                    (this.Mechanism != null &&
                    this.Mechanism.Equals(input.Mechanism))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NameOrIpAddr != null)
                {
                    hashCode = (hashCode * 59) + this.NameOrIpAddr.GetHashCode();
                }
                if (this.UserIp != null)
                {
                    hashCode = (hashCode * 59) + this.UserIp.GetHashCode();
                }
                if (this.Mechanism != null)
                {
                    hashCode = (hashCode * 59) + this.Mechanism.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
