/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// DhcpServerOptionObjectValueInner
    /// </summary>
    [DataContract(Name = "dhcp_server_option_object_value_inner")]
    public partial class DhcpServerOptionObjectValueInner : IEquatable<DhcpServerOptionObjectValueInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DhcpServerOptionObjectValueInner" /> class.
        /// </summary>
        /// <param name="ip">Option object type: IP address..</param>
        /// <param name="fourByte">Option object type: four byte..</param>
        /// <param name="twoByte">Option object type: two byte..</param>
        /// <param name="oneByte">Option object type: one byte..</param>
        /// <param name="varString">Option object type: string..</param>
        /// <param name="boolean">Option object type: boolean. * Set to null to represent an unconfigured state..</param>
        /// <param name="domainName">Option object type: domain name..</param>
        /// <param name="hexString">Option object type: hex string..</param>
        public DhcpServerOptionObjectValueInner(string ip = default(string), string fourByte = default(string), string twoByte = default(string), string oneByte = default(string), string varString = default(string), decimal? boolean = default(decimal?), string domainName = default(string), string hexString = default(string))
        {
            this.Ip = ip;
            this.FourByte = fourByte;
            this.TwoByte = twoByte;
            this.OneByte = oneByte;
            this.VarString = varString;
            this.Boolean = boolean;
            this.DomainName = domainName;
            this.HexString = hexString;
        }

        /// <summary>
        /// Option object type: IP address.
        /// </summary>
        /// <value>Option object type: IP address.</value>
        [DataMember(Name = "ip", EmitDefaultValue = false)]
        public string Ip { get; set; }

        /// <summary>
        /// Option object type: four byte.
        /// </summary>
        /// <value>Option object type: four byte.</value>
        [DataMember(Name = "four_byte", EmitDefaultValue = false)]
        public string FourByte { get; set; }

        /// <summary>
        /// Option object type: two byte.
        /// </summary>
        /// <value>Option object type: two byte.</value>
        [DataMember(Name = "two_byte", EmitDefaultValue = false)]
        public string TwoByte { get; set; }

        /// <summary>
        /// Option object type: one byte.
        /// </summary>
        /// <value>Option object type: one byte.</value>
        [DataMember(Name = "one_byte", EmitDefaultValue = false)]
        public string OneByte { get; set; }

        /// <summary>
        /// Option object type: string.
        /// </summary>
        /// <value>Option object type: string.</value>
        [DataMember(Name = "string", EmitDefaultValue = false)]
        public string VarString { get; set; }

        /// <summary>
        /// Option object type: boolean. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Option object type: boolean. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "boolean", EmitDefaultValue = true)]
        public decimal? Boolean { get; set; }

        /// <summary>
        /// Option object type: domain name.
        /// </summary>
        /// <value>Option object type: domain name.</value>
        [DataMember(Name = "domain_name", EmitDefaultValue = false)]
        public string DomainName { get; set; }

        /// <summary>
        /// Option object type: hex string.
        /// </summary>
        /// <value>Option object type: hex string.</value>
        [DataMember(Name = "hex_string", EmitDefaultValue = false)]
        public string HexString { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DhcpServerOptionObjectValueInner {\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  FourByte: ").Append(FourByte).Append("\n");
            sb.Append("  TwoByte: ").Append(TwoByte).Append("\n");
            sb.Append("  OneByte: ").Append(OneByte).Append("\n");
            sb.Append("  VarString: ").Append(VarString).Append("\n");
            sb.Append("  Boolean: ").Append(Boolean).Append("\n");
            sb.Append("  DomainName: ").Append(DomainName).Append("\n");
            sb.Append("  HexString: ").Append(HexString).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DhcpServerOptionObjectValueInner);
        }

        /// <summary>
        /// Returns true if DhcpServerOptionObjectValueInner instances are equal
        /// </summary>
        /// <param name="input">Instance of DhcpServerOptionObjectValueInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DhcpServerOptionObjectValueInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Ip == input.Ip ||
                    (this.Ip != null &&
                    this.Ip.Equals(input.Ip))
                ) && 
                (
                    this.FourByte == input.FourByte ||
                    (this.FourByte != null &&
                    this.FourByte.Equals(input.FourByte))
                ) && 
                (
                    this.TwoByte == input.TwoByte ||
                    (this.TwoByte != null &&
                    this.TwoByte.Equals(input.TwoByte))
                ) && 
                (
                    this.OneByte == input.OneByte ||
                    (this.OneByte != null &&
                    this.OneByte.Equals(input.OneByte))
                ) && 
                (
                    this.VarString == input.VarString ||
                    (this.VarString != null &&
                    this.VarString.Equals(input.VarString))
                ) && 
                (
                    this.Boolean == input.Boolean ||
                    (this.Boolean != null &&
                    this.Boolean.Equals(input.Boolean))
                ) && 
                (
                    this.DomainName == input.DomainName ||
                    (this.DomainName != null &&
                    this.DomainName.Equals(input.DomainName))
                ) && 
                (
                    this.HexString == input.HexString ||
                    (this.HexString != null &&
                    this.HexString.Equals(input.HexString))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ip != null)
                {
                    hashCode = (hashCode * 59) + this.Ip.GetHashCode();
                }
                if (this.FourByte != null)
                {
                    hashCode = (hashCode * 59) + this.FourByte.GetHashCode();
                }
                if (this.TwoByte != null)
                {
                    hashCode = (hashCode * 59) + this.TwoByte.GetHashCode();
                }
                if (this.OneByte != null)
                {
                    hashCode = (hashCode * 59) + this.OneByte.GetHashCode();
                }
                if (this.VarString != null)
                {
                    hashCode = (hashCode * 59) + this.VarString.GetHashCode();
                }
                if (this.Boolean != null)
                {
                    hashCode = (hashCode * 59) + this.Boolean.GetHashCode();
                }
                if (this.DomainName != null)
                {
                    hashCode = (hashCode * 59) + this.DomainName.GetHashCode();
                }
                if (this.HexString != null)
                {
                    hashCode = (hashCode * 59) + this.HexString.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
