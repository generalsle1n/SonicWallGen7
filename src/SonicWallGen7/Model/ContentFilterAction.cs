/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Content filter action object configuration.
    /// </summary>
    [DataContract(Name = "content_filter_action")]
    public partial class ContentFilterAction : IEquatable<ContentFilterAction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentFilterAction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContentFilterAction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentFilterAction" /> class.
        /// </summary>
        /// <param name="name">Set action object name. (required).</param>
        /// <param name="wipeCookies">Enable wipe cookies..</param>
        /// <param name="flowReporting">Enable flow reporting..</param>
        /// <param name="block">block.</param>
        /// <param name="passphrase">passphrase.</param>
        /// <param name="confirm">confirm.</param>
        /// <param name="bandwidthManagement">bandwidthManagement.</param>
        public ContentFilterAction(string name = default(string), bool wipeCookies = default(bool), bool flowReporting = default(bool), ContentFilterActionBlock block = default(ContentFilterActionBlock), ContentFilterActionPassphrase passphrase = default(ContentFilterActionPassphrase), ContentFilterActionConfirm confirm = default(ContentFilterActionConfirm), ContentFilterActionBandwidthManagement bandwidthManagement = default(ContentFilterActionBandwidthManagement))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ContentFilterAction and cannot be null");
            }
            this.Name = name;
            this.WipeCookies = wipeCookies;
            this.FlowReporting = flowReporting;
            this.Block = block;
            this.Passphrase = passphrase;
            this.Confirm = confirm;
            this.BandwidthManagement = bandwidthManagement;
        }

        /// <summary>
        /// Set action object name.
        /// </summary>
        /// <value>Set action object name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Select CFS action object by UUID.
        /// </summary>
        /// <value>Select CFS action object by UUID.</value>
        [DataMember(Name = "uuid", EmitDefaultValue = false)]
        public string Uuid { get; private set; }

        /// <summary>
        /// Returns false as Uuid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUuid()
        {
            return false;
        }
        /// <summary>
        /// Enable wipe cookies.
        /// </summary>
        /// <value>Enable wipe cookies.</value>
        [DataMember(Name = "wipe_cookies", EmitDefaultValue = true)]
        public bool WipeCookies { get; set; }

        /// <summary>
        /// Enable flow reporting.
        /// </summary>
        /// <value>Enable flow reporting.</value>
        [DataMember(Name = "flow_reporting", EmitDefaultValue = true)]
        public bool FlowReporting { get; set; }

        /// <summary>
        /// Gets or Sets Block
        /// </summary>
        [DataMember(Name = "block", EmitDefaultValue = false)]
        public ContentFilterActionBlock Block { get; set; }

        /// <summary>
        /// Gets or Sets Passphrase
        /// </summary>
        [DataMember(Name = "passphrase", EmitDefaultValue = false)]
        public ContentFilterActionPassphrase Passphrase { get; set; }

        /// <summary>
        /// Gets or Sets Confirm
        /// </summary>
        [DataMember(Name = "confirm", EmitDefaultValue = false)]
        public ContentFilterActionConfirm Confirm { get; set; }

        /// <summary>
        /// Gets or Sets BandwidthManagement
        /// </summary>
        [DataMember(Name = "bandwidth_management", EmitDefaultValue = false)]
        public ContentFilterActionBandwidthManagement BandwidthManagement { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContentFilterAction {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  WipeCookies: ").Append(WipeCookies).Append("\n");
            sb.Append("  FlowReporting: ").Append(FlowReporting).Append("\n");
            sb.Append("  Block: ").Append(Block).Append("\n");
            sb.Append("  Passphrase: ").Append(Passphrase).Append("\n");
            sb.Append("  Confirm: ").Append(Confirm).Append("\n");
            sb.Append("  BandwidthManagement: ").Append(BandwidthManagement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContentFilterAction);
        }

        /// <summary>
        /// Returns true if ContentFilterAction instances are equal
        /// </summary>
        /// <param name="input">Instance of ContentFilterAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContentFilterAction input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.WipeCookies == input.WipeCookies ||
                    this.WipeCookies.Equals(input.WipeCookies)
                ) && 
                (
                    this.FlowReporting == input.FlowReporting ||
                    this.FlowReporting.Equals(input.FlowReporting)
                ) && 
                (
                    this.Block == input.Block ||
                    (this.Block != null &&
                    this.Block.Equals(input.Block))
                ) && 
                (
                    this.Passphrase == input.Passphrase ||
                    (this.Passphrase != null &&
                    this.Passphrase.Equals(input.Passphrase))
                ) && 
                (
                    this.Confirm == input.Confirm ||
                    (this.Confirm != null &&
                    this.Confirm.Equals(input.Confirm))
                ) && 
                (
                    this.BandwidthManagement == input.BandwidthManagement ||
                    (this.BandwidthManagement != null &&
                    this.BandwidthManagement.Equals(input.BandwidthManagement))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Uuid != null)
                {
                    hashCode = (hashCode * 59) + this.Uuid.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.WipeCookies.GetHashCode();
                hashCode = (hashCode * 59) + this.FlowReporting.GetHashCode();
                if (this.Block != null)
                {
                    hashCode = (hashCode * 59) + this.Block.GetHashCode();
                }
                if (this.Passphrase != null)
                {
                    hashCode = (hashCode * 59) + this.Passphrase.GetHashCode();
                }
                if (this.Confirm != null)
                {
                    hashCode = (hashCode * 59) + this.Confirm.GetHashCode();
                }
                if (this.BandwidthManagement != null)
                {
                    hashCode = (hashCode * 59) + this.BandwidthManagement.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
