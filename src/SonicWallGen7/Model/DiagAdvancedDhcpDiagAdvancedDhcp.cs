/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure advanced diag DHCP settings.
    /// </summary>
    [DataContract(Name = "diag_advanced_dhcp_diag_advanced_dhcp")]
    public partial class DiagAdvancedDhcpDiagAdvancedDhcp : IEquatable<DiagAdvancedDhcpDiagAdvancedDhcp>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagAdvancedDhcpDiagAdvancedDhcp" /> class.
        /// </summary>
        /// <param name="networkPreDiscovery">Enable DHCP server network pre-discovery..</param>
        /// <param name="conflictDetectPeriod">Set the DHCP server conflict detect period in seconds..</param>
        /// <param name="resourcesToDiscover">Set number of DHCP resources to discover..</param>
        /// <param name="conflictedResourceTimeout">Set the timeout for conflicted resource to be rechecked in seconds..</param>
        /// <param name="availableResourceTimeout">Set the timeout for available resource to be rechecked in seconds..</param>
        /// <param name="dhcpnak">Enable sending DHCPNAK if the &#39;requested IP address&#39; is on the wrong network..</param>
        /// <param name="leaseDatabaseRefreshInterval">Set time interval of DHCP lease database to be refreshed in seconds..</param>
        /// <param name="leaseDatabaseRefreshNumber">Set number of DHCP leases in database to be refreshed..</param>
        /// <param name="useClientEthernerAddress">Enable use client Etherner address instead of client-identifier option..</param>
        /// <param name="useUnicastAndLinkLayer">Enable use unicast dst ip address and link-layer address when unicast flag is set..</param>
        public DiagAdvancedDhcpDiagAdvancedDhcp(bool networkPreDiscovery = default(bool), decimal conflictDetectPeriod = default(decimal), decimal resourcesToDiscover = default(decimal), decimal conflictedResourceTimeout = default(decimal), decimal availableResourceTimeout = default(decimal), bool dhcpnak = default(bool), decimal leaseDatabaseRefreshInterval = default(decimal), decimal leaseDatabaseRefreshNumber = default(decimal), bool useClientEthernerAddress = default(bool), bool useUnicastAndLinkLayer = default(bool))
        {
            this.NetworkPreDiscovery = networkPreDiscovery;
            this.ConflictDetectPeriod = conflictDetectPeriod;
            this.ResourcesToDiscover = resourcesToDiscover;
            this.ConflictedResourceTimeout = conflictedResourceTimeout;
            this.AvailableResourceTimeout = availableResourceTimeout;
            this.Dhcpnak = dhcpnak;
            this.LeaseDatabaseRefreshInterval = leaseDatabaseRefreshInterval;
            this.LeaseDatabaseRefreshNumber = leaseDatabaseRefreshNumber;
            this.UseClientEthernerAddress = useClientEthernerAddress;
            this.UseUnicastAndLinkLayer = useUnicastAndLinkLayer;
        }

        /// <summary>
        /// Enable DHCP server network pre-discovery.
        /// </summary>
        /// <value>Enable DHCP server network pre-discovery.</value>
        [DataMember(Name = "network_pre_discovery", EmitDefaultValue = true)]
        public bool NetworkPreDiscovery { get; set; }

        /// <summary>
        /// Set the DHCP server conflict detect period in seconds.
        /// </summary>
        /// <value>Set the DHCP server conflict detect period in seconds.</value>
        [DataMember(Name = "conflict_detect_period", EmitDefaultValue = false)]
        public decimal ConflictDetectPeriod { get; set; }

        /// <summary>
        /// Set number of DHCP resources to discover.
        /// </summary>
        /// <value>Set number of DHCP resources to discover.</value>
        [DataMember(Name = "resources_to_discover", EmitDefaultValue = false)]
        public decimal ResourcesToDiscover { get; set; }

        /// <summary>
        /// Set the timeout for conflicted resource to be rechecked in seconds.
        /// </summary>
        /// <value>Set the timeout for conflicted resource to be rechecked in seconds.</value>
        [DataMember(Name = "conflicted_resource_timeout", EmitDefaultValue = false)]
        public decimal ConflictedResourceTimeout { get; set; }

        /// <summary>
        /// Set the timeout for available resource to be rechecked in seconds.
        /// </summary>
        /// <value>Set the timeout for available resource to be rechecked in seconds.</value>
        [DataMember(Name = "available_resource_timeout", EmitDefaultValue = false)]
        public decimal AvailableResourceTimeout { get; set; }

        /// <summary>
        /// Enable sending DHCPNAK if the &#39;requested IP address&#39; is on the wrong network.
        /// </summary>
        /// <value>Enable sending DHCPNAK if the &#39;requested IP address&#39; is on the wrong network.</value>
        [DataMember(Name = "dhcpnak", EmitDefaultValue = true)]
        public bool Dhcpnak { get; set; }

        /// <summary>
        /// Set time interval of DHCP lease database to be refreshed in seconds.
        /// </summary>
        /// <value>Set time interval of DHCP lease database to be refreshed in seconds.</value>
        [DataMember(Name = "lease_database_refresh_interval", EmitDefaultValue = false)]
        public decimal LeaseDatabaseRefreshInterval { get; set; }

        /// <summary>
        /// Set number of DHCP leases in database to be refreshed.
        /// </summary>
        /// <value>Set number of DHCP leases in database to be refreshed.</value>
        [DataMember(Name = "lease_database_refresh_number", EmitDefaultValue = false)]
        public decimal LeaseDatabaseRefreshNumber { get; set; }

        /// <summary>
        /// Enable use client Etherner address instead of client-identifier option.
        /// </summary>
        /// <value>Enable use client Etherner address instead of client-identifier option.</value>
        [DataMember(Name = "use_client_etherner_address", EmitDefaultValue = true)]
        public bool UseClientEthernerAddress { get; set; }

        /// <summary>
        /// Enable use unicast dst ip address and link-layer address when unicast flag is set.
        /// </summary>
        /// <value>Enable use unicast dst ip address and link-layer address when unicast flag is set.</value>
        [DataMember(Name = "use_unicast_and_link_layer", EmitDefaultValue = true)]
        public bool UseUnicastAndLinkLayer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DiagAdvancedDhcpDiagAdvancedDhcp {\n");
            sb.Append("  NetworkPreDiscovery: ").Append(NetworkPreDiscovery).Append("\n");
            sb.Append("  ConflictDetectPeriod: ").Append(ConflictDetectPeriod).Append("\n");
            sb.Append("  ResourcesToDiscover: ").Append(ResourcesToDiscover).Append("\n");
            sb.Append("  ConflictedResourceTimeout: ").Append(ConflictedResourceTimeout).Append("\n");
            sb.Append("  AvailableResourceTimeout: ").Append(AvailableResourceTimeout).Append("\n");
            sb.Append("  Dhcpnak: ").Append(Dhcpnak).Append("\n");
            sb.Append("  LeaseDatabaseRefreshInterval: ").Append(LeaseDatabaseRefreshInterval).Append("\n");
            sb.Append("  LeaseDatabaseRefreshNumber: ").Append(LeaseDatabaseRefreshNumber).Append("\n");
            sb.Append("  UseClientEthernerAddress: ").Append(UseClientEthernerAddress).Append("\n");
            sb.Append("  UseUnicastAndLinkLayer: ").Append(UseUnicastAndLinkLayer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiagAdvancedDhcpDiagAdvancedDhcp);
        }

        /// <summary>
        /// Returns true if DiagAdvancedDhcpDiagAdvancedDhcp instances are equal
        /// </summary>
        /// <param name="input">Instance of DiagAdvancedDhcpDiagAdvancedDhcp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiagAdvancedDhcpDiagAdvancedDhcp input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.NetworkPreDiscovery == input.NetworkPreDiscovery ||
                    this.NetworkPreDiscovery.Equals(input.NetworkPreDiscovery)
                ) && 
                (
                    this.ConflictDetectPeriod == input.ConflictDetectPeriod ||
                    this.ConflictDetectPeriod.Equals(input.ConflictDetectPeriod)
                ) && 
                (
                    this.ResourcesToDiscover == input.ResourcesToDiscover ||
                    this.ResourcesToDiscover.Equals(input.ResourcesToDiscover)
                ) && 
                (
                    this.ConflictedResourceTimeout == input.ConflictedResourceTimeout ||
                    this.ConflictedResourceTimeout.Equals(input.ConflictedResourceTimeout)
                ) && 
                (
                    this.AvailableResourceTimeout == input.AvailableResourceTimeout ||
                    this.AvailableResourceTimeout.Equals(input.AvailableResourceTimeout)
                ) && 
                (
                    this.Dhcpnak == input.Dhcpnak ||
                    this.Dhcpnak.Equals(input.Dhcpnak)
                ) && 
                (
                    this.LeaseDatabaseRefreshInterval == input.LeaseDatabaseRefreshInterval ||
                    this.LeaseDatabaseRefreshInterval.Equals(input.LeaseDatabaseRefreshInterval)
                ) && 
                (
                    this.LeaseDatabaseRefreshNumber == input.LeaseDatabaseRefreshNumber ||
                    this.LeaseDatabaseRefreshNumber.Equals(input.LeaseDatabaseRefreshNumber)
                ) && 
                (
                    this.UseClientEthernerAddress == input.UseClientEthernerAddress ||
                    this.UseClientEthernerAddress.Equals(input.UseClientEthernerAddress)
                ) && 
                (
                    this.UseUnicastAndLinkLayer == input.UseUnicastAndLinkLayer ||
                    this.UseUnicastAndLinkLayer.Equals(input.UseUnicastAndLinkLayer)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.NetworkPreDiscovery.GetHashCode();
                hashCode = (hashCode * 59) + this.ConflictDetectPeriod.GetHashCode();
                hashCode = (hashCode * 59) + this.ResourcesToDiscover.GetHashCode();
                hashCode = (hashCode * 59) + this.ConflictedResourceTimeout.GetHashCode();
                hashCode = (hashCode * 59) + this.AvailableResourceTimeout.GetHashCode();
                hashCode = (hashCode * 59) + this.Dhcpnak.GetHashCode();
                hashCode = (hashCode * 59) + this.LeaseDatabaseRefreshInterval.GetHashCode();
                hashCode = (hashCode * 59) + this.LeaseDatabaseRefreshNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.UseClientEthernerAddress.GetHashCode();
                hashCode = (hashCode * 59) + this.UseUnicastAndLinkLayer.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
