/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// user sso configuration.
    /// </summary>
    [DataContract(Name = "user_sso_security_service_bypass")]
    public partial class UserSsoSecurityServiceBypass : IEquatable<UserSsoSecurityServiceBypass>, IValidatableObject
    {
        /// <summary>
        /// Set bypass type.
        /// </summary>
        /// <value>Set bypass type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum FullBypass for value: full-bypass
            /// </summary>
            [EnumMember(Value = "full-bypass")]
            FullBypass = 1,

            /// <summary>
            /// Enum TriggerSso for value: trigger-sso
            /// </summary>
            [EnumMember(Value = "trigger-sso")]
            TriggerSso = 2
        }


        /// <summary>
        /// Set bypass type.
        /// </summary>
        /// <value>Set bypass type.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserSsoSecurityServiceBypass" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserSsoSecurityServiceBypass() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserSsoSecurityServiceBypass" /> class.
        /// </summary>
        /// <param name="address">address (required).</param>
        /// <param name="service">service (required).</param>
        /// <param name="type">Set bypass type..</param>
        public UserSsoSecurityServiceBypass(UserSsoSecurityServiceBypassAddress address = default(UserSsoSecurityServiceBypassAddress), UserSsoSecurityServiceBypassService service = default(UserSsoSecurityServiceBypassService), TypeEnum? type = default(TypeEnum?))
        {
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for UserSsoSecurityServiceBypass and cannot be null");
            }
            this.Address = address;
            // to ensure "service" is required (not null)
            if (service == null)
            {
                throw new ArgumentNullException("service is a required property for UserSsoSecurityServiceBypass and cannot be null");
            }
            this.Service = service;
            this.Type = type;
        }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public UserSsoSecurityServiceBypassAddress Address { get; set; }

        /// <summary>
        /// Gets or Sets Service
        /// </summary>
        [DataMember(Name = "service", IsRequired = true, EmitDefaultValue = true)]
        public UserSsoSecurityServiceBypassService Service { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserSsoSecurityServiceBypass {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserSsoSecurityServiceBypass);
        }

        /// <summary>
        /// Returns true if UserSsoSecurityServiceBypass instances are equal
        /// </summary>
        /// <param name="input">Instance of UserSsoSecurityServiceBypass to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserSsoSecurityServiceBypass input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Service == input.Service ||
                    (this.Service != null &&
                    this.Service.Equals(input.Service))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.Service != null)
                {
                    hashCode = (hashCode * 59) + this.Service.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
