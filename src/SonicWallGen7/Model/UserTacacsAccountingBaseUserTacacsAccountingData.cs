/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enable sending accounting data to servers or for users.
    /// </summary>
    [DataContract(Name = "user_tacacs_accounting_base_user_tacacs_accounting_data")]
    public partial class UserTacacsAccountingBaseUserTacacsAccountingData : IEquatable<UserTacacsAccountingBaseUserTacacsAccountingData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserTacacsAccountingBaseUserTacacsAccountingData" /> class.
        /// </summary>
        /// <param name="webLogin">Enable sending accounting data for users authenticated by web login..</param>
        /// <param name="remoteClient">Enable sending accounting data for remote client users..</param>
        /// <param name="guest">Enable sending accounting data for guest users..</param>
        /// <param name="ssoAuthenticated">Enable sending accounting data for SSO-authenticated users..</param>
        /// <param name="ssoUsersIdentifiedViaRadiusAccounting">Enable including SSO users identified via RADIUS Accounting..</param>
        public UserTacacsAccountingBaseUserTacacsAccountingData(bool webLogin = default(bool), bool remoteClient = default(bool), bool guest = default(bool), bool ssoAuthenticated = default(bool), bool ssoUsersIdentifiedViaRadiusAccounting = default(bool))
        {
            this.WebLogin = webLogin;
            this.RemoteClient = remoteClient;
            this.Guest = guest;
            this.SsoAuthenticated = ssoAuthenticated;
            this.SsoUsersIdentifiedViaRadiusAccounting = ssoUsersIdentifiedViaRadiusAccounting;
        }

        /// <summary>
        /// Enable sending accounting data for users authenticated by web login.
        /// </summary>
        /// <value>Enable sending accounting data for users authenticated by web login.</value>
        [DataMember(Name = "web_login", EmitDefaultValue = true)]
        public bool WebLogin { get; set; }

        /// <summary>
        /// Enable sending accounting data for remote client users.
        /// </summary>
        /// <value>Enable sending accounting data for remote client users.</value>
        [DataMember(Name = "remote_client", EmitDefaultValue = true)]
        public bool RemoteClient { get; set; }

        /// <summary>
        /// Enable sending accounting data for guest users.
        /// </summary>
        /// <value>Enable sending accounting data for guest users.</value>
        [DataMember(Name = "guest", EmitDefaultValue = true)]
        public bool Guest { get; set; }

        /// <summary>
        /// Enable sending accounting data for SSO-authenticated users.
        /// </summary>
        /// <value>Enable sending accounting data for SSO-authenticated users.</value>
        [DataMember(Name = "sso_authenticated", EmitDefaultValue = true)]
        public bool SsoAuthenticated { get; set; }

        /// <summary>
        /// Enable including SSO users identified via RADIUS Accounting.
        /// </summary>
        /// <value>Enable including SSO users identified via RADIUS Accounting.</value>
        [DataMember(Name = "sso_users_identified_via_radius_accounting", EmitDefaultValue = true)]
        public bool SsoUsersIdentifiedViaRadiusAccounting { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserTacacsAccountingBaseUserTacacsAccountingData {\n");
            sb.Append("  WebLogin: ").Append(WebLogin).Append("\n");
            sb.Append("  RemoteClient: ").Append(RemoteClient).Append("\n");
            sb.Append("  Guest: ").Append(Guest).Append("\n");
            sb.Append("  SsoAuthenticated: ").Append(SsoAuthenticated).Append("\n");
            sb.Append("  SsoUsersIdentifiedViaRadiusAccounting: ").Append(SsoUsersIdentifiedViaRadiusAccounting).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserTacacsAccountingBaseUserTacacsAccountingData);
        }

        /// <summary>
        /// Returns true if UserTacacsAccountingBaseUserTacacsAccountingData instances are equal
        /// </summary>
        /// <param name="input">Instance of UserTacacsAccountingBaseUserTacacsAccountingData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserTacacsAccountingBaseUserTacacsAccountingData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.WebLogin == input.WebLogin ||
                    this.WebLogin.Equals(input.WebLogin)
                ) && 
                (
                    this.RemoteClient == input.RemoteClient ||
                    this.RemoteClient.Equals(input.RemoteClient)
                ) && 
                (
                    this.Guest == input.Guest ||
                    this.Guest.Equals(input.Guest)
                ) && 
                (
                    this.SsoAuthenticated == input.SsoAuthenticated ||
                    this.SsoAuthenticated.Equals(input.SsoAuthenticated)
                ) && 
                (
                    this.SsoUsersIdentifiedViaRadiusAccounting == input.SsoUsersIdentifiedViaRadiusAccounting ||
                    this.SsoUsersIdentifiedViaRadiusAccounting.Equals(input.SsoUsersIdentifiedViaRadiusAccounting)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.WebLogin.GetHashCode();
                hashCode = (hashCode * 59) + this.RemoteClient.GetHashCode();
                hashCode = (hashCode * 59) + this.Guest.GetHashCode();
                hashCode = (hashCode * 59) + this.SsoAuthenticated.GetHashCode();
                hashCode = (hashCode * 59) + this.SsoUsersIdentifiedViaRadiusAccounting.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
