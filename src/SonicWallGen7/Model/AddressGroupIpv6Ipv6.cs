/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// IPV6 address group.
    /// </summary>
    [DataContract(Name = "address_group_ipv6_ipv6")]
    public partial class AddressGroupIpv6Ipv6 : IEquatable<AddressGroupIpv6Ipv6>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressGroupIpv6Ipv6" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddressGroupIpv6Ipv6() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressGroupIpv6Ipv6" /> class.
        /// </summary>
        /// <param name="name">Address group name. (required).</param>
        /// <param name="addressGroup">addressGroup.</param>
        /// <param name="addressObject">addressObject.</param>
        public AddressGroupIpv6Ipv6(string name = default(string), AddressGroupIpv4Ipv4AddressGroup addressGroup = default(AddressGroupIpv4Ipv4AddressGroup), AddressGroupIpv4Ipv4AddressObject addressObject = default(AddressGroupIpv4Ipv4AddressObject))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for AddressGroupIpv6Ipv6 and cannot be null");
            }
            this.Name = name;
            this.AddressGroup = addressGroup;
            this.AddressObject = addressObject;
        }

        /// <summary>
        /// Address group name.
        /// </summary>
        /// <value>Address group name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Address group UUID.
        /// </summary>
        /// <value>Address group UUID.</value>
        [DataMember(Name = "uuid", EmitDefaultValue = false)]
        public string Uuid { get; private set; }

        /// <summary>
        /// Returns false as Uuid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUuid()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets AddressGroup
        /// </summary>
        [DataMember(Name = "address_group", EmitDefaultValue = false)]
        public AddressGroupIpv4Ipv4AddressGroup AddressGroup { get; set; }

        /// <summary>
        /// Gets or Sets AddressObject
        /// </summary>
        [DataMember(Name = "address_object", EmitDefaultValue = false)]
        public AddressGroupIpv4Ipv4AddressObject AddressObject { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddressGroupIpv6Ipv6 {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  AddressGroup: ").Append(AddressGroup).Append("\n");
            sb.Append("  AddressObject: ").Append(AddressObject).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddressGroupIpv6Ipv6);
        }

        /// <summary>
        /// Returns true if AddressGroupIpv6Ipv6 instances are equal
        /// </summary>
        /// <param name="input">Instance of AddressGroupIpv6Ipv6 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressGroupIpv6Ipv6 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.AddressGroup == input.AddressGroup ||
                    (this.AddressGroup != null &&
                    this.AddressGroup.Equals(input.AddressGroup))
                ) && 
                (
                    this.AddressObject == input.AddressObject ||
                    (this.AddressObject != null &&
                    this.AddressObject.Equals(input.AddressObject))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Uuid != null)
                {
                    hashCode = (hashCode * 59) + this.Uuid.GetHashCode();
                }
                if (this.AddressGroup != null)
                {
                    hashCode = (hashCode * 59) + this.AddressGroup.GetHashCode();
                }
                if (this.AddressObject != null)
                {
                    hashCode = (hashCode * 59) + this.AddressObject.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
