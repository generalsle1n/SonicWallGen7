/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// appflow external detail schema.
    /// </summary>
    [DataContract(Name = "show_status_appflow_external_detail")]
    public partial class ShowStatusAppflowExternalDetail : IEquatable<ShowStatusAppflowExternalDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusAppflowExternalDetail" /> class.
        /// </summary>
        /// <param name="connectionFlowsEnqueued">connectionFlowsEnqueued.</param>
        /// <param name="connectionFlowsDequeued">connectionFlowsDequeued.</param>
        /// <param name="connectionFlowsDropped">connectionFlowsDropped.</param>
        /// <param name="connectionFlowsSkippedReporting">connectionFlowsSkippedReporting.</param>
        /// <param name="nonConnectionDataEnqueued">nonConnectionDataEnqueued.</param>
        /// <param name="nonConnectionDataDequeued">nonConnectionDataDequeued.</param>
        /// <param name="nonConnectionDataDropped">nonConnectionDataDropped.</param>
        /// <param name="nonConnectionRelatedStaticDataReported">nonConnectionRelatedStaticDataReported.</param>
        /// <param name="logReportedByIpfix">logReportedByIpfix.</param>
        public ShowStatusAppflowExternalDetail(string connectionFlowsEnqueued = default(string), string connectionFlowsDequeued = default(string), string connectionFlowsDropped = default(string), string connectionFlowsSkippedReporting = default(string), string nonConnectionDataEnqueued = default(string), string nonConnectionDataDequeued = default(string), string nonConnectionDataDropped = default(string), string nonConnectionRelatedStaticDataReported = default(string), string logReportedByIpfix = default(string))
        {
            this.ConnectionFlowsEnqueued = connectionFlowsEnqueued;
            this.ConnectionFlowsDequeued = connectionFlowsDequeued;
            this.ConnectionFlowsDropped = connectionFlowsDropped;
            this.ConnectionFlowsSkippedReporting = connectionFlowsSkippedReporting;
            this.NonConnectionDataEnqueued = nonConnectionDataEnqueued;
            this.NonConnectionDataDequeued = nonConnectionDataDequeued;
            this.NonConnectionDataDropped = nonConnectionDataDropped;
            this.NonConnectionRelatedStaticDataReported = nonConnectionRelatedStaticDataReported;
            this.LogReportedByIpfix = logReportedByIpfix;
        }

        /// <summary>
        /// Gets or Sets ConnectionFlowsEnqueued
        /// </summary>
        [DataMember(Name = "connection_flows_enqueued", EmitDefaultValue = false)]
        public string ConnectionFlowsEnqueued { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionFlowsDequeued
        /// </summary>
        [DataMember(Name = "connection_flows_dequeued", EmitDefaultValue = false)]
        public string ConnectionFlowsDequeued { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionFlowsDropped
        /// </summary>
        [DataMember(Name = "connection_flows_dropped", EmitDefaultValue = false)]
        public string ConnectionFlowsDropped { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionFlowsSkippedReporting
        /// </summary>
        [DataMember(Name = "connection_flows_skipped_reporting", EmitDefaultValue = false)]
        public string ConnectionFlowsSkippedReporting { get; set; }

        /// <summary>
        /// Gets or Sets NonConnectionDataEnqueued
        /// </summary>
        [DataMember(Name = "non_connection_data_enqueued", EmitDefaultValue = false)]
        public string NonConnectionDataEnqueued { get; set; }

        /// <summary>
        /// Gets or Sets NonConnectionDataDequeued
        /// </summary>
        [DataMember(Name = "non_connection_data_dequeued", EmitDefaultValue = false)]
        public string NonConnectionDataDequeued { get; set; }

        /// <summary>
        /// Gets or Sets NonConnectionDataDropped
        /// </summary>
        [DataMember(Name = "non_connection_data_dropped", EmitDefaultValue = false)]
        public string NonConnectionDataDropped { get; set; }

        /// <summary>
        /// Gets or Sets NonConnectionRelatedStaticDataReported
        /// </summary>
        [DataMember(Name = "non_connection_related_static_data_reported", EmitDefaultValue = false)]
        public string NonConnectionRelatedStaticDataReported { get; set; }

        /// <summary>
        /// Gets or Sets LogReportedByIpfix
        /// </summary>
        [DataMember(Name = "log_reported_by_ipfix", EmitDefaultValue = false)]
        public string LogReportedByIpfix { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusAppflowExternalDetail {\n");
            sb.Append("  ConnectionFlowsEnqueued: ").Append(ConnectionFlowsEnqueued).Append("\n");
            sb.Append("  ConnectionFlowsDequeued: ").Append(ConnectionFlowsDequeued).Append("\n");
            sb.Append("  ConnectionFlowsDropped: ").Append(ConnectionFlowsDropped).Append("\n");
            sb.Append("  ConnectionFlowsSkippedReporting: ").Append(ConnectionFlowsSkippedReporting).Append("\n");
            sb.Append("  NonConnectionDataEnqueued: ").Append(NonConnectionDataEnqueued).Append("\n");
            sb.Append("  NonConnectionDataDequeued: ").Append(NonConnectionDataDequeued).Append("\n");
            sb.Append("  NonConnectionDataDropped: ").Append(NonConnectionDataDropped).Append("\n");
            sb.Append("  NonConnectionRelatedStaticDataReported: ").Append(NonConnectionRelatedStaticDataReported).Append("\n");
            sb.Append("  LogReportedByIpfix: ").Append(LogReportedByIpfix).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusAppflowExternalDetail);
        }

        /// <summary>
        /// Returns true if ShowStatusAppflowExternalDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusAppflowExternalDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusAppflowExternalDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ConnectionFlowsEnqueued == input.ConnectionFlowsEnqueued ||
                    (this.ConnectionFlowsEnqueued != null &&
                    this.ConnectionFlowsEnqueued.Equals(input.ConnectionFlowsEnqueued))
                ) && 
                (
                    this.ConnectionFlowsDequeued == input.ConnectionFlowsDequeued ||
                    (this.ConnectionFlowsDequeued != null &&
                    this.ConnectionFlowsDequeued.Equals(input.ConnectionFlowsDequeued))
                ) && 
                (
                    this.ConnectionFlowsDropped == input.ConnectionFlowsDropped ||
                    (this.ConnectionFlowsDropped != null &&
                    this.ConnectionFlowsDropped.Equals(input.ConnectionFlowsDropped))
                ) && 
                (
                    this.ConnectionFlowsSkippedReporting == input.ConnectionFlowsSkippedReporting ||
                    (this.ConnectionFlowsSkippedReporting != null &&
                    this.ConnectionFlowsSkippedReporting.Equals(input.ConnectionFlowsSkippedReporting))
                ) && 
                (
                    this.NonConnectionDataEnqueued == input.NonConnectionDataEnqueued ||
                    (this.NonConnectionDataEnqueued != null &&
                    this.NonConnectionDataEnqueued.Equals(input.NonConnectionDataEnqueued))
                ) && 
                (
                    this.NonConnectionDataDequeued == input.NonConnectionDataDequeued ||
                    (this.NonConnectionDataDequeued != null &&
                    this.NonConnectionDataDequeued.Equals(input.NonConnectionDataDequeued))
                ) && 
                (
                    this.NonConnectionDataDropped == input.NonConnectionDataDropped ||
                    (this.NonConnectionDataDropped != null &&
                    this.NonConnectionDataDropped.Equals(input.NonConnectionDataDropped))
                ) && 
                (
                    this.NonConnectionRelatedStaticDataReported == input.NonConnectionRelatedStaticDataReported ||
                    (this.NonConnectionRelatedStaticDataReported != null &&
                    this.NonConnectionRelatedStaticDataReported.Equals(input.NonConnectionRelatedStaticDataReported))
                ) && 
                (
                    this.LogReportedByIpfix == input.LogReportedByIpfix ||
                    (this.LogReportedByIpfix != null &&
                    this.LogReportedByIpfix.Equals(input.LogReportedByIpfix))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConnectionFlowsEnqueued != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionFlowsEnqueued.GetHashCode();
                }
                if (this.ConnectionFlowsDequeued != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionFlowsDequeued.GetHashCode();
                }
                if (this.ConnectionFlowsDropped != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionFlowsDropped.GetHashCode();
                }
                if (this.ConnectionFlowsSkippedReporting != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionFlowsSkippedReporting.GetHashCode();
                }
                if (this.NonConnectionDataEnqueued != null)
                {
                    hashCode = (hashCode * 59) + this.NonConnectionDataEnqueued.GetHashCode();
                }
                if (this.NonConnectionDataDequeued != null)
                {
                    hashCode = (hashCode * 59) + this.NonConnectionDataDequeued.GetHashCode();
                }
                if (this.NonConnectionDataDropped != null)
                {
                    hashCode = (hashCode * 59) + this.NonConnectionDataDropped.GetHashCode();
                }
                if (this.NonConnectionRelatedStaticDataReported != null)
                {
                    hashCode = (hashCode * 59) + this.NonConnectionRelatedStaticDataReported.GetHashCode();
                }
                if (this.LogReportedByIpfix != null)
                {
                    hashCode = (hashCode * 59) + this.LogReportedByIpfix.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
