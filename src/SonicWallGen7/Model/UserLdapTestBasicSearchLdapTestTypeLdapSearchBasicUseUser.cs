/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// UserLdapTestBasicSearchLdapTestTypeLdapSearchBasicUseUser
    /// </summary>
    [DataContract(Name = "user_ldap_test_basic_search_ldap_test_type_ldap_search_basic_use_user")]
    public partial class UserLdapTestBasicSearchLdapTestTypeLdapSearchBasicUseUser : IEquatable<UserLdapTestBasicSearchLdapTestTypeLdapSearchBasicUseUser>, IValidatableObject
    {
        /// <summary>
        /// Search for a user with a given login name or common name.
        /// </summary>
        /// <value>Search for a user with a given login name or common name.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UserEnum
        {
            /// <summary>
            /// Enum LoginName for value: login-name
            /// </summary>
            [EnumMember(Value = "login-name")]
            LoginName = 1,

            /// <summary>
            /// Enum QualifiedName for value: qualified-name
            /// </summary>
            [EnumMember(Value = "qualified-name")]
            QualifiedName = 2,

            /// <summary>
            /// Enum CommonName for value: common-name
            /// </summary>
            [EnumMember(Value = "common-name")]
            CommonName = 3
        }


        /// <summary>
        /// Search for a user with a given login name or common name.
        /// </summary>
        /// <value>Search for a user with a given login name or common name.</value>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public UserEnum? User { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserLdapTestBasicSearchLdapTestTypeLdapSearchBasicUseUser" /> class.
        /// </summary>
        /// <param name="user">Search for a user with a given login name or common name..</param>
        public UserLdapTestBasicSearchLdapTestTypeLdapSearchBasicUseUser(UserEnum? user = default(UserEnum?))
        {
            this.User = user;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserLdapTestBasicSearchLdapTestTypeLdapSearchBasicUseUser {\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserLdapTestBasicSearchLdapTestTypeLdapSearchBasicUseUser);
        }

        /// <summary>
        /// Returns true if UserLdapTestBasicSearchLdapTestTypeLdapSearchBasicUseUser instances are equal
        /// </summary>
        /// <param name="input">Instance of UserLdapTestBasicSearchLdapTestTypeLdapSearchBasicUseUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserLdapTestBasicSearchLdapTestTypeLdapSearchBasicUseUser input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.User == input.User ||
                    this.User.Equals(input.User)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.User.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
