/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure advanced diag VoIP settings.
    /// </summary>
    [DataContract(Name = "diag_advanced_voip_diag_advanced_voip")]
    public partial class DiagAdvancedVoipDiagAdvancedVoip : IEquatable<DiagAdvancedVoipDiagAdvancedVoip>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagAdvancedVoipDiagAdvancedVoip" /> class.
        /// </summary>
        /// <param name="maxEndpoints">maxEndpoints.</param>
        /// <param name="oddMediaControlPort">Enable H323 use odd media control port..</param>
        /// <param name="relaxSequenceNumberCheck">Enable relax sequence number checking for rtsp media streams..</param>
        /// <param name="autoAddSip">Enable auto-add SIP endpoints..</param>
        /// <param name="sipTransforms">Enable transforming SIP URIs to have an explicit port..</param>
        /// <param name="inviteFlush">Enable flush active media for SIP INVITEs without SDP..</param>
        /// <param name="inviteFlushUnused">Enable flush active media for SIP INVITEs without SDP..</param>
        /// <param name="bypassSipTransformation">Enable bypass sip transformation over vpn..</param>
        /// <param name="enforceAccessRuleCheck">Enable enforce access rule checking on anticipated control sessions..</param>
        public DiagAdvancedVoipDiagAdvancedVoip(DiagAdvancedVoipDiagAdvancedVoipMaxEndpoints maxEndpoints = default(DiagAdvancedVoipDiagAdvancedVoipMaxEndpoints), bool oddMediaControlPort = default(bool), bool relaxSequenceNumberCheck = default(bool), bool autoAddSip = default(bool), bool sipTransforms = default(bool), bool inviteFlush = default(bool), bool inviteFlushUnused = default(bool), bool bypassSipTransformation = default(bool), bool enforceAccessRuleCheck = default(bool))
        {
            this.MaxEndpoints = maxEndpoints;
            this.OddMediaControlPort = oddMediaControlPort;
            this.RelaxSequenceNumberCheck = relaxSequenceNumberCheck;
            this.AutoAddSip = autoAddSip;
            this.SipTransforms = sipTransforms;
            this.InviteFlush = inviteFlush;
            this.InviteFlushUnused = inviteFlushUnused;
            this.BypassSipTransformation = bypassSipTransformation;
            this.EnforceAccessRuleCheck = enforceAccessRuleCheck;
        }

        /// <summary>
        /// Gets or Sets MaxEndpoints
        /// </summary>
        [DataMember(Name = "max_endpoints", EmitDefaultValue = true)]
        public DiagAdvancedVoipDiagAdvancedVoipMaxEndpoints MaxEndpoints { get; set; }

        /// <summary>
        /// Enable H323 use odd media control port.
        /// </summary>
        /// <value>Enable H323 use odd media control port.</value>
        [DataMember(Name = "odd_media_control_port", EmitDefaultValue = true)]
        public bool OddMediaControlPort { get; set; }

        /// <summary>
        /// Enable relax sequence number checking for rtsp media streams.
        /// </summary>
        /// <value>Enable relax sequence number checking for rtsp media streams.</value>
        [DataMember(Name = "relax_sequence_number_check", EmitDefaultValue = true)]
        public bool RelaxSequenceNumberCheck { get; set; }

        /// <summary>
        /// Enable auto-add SIP endpoints.
        /// </summary>
        /// <value>Enable auto-add SIP endpoints.</value>
        [DataMember(Name = "auto_add_sip", EmitDefaultValue = true)]
        public bool AutoAddSip { get; set; }

        /// <summary>
        /// Enable transforming SIP URIs to have an explicit port.
        /// </summary>
        /// <value>Enable transforming SIP URIs to have an explicit port.</value>
        [DataMember(Name = "sip_transforms", EmitDefaultValue = true)]
        public bool SipTransforms { get; set; }

        /// <summary>
        /// Enable flush active media for SIP INVITEs without SDP.
        /// </summary>
        /// <value>Enable flush active media for SIP INVITEs without SDP.</value>
        [DataMember(Name = "invite_flush", EmitDefaultValue = true)]
        public bool InviteFlush { get; set; }

        /// <summary>
        /// Enable flush active media for SIP INVITEs without SDP.
        /// </summary>
        /// <value>Enable flush active media for SIP INVITEs without SDP.</value>
        [DataMember(Name = "invite_flush_unused", EmitDefaultValue = true)]
        public bool InviteFlushUnused { get; set; }

        /// <summary>
        /// Enable bypass sip transformation over vpn.
        /// </summary>
        /// <value>Enable bypass sip transformation over vpn.</value>
        [DataMember(Name = "bypass_sip_transformation", EmitDefaultValue = true)]
        public bool BypassSipTransformation { get; set; }

        /// <summary>
        /// Enable enforce access rule checking on anticipated control sessions.
        /// </summary>
        /// <value>Enable enforce access rule checking on anticipated control sessions.</value>
        [DataMember(Name = "enforce_access_rule_check", EmitDefaultValue = true)]
        public bool EnforceAccessRuleCheck { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DiagAdvancedVoipDiagAdvancedVoip {\n");
            sb.Append("  MaxEndpoints: ").Append(MaxEndpoints).Append("\n");
            sb.Append("  OddMediaControlPort: ").Append(OddMediaControlPort).Append("\n");
            sb.Append("  RelaxSequenceNumberCheck: ").Append(RelaxSequenceNumberCheck).Append("\n");
            sb.Append("  AutoAddSip: ").Append(AutoAddSip).Append("\n");
            sb.Append("  SipTransforms: ").Append(SipTransforms).Append("\n");
            sb.Append("  InviteFlush: ").Append(InviteFlush).Append("\n");
            sb.Append("  InviteFlushUnused: ").Append(InviteFlushUnused).Append("\n");
            sb.Append("  BypassSipTransformation: ").Append(BypassSipTransformation).Append("\n");
            sb.Append("  EnforceAccessRuleCheck: ").Append(EnforceAccessRuleCheck).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiagAdvancedVoipDiagAdvancedVoip);
        }

        /// <summary>
        /// Returns true if DiagAdvancedVoipDiagAdvancedVoip instances are equal
        /// </summary>
        /// <param name="input">Instance of DiagAdvancedVoipDiagAdvancedVoip to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiagAdvancedVoipDiagAdvancedVoip input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MaxEndpoints == input.MaxEndpoints ||
                    (this.MaxEndpoints != null &&
                    this.MaxEndpoints.Equals(input.MaxEndpoints))
                ) && 
                (
                    this.OddMediaControlPort == input.OddMediaControlPort ||
                    this.OddMediaControlPort.Equals(input.OddMediaControlPort)
                ) && 
                (
                    this.RelaxSequenceNumberCheck == input.RelaxSequenceNumberCheck ||
                    this.RelaxSequenceNumberCheck.Equals(input.RelaxSequenceNumberCheck)
                ) && 
                (
                    this.AutoAddSip == input.AutoAddSip ||
                    this.AutoAddSip.Equals(input.AutoAddSip)
                ) && 
                (
                    this.SipTransforms == input.SipTransforms ||
                    this.SipTransforms.Equals(input.SipTransforms)
                ) && 
                (
                    this.InviteFlush == input.InviteFlush ||
                    this.InviteFlush.Equals(input.InviteFlush)
                ) && 
                (
                    this.InviteFlushUnused == input.InviteFlushUnused ||
                    this.InviteFlushUnused.Equals(input.InviteFlushUnused)
                ) && 
                (
                    this.BypassSipTransformation == input.BypassSipTransformation ||
                    this.BypassSipTransformation.Equals(input.BypassSipTransformation)
                ) && 
                (
                    this.EnforceAccessRuleCheck == input.EnforceAccessRuleCheck ||
                    this.EnforceAccessRuleCheck.Equals(input.EnforceAccessRuleCheck)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MaxEndpoints != null)
                {
                    hashCode = (hashCode * 59) + this.MaxEndpoints.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OddMediaControlPort.GetHashCode();
                hashCode = (hashCode * 59) + this.RelaxSequenceNumberCheck.GetHashCode();
                hashCode = (hashCode * 59) + this.AutoAddSip.GetHashCode();
                hashCode = (hashCode * 59) + this.SipTransforms.GetHashCode();
                hashCode = (hashCode * 59) + this.InviteFlush.GetHashCode();
                hashCode = (hashCode * 59) + this.InviteFlushUnused.GetHashCode();
                hashCode = (hashCode * 59) + this.BypassSipTransformation.GetHashCode();
                hashCode = (hashCode * 59) + this.EnforceAccessRuleCheck.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
