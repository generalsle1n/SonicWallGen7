/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enable report on specified parameter.
    /// </summary>
    [DataContract(Name = "appflow_appflow_report")]
    public partial class AppflowAppflowReport : IEquatable<AppflowAppflowReport>, IValidatableObject
    {
        /// <summary>
        /// Set the type of connections to report.
        /// </summary>
        /// <value>Set the type of connections to report.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ConnectionsEnum
        {
            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 1,

            /// <summary>
            /// Enum InterfaceBased for value: interface-based
            /// </summary>
            [EnumMember(Value = "interface-based")]
            InterfaceBased = 2,

            /// <summary>
            /// Enum RulesBased for value: rules-based
            /// </summary>
            [EnumMember(Value = "rules-based")]
            RulesBased = 3
        }


        /// <summary>
        /// Set the type of connections to report.
        /// </summary>
        /// <value>Set the type of connections to report.</value>
        [DataMember(Name = "connections", EmitDefaultValue = false)]
        public ConnectionsEnum? Connections { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppflowAppflowReport" /> class.
        /// </summary>
        /// <param name="connections">Set the type of connections to report..</param>
        /// <param name="dropped">Enable report dropped connection..</param>
        /// <param name="stack">Enable report STACK connection..</param>
        /// <param name="ipv6Flows">Enable reporting IPv6 flows (all)..</param>
        public AppflowAppflowReport(ConnectionsEnum? connections = default(ConnectionsEnum?), bool dropped = default(bool), bool stack = default(bool), bool ipv6Flows = default(bool))
        {
            this.Connections = connections;
            this.Dropped = dropped;
            this.Stack = stack;
            this.Ipv6Flows = ipv6Flows;
        }

        /// <summary>
        /// Enable report dropped connection.
        /// </summary>
        /// <value>Enable report dropped connection.</value>
        [DataMember(Name = "dropped", EmitDefaultValue = true)]
        public bool Dropped { get; set; }

        /// <summary>
        /// Enable report STACK connection.
        /// </summary>
        /// <value>Enable report STACK connection.</value>
        [DataMember(Name = "stack", EmitDefaultValue = true)]
        public bool Stack { get; set; }

        /// <summary>
        /// Enable reporting IPv6 flows (all).
        /// </summary>
        /// <value>Enable reporting IPv6 flows (all).</value>
        [DataMember(Name = "ipv6_flows", EmitDefaultValue = true)]
        public bool Ipv6Flows { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppflowAppflowReport {\n");
            sb.Append("  Connections: ").Append(Connections).Append("\n");
            sb.Append("  Dropped: ").Append(Dropped).Append("\n");
            sb.Append("  Stack: ").Append(Stack).Append("\n");
            sb.Append("  Ipv6Flows: ").Append(Ipv6Flows).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppflowAppflowReport);
        }

        /// <summary>
        /// Returns true if AppflowAppflowReport instances are equal
        /// </summary>
        /// <param name="input">Instance of AppflowAppflowReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppflowAppflowReport input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Connections == input.Connections ||
                    this.Connections.Equals(input.Connections)
                ) && 
                (
                    this.Dropped == input.Dropped ||
                    this.Dropped.Equals(input.Dropped)
                ) && 
                (
                    this.Stack == input.Stack ||
                    this.Stack.Equals(input.Stack)
                ) && 
                (
                    this.Ipv6Flows == input.Ipv6Flows ||
                    this.Ipv6Flows.Equals(input.Ipv6Flows)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Connections.GetHashCode();
                hashCode = (hashCode * 59) + this.Dropped.GetHashCode();
                hashCode = (hashCode * 59) + this.Stack.GetHashCode();
                hashCode = (hashCode * 59) + this.Ipv6Flows.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
