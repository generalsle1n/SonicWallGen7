/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Log categories configuration.
    /// </summary>
    [DataContract(Name = "log_global_categories_log_categories")]
    public partial class LogGlobalCategoriesLogCategories : IEquatable<LogGlobalCategoriesLogCategories>, IValidatableObject
    {
        /// <summary>
        /// Set global logging level.
        /// </summary>
        /// <value>Set global logging level.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LoggingLevelEnum
        {
            /// <summary>
            /// Enum Emergency for value: emergency
            /// </summary>
            [EnumMember(Value = "emergency")]
            Emergency = 1,

            /// <summary>
            /// Enum Alert for value: alert
            /// </summary>
            [EnumMember(Value = "alert")]
            Alert = 2,

            /// <summary>
            /// Enum Critical for value: critical
            /// </summary>
            [EnumMember(Value = "critical")]
            Critical = 3,

            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")]
            Error = 4,

            /// <summary>
            /// Enum Warning for value: warning
            /// </summary>
            [EnumMember(Value = "warning")]
            Warning = 5,

            /// <summary>
            /// Enum Notice for value: notice
            /// </summary>
            [EnumMember(Value = "notice")]
            Notice = 6,

            /// <summary>
            /// Enum Inform for value: inform
            /// </summary>
            [EnumMember(Value = "inform")]
            Inform = 7,

            /// <summary>
            /// Enum Debug for value: debug
            /// </summary>
            [EnumMember(Value = "debug")]
            Debug = 8
        }


        /// <summary>
        /// Set global logging level.
        /// </summary>
        /// <value>Set global logging level.</value>
        [DataMember(Name = "logging_level", EmitDefaultValue = false)]
        public LoggingLevelEnum? LoggingLevel { get; set; }
        /// <summary>
        /// Set alert level.
        /// </summary>
        /// <value>Set alert level.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AlertLevelEnum
        {
            /// <summary>
            /// Enum Emergency for value: emergency
            /// </summary>
            [EnumMember(Value = "emergency")]
            Emergency = 1,

            /// <summary>
            /// Enum Alert for value: alert
            /// </summary>
            [EnumMember(Value = "alert")]
            Alert = 2,

            /// <summary>
            /// Enum Critical for value: critical
            /// </summary>
            [EnumMember(Value = "critical")]
            Critical = 3,

            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")]
            Error = 4,

            /// <summary>
            /// Enum Warning for value: warning
            /// </summary>
            [EnumMember(Value = "warning")]
            Warning = 5
        }


        /// <summary>
        /// Set alert level.
        /// </summary>
        /// <value>Set alert level.</value>
        [DataMember(Name = "alert_level", EmitDefaultValue = false)]
        public AlertLevelEnum? AlertLevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LogGlobalCategoriesLogCategories" /> class.
        /// </summary>
        /// <param name="loggingLevel">Set global logging level..</param>
        /// <param name="alertLevel">Set alert level..</param>
        /// <param name="customTemplateDescription">Set custom template description..</param>
        /// <param name="globalCategoryAttribute">globalCategoryAttribute.</param>
        public LogGlobalCategoriesLogCategories(LoggingLevelEnum? loggingLevel = default(LoggingLevelEnum?), AlertLevelEnum? alertLevel = default(AlertLevelEnum?), string customTemplateDescription = default(string), LogGlobalCategoriesLogCategoriesGlobalCategoryAttribute globalCategoryAttribute = default(LogGlobalCategoriesLogCategoriesGlobalCategoryAttribute))
        {
            this.LoggingLevel = loggingLevel;
            this.AlertLevel = alertLevel;
            this.CustomTemplateDescription = customTemplateDescription;
            this.GlobalCategoryAttribute = globalCategoryAttribute;
        }

        /// <summary>
        /// Set custom template description.
        /// </summary>
        /// <value>Set custom template description.</value>
        [DataMember(Name = "custom_template_description", EmitDefaultValue = false)]
        public string CustomTemplateDescription { get; set; }

        /// <summary>
        /// Gets or Sets GlobalCategoryAttribute
        /// </summary>
        [DataMember(Name = "global_category_attribute", EmitDefaultValue = false)]
        public LogGlobalCategoriesLogCategoriesGlobalCategoryAttribute GlobalCategoryAttribute { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LogGlobalCategoriesLogCategories {\n");
            sb.Append("  LoggingLevel: ").Append(LoggingLevel).Append("\n");
            sb.Append("  AlertLevel: ").Append(AlertLevel).Append("\n");
            sb.Append("  CustomTemplateDescription: ").Append(CustomTemplateDescription).Append("\n");
            sb.Append("  GlobalCategoryAttribute: ").Append(GlobalCategoryAttribute).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogGlobalCategoriesLogCategories);
        }

        /// <summary>
        /// Returns true if LogGlobalCategoriesLogCategories instances are equal
        /// </summary>
        /// <param name="input">Instance of LogGlobalCategoriesLogCategories to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogGlobalCategoriesLogCategories input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LoggingLevel == input.LoggingLevel ||
                    this.LoggingLevel.Equals(input.LoggingLevel)
                ) && 
                (
                    this.AlertLevel == input.AlertLevel ||
                    this.AlertLevel.Equals(input.AlertLevel)
                ) && 
                (
                    this.CustomTemplateDescription == input.CustomTemplateDescription ||
                    (this.CustomTemplateDescription != null &&
                    this.CustomTemplateDescription.Equals(input.CustomTemplateDescription))
                ) && 
                (
                    this.GlobalCategoryAttribute == input.GlobalCategoryAttribute ||
                    (this.GlobalCategoryAttribute != null &&
                    this.GlobalCategoryAttribute.Equals(input.GlobalCategoryAttribute))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.LoggingLevel.GetHashCode();
                hashCode = (hashCode * 59) + this.AlertLevel.GetHashCode();
                if (this.CustomTemplateDescription != null)
                {
                    hashCode = (hashCode * 59) + this.CustomTemplateDescription.GetHashCode();
                }
                if (this.GlobalCategoryAttribute != null)
                {
                    hashCode = (hashCode * 59) + this.GlobalCategoryAttribute.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
