/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure certificate signing request subject key.
    /// </summary>
    [DataContract(Name = "certificates_generate_signing_request_key")]
    public partial class CertificatesGenerateSigningRequestKey : IEquatable<CertificatesGenerateSigningRequestKey>, IValidatableObject
    {
        /// <summary>
        /// Configure certificate signing request subject key type.
        /// </summary>
        /// <value>Configure certificate signing request subject key type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Rsa for value: rsa
            /// </summary>
            [EnumMember(Value = "rsa")]
            Rsa = 1,

            /// <summary>
            /// Enum Ecdsa for value: ecdsa
            /// </summary>
            [EnumMember(Value = "ecdsa")]
            Ecdsa = 2
        }


        /// <summary>
        /// Configure certificate signing request subject key type.
        /// </summary>
        /// <value>Configure certificate signing request subject key type.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Configure certificate signing request subject key type.
        /// </summary>
        /// <value>Configure certificate signing request subject key type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SizeEnum
        {
            /// <summary>
            /// Enum _1024 for value: 1024
            /// </summary>
            [EnumMember(Value = "1024")]
            _1024 = 1,

            /// <summary>
            /// Enum _1536 for value: 1536
            /// </summary>
            [EnumMember(Value = "1536")]
            _1536 = 2,

            /// <summary>
            /// Enum _2048 for value: 2048
            /// </summary>
            [EnumMember(Value = "2048")]
            _2048 = 3,

            /// <summary>
            /// Enum _4096 for value: 4096
            /// </summary>
            [EnumMember(Value = "4096")]
            _4096 = 4,

            /// <summary>
            /// Enum _256 for value: 256
            /// </summary>
            [EnumMember(Value = "256")]
            _256 = 5,

            /// <summary>
            /// Enum _384 for value: 384
            /// </summary>
            [EnumMember(Value = "384")]
            _384 = 6,

            /// <summary>
            /// Enum _521 for value: 521
            /// </summary>
            [EnumMember(Value = "521")]
            _521 = 7
        }


        /// <summary>
        /// Configure certificate signing request subject key type.
        /// </summary>
        /// <value>Configure certificate signing request subject key type.</value>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public SizeEnum? Size { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificatesGenerateSigningRequestKey" /> class.
        /// </summary>
        /// <param name="type">Configure certificate signing request subject key type..</param>
        /// <param name="size">Configure certificate signing request subject key type..</param>
        public CertificatesGenerateSigningRequestKey(TypeEnum? type = default(TypeEnum?), SizeEnum? size = default(SizeEnum?))
        {
            this.Type = type;
            this.Size = size;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CertificatesGenerateSigningRequestKey {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CertificatesGenerateSigningRequestKey);
        }

        /// <summary>
        /// Returns true if CertificatesGenerateSigningRequestKey instances are equal
        /// </summary>
        /// <param name="input">Instance of CertificatesGenerateSigningRequestKey to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CertificatesGenerateSigningRequestKey input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Size == input.Size ||
                    this.Size.Equals(input.Size)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.Size.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
