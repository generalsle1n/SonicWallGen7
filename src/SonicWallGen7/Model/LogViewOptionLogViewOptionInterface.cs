/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enable view log interface option settings.
    /// </summary>
    [DataContract(Name = "log_view_option_log_view_option_interface")]
    public partial class LogViewOptionLogViewOptionInterface : IEquatable<LogViewOptionLogViewOptionInterface>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogViewOptionLogViewOptionInterface" /> class.
        /// </summary>
        /// <param name="source">Source..</param>
        /// <param name="srcIp">Src-ip..</param>
        /// <param name="srcPort">Src-port..</param>
        /// <param name="srcInt">Src-int..</param>
        /// <param name="destination">Destination..</param>
        /// <param name="dstIp">Dst-ip..</param>
        /// <param name="dstPort">Dst-port..</param>
        /// <param name="dstInt">Dst-int..</param>
        /// <param name="etherType">Ether-type..</param>
        /// <param name="srcMac">Src-mac..</param>
        /// <param name="srcVendor">Src-vendor..</param>
        /// <param name="srcZone">Src-zone..</param>
        /// <param name="dstMac">Dst-mac..</param>
        /// <param name="dstVendor">Dst-vendor..</param>
        /// <param name="dstZone">Dst-zone..</param>
        public LogViewOptionLogViewOptionInterface(bool source = default(bool), bool srcIp = default(bool), bool srcPort = default(bool), bool srcInt = default(bool), bool destination = default(bool), bool dstIp = default(bool), bool dstPort = default(bool), bool dstInt = default(bool), bool etherType = default(bool), bool srcMac = default(bool), bool srcVendor = default(bool), bool srcZone = default(bool), bool dstMac = default(bool), bool dstVendor = default(bool), bool dstZone = default(bool))
        {
            this.Source = source;
            this.SrcIp = srcIp;
            this.SrcPort = srcPort;
            this.SrcInt = srcInt;
            this.Destination = destination;
            this.DstIp = dstIp;
            this.DstPort = dstPort;
            this.DstInt = dstInt;
            this.EtherType = etherType;
            this.SrcMac = srcMac;
            this.SrcVendor = srcVendor;
            this.SrcZone = srcZone;
            this.DstMac = dstMac;
            this.DstVendor = dstVendor;
            this.DstZone = dstZone;
        }

        /// <summary>
        /// Source.
        /// </summary>
        /// <value>Source.</value>
        [DataMember(Name = "source", EmitDefaultValue = true)]
        public bool Source { get; set; }

        /// <summary>
        /// Src-ip.
        /// </summary>
        /// <value>Src-ip.</value>
        [DataMember(Name = "src_ip", EmitDefaultValue = true)]
        public bool SrcIp { get; set; }

        /// <summary>
        /// Src-port.
        /// </summary>
        /// <value>Src-port.</value>
        [DataMember(Name = "src_port", EmitDefaultValue = true)]
        public bool SrcPort { get; set; }

        /// <summary>
        /// Src-int.
        /// </summary>
        /// <value>Src-int.</value>
        [DataMember(Name = "src_int", EmitDefaultValue = true)]
        public bool SrcInt { get; set; }

        /// <summary>
        /// Destination.
        /// </summary>
        /// <value>Destination.</value>
        [DataMember(Name = "destination", EmitDefaultValue = true)]
        public bool Destination { get; set; }

        /// <summary>
        /// Dst-ip.
        /// </summary>
        /// <value>Dst-ip.</value>
        [DataMember(Name = "dst_ip", EmitDefaultValue = true)]
        public bool DstIp { get; set; }

        /// <summary>
        /// Dst-port.
        /// </summary>
        /// <value>Dst-port.</value>
        [DataMember(Name = "dst_port", EmitDefaultValue = true)]
        public bool DstPort { get; set; }

        /// <summary>
        /// Dst-int.
        /// </summary>
        /// <value>Dst-int.</value>
        [DataMember(Name = "dst_int", EmitDefaultValue = true)]
        public bool DstInt { get; set; }

        /// <summary>
        /// Ether-type.
        /// </summary>
        /// <value>Ether-type.</value>
        [DataMember(Name = "ether_type", EmitDefaultValue = true)]
        public bool EtherType { get; set; }

        /// <summary>
        /// Src-mac.
        /// </summary>
        /// <value>Src-mac.</value>
        [DataMember(Name = "src_mac", EmitDefaultValue = true)]
        public bool SrcMac { get; set; }

        /// <summary>
        /// Src-vendor.
        /// </summary>
        /// <value>Src-vendor.</value>
        [DataMember(Name = "src_vendor", EmitDefaultValue = true)]
        public bool SrcVendor { get; set; }

        /// <summary>
        /// Src-zone.
        /// </summary>
        /// <value>Src-zone.</value>
        [DataMember(Name = "src_zone", EmitDefaultValue = true)]
        public bool SrcZone { get; set; }

        /// <summary>
        /// Dst-mac.
        /// </summary>
        /// <value>Dst-mac.</value>
        [DataMember(Name = "dst_mac", EmitDefaultValue = true)]
        public bool DstMac { get; set; }

        /// <summary>
        /// Dst-vendor.
        /// </summary>
        /// <value>Dst-vendor.</value>
        [DataMember(Name = "dst_vendor", EmitDefaultValue = true)]
        public bool DstVendor { get; set; }

        /// <summary>
        /// Dst-zone.
        /// </summary>
        /// <value>Dst-zone.</value>
        [DataMember(Name = "dst_zone", EmitDefaultValue = true)]
        public bool DstZone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LogViewOptionLogViewOptionInterface {\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  SrcIp: ").Append(SrcIp).Append("\n");
            sb.Append("  SrcPort: ").Append(SrcPort).Append("\n");
            sb.Append("  SrcInt: ").Append(SrcInt).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  DstIp: ").Append(DstIp).Append("\n");
            sb.Append("  DstPort: ").Append(DstPort).Append("\n");
            sb.Append("  DstInt: ").Append(DstInt).Append("\n");
            sb.Append("  EtherType: ").Append(EtherType).Append("\n");
            sb.Append("  SrcMac: ").Append(SrcMac).Append("\n");
            sb.Append("  SrcVendor: ").Append(SrcVendor).Append("\n");
            sb.Append("  SrcZone: ").Append(SrcZone).Append("\n");
            sb.Append("  DstMac: ").Append(DstMac).Append("\n");
            sb.Append("  DstVendor: ").Append(DstVendor).Append("\n");
            sb.Append("  DstZone: ").Append(DstZone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogViewOptionLogViewOptionInterface);
        }

        /// <summary>
        /// Returns true if LogViewOptionLogViewOptionInterface instances are equal
        /// </summary>
        /// <param name="input">Instance of LogViewOptionLogViewOptionInterface to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogViewOptionLogViewOptionInterface input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Source == input.Source ||
                    this.Source.Equals(input.Source)
                ) && 
                (
                    this.SrcIp == input.SrcIp ||
                    this.SrcIp.Equals(input.SrcIp)
                ) && 
                (
                    this.SrcPort == input.SrcPort ||
                    this.SrcPort.Equals(input.SrcPort)
                ) && 
                (
                    this.SrcInt == input.SrcInt ||
                    this.SrcInt.Equals(input.SrcInt)
                ) && 
                (
                    this.Destination == input.Destination ||
                    this.Destination.Equals(input.Destination)
                ) && 
                (
                    this.DstIp == input.DstIp ||
                    this.DstIp.Equals(input.DstIp)
                ) && 
                (
                    this.DstPort == input.DstPort ||
                    this.DstPort.Equals(input.DstPort)
                ) && 
                (
                    this.DstInt == input.DstInt ||
                    this.DstInt.Equals(input.DstInt)
                ) && 
                (
                    this.EtherType == input.EtherType ||
                    this.EtherType.Equals(input.EtherType)
                ) && 
                (
                    this.SrcMac == input.SrcMac ||
                    this.SrcMac.Equals(input.SrcMac)
                ) && 
                (
                    this.SrcVendor == input.SrcVendor ||
                    this.SrcVendor.Equals(input.SrcVendor)
                ) && 
                (
                    this.SrcZone == input.SrcZone ||
                    this.SrcZone.Equals(input.SrcZone)
                ) && 
                (
                    this.DstMac == input.DstMac ||
                    this.DstMac.Equals(input.DstMac)
                ) && 
                (
                    this.DstVendor == input.DstVendor ||
                    this.DstVendor.Equals(input.DstVendor)
                ) && 
                (
                    this.DstZone == input.DstZone ||
                    this.DstZone.Equals(input.DstZone)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Source.GetHashCode();
                hashCode = (hashCode * 59) + this.SrcIp.GetHashCode();
                hashCode = (hashCode * 59) + this.SrcPort.GetHashCode();
                hashCode = (hashCode * 59) + this.SrcInt.GetHashCode();
                hashCode = (hashCode * 59) + this.Destination.GetHashCode();
                hashCode = (hashCode * 59) + this.DstIp.GetHashCode();
                hashCode = (hashCode * 59) + this.DstPort.GetHashCode();
                hashCode = (hashCode * 59) + this.DstInt.GetHashCode();
                hashCode = (hashCode * 59) + this.EtherType.GetHashCode();
                hashCode = (hashCode * 59) + this.SrcMac.GetHashCode();
                hashCode = (hashCode * 59) + this.SrcVendor.GetHashCode();
                hashCode = (hashCode * 59) + this.SrcZone.GetHashCode();
                hashCode = (hashCode * 59) + this.DstMac.GetHashCode();
                hashCode = (hashCode * 59) + this.DstVendor.GetHashCode();
                hashCode = (hashCode * 59) + this.DstZone.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
