/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// IPv4 route policy.
    /// </summary>
    [DataContract(Name = "route_policy_ipv4_ipv4")]
    public partial class RoutePolicyIpv4Ipv4 : IEquatable<RoutePolicyIpv4Ipv4>, IValidatableObject
    {
        /// <summary>
        /// Set route policy type.
        /// </summary>
        /// <value>Set route policy type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Standard for value: standard
            /// </summary>
            [EnumMember(Value = "standard")]
            Standard = 1,

            /// <summary>
            /// Enum Sdwan for value: sdwan
            /// </summary>
            [EnumMember(Value = "sdwan")]
            Sdwan = 2,

            /// <summary>
            /// Enum MultiPath for value: multi-path
            /// </summary>
            [EnumMember(Value = "multi-path")]
            MultiPath = 3
        }


        /// <summary>
        /// Set route policy type.
        /// </summary>
        /// <value>Set route policy type.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RoutePolicyIpv4Ipv4" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RoutePolicyIpv4Ipv4() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RoutePolicyIpv4Ipv4" /> class.
        /// </summary>
        /// <param name="varInterface">Set route policy interface. (required).</param>
        /// <param name="metric">Set route policy metric. (required).</param>
        /// <param name="source">source (required).</param>
        /// <param name="destination">destination (required).</param>
        /// <param name="app">set route policy application match-object..</param>
        /// <param name="application">set route policy application group..</param>
        /// <param name="service">service (required).</param>
        /// <param name="gateway">gateway (required).</param>
        /// <param name="tos">Route policy TOS. (required).</param>
        /// <param name="mask">Route policy TOS mask. (required).</param>
        /// <param name="distance">distance (required).</param>
        /// <param name="nexthopNumber">the nexthop number..</param>
        /// <param name="interface2">Set route policy 2nd interface..</param>
        /// <param name="gateway2">gateway2.</param>
        /// <param name="interface3">Set route policy 3rd interface..</param>
        /// <param name="gateway3">gateway3.</param>
        /// <param name="interface4">Set route policy 4th interface..</param>
        /// <param name="gateway4">gateway4.</param>
        /// <param name="uuid">Route policy UUID..</param>
        /// <param name="name">Set route policy name..</param>
        /// <param name="type">Set route policy type..</param>
        /// <param name="priority">Set route policy priority..</param>
        /// <param name="disableOnInterfaceDown">Disable route when the interface is disconnected..</param>
        /// <param name="vpnPrecedence">Allow VPN path to take precedence..</param>
        /// <param name="autoAddAccessRules">Enable auto-add access rules..</param>
        /// <param name="probe">Set route policy network monitor object for probing..</param>
        /// <param name="disableWhenProbesSucceed">Disable route when probe succeeds..</param>
        /// <param name="defaultProbeStateUp">Set probe default state to up..</param>
        /// <param name="comment">Set route policy comment..</param>
        /// <param name="ticket">ticket.</param>
        /// <param name="pathSelectionProfile">Set route policy SD-WAN path selection profile..</param>
        public RoutePolicyIpv4Ipv4(string varInterface = default(string), decimal metric = default(decimal), RoutePolicyIpv4Ipv4Source source = default(RoutePolicyIpv4Ipv4Source), RoutePolicyIpv4Ipv4Destination destination = default(RoutePolicyIpv4Ipv4Destination), string app = default(string), string application = default(string), RoutePolicyIpv4Ipv4Service service = default(RoutePolicyIpv4Ipv4Service), RoutePolicyIpv4Ipv4Gateway gateway = default(RoutePolicyIpv4Ipv4Gateway), string tos = default(string), string mask = default(string), RoutePolicyIpv4Ipv4Distance distance = default(RoutePolicyIpv4Ipv4Distance), decimal nexthopNumber = default(decimal), string interface2 = default(string), RoutePolicyIpv4Ipv4Gateway2 gateway2 = default(RoutePolicyIpv4Ipv4Gateway2), string interface3 = default(string), RoutePolicyIpv4Ipv4Gateway3 gateway3 = default(RoutePolicyIpv4Ipv4Gateway3), string interface4 = default(string), RoutePolicyIpv4Ipv4Gateway4 gateway4 = default(RoutePolicyIpv4Ipv4Gateway4), string uuid = default(string), string name = default(string), TypeEnum? type = default(TypeEnum?), decimal priority = default(decimal), bool disableOnInterfaceDown = default(bool), bool vpnPrecedence = default(bool), bool autoAddAccessRules = default(bool), string probe = default(string), bool disableWhenProbesSucceed = default(bool), bool defaultProbeStateUp = default(bool), string comment = default(string), RoutePolicyIpv4Ipv4Ticket ticket = default(RoutePolicyIpv4Ipv4Ticket), string pathSelectionProfile = default(string))
        {
            // to ensure "varInterface" is required (not null)
            if (varInterface == null)
            {
                throw new ArgumentNullException("varInterface is a required property for RoutePolicyIpv4Ipv4 and cannot be null");
            }
            this.VarInterface = varInterface;
            this.Metric = metric;
            // to ensure "source" is required (not null)
            if (source == null)
            {
                throw new ArgumentNullException("source is a required property for RoutePolicyIpv4Ipv4 and cannot be null");
            }
            this.Source = source;
            // to ensure "destination" is required (not null)
            if (destination == null)
            {
                throw new ArgumentNullException("destination is a required property for RoutePolicyIpv4Ipv4 and cannot be null");
            }
            this.Destination = destination;
            // to ensure "service" is required (not null)
            if (service == null)
            {
                throw new ArgumentNullException("service is a required property for RoutePolicyIpv4Ipv4 and cannot be null");
            }
            this.Service = service;
            // to ensure "gateway" is required (not null)
            if (gateway == null)
            {
                throw new ArgumentNullException("gateway is a required property for RoutePolicyIpv4Ipv4 and cannot be null");
            }
            this.Gateway = gateway;
            // to ensure "tos" is required (not null)
            if (tos == null)
            {
                throw new ArgumentNullException("tos is a required property for RoutePolicyIpv4Ipv4 and cannot be null");
            }
            this.Tos = tos;
            // to ensure "mask" is required (not null)
            if (mask == null)
            {
                throw new ArgumentNullException("mask is a required property for RoutePolicyIpv4Ipv4 and cannot be null");
            }
            this.Mask = mask;
            // to ensure "distance" is required (not null)
            if (distance == null)
            {
                throw new ArgumentNullException("distance is a required property for RoutePolicyIpv4Ipv4 and cannot be null");
            }
            this.Distance = distance;
            this.App = app;
            this.Application = application;
            this.NexthopNumber = nexthopNumber;
            this.Interface2 = interface2;
            this.Gateway2 = gateway2;
            this.Interface3 = interface3;
            this.Gateway3 = gateway3;
            this.Interface4 = interface4;
            this.Gateway4 = gateway4;
            this.Uuid = uuid;
            this.Name = name;
            this.Type = type;
            this.Priority = priority;
            this.DisableOnInterfaceDown = disableOnInterfaceDown;
            this.VpnPrecedence = vpnPrecedence;
            this.AutoAddAccessRules = autoAddAccessRules;
            this.Probe = probe;
            this.DisableWhenProbesSucceed = disableWhenProbesSucceed;
            this.DefaultProbeStateUp = defaultProbeStateUp;
            this.Comment = comment;
            this.Ticket = ticket;
            this.PathSelectionProfile = pathSelectionProfile;
        }

        /// <summary>
        /// Set route policy interface.
        /// </summary>
        /// <value>Set route policy interface.</value>
        [DataMember(Name = "interface", IsRequired = true, EmitDefaultValue = true)]
        public string VarInterface { get; set; }

        /// <summary>
        /// Set route policy metric.
        /// </summary>
        /// <value>Set route policy metric.</value>
        [DataMember(Name = "metric", IsRequired = true, EmitDefaultValue = true)]
        public decimal Metric { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", IsRequired = true, EmitDefaultValue = true)]
        public RoutePolicyIpv4Ipv4Source Source { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [DataMember(Name = "destination", IsRequired = true, EmitDefaultValue = true)]
        public RoutePolicyIpv4Ipv4Destination Destination { get; set; }

        /// <summary>
        /// set route policy application match-object.
        /// </summary>
        /// <value>set route policy application match-object.</value>
        [DataMember(Name = "app", EmitDefaultValue = false)]
        public string App { get; set; }

        /// <summary>
        /// set route policy application group.
        /// </summary>
        /// <value>set route policy application group.</value>
        [DataMember(Name = "application", EmitDefaultValue = false)]
        public string Application { get; set; }

        /// <summary>
        /// Gets or Sets Service
        /// </summary>
        [DataMember(Name = "service", IsRequired = true, EmitDefaultValue = true)]
        public RoutePolicyIpv4Ipv4Service Service { get; set; }

        /// <summary>
        /// Gets or Sets Gateway
        /// </summary>
        [DataMember(Name = "gateway", IsRequired = true, EmitDefaultValue = true)]
        public RoutePolicyIpv4Ipv4Gateway Gateway { get; set; }

        /// <summary>
        /// Route policy TOS.
        /// </summary>
        /// <value>Route policy TOS.</value>
        [DataMember(Name = "tos", IsRequired = true, EmitDefaultValue = true)]
        public string Tos { get; set; }

        /// <summary>
        /// Route policy TOS mask.
        /// </summary>
        /// <value>Route policy TOS mask.</value>
        [DataMember(Name = "mask", IsRequired = true, EmitDefaultValue = true)]
        public string Mask { get; set; }

        /// <summary>
        /// Gets or Sets Distance
        /// </summary>
        [DataMember(Name = "distance", IsRequired = true, EmitDefaultValue = true)]
        public RoutePolicyIpv4Ipv4Distance Distance { get; set; }

        /// <summary>
        /// the nexthop number.
        /// </summary>
        /// <value>the nexthop number.</value>
        [DataMember(Name = "nexthop_number", EmitDefaultValue = false)]
        public decimal NexthopNumber { get; set; }

        /// <summary>
        /// Set route policy 2nd interface.
        /// </summary>
        /// <value>Set route policy 2nd interface.</value>
        [DataMember(Name = "interface2", EmitDefaultValue = false)]
        public string Interface2 { get; set; }

        /// <summary>
        /// Gets or Sets Gateway2
        /// </summary>
        [DataMember(Name = "gateway2", EmitDefaultValue = false)]
        public RoutePolicyIpv4Ipv4Gateway2 Gateway2 { get; set; }

        /// <summary>
        /// Set route policy 3rd interface.
        /// </summary>
        /// <value>Set route policy 3rd interface.</value>
        [DataMember(Name = "interface3", EmitDefaultValue = false)]
        public string Interface3 { get; set; }

        /// <summary>
        /// Gets or Sets Gateway3
        /// </summary>
        [DataMember(Name = "gateway3", EmitDefaultValue = false)]
        public RoutePolicyIpv4Ipv4Gateway3 Gateway3 { get; set; }

        /// <summary>
        /// Set route policy 4th interface.
        /// </summary>
        /// <value>Set route policy 4th interface.</value>
        [DataMember(Name = "interface4", EmitDefaultValue = false)]
        public string Interface4 { get; set; }

        /// <summary>
        /// Gets or Sets Gateway4
        /// </summary>
        [DataMember(Name = "gateway4", EmitDefaultValue = false)]
        public RoutePolicyIpv4Ipv4Gateway4 Gateway4 { get; set; }

        /// <summary>
        /// Route policy UUID.
        /// </summary>
        /// <value>Route policy UUID.</value>
        [DataMember(Name = "uuid", EmitDefaultValue = false)]
        public string Uuid { get; set; }

        /// <summary>
        /// Set route policy name.
        /// </summary>
        /// <value>Set route policy name.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Set route policy priority.
        /// </summary>
        /// <value>Set route policy priority.</value>
        [DataMember(Name = "priority", EmitDefaultValue = false)]
        public decimal Priority { get; set; }

        /// <summary>
        /// Disable route when the interface is disconnected.
        /// </summary>
        /// <value>Disable route when the interface is disconnected.</value>
        [DataMember(Name = "disable_on_interface_down", EmitDefaultValue = true)]
        public bool DisableOnInterfaceDown { get; set; }

        /// <summary>
        /// Allow VPN path to take precedence.
        /// </summary>
        /// <value>Allow VPN path to take precedence.</value>
        [DataMember(Name = "vpn_precedence", EmitDefaultValue = true)]
        public bool VpnPrecedence { get; set; }

        /// <summary>
        /// Enable auto-add access rules.
        /// </summary>
        /// <value>Enable auto-add access rules.</value>
        [DataMember(Name = "auto_add_access_rules", EmitDefaultValue = true)]
        public bool AutoAddAccessRules { get; set; }

        /// <summary>
        /// Set route policy network monitor object for probing.
        /// </summary>
        /// <value>Set route policy network monitor object for probing.</value>
        [DataMember(Name = "probe", EmitDefaultValue = false)]
        public string Probe { get; set; }

        /// <summary>
        /// Disable route when probe succeeds.
        /// </summary>
        /// <value>Disable route when probe succeeds.</value>
        [DataMember(Name = "disable_when_probes_succeed", EmitDefaultValue = true)]
        public bool DisableWhenProbesSucceed { get; set; }

        /// <summary>
        /// Set probe default state to up.
        /// </summary>
        /// <value>Set probe default state to up.</value>
        [DataMember(Name = "default_probe_state_up", EmitDefaultValue = true)]
        public bool DefaultProbeStateUp { get; set; }

        /// <summary>
        /// Set route policy comment.
        /// </summary>
        /// <value>Set route policy comment.</value>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets Ticket
        /// </summary>
        [DataMember(Name = "ticket", EmitDefaultValue = false)]
        public RoutePolicyIpv4Ipv4Ticket Ticket { get; set; }

        /// <summary>
        /// Set route policy SD-WAN path selection profile.
        /// </summary>
        /// <value>Set route policy SD-WAN path selection profile.</value>
        [DataMember(Name = "path_selection_profile", EmitDefaultValue = false)]
        public string PathSelectionProfile { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RoutePolicyIpv4Ipv4 {\n");
            sb.Append("  VarInterface: ").Append(VarInterface).Append("\n");
            sb.Append("  Metric: ").Append(Metric).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  App: ").Append(App).Append("\n");
            sb.Append("  Application: ").Append(Application).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  Gateway: ").Append(Gateway).Append("\n");
            sb.Append("  Tos: ").Append(Tos).Append("\n");
            sb.Append("  Mask: ").Append(Mask).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  NexthopNumber: ").Append(NexthopNumber).Append("\n");
            sb.Append("  Interface2: ").Append(Interface2).Append("\n");
            sb.Append("  Gateway2: ").Append(Gateway2).Append("\n");
            sb.Append("  Interface3: ").Append(Interface3).Append("\n");
            sb.Append("  Gateway3: ").Append(Gateway3).Append("\n");
            sb.Append("  Interface4: ").Append(Interface4).Append("\n");
            sb.Append("  Gateway4: ").Append(Gateway4).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  DisableOnInterfaceDown: ").Append(DisableOnInterfaceDown).Append("\n");
            sb.Append("  VpnPrecedence: ").Append(VpnPrecedence).Append("\n");
            sb.Append("  AutoAddAccessRules: ").Append(AutoAddAccessRules).Append("\n");
            sb.Append("  Probe: ").Append(Probe).Append("\n");
            sb.Append("  DisableWhenProbesSucceed: ").Append(DisableWhenProbesSucceed).Append("\n");
            sb.Append("  DefaultProbeStateUp: ").Append(DefaultProbeStateUp).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Ticket: ").Append(Ticket).Append("\n");
            sb.Append("  PathSelectionProfile: ").Append(PathSelectionProfile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RoutePolicyIpv4Ipv4);
        }

        /// <summary>
        /// Returns true if RoutePolicyIpv4Ipv4 instances are equal
        /// </summary>
        /// <param name="input">Instance of RoutePolicyIpv4Ipv4 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RoutePolicyIpv4Ipv4 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VarInterface == input.VarInterface ||
                    (this.VarInterface != null &&
                    this.VarInterface.Equals(input.VarInterface))
                ) && 
                (
                    this.Metric == input.Metric ||
                    this.Metric.Equals(input.Metric)
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.Destination == input.Destination ||
                    (this.Destination != null &&
                    this.Destination.Equals(input.Destination))
                ) && 
                (
                    this.App == input.App ||
                    (this.App != null &&
                    this.App.Equals(input.App))
                ) && 
                (
                    this.Application == input.Application ||
                    (this.Application != null &&
                    this.Application.Equals(input.Application))
                ) && 
                (
                    this.Service == input.Service ||
                    (this.Service != null &&
                    this.Service.Equals(input.Service))
                ) && 
                (
                    this.Gateway == input.Gateway ||
                    (this.Gateway != null &&
                    this.Gateway.Equals(input.Gateway))
                ) && 
                (
                    this.Tos == input.Tos ||
                    (this.Tos != null &&
                    this.Tos.Equals(input.Tos))
                ) && 
                (
                    this.Mask == input.Mask ||
                    (this.Mask != null &&
                    this.Mask.Equals(input.Mask))
                ) && 
                (
                    this.Distance == input.Distance ||
                    (this.Distance != null &&
                    this.Distance.Equals(input.Distance))
                ) && 
                (
                    this.NexthopNumber == input.NexthopNumber ||
                    this.NexthopNumber.Equals(input.NexthopNumber)
                ) && 
                (
                    this.Interface2 == input.Interface2 ||
                    (this.Interface2 != null &&
                    this.Interface2.Equals(input.Interface2))
                ) && 
                (
                    this.Gateway2 == input.Gateway2 ||
                    (this.Gateway2 != null &&
                    this.Gateway2.Equals(input.Gateway2))
                ) && 
                (
                    this.Interface3 == input.Interface3 ||
                    (this.Interface3 != null &&
                    this.Interface3.Equals(input.Interface3))
                ) && 
                (
                    this.Gateway3 == input.Gateway3 ||
                    (this.Gateway3 != null &&
                    this.Gateway3.Equals(input.Gateway3))
                ) && 
                (
                    this.Interface4 == input.Interface4 ||
                    (this.Interface4 != null &&
                    this.Interface4.Equals(input.Interface4))
                ) && 
                (
                    this.Gateway4 == input.Gateway4 ||
                    (this.Gateway4 != null &&
                    this.Gateway4.Equals(input.Gateway4))
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Priority == input.Priority ||
                    this.Priority.Equals(input.Priority)
                ) && 
                (
                    this.DisableOnInterfaceDown == input.DisableOnInterfaceDown ||
                    this.DisableOnInterfaceDown.Equals(input.DisableOnInterfaceDown)
                ) && 
                (
                    this.VpnPrecedence == input.VpnPrecedence ||
                    this.VpnPrecedence.Equals(input.VpnPrecedence)
                ) && 
                (
                    this.AutoAddAccessRules == input.AutoAddAccessRules ||
                    this.AutoAddAccessRules.Equals(input.AutoAddAccessRules)
                ) && 
                (
                    this.Probe == input.Probe ||
                    (this.Probe != null &&
                    this.Probe.Equals(input.Probe))
                ) && 
                (
                    this.DisableWhenProbesSucceed == input.DisableWhenProbesSucceed ||
                    this.DisableWhenProbesSucceed.Equals(input.DisableWhenProbesSucceed)
                ) && 
                (
                    this.DefaultProbeStateUp == input.DefaultProbeStateUp ||
                    this.DefaultProbeStateUp.Equals(input.DefaultProbeStateUp)
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Ticket == input.Ticket ||
                    (this.Ticket != null &&
                    this.Ticket.Equals(input.Ticket))
                ) && 
                (
                    this.PathSelectionProfile == input.PathSelectionProfile ||
                    (this.PathSelectionProfile != null &&
                    this.PathSelectionProfile.Equals(input.PathSelectionProfile))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VarInterface != null)
                {
                    hashCode = (hashCode * 59) + this.VarInterface.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Metric.GetHashCode();
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                if (this.Destination != null)
                {
                    hashCode = (hashCode * 59) + this.Destination.GetHashCode();
                }
                if (this.App != null)
                {
                    hashCode = (hashCode * 59) + this.App.GetHashCode();
                }
                if (this.Application != null)
                {
                    hashCode = (hashCode * 59) + this.Application.GetHashCode();
                }
                if (this.Service != null)
                {
                    hashCode = (hashCode * 59) + this.Service.GetHashCode();
                }
                if (this.Gateway != null)
                {
                    hashCode = (hashCode * 59) + this.Gateway.GetHashCode();
                }
                if (this.Tos != null)
                {
                    hashCode = (hashCode * 59) + this.Tos.GetHashCode();
                }
                if (this.Mask != null)
                {
                    hashCode = (hashCode * 59) + this.Mask.GetHashCode();
                }
                if (this.Distance != null)
                {
                    hashCode = (hashCode * 59) + this.Distance.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NexthopNumber.GetHashCode();
                if (this.Interface2 != null)
                {
                    hashCode = (hashCode * 59) + this.Interface2.GetHashCode();
                }
                if (this.Gateway2 != null)
                {
                    hashCode = (hashCode * 59) + this.Gateway2.GetHashCode();
                }
                if (this.Interface3 != null)
                {
                    hashCode = (hashCode * 59) + this.Interface3.GetHashCode();
                }
                if (this.Gateway3 != null)
                {
                    hashCode = (hashCode * 59) + this.Gateway3.GetHashCode();
                }
                if (this.Interface4 != null)
                {
                    hashCode = (hashCode * 59) + this.Interface4.GetHashCode();
                }
                if (this.Gateway4 != null)
                {
                    hashCode = (hashCode * 59) + this.Gateway4.GetHashCode();
                }
                if (this.Uuid != null)
                {
                    hashCode = (hashCode * 59) + this.Uuid.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.Priority.GetHashCode();
                hashCode = (hashCode * 59) + this.DisableOnInterfaceDown.GetHashCode();
                hashCode = (hashCode * 59) + this.VpnPrecedence.GetHashCode();
                hashCode = (hashCode * 59) + this.AutoAddAccessRules.GetHashCode();
                if (this.Probe != null)
                {
                    hashCode = (hashCode * 59) + this.Probe.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DisableWhenProbesSucceed.GetHashCode();
                hashCode = (hashCode * 59) + this.DefaultProbeStateUp.GetHashCode();
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                if (this.Ticket != null)
                {
                    hashCode = (hashCode * 59) + this.Ticket.GetHashCode();
                }
                if (this.PathSelectionProfile != null)
                {
                    hashCode = (hashCode * 59) + this.PathSelectionProfile.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Metric (decimal) maximum
            if (this.Metric > (decimal)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Metric, must be a value less than or equal to 255.", new [] { "Metric" });
            }

            // Metric (decimal) minimum
            if (this.Metric < (decimal)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Metric, must be a value greater than or equal to 1.", new [] { "Metric" });
            }

            yield break;
        }
    }

}
