/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure DHCP over VPN for remote gateway and enter to remote mode.
    /// </summary>
    [DataContract(Name = "dhcp_over_vpn_base_remote_vpn_dhcp_over_vpn_remote")]
    public partial class DhcpOverVpnBaseRemoteVpnDhcpOverVpnRemote : IEquatable<DhcpOverVpnBaseRemoteVpnDhcpOverVpnRemote>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DhcpOverVpnBaseRemoteVpnDhcpOverVpnRemote" /> class.
        /// </summary>
        /// <param name="boundTo">DHCP lease bound to..</param>
        /// <param name="relayIp">Configure DHCP relay IP address..</param>
        /// <param name="managementIp">Configure remote management IP address..</param>
        /// <param name="blockSpoof">Enable block traffic through tunnel when IP spoof detected..</param>
        /// <param name="tempLease">Enable obtain temporary lease from local DHCP server if tunnel is down..</param>
        /// <param name="leaseTime">Set the temporary lease time (minutes)..</param>
        public DhcpOverVpnBaseRemoteVpnDhcpOverVpnRemote(string boundTo = default(string), string relayIp = default(string), string managementIp = default(string), bool blockSpoof = default(bool), bool tempLease = default(bool), decimal leaseTime = default(decimal))
        {
            this.BoundTo = boundTo;
            this.RelayIp = relayIp;
            this.ManagementIp = managementIp;
            this.BlockSpoof = blockSpoof;
            this.TempLease = tempLease;
            this.LeaseTime = leaseTime;
        }

        /// <summary>
        /// DHCP lease bound to.
        /// </summary>
        /// <value>DHCP lease bound to.</value>
        [DataMember(Name = "bound_to", EmitDefaultValue = false)]
        public string BoundTo { get; set; }

        /// <summary>
        /// Configure DHCP relay IP address.
        /// </summary>
        /// <value>Configure DHCP relay IP address.</value>
        [DataMember(Name = "relay_ip", EmitDefaultValue = false)]
        public string RelayIp { get; set; }

        /// <summary>
        /// Configure remote management IP address.
        /// </summary>
        /// <value>Configure remote management IP address.</value>
        [DataMember(Name = "management_ip", EmitDefaultValue = false)]
        public string ManagementIp { get; set; }

        /// <summary>
        /// Enable block traffic through tunnel when IP spoof detected.
        /// </summary>
        /// <value>Enable block traffic through tunnel when IP spoof detected.</value>
        [DataMember(Name = "block_spoof", EmitDefaultValue = true)]
        public bool BlockSpoof { get; set; }

        /// <summary>
        /// Enable obtain temporary lease from local DHCP server if tunnel is down.
        /// </summary>
        /// <value>Enable obtain temporary lease from local DHCP server if tunnel is down.</value>
        [DataMember(Name = "temp_lease", EmitDefaultValue = true)]
        public bool TempLease { get; set; }

        /// <summary>
        /// Set the temporary lease time (minutes).
        /// </summary>
        /// <value>Set the temporary lease time (minutes).</value>
        [DataMember(Name = "lease_time", EmitDefaultValue = false)]
        public decimal LeaseTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DhcpOverVpnBaseRemoteVpnDhcpOverVpnRemote {\n");
            sb.Append("  BoundTo: ").Append(BoundTo).Append("\n");
            sb.Append("  RelayIp: ").Append(RelayIp).Append("\n");
            sb.Append("  ManagementIp: ").Append(ManagementIp).Append("\n");
            sb.Append("  BlockSpoof: ").Append(BlockSpoof).Append("\n");
            sb.Append("  TempLease: ").Append(TempLease).Append("\n");
            sb.Append("  LeaseTime: ").Append(LeaseTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DhcpOverVpnBaseRemoteVpnDhcpOverVpnRemote);
        }

        /// <summary>
        /// Returns true if DhcpOverVpnBaseRemoteVpnDhcpOverVpnRemote instances are equal
        /// </summary>
        /// <param name="input">Instance of DhcpOverVpnBaseRemoteVpnDhcpOverVpnRemote to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DhcpOverVpnBaseRemoteVpnDhcpOverVpnRemote input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BoundTo == input.BoundTo ||
                    (this.BoundTo != null &&
                    this.BoundTo.Equals(input.BoundTo))
                ) && 
                (
                    this.RelayIp == input.RelayIp ||
                    (this.RelayIp != null &&
                    this.RelayIp.Equals(input.RelayIp))
                ) && 
                (
                    this.ManagementIp == input.ManagementIp ||
                    (this.ManagementIp != null &&
                    this.ManagementIp.Equals(input.ManagementIp))
                ) && 
                (
                    this.BlockSpoof == input.BlockSpoof ||
                    this.BlockSpoof.Equals(input.BlockSpoof)
                ) && 
                (
                    this.TempLease == input.TempLease ||
                    this.TempLease.Equals(input.TempLease)
                ) && 
                (
                    this.LeaseTime == input.LeaseTime ||
                    this.LeaseTime.Equals(input.LeaseTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BoundTo != null)
                {
                    hashCode = (hashCode * 59) + this.BoundTo.GetHashCode();
                }
                if (this.RelayIp != null)
                {
                    hashCode = (hashCode * 59) + this.RelayIp.GetHashCode();
                }
                if (this.ManagementIp != null)
                {
                    hashCode = (hashCode * 59) + this.ManagementIp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BlockSpoof.GetHashCode();
                hashCode = (hashCode * 59) + this.TempLease.GetHashCode();
                hashCode = (hashCode * 59) + this.LeaseTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
