/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// user sso configuration.
    /// </summary>
    [DataContract(Name = "user_sso_radius_accounting_client")]
    public partial class UserSsoRadiusAccountingClient : IEquatable<UserSsoRadiusAccountingClient>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserSsoRadiusAccountingClient" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserSsoRadiusAccountingClient() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserSsoRadiusAccountingClient" /> class.
        /// </summary>
        /// <param name="host">Set the RADIUS accounting client&#39;s host name or IP address. (required).</param>
        /// <param name="sharedSecret">Set the hexadecimal shared encryption key..</param>
        /// <param name="userNameFormat">userNameFormat.</param>
        /// <param name="customFormatComponents">customFormatComponents.</param>
        /// <param name="missingDomain">missingDomain.</param>
        /// <param name="logUserOutIfNoInterim">logUserOutIfNoInterim.</param>
        /// <param name="logUserOutTimeout">Log user out if no accounting interim updates are received                for the specified minutes..</param>
        /// <param name="server">Configure the server for receiving RADIUS accounting messages                forwarded from this client..</param>
        /// <param name="proxyForward">proxyForward.</param>
        /// <param name="partition">Set the Radius Accounting client&#39;s user partition..</param>
        public UserSsoRadiusAccountingClient(string host = default(string), string sharedSecret = default(string), UserSsoRadiusAccountingClientUserNameFormat userNameFormat = default(UserSsoRadiusAccountingClientUserNameFormat), UserSsoRadiusAccountingClientCustomFormatComponents customFormatComponents = default(UserSsoRadiusAccountingClientCustomFormatComponents), UserSsoRadiusAccountingClientMissingDomain missingDomain = default(UserSsoRadiusAccountingClientMissingDomain), UserSsoRadiusAccountingClientLogUserOutIfNoInterim logUserOutIfNoInterim = default(UserSsoRadiusAccountingClientLogUserOutIfNoInterim), decimal logUserOutTimeout = default(decimal), List<UserSsoRadiusAccountingClientServerInner> server = default(List<UserSsoRadiusAccountingClientServerInner>), UserSsoRadiusAccountingClientProxyForward proxyForward = default(UserSsoRadiusAccountingClientProxyForward), string partition = default(string))
        {
            // to ensure "host" is required (not null)
            if (host == null)
            {
                throw new ArgumentNullException("host is a required property for UserSsoRadiusAccountingClient and cannot be null");
            }
            this.Host = host;
            this.SharedSecret = sharedSecret;
            this.UserNameFormat = userNameFormat;
            this.CustomFormatComponents = customFormatComponents;
            this.MissingDomain = missingDomain;
            this.LogUserOutIfNoInterim = logUserOutIfNoInterim;
            this.LogUserOutTimeout = logUserOutTimeout;
            this.Server = server;
            this.ProxyForward = proxyForward;
            this.Partition = partition;
        }

        /// <summary>
        /// Set the RADIUS accounting client&#39;s host name or IP address.
        /// </summary>
        /// <value>Set the RADIUS accounting client&#39;s host name or IP address.</value>
        [DataMember(Name = "host", IsRequired = true, EmitDefaultValue = true)]
        public string Host { get; set; }

        /// <summary>
        /// Set the hexadecimal shared encryption key.
        /// </summary>
        /// <value>Set the hexadecimal shared encryption key.</value>
        [DataMember(Name = "shared_secret", EmitDefaultValue = false)]
        public string SharedSecret { get; set; }

        /// <summary>
        /// Gets or Sets UserNameFormat
        /// </summary>
        [DataMember(Name = "user_name_format", EmitDefaultValue = false)]
        public UserSsoRadiusAccountingClientUserNameFormat UserNameFormat { get; set; }

        /// <summary>
        /// Gets or Sets CustomFormatComponents
        /// </summary>
        [DataMember(Name = "custom_format_components", EmitDefaultValue = false)]
        public UserSsoRadiusAccountingClientCustomFormatComponents CustomFormatComponents { get; set; }

        /// <summary>
        /// Gets or Sets MissingDomain
        /// </summary>
        [DataMember(Name = "missing_domain", EmitDefaultValue = false)]
        public UserSsoRadiusAccountingClientMissingDomain MissingDomain { get; set; }

        /// <summary>
        /// Gets or Sets LogUserOutIfNoInterim
        /// </summary>
        [DataMember(Name = "log_user_out_if_no_interim", EmitDefaultValue = false)]
        public UserSsoRadiusAccountingClientLogUserOutIfNoInterim LogUserOutIfNoInterim { get; set; }

        /// <summary>
        /// Log user out if no accounting interim updates are received                for the specified minutes.
        /// </summary>
        /// <value>Log user out if no accounting interim updates are received                for the specified minutes.</value>
        [DataMember(Name = "log_user_out_timeout", EmitDefaultValue = false)]
        public decimal LogUserOutTimeout { get; set; }

        /// <summary>
        /// Configure the server for receiving RADIUS accounting messages                forwarded from this client.
        /// </summary>
        /// <value>Configure the server for receiving RADIUS accounting messages                forwarded from this client.</value>
        [DataMember(Name = "server", EmitDefaultValue = false)]
        public List<UserSsoRadiusAccountingClientServerInner> Server { get; set; }

        /// <summary>
        /// Gets or Sets ProxyForward
        /// </summary>
        [DataMember(Name = "proxy_forward", EmitDefaultValue = false)]
        public UserSsoRadiusAccountingClientProxyForward ProxyForward { get; set; }

        /// <summary>
        /// Set the Radius Accounting client&#39;s user partition.
        /// </summary>
        /// <value>Set the Radius Accounting client&#39;s user partition.</value>
        [DataMember(Name = "partition", EmitDefaultValue = false)]
        public string Partition { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserSsoRadiusAccountingClient {\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  SharedSecret: ").Append(SharedSecret).Append("\n");
            sb.Append("  UserNameFormat: ").Append(UserNameFormat).Append("\n");
            sb.Append("  CustomFormatComponents: ").Append(CustomFormatComponents).Append("\n");
            sb.Append("  MissingDomain: ").Append(MissingDomain).Append("\n");
            sb.Append("  LogUserOutIfNoInterim: ").Append(LogUserOutIfNoInterim).Append("\n");
            sb.Append("  LogUserOutTimeout: ").Append(LogUserOutTimeout).Append("\n");
            sb.Append("  Server: ").Append(Server).Append("\n");
            sb.Append("  ProxyForward: ").Append(ProxyForward).Append("\n");
            sb.Append("  Partition: ").Append(Partition).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserSsoRadiusAccountingClient);
        }

        /// <summary>
        /// Returns true if UserSsoRadiusAccountingClient instances are equal
        /// </summary>
        /// <param name="input">Instance of UserSsoRadiusAccountingClient to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserSsoRadiusAccountingClient input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Host == input.Host ||
                    (this.Host != null &&
                    this.Host.Equals(input.Host))
                ) && 
                (
                    this.SharedSecret == input.SharedSecret ||
                    (this.SharedSecret != null &&
                    this.SharedSecret.Equals(input.SharedSecret))
                ) && 
                (
                    this.UserNameFormat == input.UserNameFormat ||
                    (this.UserNameFormat != null &&
                    this.UserNameFormat.Equals(input.UserNameFormat))
                ) && 
                (
                    this.CustomFormatComponents == input.CustomFormatComponents ||
                    (this.CustomFormatComponents != null &&
                    this.CustomFormatComponents.Equals(input.CustomFormatComponents))
                ) && 
                (
                    this.MissingDomain == input.MissingDomain ||
                    (this.MissingDomain != null &&
                    this.MissingDomain.Equals(input.MissingDomain))
                ) && 
                (
                    this.LogUserOutIfNoInterim == input.LogUserOutIfNoInterim ||
                    (this.LogUserOutIfNoInterim != null &&
                    this.LogUserOutIfNoInterim.Equals(input.LogUserOutIfNoInterim))
                ) && 
                (
                    this.LogUserOutTimeout == input.LogUserOutTimeout ||
                    this.LogUserOutTimeout.Equals(input.LogUserOutTimeout)
                ) && 
                (
                    this.Server == input.Server ||
                    this.Server != null &&
                    input.Server != null &&
                    this.Server.SequenceEqual(input.Server)
                ) && 
                (
                    this.ProxyForward == input.ProxyForward ||
                    (this.ProxyForward != null &&
                    this.ProxyForward.Equals(input.ProxyForward))
                ) && 
                (
                    this.Partition == input.Partition ||
                    (this.Partition != null &&
                    this.Partition.Equals(input.Partition))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Host != null)
                {
                    hashCode = (hashCode * 59) + this.Host.GetHashCode();
                }
                if (this.SharedSecret != null)
                {
                    hashCode = (hashCode * 59) + this.SharedSecret.GetHashCode();
                }
                if (this.UserNameFormat != null)
                {
                    hashCode = (hashCode * 59) + this.UserNameFormat.GetHashCode();
                }
                if (this.CustomFormatComponents != null)
                {
                    hashCode = (hashCode * 59) + this.CustomFormatComponents.GetHashCode();
                }
                if (this.MissingDomain != null)
                {
                    hashCode = (hashCode * 59) + this.MissingDomain.GetHashCode();
                }
                if (this.LogUserOutIfNoInterim != null)
                {
                    hashCode = (hashCode * 59) + this.LogUserOutIfNoInterim.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LogUserOutTimeout.GetHashCode();
                if (this.Server != null)
                {
                    hashCode = (hashCode * 59) + this.Server.GetHashCode();
                }
                if (this.ProxyForward != null)
                {
                    hashCode = (hashCode * 59) + this.ProxyForward.GetHashCode();
                }
                if (this.Partition != null)
                {
                    hashCode = (hashCode * 59) + this.Partition.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
