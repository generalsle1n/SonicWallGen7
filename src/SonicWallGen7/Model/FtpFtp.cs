/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure FTP.
    /// </summary>
    [DataContract(Name = "ftp_ftp")]
    public partial class FtpFtp : IEquatable<FtpFtp>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FtpFtp" /> class.
        /// </summary>
        /// <param name="sendTsr">Enable send tech support report by FTP..</param>
        /// <param name="sendSettings">Enable send settings by FTP..</param>
        /// <param name="server">FTP sever. * Set to null to represent an unconfigured state..</param>
        /// <param name="user">FTP user. * Set to null to represent an unconfigured state..</param>
        /// <param name="password">FTP password. * Set to null to represent an unconfigured state..</param>
        /// <param name="directory">FTP directory. * Set to null to represent an unconfigured state..</param>
        public FtpFtp(bool sendTsr = default(bool), bool sendSettings = default(bool), string server = default(string), string user = default(string), string password = default(string), string directory = default(string))
        {
            this.SendTsr = sendTsr;
            this.SendSettings = sendSettings;
            this.Server = server;
            this.User = user;
            this.Password = password;
            this.Directory = directory;
        }

        /// <summary>
        /// Enable send tech support report by FTP.
        /// </summary>
        /// <value>Enable send tech support report by FTP.</value>
        [DataMember(Name = "send_tsr", EmitDefaultValue = true)]
        public bool SendTsr { get; set; }

        /// <summary>
        /// Enable send settings by FTP.
        /// </summary>
        /// <value>Enable send settings by FTP.</value>
        [DataMember(Name = "send_settings", EmitDefaultValue = true)]
        public bool SendSettings { get; set; }

        /// <summary>
        /// FTP sever. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>FTP sever. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "server", EmitDefaultValue = true)]
        public string Server { get; set; }

        /// <summary>
        /// FTP user. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>FTP user. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "user", EmitDefaultValue = true)]
        public string User { get; set; }

        /// <summary>
        /// FTP password. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>FTP password. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "password", EmitDefaultValue = true)]
        public string Password { get; set; }

        /// <summary>
        /// FTP directory. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>FTP directory. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "directory", EmitDefaultValue = true)]
        public string Directory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FtpFtp {\n");
            sb.Append("  SendTsr: ").Append(SendTsr).Append("\n");
            sb.Append("  SendSettings: ").Append(SendSettings).Append("\n");
            sb.Append("  Server: ").Append(Server).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Directory: ").Append(Directory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FtpFtp);
        }

        /// <summary>
        /// Returns true if FtpFtp instances are equal
        /// </summary>
        /// <param name="input">Instance of FtpFtp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FtpFtp input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SendTsr == input.SendTsr ||
                    this.SendTsr.Equals(input.SendTsr)
                ) && 
                (
                    this.SendSettings == input.SendSettings ||
                    this.SendSettings.Equals(input.SendSettings)
                ) && 
                (
                    this.Server == input.Server ||
                    (this.Server != null &&
                    this.Server.Equals(input.Server))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Directory == input.Directory ||
                    (this.Directory != null &&
                    this.Directory.Equals(input.Directory))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SendTsr.GetHashCode();
                hashCode = (hashCode * 59) + this.SendSettings.GetHashCode();
                if (this.Server != null)
                {
                    hashCode = (hashCode * 59) + this.Server.GetHashCode();
                }
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                if (this.Directory != null)
                {
                    hashCode = (hashCode * 59) + this.Directory.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
