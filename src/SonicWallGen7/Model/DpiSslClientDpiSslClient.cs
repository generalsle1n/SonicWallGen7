/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enter client DPI-SSL configuration mode.
    /// </summary>
    [DataContract(Name = "dpi_ssl_client_dpi_ssl_client")]
    public partial class DpiSslClientDpiSslClient : IEquatable<DpiSslClientDpiSslClient>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DpiSslClientDpiSslClient" /> class.
        /// </summary>
        /// <param name="enable">Enable SSL client inspection..</param>
        /// <param name="intrusionPrevention">Enable intrusion prevention for client DPI-SSL..</param>
        /// <param name="gateway">gateway.</param>
        /// <param name="applicationFirewall">Enable application firewall for client DPI-SSL..</param>
        /// <param name="contentFilter">Enable content filter for client DPI-SSL..</param>
        /// <param name="authenticateServerForDecryptedConnections">Enable always authenticate server for decrypted connections for client DPI-SSL..</param>
        /// <param name="expiredCa">Enable allow expired CA..</param>
        /// <param name="deploymentServerDomains">Enable deployment wherein the firewall sees a single server IP for different server domains, ex: proxy setup..</param>
        /// <param name="bypassDecryption">Enable allow SSL without decryption (bypass) when connection limit exceeded..</param>
        /// <param name="auditBuiltInExclusion">Enable audit new built-in exclusion domain names prior to being added for exclusion..</param>
        /// <param name="authenticateServer">Enable always authenticate server before applying exclusion policy..</param>
        /// <param name="openFailedConnections">Open failed connections (that are not deemed a security threat)..</param>
        /// <param name="resigningAuthority">resigningAuthority.</param>
        /// <param name="include">include.</param>
        /// <param name="exclude">exclude.</param>
        /// <param name="cfsCategories">cfsCategories.</param>
        public DpiSslClientDpiSslClient(bool enable = default(bool), bool intrusionPrevention = default(bool), DpiSslClientDpiSslClientGateway gateway = default(DpiSslClientDpiSslClientGateway), bool applicationFirewall = default(bool), bool contentFilter = default(bool), bool authenticateServerForDecryptedConnections = default(bool), bool expiredCa = default(bool), bool deploymentServerDomains = default(bool), bool bypassDecryption = default(bool), bool auditBuiltInExclusion = default(bool), bool authenticateServer = default(bool), bool openFailedConnections = default(bool), DpiSslClientDpiSslClientResigningAuthority resigningAuthority = default(DpiSslClientDpiSslClientResigningAuthority), DpiSslClientDpiSslClientInclude include = default(DpiSslClientDpiSslClientInclude), DpiSslClientDpiSslClientExclude exclude = default(DpiSslClientDpiSslClientExclude), DpiSslClientDpiSslClientCfsCategories cfsCategories = default(DpiSslClientDpiSslClientCfsCategories))
        {
            this.Enable = enable;
            this.IntrusionPrevention = intrusionPrevention;
            this.Gateway = gateway;
            this.ApplicationFirewall = applicationFirewall;
            this.ContentFilter = contentFilter;
            this.AuthenticateServerForDecryptedConnections = authenticateServerForDecryptedConnections;
            this.ExpiredCa = expiredCa;
            this.DeploymentServerDomains = deploymentServerDomains;
            this.BypassDecryption = bypassDecryption;
            this.AuditBuiltInExclusion = auditBuiltInExclusion;
            this.AuthenticateServer = authenticateServer;
            this.OpenFailedConnections = openFailedConnections;
            this.ResigningAuthority = resigningAuthority;
            this.Include = include;
            this.Exclude = exclude;
            this.CfsCategories = cfsCategories;
        }

        /// <summary>
        /// Enable SSL client inspection.
        /// </summary>
        /// <value>Enable SSL client inspection.</value>
        [DataMember(Name = "enable", EmitDefaultValue = true)]
        public bool Enable { get; set; }

        /// <summary>
        /// Enable intrusion prevention for client DPI-SSL.
        /// </summary>
        /// <value>Enable intrusion prevention for client DPI-SSL.</value>
        [DataMember(Name = "intrusion_prevention", EmitDefaultValue = true)]
        public bool IntrusionPrevention { get; set; }

        /// <summary>
        /// Gets or Sets Gateway
        /// </summary>
        [DataMember(Name = "gateway", EmitDefaultValue = false)]
        public DpiSslClientDpiSslClientGateway Gateway { get; set; }

        /// <summary>
        /// Enable application firewall for client DPI-SSL.
        /// </summary>
        /// <value>Enable application firewall for client DPI-SSL.</value>
        [DataMember(Name = "application_firewall", EmitDefaultValue = true)]
        public bool ApplicationFirewall { get; set; }

        /// <summary>
        /// Enable content filter for client DPI-SSL.
        /// </summary>
        /// <value>Enable content filter for client DPI-SSL.</value>
        [DataMember(Name = "content_filter", EmitDefaultValue = true)]
        public bool ContentFilter { get; set; }

        /// <summary>
        /// Enable always authenticate server for decrypted connections for client DPI-SSL.
        /// </summary>
        /// <value>Enable always authenticate server for decrypted connections for client DPI-SSL.</value>
        [DataMember(Name = "authenticate_server_for_decrypted_connections", EmitDefaultValue = true)]
        public bool AuthenticateServerForDecryptedConnections { get; set; }

        /// <summary>
        /// Enable allow expired CA.
        /// </summary>
        /// <value>Enable allow expired CA.</value>
        [DataMember(Name = "expired_ca", EmitDefaultValue = true)]
        public bool ExpiredCa { get; set; }

        /// <summary>
        /// Enable deployment wherein the firewall sees a single server IP for different server domains, ex: proxy setup.
        /// </summary>
        /// <value>Enable deployment wherein the firewall sees a single server IP for different server domains, ex: proxy setup.</value>
        [DataMember(Name = "deployment_server_domains", EmitDefaultValue = true)]
        public bool DeploymentServerDomains { get; set; }

        /// <summary>
        /// Enable allow SSL without decryption (bypass) when connection limit exceeded.
        /// </summary>
        /// <value>Enable allow SSL without decryption (bypass) when connection limit exceeded.</value>
        [DataMember(Name = "bypass_decryption", EmitDefaultValue = true)]
        public bool BypassDecryption { get; set; }

        /// <summary>
        /// Enable audit new built-in exclusion domain names prior to being added for exclusion.
        /// </summary>
        /// <value>Enable audit new built-in exclusion domain names prior to being added for exclusion.</value>
        [DataMember(Name = "audit_built_in_exclusion", EmitDefaultValue = true)]
        public bool AuditBuiltInExclusion { get; set; }

        /// <summary>
        /// Enable always authenticate server before applying exclusion policy.
        /// </summary>
        /// <value>Enable always authenticate server before applying exclusion policy.</value>
        [DataMember(Name = "authenticate_server", EmitDefaultValue = true)]
        public bool AuthenticateServer { get; set; }

        /// <summary>
        /// Open failed connections (that are not deemed a security threat).
        /// </summary>
        /// <value>Open failed connections (that are not deemed a security threat).</value>
        [DataMember(Name = "open_failed_connections", EmitDefaultValue = true)]
        public bool OpenFailedConnections { get; set; }

        /// <summary>
        /// Gets or Sets ResigningAuthority
        /// </summary>
        [DataMember(Name = "resigning_authority", EmitDefaultValue = false)]
        public DpiSslClientDpiSslClientResigningAuthority ResigningAuthority { get; set; }

        /// <summary>
        /// Gets or Sets Include
        /// </summary>
        [DataMember(Name = "include", EmitDefaultValue = false)]
        public DpiSslClientDpiSslClientInclude Include { get; set; }

        /// <summary>
        /// Gets or Sets Exclude
        /// </summary>
        [DataMember(Name = "exclude", EmitDefaultValue = false)]
        public DpiSslClientDpiSslClientExclude Exclude { get; set; }

        /// <summary>
        /// Gets or Sets CfsCategories
        /// </summary>
        [DataMember(Name = "cfs_categories", EmitDefaultValue = false)]
        public DpiSslClientDpiSslClientCfsCategories CfsCategories { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DpiSslClientDpiSslClient {\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  IntrusionPrevention: ").Append(IntrusionPrevention).Append("\n");
            sb.Append("  Gateway: ").Append(Gateway).Append("\n");
            sb.Append("  ApplicationFirewall: ").Append(ApplicationFirewall).Append("\n");
            sb.Append("  ContentFilter: ").Append(ContentFilter).Append("\n");
            sb.Append("  AuthenticateServerForDecryptedConnections: ").Append(AuthenticateServerForDecryptedConnections).Append("\n");
            sb.Append("  ExpiredCa: ").Append(ExpiredCa).Append("\n");
            sb.Append("  DeploymentServerDomains: ").Append(DeploymentServerDomains).Append("\n");
            sb.Append("  BypassDecryption: ").Append(BypassDecryption).Append("\n");
            sb.Append("  AuditBuiltInExclusion: ").Append(AuditBuiltInExclusion).Append("\n");
            sb.Append("  AuthenticateServer: ").Append(AuthenticateServer).Append("\n");
            sb.Append("  OpenFailedConnections: ").Append(OpenFailedConnections).Append("\n");
            sb.Append("  ResigningAuthority: ").Append(ResigningAuthority).Append("\n");
            sb.Append("  Include: ").Append(Include).Append("\n");
            sb.Append("  Exclude: ").Append(Exclude).Append("\n");
            sb.Append("  CfsCategories: ").Append(CfsCategories).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DpiSslClientDpiSslClient);
        }

        /// <summary>
        /// Returns true if DpiSslClientDpiSslClient instances are equal
        /// </summary>
        /// <param name="input">Instance of DpiSslClientDpiSslClient to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DpiSslClientDpiSslClient input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.IntrusionPrevention == input.IntrusionPrevention ||
                    this.IntrusionPrevention.Equals(input.IntrusionPrevention)
                ) && 
                (
                    this.Gateway == input.Gateway ||
                    (this.Gateway != null &&
                    this.Gateway.Equals(input.Gateway))
                ) && 
                (
                    this.ApplicationFirewall == input.ApplicationFirewall ||
                    this.ApplicationFirewall.Equals(input.ApplicationFirewall)
                ) && 
                (
                    this.ContentFilter == input.ContentFilter ||
                    this.ContentFilter.Equals(input.ContentFilter)
                ) && 
                (
                    this.AuthenticateServerForDecryptedConnections == input.AuthenticateServerForDecryptedConnections ||
                    this.AuthenticateServerForDecryptedConnections.Equals(input.AuthenticateServerForDecryptedConnections)
                ) && 
                (
                    this.ExpiredCa == input.ExpiredCa ||
                    this.ExpiredCa.Equals(input.ExpiredCa)
                ) && 
                (
                    this.DeploymentServerDomains == input.DeploymentServerDomains ||
                    this.DeploymentServerDomains.Equals(input.DeploymentServerDomains)
                ) && 
                (
                    this.BypassDecryption == input.BypassDecryption ||
                    this.BypassDecryption.Equals(input.BypassDecryption)
                ) && 
                (
                    this.AuditBuiltInExclusion == input.AuditBuiltInExclusion ||
                    this.AuditBuiltInExclusion.Equals(input.AuditBuiltInExclusion)
                ) && 
                (
                    this.AuthenticateServer == input.AuthenticateServer ||
                    this.AuthenticateServer.Equals(input.AuthenticateServer)
                ) && 
                (
                    this.OpenFailedConnections == input.OpenFailedConnections ||
                    this.OpenFailedConnections.Equals(input.OpenFailedConnections)
                ) && 
                (
                    this.ResigningAuthority == input.ResigningAuthority ||
                    (this.ResigningAuthority != null &&
                    this.ResigningAuthority.Equals(input.ResigningAuthority))
                ) && 
                (
                    this.Include == input.Include ||
                    (this.Include != null &&
                    this.Include.Equals(input.Include))
                ) && 
                (
                    this.Exclude == input.Exclude ||
                    (this.Exclude != null &&
                    this.Exclude.Equals(input.Exclude))
                ) && 
                (
                    this.CfsCategories == input.CfsCategories ||
                    (this.CfsCategories != null &&
                    this.CfsCategories.Equals(input.CfsCategories))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Enable.GetHashCode();
                hashCode = (hashCode * 59) + this.IntrusionPrevention.GetHashCode();
                if (this.Gateway != null)
                {
                    hashCode = (hashCode * 59) + this.Gateway.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ApplicationFirewall.GetHashCode();
                hashCode = (hashCode * 59) + this.ContentFilter.GetHashCode();
                hashCode = (hashCode * 59) + this.AuthenticateServerForDecryptedConnections.GetHashCode();
                hashCode = (hashCode * 59) + this.ExpiredCa.GetHashCode();
                hashCode = (hashCode * 59) + this.DeploymentServerDomains.GetHashCode();
                hashCode = (hashCode * 59) + this.BypassDecryption.GetHashCode();
                hashCode = (hashCode * 59) + this.AuditBuiltInExclusion.GetHashCode();
                hashCode = (hashCode * 59) + this.AuthenticateServer.GetHashCode();
                hashCode = (hashCode * 59) + this.OpenFailedConnections.GetHashCode();
                if (this.ResigningAuthority != null)
                {
                    hashCode = (hashCode * 59) + this.ResigningAuthority.GetHashCode();
                }
                if (this.Include != null)
                {
                    hashCode = (hashCode * 59) + this.Include.GetHashCode();
                }
                if (this.Exclude != null)
                {
                    hashCode = (hashCode * 59) + this.Exclude.GetHashCode();
                }
                if (this.CfsCategories != null)
                {
                    hashCode = (hashCode * 59) + this.CfsCategories.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
