/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enter its configuration mode.
    /// </summary>
    [DataContract(Name = "zone_guest_services_external_auth")]
    public partial class ZoneGuestServicesExternalAuth : IEquatable<ZoneGuestServicesExternalAuth>, IValidatableObject
    {
        /// <summary>
        /// Set local web server settings for client redirect.
        /// </summary>
        /// <value>Set local web server settings for client redirect.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ClientRedirectEnum
        {
            /// <summary>
            /// Enum Http for value: http
            /// </summary>
            [EnumMember(Value = "http")]
            Http = 1,

            /// <summary>
            /// Enum Https for value: https
            /// </summary>
            [EnumMember(Value = "https")]
            Https = 2
        }


        /// <summary>
        /// Set local web server settings for client redirect.
        /// </summary>
        /// <value>Set local web server settings for client redirect.</value>
        [DataMember(Name = "client_redirect", EmitDefaultValue = false)]
        public ClientRedirectEnum? ClientRedirect { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ZoneGuestServicesExternalAuth" /> class.
        /// </summary>
        /// <param name="enable">Enable external auth zone mode..</param>
        /// <param name="clientRedirect">Set local web server settings for client redirect..</param>
        /// <param name="webServer1">webServer1.</param>
        /// <param name="webServer2">webServer2.</param>
        /// <param name="webServer">webServer.</param>
        /// <param name="messageAuth">messageAuth.</param>
        /// <param name="socialNetwork">socialNetwork.</param>
        /// <param name="authPages">authPages.</param>
        /// <param name="webContent">webContent.</param>
        /// <param name="logoutExpired">logoutExpired.</param>
        /// <param name="statusCheck">statusCheck.</param>
        /// <param name="sessionSync">sessionSync.</param>
        public ZoneGuestServicesExternalAuth(bool enable = default(bool), ClientRedirectEnum? clientRedirect = default(ClientRedirectEnum?), ZoneGuestServicesExternalAuthWebServer1 webServer1 = default(ZoneGuestServicesExternalAuthWebServer1), ZoneGuestServicesExternalAuthWebServer2 webServer2 = default(ZoneGuestServicesExternalAuthWebServer2), ZoneGuestServicesExternalAuthWebServer webServer = default(ZoneGuestServicesExternalAuthWebServer), ZoneGuestServicesExternalAuthMessageAuth messageAuth = default(ZoneGuestServicesExternalAuthMessageAuth), ZoneGuestServicesExternalAuthSocialNetwork socialNetwork = default(ZoneGuestServicesExternalAuthSocialNetwork), ZoneGuestServicesExternalAuthAuthPages authPages = default(ZoneGuestServicesExternalAuthAuthPages), ZoneGuestServicesExternalAuthWebContent webContent = default(ZoneGuestServicesExternalAuthWebContent), ZoneGuestServicesExternalAuthLogoutExpired logoutExpired = default(ZoneGuestServicesExternalAuthLogoutExpired), ZoneGuestServicesExternalAuthStatusCheck statusCheck = default(ZoneGuestServicesExternalAuthStatusCheck), ZoneGuestServicesExternalAuthSessionSync sessionSync = default(ZoneGuestServicesExternalAuthSessionSync))
        {
            this.Enable = enable;
            this.ClientRedirect = clientRedirect;
            this.WebServer1 = webServer1;
            this.WebServer2 = webServer2;
            this.WebServer = webServer;
            this.MessageAuth = messageAuth;
            this.SocialNetwork = socialNetwork;
            this.AuthPages = authPages;
            this.WebContent = webContent;
            this.LogoutExpired = logoutExpired;
            this.StatusCheck = statusCheck;
            this.SessionSync = sessionSync;
        }

        /// <summary>
        /// Enable external auth zone mode.
        /// </summary>
        /// <value>Enable external auth zone mode.</value>
        [DataMember(Name = "enable", EmitDefaultValue = true)]
        public bool Enable { get; set; }

        /// <summary>
        /// Gets or Sets WebServer1
        /// </summary>
        [DataMember(Name = "web_server_1", EmitDefaultValue = true)]
        public ZoneGuestServicesExternalAuthWebServer1 WebServer1 { get; set; }

        /// <summary>
        /// Gets or Sets WebServer2
        /// </summary>
        [DataMember(Name = "web_server_2", EmitDefaultValue = true)]
        public ZoneGuestServicesExternalAuthWebServer2 WebServer2 { get; set; }

        /// <summary>
        /// Gets or Sets WebServer
        /// </summary>
        [DataMember(Name = "web_server", EmitDefaultValue = false)]
        public ZoneGuestServicesExternalAuthWebServer WebServer { get; set; }

        /// <summary>
        /// Gets or Sets MessageAuth
        /// </summary>
        [DataMember(Name = "message_auth", EmitDefaultValue = false)]
        public ZoneGuestServicesExternalAuthMessageAuth MessageAuth { get; set; }

        /// <summary>
        /// Gets or Sets SocialNetwork
        /// </summary>
        [DataMember(Name = "social_network", EmitDefaultValue = false)]
        public ZoneGuestServicesExternalAuthSocialNetwork SocialNetwork { get; set; }

        /// <summary>
        /// Gets or Sets AuthPages
        /// </summary>
        [DataMember(Name = "auth_pages", EmitDefaultValue = false)]
        public ZoneGuestServicesExternalAuthAuthPages AuthPages { get; set; }

        /// <summary>
        /// Gets or Sets WebContent
        /// </summary>
        [DataMember(Name = "web_content", EmitDefaultValue = false)]
        public ZoneGuestServicesExternalAuthWebContent WebContent { get; set; }

        /// <summary>
        /// Gets or Sets LogoutExpired
        /// </summary>
        [DataMember(Name = "logout_expired", EmitDefaultValue = false)]
        public ZoneGuestServicesExternalAuthLogoutExpired LogoutExpired { get; set; }

        /// <summary>
        /// Gets or Sets StatusCheck
        /// </summary>
        [DataMember(Name = "status_check", EmitDefaultValue = false)]
        public ZoneGuestServicesExternalAuthStatusCheck StatusCheck { get; set; }

        /// <summary>
        /// Gets or Sets SessionSync
        /// </summary>
        [DataMember(Name = "session_sync", EmitDefaultValue = false)]
        public ZoneGuestServicesExternalAuthSessionSync SessionSync { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ZoneGuestServicesExternalAuth {\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  ClientRedirect: ").Append(ClientRedirect).Append("\n");
            sb.Append("  WebServer1: ").Append(WebServer1).Append("\n");
            sb.Append("  WebServer2: ").Append(WebServer2).Append("\n");
            sb.Append("  WebServer: ").Append(WebServer).Append("\n");
            sb.Append("  MessageAuth: ").Append(MessageAuth).Append("\n");
            sb.Append("  SocialNetwork: ").Append(SocialNetwork).Append("\n");
            sb.Append("  AuthPages: ").Append(AuthPages).Append("\n");
            sb.Append("  WebContent: ").Append(WebContent).Append("\n");
            sb.Append("  LogoutExpired: ").Append(LogoutExpired).Append("\n");
            sb.Append("  StatusCheck: ").Append(StatusCheck).Append("\n");
            sb.Append("  SessionSync: ").Append(SessionSync).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ZoneGuestServicesExternalAuth);
        }

        /// <summary>
        /// Returns true if ZoneGuestServicesExternalAuth instances are equal
        /// </summary>
        /// <param name="input">Instance of ZoneGuestServicesExternalAuth to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ZoneGuestServicesExternalAuth input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.ClientRedirect == input.ClientRedirect ||
                    this.ClientRedirect.Equals(input.ClientRedirect)
                ) && 
                (
                    this.WebServer1 == input.WebServer1 ||
                    (this.WebServer1 != null &&
                    this.WebServer1.Equals(input.WebServer1))
                ) && 
                (
                    this.WebServer2 == input.WebServer2 ||
                    (this.WebServer2 != null &&
                    this.WebServer2.Equals(input.WebServer2))
                ) && 
                (
                    this.WebServer == input.WebServer ||
                    (this.WebServer != null &&
                    this.WebServer.Equals(input.WebServer))
                ) && 
                (
                    this.MessageAuth == input.MessageAuth ||
                    (this.MessageAuth != null &&
                    this.MessageAuth.Equals(input.MessageAuth))
                ) && 
                (
                    this.SocialNetwork == input.SocialNetwork ||
                    (this.SocialNetwork != null &&
                    this.SocialNetwork.Equals(input.SocialNetwork))
                ) && 
                (
                    this.AuthPages == input.AuthPages ||
                    (this.AuthPages != null &&
                    this.AuthPages.Equals(input.AuthPages))
                ) && 
                (
                    this.WebContent == input.WebContent ||
                    (this.WebContent != null &&
                    this.WebContent.Equals(input.WebContent))
                ) && 
                (
                    this.LogoutExpired == input.LogoutExpired ||
                    (this.LogoutExpired != null &&
                    this.LogoutExpired.Equals(input.LogoutExpired))
                ) && 
                (
                    this.StatusCheck == input.StatusCheck ||
                    (this.StatusCheck != null &&
                    this.StatusCheck.Equals(input.StatusCheck))
                ) && 
                (
                    this.SessionSync == input.SessionSync ||
                    (this.SessionSync != null &&
                    this.SessionSync.Equals(input.SessionSync))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Enable.GetHashCode();
                hashCode = (hashCode * 59) + this.ClientRedirect.GetHashCode();
                if (this.WebServer1 != null)
                {
                    hashCode = (hashCode * 59) + this.WebServer1.GetHashCode();
                }
                if (this.WebServer2 != null)
                {
                    hashCode = (hashCode * 59) + this.WebServer2.GetHashCode();
                }
                if (this.WebServer != null)
                {
                    hashCode = (hashCode * 59) + this.WebServer.GetHashCode();
                }
                if (this.MessageAuth != null)
                {
                    hashCode = (hashCode * 59) + this.MessageAuth.GetHashCode();
                }
                if (this.SocialNetwork != null)
                {
                    hashCode = (hashCode * 59) + this.SocialNetwork.GetHashCode();
                }
                if (this.AuthPages != null)
                {
                    hashCode = (hashCode * 59) + this.AuthPages.GetHashCode();
                }
                if (this.WebContent != null)
                {
                    hashCode = (hashCode * 59) + this.WebContent.GetHashCode();
                }
                if (this.LogoutExpired != null)
                {
                    hashCode = (hashCode * 59) + this.LogoutExpired.GetHashCode();
                }
                if (this.StatusCheck != null)
                {
                    hashCode = (hashCode * 59) + this.StatusCheck.GetHashCode();
                }
                if (this.SessionSync != null)
                {
                    hashCode = (hashCode * 59) + this.SessionSync.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
