/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure settings related to local users.
    /// </summary>
    [DataContract(Name = "user_local_base_user_local")]
    public partial class UserLocalBaseUserLocal : IEquatable<UserLocalBaseUserLocal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserLocalBaseUserLocal" /> class.
        /// </summary>
        /// <param name="applyPasswordConstraints">Enable apply the password constraints for local users..</param>
        /// <param name="pruneOnExpiry">Enable prune expired local user accounts if a limited lifetime is set..</param>
        /// <param name="inactivityTimeout">Set a inactivity timeout for all user accounts..</param>
        /// <param name="pruneOnInactive">Enable prune inact local user accounts if a inactive timeout is set..</param>
        /// <param name="domainNameDisplayFormat">domainNameDisplayFormat.</param>
        public UserLocalBaseUserLocal(bool applyPasswordConstraints = default(bool), bool pruneOnExpiry = default(bool), decimal inactivityTimeout = default(decimal), bool pruneOnInactive = default(bool), UserLocalBaseUserLocalDomainNameDisplayFormat domainNameDisplayFormat = default(UserLocalBaseUserLocalDomainNameDisplayFormat))
        {
            this.ApplyPasswordConstraints = applyPasswordConstraints;
            this.PruneOnExpiry = pruneOnExpiry;
            this.InactivityTimeout = inactivityTimeout;
            this.PruneOnInactive = pruneOnInactive;
            this.DomainNameDisplayFormat = domainNameDisplayFormat;
        }

        /// <summary>
        /// Enable apply the password constraints for local users.
        /// </summary>
        /// <value>Enable apply the password constraints for local users.</value>
        [DataMember(Name = "apply_password_constraints", EmitDefaultValue = true)]
        public bool ApplyPasswordConstraints { get; set; }

        /// <summary>
        /// Enable prune expired local user accounts if a limited lifetime is set.
        /// </summary>
        /// <value>Enable prune expired local user accounts if a limited lifetime is set.</value>
        [DataMember(Name = "prune_on_expiry", EmitDefaultValue = true)]
        public bool PruneOnExpiry { get; set; }

        /// <summary>
        /// Set a inactivity timeout for all user accounts.
        /// </summary>
        /// <value>Set a inactivity timeout for all user accounts.</value>
        [DataMember(Name = "inactivity_timeout", EmitDefaultValue = false)]
        public decimal InactivityTimeout { get; set; }

        /// <summary>
        /// Enable prune inact local user accounts if a inactive timeout is set.
        /// </summary>
        /// <value>Enable prune inact local user accounts if a inactive timeout is set.</value>
        [DataMember(Name = "prune_on_inactive", EmitDefaultValue = true)]
        public bool PruneOnInactive { get; set; }

        /// <summary>
        /// Gets or Sets DomainNameDisplayFormat
        /// </summary>
        [DataMember(Name = "domain_name_display_format", EmitDefaultValue = false)]
        public UserLocalBaseUserLocalDomainNameDisplayFormat DomainNameDisplayFormat { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserLocalBaseUserLocal {\n");
            sb.Append("  ApplyPasswordConstraints: ").Append(ApplyPasswordConstraints).Append("\n");
            sb.Append("  PruneOnExpiry: ").Append(PruneOnExpiry).Append("\n");
            sb.Append("  InactivityTimeout: ").Append(InactivityTimeout).Append("\n");
            sb.Append("  PruneOnInactive: ").Append(PruneOnInactive).Append("\n");
            sb.Append("  DomainNameDisplayFormat: ").Append(DomainNameDisplayFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserLocalBaseUserLocal);
        }

        /// <summary>
        /// Returns true if UserLocalBaseUserLocal instances are equal
        /// </summary>
        /// <param name="input">Instance of UserLocalBaseUserLocal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserLocalBaseUserLocal input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ApplyPasswordConstraints == input.ApplyPasswordConstraints ||
                    this.ApplyPasswordConstraints.Equals(input.ApplyPasswordConstraints)
                ) && 
                (
                    this.PruneOnExpiry == input.PruneOnExpiry ||
                    this.PruneOnExpiry.Equals(input.PruneOnExpiry)
                ) && 
                (
                    this.InactivityTimeout == input.InactivityTimeout ||
                    this.InactivityTimeout.Equals(input.InactivityTimeout)
                ) && 
                (
                    this.PruneOnInactive == input.PruneOnInactive ||
                    this.PruneOnInactive.Equals(input.PruneOnInactive)
                ) && 
                (
                    this.DomainNameDisplayFormat == input.DomainNameDisplayFormat ||
                    (this.DomainNameDisplayFormat != null &&
                    this.DomainNameDisplayFormat.Equals(input.DomainNameDisplayFormat))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ApplyPasswordConstraints.GetHashCode();
                hashCode = (hashCode * 59) + this.PruneOnExpiry.GetHashCode();
                hashCode = (hashCode * 59) + this.InactivityTimeout.GetHashCode();
                hashCode = (hashCode * 59) + this.PruneOnInactive.GetHashCode();
                if (this.DomainNameDisplayFormat != null)
                {
                    hashCode = (hashCode * 59) + this.DomainNameDisplayFormat.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
