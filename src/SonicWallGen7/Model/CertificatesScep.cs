/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Simple certificate enrollment protocol configuration schema.
    /// </summary>
    [DataContract(Name = "certificates_scep")]
    public partial class CertificatesScep : IEquatable<CertificatesScep>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificatesScep" /> class.
        /// </summary>
        /// <param name="signingRequest">Configure simple certificate enrollment protocol signing request..</param>
        /// <param name="caUrl">Configure simple certificate enrollment protocol certificate authority URL..</param>
        /// <param name="challengePassword">Configure simple certificate enrollment protocol certificate authority challenge password..</param>
        /// <param name="requestCount">Configure simple certificate enrollment protocol request count..</param>
        /// <param name="pollingInterval">Configure simple certificate enrollment protocol polling interval..</param>
        /// <param name="maxPollingTime">Configure simple certificate enrollment protocol max polling time..</param>
        /// <param name="scep">Enable simple certificate enrollment protocol..</param>
        public CertificatesScep(string signingRequest = default(string), string caUrl = default(string), string challengePassword = default(string), decimal requestCount = default(decimal), decimal pollingInterval = default(decimal), decimal maxPollingTime = default(decimal), bool scep = default(bool))
        {
            this.SigningRequest = signingRequest;
            this.CaUrl = caUrl;
            this.ChallengePassword = challengePassword;
            this.RequestCount = requestCount;
            this.PollingInterval = pollingInterval;
            this.MaxPollingTime = maxPollingTime;
            this.Scep = scep;
        }

        /// <summary>
        /// Configure simple certificate enrollment protocol signing request.
        /// </summary>
        /// <value>Configure simple certificate enrollment protocol signing request.</value>
        [DataMember(Name = "signing_request", EmitDefaultValue = false)]
        public string SigningRequest { get; set; }

        /// <summary>
        /// Configure simple certificate enrollment protocol certificate authority URL.
        /// </summary>
        /// <value>Configure simple certificate enrollment protocol certificate authority URL.</value>
        [DataMember(Name = "ca_url", EmitDefaultValue = false)]
        public string CaUrl { get; set; }

        /// <summary>
        /// Configure simple certificate enrollment protocol certificate authority challenge password.
        /// </summary>
        /// <value>Configure simple certificate enrollment protocol certificate authority challenge password.</value>
        [DataMember(Name = "challenge_password", EmitDefaultValue = false)]
        public string ChallengePassword { get; set; }

        /// <summary>
        /// Configure simple certificate enrollment protocol request count.
        /// </summary>
        /// <value>Configure simple certificate enrollment protocol request count.</value>
        [DataMember(Name = "request_count", EmitDefaultValue = false)]
        public decimal RequestCount { get; set; }

        /// <summary>
        /// Configure simple certificate enrollment protocol polling interval.
        /// </summary>
        /// <value>Configure simple certificate enrollment protocol polling interval.</value>
        [DataMember(Name = "polling_interval", EmitDefaultValue = false)]
        public decimal PollingInterval { get; set; }

        /// <summary>
        /// Configure simple certificate enrollment protocol max polling time.
        /// </summary>
        /// <value>Configure simple certificate enrollment protocol max polling time.</value>
        [DataMember(Name = "max_polling_time", EmitDefaultValue = false)]
        public decimal MaxPollingTime { get; set; }

        /// <summary>
        /// Enable simple certificate enrollment protocol.
        /// </summary>
        /// <value>Enable simple certificate enrollment protocol.</value>
        [DataMember(Name = "scep", EmitDefaultValue = true)]
        public bool Scep { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CertificatesScep {\n");
            sb.Append("  SigningRequest: ").Append(SigningRequest).Append("\n");
            sb.Append("  CaUrl: ").Append(CaUrl).Append("\n");
            sb.Append("  ChallengePassword: ").Append(ChallengePassword).Append("\n");
            sb.Append("  RequestCount: ").Append(RequestCount).Append("\n");
            sb.Append("  PollingInterval: ").Append(PollingInterval).Append("\n");
            sb.Append("  MaxPollingTime: ").Append(MaxPollingTime).Append("\n");
            sb.Append("  Scep: ").Append(Scep).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CertificatesScep);
        }

        /// <summary>
        /// Returns true if CertificatesScep instances are equal
        /// </summary>
        /// <param name="input">Instance of CertificatesScep to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CertificatesScep input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SigningRequest == input.SigningRequest ||
                    (this.SigningRequest != null &&
                    this.SigningRequest.Equals(input.SigningRequest))
                ) && 
                (
                    this.CaUrl == input.CaUrl ||
                    (this.CaUrl != null &&
                    this.CaUrl.Equals(input.CaUrl))
                ) && 
                (
                    this.ChallengePassword == input.ChallengePassword ||
                    (this.ChallengePassword != null &&
                    this.ChallengePassword.Equals(input.ChallengePassword))
                ) && 
                (
                    this.RequestCount == input.RequestCount ||
                    this.RequestCount.Equals(input.RequestCount)
                ) && 
                (
                    this.PollingInterval == input.PollingInterval ||
                    this.PollingInterval.Equals(input.PollingInterval)
                ) && 
                (
                    this.MaxPollingTime == input.MaxPollingTime ||
                    this.MaxPollingTime.Equals(input.MaxPollingTime)
                ) && 
                (
                    this.Scep == input.Scep ||
                    this.Scep.Equals(input.Scep)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SigningRequest != null)
                {
                    hashCode = (hashCode * 59) + this.SigningRequest.GetHashCode();
                }
                if (this.CaUrl != null)
                {
                    hashCode = (hashCode * 59) + this.CaUrl.GetHashCode();
                }
                if (this.ChallengePassword != null)
                {
                    hashCode = (hashCode * 59) + this.ChallengePassword.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RequestCount.GetHashCode();
                hashCode = (hashCode * 59) + this.PollingInterval.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxPollingTime.GetHashCode();
                hashCode = (hashCode * 59) + this.Scep.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
