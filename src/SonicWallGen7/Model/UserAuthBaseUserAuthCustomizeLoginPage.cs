/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Customize login pages.
    /// </summary>
    [DataContract(Name = "user_auth_base_user_auth_customize_login_page")]
    public partial class UserAuthBaseUserAuthCustomizeLoginPage : IEquatable<UserAuthBaseUserAuthCustomizeLoginPage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAuthBaseUserAuthCustomizeLoginPage" /> class.
        /// </summary>
        /// <param name="preempt">preempt.</param>
        /// <param name="authentication">authentication.</param>
        /// <param name="loggedOut">loggedOut.</param>
        /// <param name="full">full.</param>
        /// <param name="disallowed">disallowed.</param>
        /// <param name="lockout">lockout.</param>
        /// <param name="status">status.</param>
        /// <param name="guestStatus">guestStatus.</param>
        /// <param name="accessBarred">accessBarred.</param>
        /// <param name="accessDown">accessDown.</param>
        /// <param name="accessUnavailable">accessUnavailable.</param>
        /// <param name="redirect">redirect.</param>
        /// <param name="ssoFailure">ssoFailure.</param>
        /// <param name="passwordUpdate">passwordUpdate.</param>
        /// <param name="message">message.</param>
        public UserAuthBaseUserAuthCustomizeLoginPage(UserAuthBaseUserAuthCustomizeLoginPagePreempt preempt = default(UserAuthBaseUserAuthCustomizeLoginPagePreempt), UserAuthBaseUserAuthCustomizeLoginPageAuthentication authentication = default(UserAuthBaseUserAuthCustomizeLoginPageAuthentication), UserAuthBaseUserAuthCustomizeLoginPageLoggedOut loggedOut = default(UserAuthBaseUserAuthCustomizeLoginPageLoggedOut), UserAuthBaseUserAuthCustomizeLoginPageFull full = default(UserAuthBaseUserAuthCustomizeLoginPageFull), UserAuthBaseUserAuthCustomizeLoginPageDisallowed disallowed = default(UserAuthBaseUserAuthCustomizeLoginPageDisallowed), UserAuthBaseUserAuthCustomizeLoginPageLockout lockout = default(UserAuthBaseUserAuthCustomizeLoginPageLockout), UserAuthBaseUserAuthCustomizeLoginPageStatus status = default(UserAuthBaseUserAuthCustomizeLoginPageStatus), UserAuthBaseUserAuthCustomizeLoginPageGuestStatus guestStatus = default(UserAuthBaseUserAuthCustomizeLoginPageGuestStatus), UserAuthBaseUserAuthCustomizeLoginPageAccessBarred accessBarred = default(UserAuthBaseUserAuthCustomizeLoginPageAccessBarred), UserAuthBaseUserAuthCustomizeLoginPageAccessDown accessDown = default(UserAuthBaseUserAuthCustomizeLoginPageAccessDown), UserAuthBaseUserAuthCustomizeLoginPageAccessUnavailable accessUnavailable = default(UserAuthBaseUserAuthCustomizeLoginPageAccessUnavailable), UserAuthBaseUserAuthCustomizeLoginPageRedirect redirect = default(UserAuthBaseUserAuthCustomizeLoginPageRedirect), UserAuthBaseUserAuthCustomizeLoginPageSsoFailure ssoFailure = default(UserAuthBaseUserAuthCustomizeLoginPageSsoFailure), UserAuthBaseUserAuthCustomizeLoginPagePasswordUpdate passwordUpdate = default(UserAuthBaseUserAuthCustomizeLoginPagePasswordUpdate), UserAuthBaseUserAuthCustomizeLoginPageMessage message = default(UserAuthBaseUserAuthCustomizeLoginPageMessage))
        {
            this.Preempt = preempt;
            this.Authentication = authentication;
            this.LoggedOut = loggedOut;
            this.Full = full;
            this.Disallowed = disallowed;
            this.Lockout = lockout;
            this.Status = status;
            this.GuestStatus = guestStatus;
            this.AccessBarred = accessBarred;
            this.AccessDown = accessDown;
            this.AccessUnavailable = accessUnavailable;
            this.Redirect = redirect;
            this.SsoFailure = ssoFailure;
            this.PasswordUpdate = passwordUpdate;
            this.Message = message;
        }

        /// <summary>
        /// Gets or Sets Preempt
        /// </summary>
        [DataMember(Name = "preempt", EmitDefaultValue = true)]
        public UserAuthBaseUserAuthCustomizeLoginPagePreempt Preempt { get; set; }

        /// <summary>
        /// Gets or Sets Authentication
        /// </summary>
        [DataMember(Name = "authentication", EmitDefaultValue = true)]
        public UserAuthBaseUserAuthCustomizeLoginPageAuthentication Authentication { get; set; }

        /// <summary>
        /// Gets or Sets LoggedOut
        /// </summary>
        [DataMember(Name = "logged_out", EmitDefaultValue = true)]
        public UserAuthBaseUserAuthCustomizeLoginPageLoggedOut LoggedOut { get; set; }

        /// <summary>
        /// Gets or Sets Full
        /// </summary>
        [DataMember(Name = "full", EmitDefaultValue = true)]
        public UserAuthBaseUserAuthCustomizeLoginPageFull Full { get; set; }

        /// <summary>
        /// Gets or Sets Disallowed
        /// </summary>
        [DataMember(Name = "disallowed", EmitDefaultValue = true)]
        public UserAuthBaseUserAuthCustomizeLoginPageDisallowed Disallowed { get; set; }

        /// <summary>
        /// Gets or Sets Lockout
        /// </summary>
        [DataMember(Name = "lockout", EmitDefaultValue = true)]
        public UserAuthBaseUserAuthCustomizeLoginPageLockout Lockout { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        public UserAuthBaseUserAuthCustomizeLoginPageStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets GuestStatus
        /// </summary>
        [DataMember(Name = "guest_status", EmitDefaultValue = true)]
        public UserAuthBaseUserAuthCustomizeLoginPageGuestStatus GuestStatus { get; set; }

        /// <summary>
        /// Gets or Sets AccessBarred
        /// </summary>
        [DataMember(Name = "access_barred", EmitDefaultValue = true)]
        public UserAuthBaseUserAuthCustomizeLoginPageAccessBarred AccessBarred { get; set; }

        /// <summary>
        /// Gets or Sets AccessDown
        /// </summary>
        [DataMember(Name = "access_down", EmitDefaultValue = true)]
        public UserAuthBaseUserAuthCustomizeLoginPageAccessDown AccessDown { get; set; }

        /// <summary>
        /// Gets or Sets AccessUnavailable
        /// </summary>
        [DataMember(Name = "access_unavailable", EmitDefaultValue = true)]
        public UserAuthBaseUserAuthCustomizeLoginPageAccessUnavailable AccessUnavailable { get; set; }

        /// <summary>
        /// Gets or Sets Redirect
        /// </summary>
        [DataMember(Name = "redirect", EmitDefaultValue = true)]
        public UserAuthBaseUserAuthCustomizeLoginPageRedirect Redirect { get; set; }

        /// <summary>
        /// Gets or Sets SsoFailure
        /// </summary>
        [DataMember(Name = "sso_failure", EmitDefaultValue = true)]
        public UserAuthBaseUserAuthCustomizeLoginPageSsoFailure SsoFailure { get; set; }

        /// <summary>
        /// Gets or Sets PasswordUpdate
        /// </summary>
        [DataMember(Name = "password_update", EmitDefaultValue = true)]
        public UserAuthBaseUserAuthCustomizeLoginPagePasswordUpdate PasswordUpdate { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = true)]
        public UserAuthBaseUserAuthCustomizeLoginPageMessage Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserAuthBaseUserAuthCustomizeLoginPage {\n");
            sb.Append("  Preempt: ").Append(Preempt).Append("\n");
            sb.Append("  Authentication: ").Append(Authentication).Append("\n");
            sb.Append("  LoggedOut: ").Append(LoggedOut).Append("\n");
            sb.Append("  Full: ").Append(Full).Append("\n");
            sb.Append("  Disallowed: ").Append(Disallowed).Append("\n");
            sb.Append("  Lockout: ").Append(Lockout).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  GuestStatus: ").Append(GuestStatus).Append("\n");
            sb.Append("  AccessBarred: ").Append(AccessBarred).Append("\n");
            sb.Append("  AccessDown: ").Append(AccessDown).Append("\n");
            sb.Append("  AccessUnavailable: ").Append(AccessUnavailable).Append("\n");
            sb.Append("  Redirect: ").Append(Redirect).Append("\n");
            sb.Append("  SsoFailure: ").Append(SsoFailure).Append("\n");
            sb.Append("  PasswordUpdate: ").Append(PasswordUpdate).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserAuthBaseUserAuthCustomizeLoginPage);
        }

        /// <summary>
        /// Returns true if UserAuthBaseUserAuthCustomizeLoginPage instances are equal
        /// </summary>
        /// <param name="input">Instance of UserAuthBaseUserAuthCustomizeLoginPage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserAuthBaseUserAuthCustomizeLoginPage input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Preempt == input.Preempt ||
                    (this.Preempt != null &&
                    this.Preempt.Equals(input.Preempt))
                ) && 
                (
                    this.Authentication == input.Authentication ||
                    (this.Authentication != null &&
                    this.Authentication.Equals(input.Authentication))
                ) && 
                (
                    this.LoggedOut == input.LoggedOut ||
                    (this.LoggedOut != null &&
                    this.LoggedOut.Equals(input.LoggedOut))
                ) && 
                (
                    this.Full == input.Full ||
                    (this.Full != null &&
                    this.Full.Equals(input.Full))
                ) && 
                (
                    this.Disallowed == input.Disallowed ||
                    (this.Disallowed != null &&
                    this.Disallowed.Equals(input.Disallowed))
                ) && 
                (
                    this.Lockout == input.Lockout ||
                    (this.Lockout != null &&
                    this.Lockout.Equals(input.Lockout))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.GuestStatus == input.GuestStatus ||
                    (this.GuestStatus != null &&
                    this.GuestStatus.Equals(input.GuestStatus))
                ) && 
                (
                    this.AccessBarred == input.AccessBarred ||
                    (this.AccessBarred != null &&
                    this.AccessBarred.Equals(input.AccessBarred))
                ) && 
                (
                    this.AccessDown == input.AccessDown ||
                    (this.AccessDown != null &&
                    this.AccessDown.Equals(input.AccessDown))
                ) && 
                (
                    this.AccessUnavailable == input.AccessUnavailable ||
                    (this.AccessUnavailable != null &&
                    this.AccessUnavailable.Equals(input.AccessUnavailable))
                ) && 
                (
                    this.Redirect == input.Redirect ||
                    (this.Redirect != null &&
                    this.Redirect.Equals(input.Redirect))
                ) && 
                (
                    this.SsoFailure == input.SsoFailure ||
                    (this.SsoFailure != null &&
                    this.SsoFailure.Equals(input.SsoFailure))
                ) && 
                (
                    this.PasswordUpdate == input.PasswordUpdate ||
                    (this.PasswordUpdate != null &&
                    this.PasswordUpdate.Equals(input.PasswordUpdate))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Preempt != null)
                {
                    hashCode = (hashCode * 59) + this.Preempt.GetHashCode();
                }
                if (this.Authentication != null)
                {
                    hashCode = (hashCode * 59) + this.Authentication.GetHashCode();
                }
                if (this.LoggedOut != null)
                {
                    hashCode = (hashCode * 59) + this.LoggedOut.GetHashCode();
                }
                if (this.Full != null)
                {
                    hashCode = (hashCode * 59) + this.Full.GetHashCode();
                }
                if (this.Disallowed != null)
                {
                    hashCode = (hashCode * 59) + this.Disallowed.GetHashCode();
                }
                if (this.Lockout != null)
                {
                    hashCode = (hashCode * 59) + this.Lockout.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.GuestStatus != null)
                {
                    hashCode = (hashCode * 59) + this.GuestStatus.GetHashCode();
                }
                if (this.AccessBarred != null)
                {
                    hashCode = (hashCode * 59) + this.AccessBarred.GetHashCode();
                }
                if (this.AccessDown != null)
                {
                    hashCode = (hashCode * 59) + this.AccessDown.GetHashCode();
                }
                if (this.AccessUnavailable != null)
                {
                    hashCode = (hashCode * 59) + this.AccessUnavailable.GetHashCode();
                }
                if (this.Redirect != null)
                {
                    hashCode = (hashCode * 59) + this.Redirect.GetHashCode();
                }
                if (this.SsoFailure != null)
                {
                    hashCode = (hashCode * 59) + this.SsoFailure.GetHashCode();
                }
                if (this.PasswordUpdate != null)
                {
                    hashCode = (hashCode * 59) + this.PasswordUpdate.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
