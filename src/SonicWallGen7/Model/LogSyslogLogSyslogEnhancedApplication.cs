/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enable enhanced syslog application fields settings.
    /// </summary>
    [DataContract(Name = "log_syslog_log_syslog_enhanced_application")]
    public partial class LogSyslogLogSyslogEnhancedApplication : IEquatable<LogSyslogLogSyslogEnhancedApplication>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogSyslogLogSyslogEnhancedApplication" /> class.
        /// </summary>
        /// <param name="httpOperation">HTTP operation..</param>
        /// <param name="httpResult">HTTP result..</param>
        /// <param name="url">URL..</param>
        /// <param name="blockReason">Block reason..</param>
        /// <param name="app">Application..</param>
        /// <param name="gmsHeartbeat">GMS heart beat..</param>
        /// <param name="gmsUrl">GMS change URL..</param>
        public LogSyslogLogSyslogEnhancedApplication(bool httpOperation = default(bool), bool httpResult = default(bool), bool url = default(bool), bool blockReason = default(bool), bool app = default(bool), bool gmsHeartbeat = default(bool), bool gmsUrl = default(bool))
        {
            this.HttpOperation = httpOperation;
            this.HttpResult = httpResult;
            this.Url = url;
            this.BlockReason = blockReason;
            this.App = app;
            this.GmsHeartbeat = gmsHeartbeat;
            this.GmsUrl = gmsUrl;
        }

        /// <summary>
        /// HTTP operation.
        /// </summary>
        /// <value>HTTP operation.</value>
        [DataMember(Name = "http_operation", EmitDefaultValue = true)]
        public bool HttpOperation { get; set; }

        /// <summary>
        /// HTTP result.
        /// </summary>
        /// <value>HTTP result.</value>
        [DataMember(Name = "http_result", EmitDefaultValue = true)]
        public bool HttpResult { get; set; }

        /// <summary>
        /// URL.
        /// </summary>
        /// <value>URL.</value>
        [DataMember(Name = "url", EmitDefaultValue = true)]
        public bool Url { get; set; }

        /// <summary>
        /// Block reason.
        /// </summary>
        /// <value>Block reason.</value>
        [DataMember(Name = "block_reason", EmitDefaultValue = true)]
        public bool BlockReason { get; set; }

        /// <summary>
        /// Application.
        /// </summary>
        /// <value>Application.</value>
        [DataMember(Name = "app", EmitDefaultValue = true)]
        public bool App { get; set; }

        /// <summary>
        /// GMS heart beat.
        /// </summary>
        /// <value>GMS heart beat.</value>
        [DataMember(Name = "gms_heartbeat", EmitDefaultValue = true)]
        public bool GmsHeartbeat { get; set; }

        /// <summary>
        /// GMS change URL.
        /// </summary>
        /// <value>GMS change URL.</value>
        [DataMember(Name = "gms_url", EmitDefaultValue = true)]
        public bool GmsUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LogSyslogLogSyslogEnhancedApplication {\n");
            sb.Append("  HttpOperation: ").Append(HttpOperation).Append("\n");
            sb.Append("  HttpResult: ").Append(HttpResult).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  BlockReason: ").Append(BlockReason).Append("\n");
            sb.Append("  App: ").Append(App).Append("\n");
            sb.Append("  GmsHeartbeat: ").Append(GmsHeartbeat).Append("\n");
            sb.Append("  GmsUrl: ").Append(GmsUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogSyslogLogSyslogEnhancedApplication);
        }

        /// <summary>
        /// Returns true if LogSyslogLogSyslogEnhancedApplication instances are equal
        /// </summary>
        /// <param name="input">Instance of LogSyslogLogSyslogEnhancedApplication to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogSyslogLogSyslogEnhancedApplication input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.HttpOperation == input.HttpOperation ||
                    this.HttpOperation.Equals(input.HttpOperation)
                ) && 
                (
                    this.HttpResult == input.HttpResult ||
                    this.HttpResult.Equals(input.HttpResult)
                ) && 
                (
                    this.Url == input.Url ||
                    this.Url.Equals(input.Url)
                ) && 
                (
                    this.BlockReason == input.BlockReason ||
                    this.BlockReason.Equals(input.BlockReason)
                ) && 
                (
                    this.App == input.App ||
                    this.App.Equals(input.App)
                ) && 
                (
                    this.GmsHeartbeat == input.GmsHeartbeat ||
                    this.GmsHeartbeat.Equals(input.GmsHeartbeat)
                ) && 
                (
                    this.GmsUrl == input.GmsUrl ||
                    this.GmsUrl.Equals(input.GmsUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.HttpOperation.GetHashCode();
                hashCode = (hashCode * 59) + this.HttpResult.GetHashCode();
                hashCode = (hashCode * 59) + this.Url.GetHashCode();
                hashCode = (hashCode * 59) + this.BlockReason.GetHashCode();
                hashCode = (hashCode * 59) + this.App.GetHashCode();
                hashCode = (hashCode * 59) + this.GmsHeartbeat.GetHashCode();
                hashCode = (hashCode * 59) + this.GmsUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
