/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Administration settings.
    /// </summary>
    [DataContract(Name = "administration_administration")]
    public partial class AdministrationAdministration : IEquatable<AdministrationAdministration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdministrationAdministration" /> class.
        /// </summary>
        /// <param name="firewallName">Set the name for the firewall..</param>
        /// <param name="autoAppendSuffix">Config the administrator settings..</param>
        /// <param name="enforceHttpHostCheck">Config the administrator settings..</param>
        /// <param name="firewallDomainName">Set the domain name for the firewall. * Set to null to represent an unconfigured state..</param>
        /// <param name="admin">admin.</param>
        /// <param name="password">password.</param>
        /// <param name="idleLogoutTime">Set the allowed number of minutes of inactivity before administrators are logged out of the management interface..</param>
        /// <param name="userLockout">userLockout.</param>
        /// <param name="localUserLockout">Enable local administrator/user account lockout (uncheck for login IP address lockout)..</param>
        /// <param name="logWithoutLockout">Enable Log event only without lockout..</param>
        /// <param name="maxLoginAttemptsCli">Configure max login attempts through CLI..</param>
        /// <param name="ipv6">Enable IPv6..</param>
        /// <param name="cloudBackupEnable">Config the administrator settings..</param>
        /// <param name="interAdminMessaging">interAdminMessaging.</param>
        /// <param name="multipleAdmin">Enable multiple administrative roles..</param>
        /// <param name="enhancedAuditLogging">Enable enhanced audit logging..</param>
        /// <param name="webManagement">webManagement.</param>
        /// <param name="uuid">uuid.</param>
        /// <param name="dashboardAsStartingPage">Set to use dashboard as starting page..</param>
        /// <param name="tlsAndAbove">Enforce TLS 1.1 and above..</param>
        /// <param name="outOfBandManagement">Enable out of band management on management port..</param>
        /// <param name="languageOverride">languageOverride.</param>
        /// <param name="gmsManagement">gmsManagement.</param>
        /// <param name="sonicosApi">sonicosApi.</param>
        /// <param name="ssh">ssh.</param>
        /// <param name="httpPort">Set the HTTP management port..</param>
        /// <param name="httpsPort">Set the HTTPS management port..</param>
        /// <param name="forceThrough">forceThrough.</param>
        public AdministrationAdministration(string firewallName = default(string), bool autoAppendSuffix = default(bool), bool enforceHttpHostCheck = default(bool), string firewallDomainName = default(string), AdministrationAdministrationAdmin admin = default(AdministrationAdministrationAdmin), AdministrationAdministrationPassword password = default(AdministrationAdministrationPassword), decimal idleLogoutTime = default(decimal), AdministrationAdministrationUserLockout userLockout = default(AdministrationAdministrationUserLockout), bool localUserLockout = default(bool), bool logWithoutLockout = default(bool), decimal maxLoginAttemptsCli = default(decimal), bool ipv6 = default(bool), bool cloudBackupEnable = default(bool), AdministrationAdministrationInterAdminMessaging interAdminMessaging = default(AdministrationAdministrationInterAdminMessaging), bool multipleAdmin = default(bool), bool enhancedAuditLogging = default(bool), AdministrationAdministrationWebManagement webManagement = default(AdministrationAdministrationWebManagement), AdministrationAdministrationUuid uuid = default(AdministrationAdministrationUuid), bool dashboardAsStartingPage = default(bool), bool tlsAndAbove = default(bool), bool outOfBandManagement = default(bool), AdministrationAdministrationLanguageOverride languageOverride = default(AdministrationAdministrationLanguageOverride), AdministrationAdministrationGmsManagement gmsManagement = default(AdministrationAdministrationGmsManagement), AdministrationAdministrationSonicosApi sonicosApi = default(AdministrationAdministrationSonicosApi), AdministrationAdministrationSsh ssh = default(AdministrationAdministrationSsh), decimal httpPort = default(decimal), decimal httpsPort = default(decimal), AdministrationAdministrationForceThrough forceThrough = default(AdministrationAdministrationForceThrough))
        {
            this.FirewallName = firewallName;
            this.AutoAppendSuffix = autoAppendSuffix;
            this.EnforceHttpHostCheck = enforceHttpHostCheck;
            this.FirewallDomainName = firewallDomainName;
            this.Admin = admin;
            this.Password = password;
            this.IdleLogoutTime = idleLogoutTime;
            this.UserLockout = userLockout;
            this.LocalUserLockout = localUserLockout;
            this.LogWithoutLockout = logWithoutLockout;
            this.MaxLoginAttemptsCli = maxLoginAttemptsCli;
            this.Ipv6 = ipv6;
            this.CloudBackupEnable = cloudBackupEnable;
            this.InterAdminMessaging = interAdminMessaging;
            this.MultipleAdmin = multipleAdmin;
            this.EnhancedAuditLogging = enhancedAuditLogging;
            this.WebManagement = webManagement;
            this.Uuid = uuid;
            this.DashboardAsStartingPage = dashboardAsStartingPage;
            this.TlsAndAbove = tlsAndAbove;
            this.OutOfBandManagement = outOfBandManagement;
            this.LanguageOverride = languageOverride;
            this.GmsManagement = gmsManagement;
            this.SonicosApi = sonicosApi;
            this.Ssh = ssh;
            this.HttpPort = httpPort;
            this.HttpsPort = httpsPort;
            this.ForceThrough = forceThrough;
        }

        /// <summary>
        /// Set the name for the firewall.
        /// </summary>
        /// <value>Set the name for the firewall.</value>
        [DataMember(Name = "firewall_name", EmitDefaultValue = false)]
        public string FirewallName { get; set; }

        /// <summary>
        /// Config the administrator settings.
        /// </summary>
        /// <value>Config the administrator settings.</value>
        [DataMember(Name = "auto_append_suffix", EmitDefaultValue = true)]
        public bool AutoAppendSuffix { get; set; }

        /// <summary>
        /// Config the administrator settings.
        /// </summary>
        /// <value>Config the administrator settings.</value>
        [DataMember(Name = "enforce_http_host_check", EmitDefaultValue = true)]
        public bool EnforceHttpHostCheck { get; set; }

        /// <summary>
        /// Set the domain name for the firewall. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Set the domain name for the firewall. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "firewall_domain_name", EmitDefaultValue = true)]
        public string FirewallDomainName { get; set; }

        /// <summary>
        /// Gets or Sets Admin
        /// </summary>
        [DataMember(Name = "admin", EmitDefaultValue = false)]
        public AdministrationAdministrationAdmin Admin { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public AdministrationAdministrationPassword Password { get; set; }

        /// <summary>
        /// Set the allowed number of minutes of inactivity before administrators are logged out of the management interface.
        /// </summary>
        /// <value>Set the allowed number of minutes of inactivity before administrators are logged out of the management interface.</value>
        [DataMember(Name = "idle_logout_time", EmitDefaultValue = false)]
        public decimal IdleLogoutTime { get; set; }

        /// <summary>
        /// Gets or Sets UserLockout
        /// </summary>
        [DataMember(Name = "user_lockout", EmitDefaultValue = false)]
        public AdministrationAdministrationUserLockout UserLockout { get; set; }

        /// <summary>
        /// Enable local administrator/user account lockout (uncheck for login IP address lockout).
        /// </summary>
        /// <value>Enable local administrator/user account lockout (uncheck for login IP address lockout).</value>
        [DataMember(Name = "local_user_lockout", EmitDefaultValue = true)]
        public bool LocalUserLockout { get; set; }

        /// <summary>
        /// Enable Log event only without lockout.
        /// </summary>
        /// <value>Enable Log event only without lockout.</value>
        [DataMember(Name = "log_without_lockout", EmitDefaultValue = true)]
        public bool LogWithoutLockout { get; set; }

        /// <summary>
        /// Configure max login attempts through CLI.
        /// </summary>
        /// <value>Configure max login attempts through CLI.</value>
        [DataMember(Name = "max_login_attempts_cli", EmitDefaultValue = false)]
        public decimal MaxLoginAttemptsCli { get; set; }

        /// <summary>
        /// Enable IPv6.
        /// </summary>
        /// <value>Enable IPv6.</value>
        [DataMember(Name = "ipv6", EmitDefaultValue = true)]
        public bool Ipv6 { get; set; }

        /// <summary>
        /// Config the administrator settings.
        /// </summary>
        /// <value>Config the administrator settings.</value>
        [DataMember(Name = "cloud_backup_enable", EmitDefaultValue = true)]
        public bool CloudBackupEnable { get; set; }

        /// <summary>
        /// Gets or Sets InterAdminMessaging
        /// </summary>
        [DataMember(Name = "inter_admin_messaging", EmitDefaultValue = true)]
        public AdministrationAdministrationInterAdminMessaging InterAdminMessaging { get; set; }

        /// <summary>
        /// Enable multiple administrative roles.
        /// </summary>
        /// <value>Enable multiple administrative roles.</value>
        [DataMember(Name = "multiple_admin", EmitDefaultValue = true)]
        public bool MultipleAdmin { get; set; }

        /// <summary>
        /// Enable enhanced audit logging.
        /// </summary>
        /// <value>Enable enhanced audit logging.</value>
        [DataMember(Name = "enhanced_audit_logging", EmitDefaultValue = true)]
        public bool EnhancedAuditLogging { get; set; }

        /// <summary>
        /// Gets or Sets WebManagement
        /// </summary>
        [DataMember(Name = "web_management", EmitDefaultValue = false)]
        public AdministrationAdministrationWebManagement WebManagement { get; set; }

        /// <summary>
        /// Gets or Sets Uuid
        /// </summary>
        [DataMember(Name = "uuid", EmitDefaultValue = false)]
        public AdministrationAdministrationUuid Uuid { get; set; }

        /// <summary>
        /// Set to use dashboard as starting page.
        /// </summary>
        /// <value>Set to use dashboard as starting page.</value>
        [DataMember(Name = "dashboard_as_starting_page", EmitDefaultValue = true)]
        public bool DashboardAsStartingPage { get; set; }

        /// <summary>
        /// Enforce TLS 1.1 and above.
        /// </summary>
        /// <value>Enforce TLS 1.1 and above.</value>
        [DataMember(Name = "tls_and_above", EmitDefaultValue = true)]
        public bool TlsAndAbove { get; set; }

        /// <summary>
        /// Enable out of band management on management port.
        /// </summary>
        /// <value>Enable out of band management on management port.</value>
        [DataMember(Name = "out_of_band_management", EmitDefaultValue = true)]
        public bool OutOfBandManagement { get; set; }

        /// <summary>
        /// Gets or Sets LanguageOverride
        /// </summary>
        [DataMember(Name = "language_override", EmitDefaultValue = false)]
        public AdministrationAdministrationLanguageOverride LanguageOverride { get; set; }

        /// <summary>
        /// Gets or Sets GmsManagement
        /// </summary>
        [DataMember(Name = "gms_management", EmitDefaultValue = false)]
        public AdministrationAdministrationGmsManagement GmsManagement { get; set; }

        /// <summary>
        /// Gets or Sets SonicosApi
        /// </summary>
        [DataMember(Name = "sonicos_api", EmitDefaultValue = false)]
        public AdministrationAdministrationSonicosApi SonicosApi { get; set; }

        /// <summary>
        /// Gets or Sets Ssh
        /// </summary>
        [DataMember(Name = "ssh", EmitDefaultValue = false)]
        public AdministrationAdministrationSsh Ssh { get; set; }

        /// <summary>
        /// Set the HTTP management port.
        /// </summary>
        /// <value>Set the HTTP management port.</value>
        [DataMember(Name = "http_port", EmitDefaultValue = false)]
        public decimal HttpPort { get; set; }

        /// <summary>
        /// Set the HTTPS management port.
        /// </summary>
        /// <value>Set the HTTPS management port.</value>
        [DataMember(Name = "https_port", EmitDefaultValue = false)]
        public decimal HttpsPort { get; set; }

        /// <summary>
        /// Gets or Sets ForceThrough
        /// </summary>
        [DataMember(Name = "force_through", EmitDefaultValue = false)]
        public AdministrationAdministrationForceThrough ForceThrough { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdministrationAdministration {\n");
            sb.Append("  FirewallName: ").Append(FirewallName).Append("\n");
            sb.Append("  AutoAppendSuffix: ").Append(AutoAppendSuffix).Append("\n");
            sb.Append("  EnforceHttpHostCheck: ").Append(EnforceHttpHostCheck).Append("\n");
            sb.Append("  FirewallDomainName: ").Append(FirewallDomainName).Append("\n");
            sb.Append("  Admin: ").Append(Admin).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  IdleLogoutTime: ").Append(IdleLogoutTime).Append("\n");
            sb.Append("  UserLockout: ").Append(UserLockout).Append("\n");
            sb.Append("  LocalUserLockout: ").Append(LocalUserLockout).Append("\n");
            sb.Append("  LogWithoutLockout: ").Append(LogWithoutLockout).Append("\n");
            sb.Append("  MaxLoginAttemptsCli: ").Append(MaxLoginAttemptsCli).Append("\n");
            sb.Append("  Ipv6: ").Append(Ipv6).Append("\n");
            sb.Append("  CloudBackupEnable: ").Append(CloudBackupEnable).Append("\n");
            sb.Append("  InterAdminMessaging: ").Append(InterAdminMessaging).Append("\n");
            sb.Append("  MultipleAdmin: ").Append(MultipleAdmin).Append("\n");
            sb.Append("  EnhancedAuditLogging: ").Append(EnhancedAuditLogging).Append("\n");
            sb.Append("  WebManagement: ").Append(WebManagement).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  DashboardAsStartingPage: ").Append(DashboardAsStartingPage).Append("\n");
            sb.Append("  TlsAndAbove: ").Append(TlsAndAbove).Append("\n");
            sb.Append("  OutOfBandManagement: ").Append(OutOfBandManagement).Append("\n");
            sb.Append("  LanguageOverride: ").Append(LanguageOverride).Append("\n");
            sb.Append("  GmsManagement: ").Append(GmsManagement).Append("\n");
            sb.Append("  SonicosApi: ").Append(SonicosApi).Append("\n");
            sb.Append("  Ssh: ").Append(Ssh).Append("\n");
            sb.Append("  HttpPort: ").Append(HttpPort).Append("\n");
            sb.Append("  HttpsPort: ").Append(HttpsPort).Append("\n");
            sb.Append("  ForceThrough: ").Append(ForceThrough).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdministrationAdministration);
        }

        /// <summary>
        /// Returns true if AdministrationAdministration instances are equal
        /// </summary>
        /// <param name="input">Instance of AdministrationAdministration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdministrationAdministration input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FirewallName == input.FirewallName ||
                    (this.FirewallName != null &&
                    this.FirewallName.Equals(input.FirewallName))
                ) && 
                (
                    this.AutoAppendSuffix == input.AutoAppendSuffix ||
                    this.AutoAppendSuffix.Equals(input.AutoAppendSuffix)
                ) && 
                (
                    this.EnforceHttpHostCheck == input.EnforceHttpHostCheck ||
                    this.EnforceHttpHostCheck.Equals(input.EnforceHttpHostCheck)
                ) && 
                (
                    this.FirewallDomainName == input.FirewallDomainName ||
                    (this.FirewallDomainName != null &&
                    this.FirewallDomainName.Equals(input.FirewallDomainName))
                ) && 
                (
                    this.Admin == input.Admin ||
                    (this.Admin != null &&
                    this.Admin.Equals(input.Admin))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.IdleLogoutTime == input.IdleLogoutTime ||
                    this.IdleLogoutTime.Equals(input.IdleLogoutTime)
                ) && 
                (
                    this.UserLockout == input.UserLockout ||
                    (this.UserLockout != null &&
                    this.UserLockout.Equals(input.UserLockout))
                ) && 
                (
                    this.LocalUserLockout == input.LocalUserLockout ||
                    this.LocalUserLockout.Equals(input.LocalUserLockout)
                ) && 
                (
                    this.LogWithoutLockout == input.LogWithoutLockout ||
                    this.LogWithoutLockout.Equals(input.LogWithoutLockout)
                ) && 
                (
                    this.MaxLoginAttemptsCli == input.MaxLoginAttemptsCli ||
                    this.MaxLoginAttemptsCli.Equals(input.MaxLoginAttemptsCli)
                ) && 
                (
                    this.Ipv6 == input.Ipv6 ||
                    this.Ipv6.Equals(input.Ipv6)
                ) && 
                (
                    this.CloudBackupEnable == input.CloudBackupEnable ||
                    this.CloudBackupEnable.Equals(input.CloudBackupEnable)
                ) && 
                (
                    this.InterAdminMessaging == input.InterAdminMessaging ||
                    (this.InterAdminMessaging != null &&
                    this.InterAdminMessaging.Equals(input.InterAdminMessaging))
                ) && 
                (
                    this.MultipleAdmin == input.MultipleAdmin ||
                    this.MultipleAdmin.Equals(input.MultipleAdmin)
                ) && 
                (
                    this.EnhancedAuditLogging == input.EnhancedAuditLogging ||
                    this.EnhancedAuditLogging.Equals(input.EnhancedAuditLogging)
                ) && 
                (
                    this.WebManagement == input.WebManagement ||
                    (this.WebManagement != null &&
                    this.WebManagement.Equals(input.WebManagement))
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.DashboardAsStartingPage == input.DashboardAsStartingPage ||
                    this.DashboardAsStartingPage.Equals(input.DashboardAsStartingPage)
                ) && 
                (
                    this.TlsAndAbove == input.TlsAndAbove ||
                    this.TlsAndAbove.Equals(input.TlsAndAbove)
                ) && 
                (
                    this.OutOfBandManagement == input.OutOfBandManagement ||
                    this.OutOfBandManagement.Equals(input.OutOfBandManagement)
                ) && 
                (
                    this.LanguageOverride == input.LanguageOverride ||
                    (this.LanguageOverride != null &&
                    this.LanguageOverride.Equals(input.LanguageOverride))
                ) && 
                (
                    this.GmsManagement == input.GmsManagement ||
                    (this.GmsManagement != null &&
                    this.GmsManagement.Equals(input.GmsManagement))
                ) && 
                (
                    this.SonicosApi == input.SonicosApi ||
                    (this.SonicosApi != null &&
                    this.SonicosApi.Equals(input.SonicosApi))
                ) && 
                (
                    this.Ssh == input.Ssh ||
                    (this.Ssh != null &&
                    this.Ssh.Equals(input.Ssh))
                ) && 
                (
                    this.HttpPort == input.HttpPort ||
                    this.HttpPort.Equals(input.HttpPort)
                ) && 
                (
                    this.HttpsPort == input.HttpsPort ||
                    this.HttpsPort.Equals(input.HttpsPort)
                ) && 
                (
                    this.ForceThrough == input.ForceThrough ||
                    (this.ForceThrough != null &&
                    this.ForceThrough.Equals(input.ForceThrough))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FirewallName != null)
                {
                    hashCode = (hashCode * 59) + this.FirewallName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AutoAppendSuffix.GetHashCode();
                hashCode = (hashCode * 59) + this.EnforceHttpHostCheck.GetHashCode();
                if (this.FirewallDomainName != null)
                {
                    hashCode = (hashCode * 59) + this.FirewallDomainName.GetHashCode();
                }
                if (this.Admin != null)
                {
                    hashCode = (hashCode * 59) + this.Admin.GetHashCode();
                }
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IdleLogoutTime.GetHashCode();
                if (this.UserLockout != null)
                {
                    hashCode = (hashCode * 59) + this.UserLockout.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LocalUserLockout.GetHashCode();
                hashCode = (hashCode * 59) + this.LogWithoutLockout.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxLoginAttemptsCli.GetHashCode();
                hashCode = (hashCode * 59) + this.Ipv6.GetHashCode();
                hashCode = (hashCode * 59) + this.CloudBackupEnable.GetHashCode();
                if (this.InterAdminMessaging != null)
                {
                    hashCode = (hashCode * 59) + this.InterAdminMessaging.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MultipleAdmin.GetHashCode();
                hashCode = (hashCode * 59) + this.EnhancedAuditLogging.GetHashCode();
                if (this.WebManagement != null)
                {
                    hashCode = (hashCode * 59) + this.WebManagement.GetHashCode();
                }
                if (this.Uuid != null)
                {
                    hashCode = (hashCode * 59) + this.Uuid.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DashboardAsStartingPage.GetHashCode();
                hashCode = (hashCode * 59) + this.TlsAndAbove.GetHashCode();
                hashCode = (hashCode * 59) + this.OutOfBandManagement.GetHashCode();
                if (this.LanguageOverride != null)
                {
                    hashCode = (hashCode * 59) + this.LanguageOverride.GetHashCode();
                }
                if (this.GmsManagement != null)
                {
                    hashCode = (hashCode * 59) + this.GmsManagement.GetHashCode();
                }
                if (this.SonicosApi != null)
                {
                    hashCode = (hashCode * 59) + this.SonicosApi.GetHashCode();
                }
                if (this.Ssh != null)
                {
                    hashCode = (hashCode * 59) + this.Ssh.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HttpPort.GetHashCode();
                hashCode = (hashCode * 59) + this.HttpsPort.GetHashCode();
                if (this.ForceThrough != null)
                {
                    hashCode = (hashCode * 59) + this.ForceThrough.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
