/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure advanced diag FQDN dynamic address object settings.
    /// </summary>
    [DataContract(Name = "diag_advanced_fqdn_dyn_addr_obj_diag_advanced_fqdn_dynamic_address_object")]
    public partial class DiagAdvancedFqdnDynAddrObjDiagAdvancedFqdnDynamicAddressObject : IEquatable<DiagAdvancedFqdnDynAddrObjDiagAdvancedFqdnDynamicAddressObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagAdvancedFqdnDynAddrObjDiagAdvancedFqdnDynamicAddressObject" /> class.
        /// </summary>
        /// <param name="cacheSonicDnsReply">Enable FQDN object only cache SonicDns reply from sanctioned server..</param>
        /// <param name="offsetForFqdnObjects">Offset for FQDN objects(seconds)..</param>
        /// <param name="refreshSubDomains">Enable refresh sub domains of wildcard FQDN dynamic address objects..</param>
        /// <param name="expiredHostDeletion">Enable donot delete expired hosts of an FQDN network object with active connections..</param>
        /// <param name="retainExpiredFqdnHosts">Enable retain expired FQDN hosts until a successfull SonicDns resolutions occurs..</param>
        /// <param name="unlimitedQueries">Enable unlimited queries to resolve custom FQDN obects..</param>
        /// <param name="stopSonicDnsQueries">Enable stop SonicDns queries for default FQDN objects after maximumthreshold..</param>
        /// <param name="maxRetryThreshold">FQDN maximum retry threshold before stopping query..</param>
        /// <param name="minAllowedTtl">Minimum allowed ttl for FQDN objects..</param>
        public DiagAdvancedFqdnDynAddrObjDiagAdvancedFqdnDynamicAddressObject(bool cacheSonicDnsReply = default(bool), decimal offsetForFqdnObjects = default(decimal), bool refreshSubDomains = default(bool), bool expiredHostDeletion = default(bool), bool retainExpiredFqdnHosts = default(bool), bool unlimitedQueries = default(bool), bool stopSonicDnsQueries = default(bool), decimal maxRetryThreshold = default(decimal), decimal minAllowedTtl = default(decimal))
        {
            this.CacheSonicDnsReply = cacheSonicDnsReply;
            this.OffsetForFqdnObjects = offsetForFqdnObjects;
            this.RefreshSubDomains = refreshSubDomains;
            this.ExpiredHostDeletion = expiredHostDeletion;
            this.RetainExpiredFqdnHosts = retainExpiredFqdnHosts;
            this.UnlimitedQueries = unlimitedQueries;
            this.StopSonicDnsQueries = stopSonicDnsQueries;
            this.MaxRetryThreshold = maxRetryThreshold;
            this.MinAllowedTtl = minAllowedTtl;
        }

        /// <summary>
        /// Enable FQDN object only cache SonicDns reply from sanctioned server.
        /// </summary>
        /// <value>Enable FQDN object only cache SonicDns reply from sanctioned server.</value>
        [DataMember(Name = "cache_SonicDns_reply", EmitDefaultValue = true)]
        public bool CacheSonicDnsReply { get; set; }

        /// <summary>
        /// Offset for FQDN objects(seconds).
        /// </summary>
        /// <value>Offset for FQDN objects(seconds).</value>
        [DataMember(Name = "offset_for_fqdn_objects", EmitDefaultValue = false)]
        public decimal OffsetForFqdnObjects { get; set; }

        /// <summary>
        /// Enable refresh sub domains of wildcard FQDN dynamic address objects.
        /// </summary>
        /// <value>Enable refresh sub domains of wildcard FQDN dynamic address objects.</value>
        [DataMember(Name = "refresh_sub_domains", EmitDefaultValue = true)]
        public bool RefreshSubDomains { get; set; }

        /// <summary>
        /// Enable donot delete expired hosts of an FQDN network object with active connections.
        /// </summary>
        /// <value>Enable donot delete expired hosts of an FQDN network object with active connections.</value>
        [DataMember(Name = "expired_host_deletion", EmitDefaultValue = true)]
        public bool ExpiredHostDeletion { get; set; }

        /// <summary>
        /// Enable retain expired FQDN hosts until a successfull SonicDns resolutions occurs.
        /// </summary>
        /// <value>Enable retain expired FQDN hosts until a successfull SonicDns resolutions occurs.</value>
        [DataMember(Name = "retain_expired_fqdn_hosts", EmitDefaultValue = true)]
        public bool RetainExpiredFqdnHosts { get; set; }

        /// <summary>
        /// Enable unlimited queries to resolve custom FQDN obects.
        /// </summary>
        /// <value>Enable unlimited queries to resolve custom FQDN obects.</value>
        [DataMember(Name = "unlimited_queries", EmitDefaultValue = true)]
        public bool UnlimitedQueries { get; set; }

        /// <summary>
        /// Enable stop SonicDns queries for default FQDN objects after maximumthreshold.
        /// </summary>
        /// <value>Enable stop SonicDns queries for default FQDN objects after maximumthreshold.</value>
        [DataMember(Name = "stop_SonicDns_queries", EmitDefaultValue = true)]
        public bool StopSonicDnsQueries { get; set; }

        /// <summary>
        /// FQDN maximum retry threshold before stopping query.
        /// </summary>
        /// <value>FQDN maximum retry threshold before stopping query.</value>
        [DataMember(Name = "max_retry_threshold", EmitDefaultValue = false)]
        public decimal MaxRetryThreshold { get; set; }

        /// <summary>
        /// Minimum allowed ttl for FQDN objects.
        /// </summary>
        /// <value>Minimum allowed ttl for FQDN objects.</value>
        [DataMember(Name = "min_allowed_ttl", EmitDefaultValue = false)]
        public decimal MinAllowedTtl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DiagAdvancedFqdnDynAddrObjDiagAdvancedFqdnDynamicAddressObject {\n");
            sb.Append("  CacheSonicDnsReply: ").Append(CacheSonicDnsReply).Append("\n");
            sb.Append("  OffsetForFqdnObjects: ").Append(OffsetForFqdnObjects).Append("\n");
            sb.Append("  RefreshSubDomains: ").Append(RefreshSubDomains).Append("\n");
            sb.Append("  ExpiredHostDeletion: ").Append(ExpiredHostDeletion).Append("\n");
            sb.Append("  RetainExpiredFqdnHosts: ").Append(RetainExpiredFqdnHosts).Append("\n");
            sb.Append("  UnlimitedQueries: ").Append(UnlimitedQueries).Append("\n");
            sb.Append("  StopSonicDnsQueries: ").Append(StopSonicDnsQueries).Append("\n");
            sb.Append("  MaxRetryThreshold: ").Append(MaxRetryThreshold).Append("\n");
            sb.Append("  MinAllowedTtl: ").Append(MinAllowedTtl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiagAdvancedFqdnDynAddrObjDiagAdvancedFqdnDynamicAddressObject);
        }

        /// <summary>
        /// Returns true if DiagAdvancedFqdnDynAddrObjDiagAdvancedFqdnDynamicAddressObject instances are equal
        /// </summary>
        /// <param name="input">Instance of DiagAdvancedFqdnDynAddrObjDiagAdvancedFqdnDynamicAddressObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiagAdvancedFqdnDynAddrObjDiagAdvancedFqdnDynamicAddressObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CacheSonicDnsReply == input.CacheSonicDnsReply ||
                    this.CacheSonicDnsReply.Equals(input.CacheSonicDnsReply)
                ) && 
                (
                    this.OffsetForFqdnObjects == input.OffsetForFqdnObjects ||
                    this.OffsetForFqdnObjects.Equals(input.OffsetForFqdnObjects)
                ) && 
                (
                    this.RefreshSubDomains == input.RefreshSubDomains ||
                    this.RefreshSubDomains.Equals(input.RefreshSubDomains)
                ) && 
                (
                    this.ExpiredHostDeletion == input.ExpiredHostDeletion ||
                    this.ExpiredHostDeletion.Equals(input.ExpiredHostDeletion)
                ) && 
                (
                    this.RetainExpiredFqdnHosts == input.RetainExpiredFqdnHosts ||
                    this.RetainExpiredFqdnHosts.Equals(input.RetainExpiredFqdnHosts)
                ) && 
                (
                    this.UnlimitedQueries == input.UnlimitedQueries ||
                    this.UnlimitedQueries.Equals(input.UnlimitedQueries)
                ) && 
                (
                    this.StopSonicDnsQueries == input.StopSonicDnsQueries ||
                    this.StopSonicDnsQueries.Equals(input.StopSonicDnsQueries)
                ) && 
                (
                    this.MaxRetryThreshold == input.MaxRetryThreshold ||
                    this.MaxRetryThreshold.Equals(input.MaxRetryThreshold)
                ) && 
                (
                    this.MinAllowedTtl == input.MinAllowedTtl ||
                    this.MinAllowedTtl.Equals(input.MinAllowedTtl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CacheSonicDnsReply.GetHashCode();
                hashCode = (hashCode * 59) + this.OffsetForFqdnObjects.GetHashCode();
                hashCode = (hashCode * 59) + this.RefreshSubDomains.GetHashCode();
                hashCode = (hashCode * 59) + this.ExpiredHostDeletion.GetHashCode();
                hashCode = (hashCode * 59) + this.RetainExpiredFqdnHosts.GetHashCode();
                hashCode = (hashCode * 59) + this.UnlimitedQueries.GetHashCode();
                hashCode = (hashCode * 59) + this.StopSonicDnsQueries.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxRetryThreshold.GetHashCode();
                hashCode = (hashCode * 59) + this.MinAllowedTtl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
