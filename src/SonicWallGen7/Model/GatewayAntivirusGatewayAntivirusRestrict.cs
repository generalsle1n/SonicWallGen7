/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enable restriction.
    /// </summary>
    [DataContract(Name = "gateway_antivirus_gateway_antivirus_restrict")]
    public partial class GatewayAntivirusGatewayAntivirusRestrict : IEquatable<GatewayAntivirusGatewayAntivirusRestrict>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayAntivirusGatewayAntivirusRestrict" /> class.
        /// </summary>
        /// <param name="passwordProtectedZip">passwordProtectedZip.</param>
        /// <param name="msOfficeMacros">msOfficeMacros.</param>
        /// <param name="packedExecutables">packedExecutables.</param>
        public GatewayAntivirusGatewayAntivirusRestrict(GatewayAntivirusGatewayAntivirusRestrictPasswordProtectedZip passwordProtectedZip = default(GatewayAntivirusGatewayAntivirusRestrictPasswordProtectedZip), GatewayAntivirusGatewayAntivirusRestrictMsOfficeMacros msOfficeMacros = default(GatewayAntivirusGatewayAntivirusRestrictMsOfficeMacros), GatewayAntivirusGatewayAntivirusRestrictPackedExecutables packedExecutables = default(GatewayAntivirusGatewayAntivirusRestrictPackedExecutables))
        {
            this.PasswordProtectedZip = passwordProtectedZip;
            this.MsOfficeMacros = msOfficeMacros;
            this.PackedExecutables = packedExecutables;
        }

        /// <summary>
        /// Gets or Sets PasswordProtectedZip
        /// </summary>
        [DataMember(Name = "password_protected_zip", EmitDefaultValue = false)]
        public GatewayAntivirusGatewayAntivirusRestrictPasswordProtectedZip PasswordProtectedZip { get; set; }

        /// <summary>
        /// Gets or Sets MsOfficeMacros
        /// </summary>
        [DataMember(Name = "ms_office_macros", EmitDefaultValue = false)]
        public GatewayAntivirusGatewayAntivirusRestrictMsOfficeMacros MsOfficeMacros { get; set; }

        /// <summary>
        /// Gets or Sets PackedExecutables
        /// </summary>
        [DataMember(Name = "packed_executables", EmitDefaultValue = false)]
        public GatewayAntivirusGatewayAntivirusRestrictPackedExecutables PackedExecutables { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GatewayAntivirusGatewayAntivirusRestrict {\n");
            sb.Append("  PasswordProtectedZip: ").Append(PasswordProtectedZip).Append("\n");
            sb.Append("  MsOfficeMacros: ").Append(MsOfficeMacros).Append("\n");
            sb.Append("  PackedExecutables: ").Append(PackedExecutables).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GatewayAntivirusGatewayAntivirusRestrict);
        }

        /// <summary>
        /// Returns true if GatewayAntivirusGatewayAntivirusRestrict instances are equal
        /// </summary>
        /// <param name="input">Instance of GatewayAntivirusGatewayAntivirusRestrict to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GatewayAntivirusGatewayAntivirusRestrict input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PasswordProtectedZip == input.PasswordProtectedZip ||
                    (this.PasswordProtectedZip != null &&
                    this.PasswordProtectedZip.Equals(input.PasswordProtectedZip))
                ) && 
                (
                    this.MsOfficeMacros == input.MsOfficeMacros ||
                    (this.MsOfficeMacros != null &&
                    this.MsOfficeMacros.Equals(input.MsOfficeMacros))
                ) && 
                (
                    this.PackedExecutables == input.PackedExecutables ||
                    (this.PackedExecutables != null &&
                    this.PackedExecutables.Equals(input.PackedExecutables))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PasswordProtectedZip != null)
                {
                    hashCode = (hashCode * 59) + this.PasswordProtectedZip.GetHashCode();
                }
                if (this.MsOfficeMacros != null)
                {
                    hashCode = (hashCode * 59) + this.MsOfficeMacros.GetHashCode();
                }
                if (this.PackedExecutables != null)
                {
                    hashCode = (hashCode * 59) + this.PackedExecutables.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
