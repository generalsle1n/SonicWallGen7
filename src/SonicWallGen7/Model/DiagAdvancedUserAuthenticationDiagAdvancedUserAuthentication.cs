/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure advanced diag user authentication settings.
    /// </summary>
    [DataContract(Name = "diag_advanced_user_authentication_diag_advanced_user_authentication")]
    public partial class DiagAdvancedUserAuthenticationDiagAdvancedUserAuthentication : IEquatable<DiagAdvancedUserAuthenticationDiagAdvancedUserAuthentication>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagAdvancedUserAuthenticationDiagAdvancedUserAuthentication" /> class.
        /// </summary>
        /// <param name="postAuthenticationRedirectUrl">Set post authentication user redirect URL..</param>
        /// <param name="logAllSsoAttempts">logAllSsoAttempts.</param>
        /// <param name="userIp">userIp.</param>
        /// <param name="includeSsoBypass">Enable inclusion of SSO bypass events in the SSO audit trail log..</param>
        /// <param name="includeSsoPolling">Enable inclusion of polling events in the SSO audit trail log..</param>
        /// <param name="includeAdditionalNonInitiation">Enable inclusion of additional non-initiation of SSO in the SSO audit trail log..</param>
        /// <param name="ssoAgentVersionNegotiation">Set version of SSO agent protocol to try to negotiate with..</param>
        /// <param name="redirectHttps">Enable redirecting unauthenticated HTTPS connections to the login page..</param>
        /// <param name="httpsRedirectPort">Set the internal NAT TCP port number for HTTPS redirect..</param>
        public DiagAdvancedUserAuthenticationDiagAdvancedUserAuthentication(string postAuthenticationRedirectUrl = default(string), DiagAdvancedUserAuthenticationDiagAdvancedUserAuthenticationLogAllSsoAttempts logAllSsoAttempts = default(DiagAdvancedUserAuthenticationDiagAdvancedUserAuthenticationLogAllSsoAttempts), DiagAdvancedUserAuthenticationDiagAdvancedUserAuthenticationUserIp userIp = default(DiagAdvancedUserAuthenticationDiagAdvancedUserAuthenticationUserIp), bool includeSsoBypass = default(bool), bool includeSsoPolling = default(bool), bool includeAdditionalNonInitiation = default(bool), decimal ssoAgentVersionNegotiation = default(decimal), bool redirectHttps = default(bool), decimal httpsRedirectPort = default(decimal))
        {
            this.PostAuthenticationRedirectUrl = postAuthenticationRedirectUrl;
            this.LogAllSsoAttempts = logAllSsoAttempts;
            this.UserIp = userIp;
            this.IncludeSsoBypass = includeSsoBypass;
            this.IncludeSsoPolling = includeSsoPolling;
            this.IncludeAdditionalNonInitiation = includeAdditionalNonInitiation;
            this.SsoAgentVersionNegotiation = ssoAgentVersionNegotiation;
            this.RedirectHttps = redirectHttps;
            this.HttpsRedirectPort = httpsRedirectPort;
        }

        /// <summary>
        /// Set post authentication user redirect URL.
        /// </summary>
        /// <value>Set post authentication user redirect URL.</value>
        [DataMember(Name = "post_authentication_redirect_url", EmitDefaultValue = false)]
        public string PostAuthenticationRedirectUrl { get; set; }

        /// <summary>
        /// Gets or Sets LogAllSsoAttempts
        /// </summary>
        [DataMember(Name = "log_all_sso_attempts", EmitDefaultValue = false)]
        public DiagAdvancedUserAuthenticationDiagAdvancedUserAuthenticationLogAllSsoAttempts LogAllSsoAttempts { get; set; }

        /// <summary>
        /// Gets or Sets UserIp
        /// </summary>
        [DataMember(Name = "user_ip", EmitDefaultValue = false)]
        public DiagAdvancedUserAuthenticationDiagAdvancedUserAuthenticationUserIp UserIp { get; set; }

        /// <summary>
        /// Enable inclusion of SSO bypass events in the SSO audit trail log.
        /// </summary>
        /// <value>Enable inclusion of SSO bypass events in the SSO audit trail log.</value>
        [DataMember(Name = "include_sso_bypass", EmitDefaultValue = true)]
        public bool IncludeSsoBypass { get; set; }

        /// <summary>
        /// Enable inclusion of polling events in the SSO audit trail log.
        /// </summary>
        /// <value>Enable inclusion of polling events in the SSO audit trail log.</value>
        [DataMember(Name = "include_sso_polling", EmitDefaultValue = true)]
        public bool IncludeSsoPolling { get; set; }

        /// <summary>
        /// Enable inclusion of additional non-initiation of SSO in the SSO audit trail log.
        /// </summary>
        /// <value>Enable inclusion of additional non-initiation of SSO in the SSO audit trail log.</value>
        [DataMember(Name = "include_additional_non_initiation", EmitDefaultValue = true)]
        public bool IncludeAdditionalNonInitiation { get; set; }

        /// <summary>
        /// Set version of SSO agent protocol to try to negotiate with.
        /// </summary>
        /// <value>Set version of SSO agent protocol to try to negotiate with.</value>
        [DataMember(Name = "sso_agent_version_negotiation", EmitDefaultValue = false)]
        public decimal SsoAgentVersionNegotiation { get; set; }

        /// <summary>
        /// Enable redirecting unauthenticated HTTPS connections to the login page.
        /// </summary>
        /// <value>Enable redirecting unauthenticated HTTPS connections to the login page.</value>
        [DataMember(Name = "redirect_https", EmitDefaultValue = true)]
        public bool RedirectHttps { get; set; }

        /// <summary>
        /// Set the internal NAT TCP port number for HTTPS redirect.
        /// </summary>
        /// <value>Set the internal NAT TCP port number for HTTPS redirect.</value>
        [DataMember(Name = "https_redirect_port", EmitDefaultValue = false)]
        public decimal HttpsRedirectPort { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DiagAdvancedUserAuthenticationDiagAdvancedUserAuthentication {\n");
            sb.Append("  PostAuthenticationRedirectUrl: ").Append(PostAuthenticationRedirectUrl).Append("\n");
            sb.Append("  LogAllSsoAttempts: ").Append(LogAllSsoAttempts).Append("\n");
            sb.Append("  UserIp: ").Append(UserIp).Append("\n");
            sb.Append("  IncludeSsoBypass: ").Append(IncludeSsoBypass).Append("\n");
            sb.Append("  IncludeSsoPolling: ").Append(IncludeSsoPolling).Append("\n");
            sb.Append("  IncludeAdditionalNonInitiation: ").Append(IncludeAdditionalNonInitiation).Append("\n");
            sb.Append("  SsoAgentVersionNegotiation: ").Append(SsoAgentVersionNegotiation).Append("\n");
            sb.Append("  RedirectHttps: ").Append(RedirectHttps).Append("\n");
            sb.Append("  HttpsRedirectPort: ").Append(HttpsRedirectPort).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiagAdvancedUserAuthenticationDiagAdvancedUserAuthentication);
        }

        /// <summary>
        /// Returns true if DiagAdvancedUserAuthenticationDiagAdvancedUserAuthentication instances are equal
        /// </summary>
        /// <param name="input">Instance of DiagAdvancedUserAuthenticationDiagAdvancedUserAuthentication to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiagAdvancedUserAuthenticationDiagAdvancedUserAuthentication input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PostAuthenticationRedirectUrl == input.PostAuthenticationRedirectUrl ||
                    (this.PostAuthenticationRedirectUrl != null &&
                    this.PostAuthenticationRedirectUrl.Equals(input.PostAuthenticationRedirectUrl))
                ) && 
                (
                    this.LogAllSsoAttempts == input.LogAllSsoAttempts ||
                    (this.LogAllSsoAttempts != null &&
                    this.LogAllSsoAttempts.Equals(input.LogAllSsoAttempts))
                ) && 
                (
                    this.UserIp == input.UserIp ||
                    (this.UserIp != null &&
                    this.UserIp.Equals(input.UserIp))
                ) && 
                (
                    this.IncludeSsoBypass == input.IncludeSsoBypass ||
                    this.IncludeSsoBypass.Equals(input.IncludeSsoBypass)
                ) && 
                (
                    this.IncludeSsoPolling == input.IncludeSsoPolling ||
                    this.IncludeSsoPolling.Equals(input.IncludeSsoPolling)
                ) && 
                (
                    this.IncludeAdditionalNonInitiation == input.IncludeAdditionalNonInitiation ||
                    this.IncludeAdditionalNonInitiation.Equals(input.IncludeAdditionalNonInitiation)
                ) && 
                (
                    this.SsoAgentVersionNegotiation == input.SsoAgentVersionNegotiation ||
                    this.SsoAgentVersionNegotiation.Equals(input.SsoAgentVersionNegotiation)
                ) && 
                (
                    this.RedirectHttps == input.RedirectHttps ||
                    this.RedirectHttps.Equals(input.RedirectHttps)
                ) && 
                (
                    this.HttpsRedirectPort == input.HttpsRedirectPort ||
                    this.HttpsRedirectPort.Equals(input.HttpsRedirectPort)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PostAuthenticationRedirectUrl != null)
                {
                    hashCode = (hashCode * 59) + this.PostAuthenticationRedirectUrl.GetHashCode();
                }
                if (this.LogAllSsoAttempts != null)
                {
                    hashCode = (hashCode * 59) + this.LogAllSsoAttempts.GetHashCode();
                }
                if (this.UserIp != null)
                {
                    hashCode = (hashCode * 59) + this.UserIp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IncludeSsoBypass.GetHashCode();
                hashCode = (hashCode * 59) + this.IncludeSsoPolling.GetHashCode();
                hashCode = (hashCode * 59) + this.IncludeAdditionalNonInitiation.GetHashCode();
                hashCode = (hashCode * 59) + this.SsoAgentVersionNegotiation.GetHashCode();
                hashCode = (hashCode * 59) + this.RedirectHttps.GetHashCode();
                hashCode = (hashCode * 59) + this.HttpsRedirectPort.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
