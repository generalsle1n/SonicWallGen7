/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Bandwidth object configuration.
    /// </summary>
    [DataContract(Name = "bandwidth_object")]
    public partial class BandwidthObject : IEquatable<BandwidthObject>, IValidatableObject
    {
        /// <summary>
        /// Set the bandwidth object traffic priority.
        /// </summary>
        /// <value>Set the bandwidth object traffic priority.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PriorityEnum
        {
            /// <summary>
            /// Enum Realtime for value: realtime
            /// </summary>
            [EnumMember(Value = "realtime")]
            Realtime = 1,

            /// <summary>
            /// Enum Highest for value: highest
            /// </summary>
            [EnumMember(Value = "highest")]
            Highest = 2,

            /// <summary>
            /// Enum High for value: high
            /// </summary>
            [EnumMember(Value = "high")]
            High = 3,

            /// <summary>
            /// Enum MediumHigh for value: medium-high
            /// </summary>
            [EnumMember(Value = "medium-high")]
            MediumHigh = 4,

            /// <summary>
            /// Enum Medium for value: medium
            /// </summary>
            [EnumMember(Value = "medium")]
            Medium = 5,

            /// <summary>
            /// Enum MediumLow for value: medium-low
            /// </summary>
            [EnumMember(Value = "medium-low")]
            MediumLow = 6,

            /// <summary>
            /// Enum Low for value: low
            /// </summary>
            [EnumMember(Value = "low")]
            Low = 7,

            /// <summary>
            /// Enum Lowest for value: lowest
            /// </summary>
            [EnumMember(Value = "lowest")]
            Lowest = 8
        }


        /// <summary>
        /// Set the bandwidth object traffic priority.
        /// </summary>
        /// <value>Set the bandwidth object traffic priority.</value>
        [DataMember(Name = "priority", EmitDefaultValue = false)]
        public PriorityEnum? Priority { get; set; }
        /// <summary>
        /// Set the bandwidth object violation action.
        /// </summary>
        /// <value>Set the bandwidth object violation action.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            /// <summary>
            /// Enum Delay for value: delay
            /// </summary>
            [EnumMember(Value = "delay")]
            Delay = 1,

            /// <summary>
            /// Enum Drop for value: drop
            /// </summary>
            [EnumMember(Value = "drop")]
            Drop = 2
        }


        /// <summary>
        /// Set the bandwidth object violation action.
        /// </summary>
        /// <value>Set the bandwidth object violation action.</value>
        [DataMember(Name = "action", EmitDefaultValue = false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BandwidthObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BandwidthObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BandwidthObject" /> class.
        /// </summary>
        /// <param name="name">Bandwidth object name. (required).</param>
        /// <param name="guaranteed">guaranteed.</param>
        /// <param name="maximum">maximum.</param>
        /// <param name="priority">Set the bandwidth object traffic priority..</param>
        /// <param name="action">Set the bandwidth object violation action..</param>
        /// <param name="comment">Set comment for the bandwidth object..</param>
        /// <param name="perIpManagement">perIpManagement.</param>
        public BandwidthObject(string name = default(string), BandwidthObjectGuaranteed guaranteed = default(BandwidthObjectGuaranteed), BandwidthObjectMaximum maximum = default(BandwidthObjectMaximum), PriorityEnum? priority = default(PriorityEnum?), ActionEnum? action = default(ActionEnum?), string comment = default(string), BandwidthObjectPerIpManagement perIpManagement = default(BandwidthObjectPerIpManagement))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for BandwidthObject and cannot be null");
            }
            this.Name = name;
            this.Guaranteed = guaranteed;
            this.Maximum = maximum;
            this.Priority = priority;
            this.Action = action;
            this.Comment = comment;
            this.PerIpManagement = perIpManagement;
        }

        /// <summary>
        /// Bandwidth object name.
        /// </summary>
        /// <value>Bandwidth object name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Guaranteed
        /// </summary>
        [DataMember(Name = "guaranteed", EmitDefaultValue = false)]
        public BandwidthObjectGuaranteed Guaranteed { get; set; }

        /// <summary>
        /// Gets or Sets Maximum
        /// </summary>
        [DataMember(Name = "maximum", EmitDefaultValue = false)]
        public BandwidthObjectMaximum Maximum { get; set; }

        /// <summary>
        /// Set comment for the bandwidth object.
        /// </summary>
        /// <value>Set comment for the bandwidth object.</value>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets PerIpManagement
        /// </summary>
        [DataMember(Name = "per_ip_management", EmitDefaultValue = false)]
        public BandwidthObjectPerIpManagement PerIpManagement { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BandwidthObject {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Guaranteed: ").Append(Guaranteed).Append("\n");
            sb.Append("  Maximum: ").Append(Maximum).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  PerIpManagement: ").Append(PerIpManagement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BandwidthObject);
        }

        /// <summary>
        /// Returns true if BandwidthObject instances are equal
        /// </summary>
        /// <param name="input">Instance of BandwidthObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BandwidthObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Guaranteed == input.Guaranteed ||
                    (this.Guaranteed != null &&
                    this.Guaranteed.Equals(input.Guaranteed))
                ) && 
                (
                    this.Maximum == input.Maximum ||
                    (this.Maximum != null &&
                    this.Maximum.Equals(input.Maximum))
                ) && 
                (
                    this.Priority == input.Priority ||
                    this.Priority.Equals(input.Priority)
                ) && 
                (
                    this.Action == input.Action ||
                    this.Action.Equals(input.Action)
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.PerIpManagement == input.PerIpManagement ||
                    (this.PerIpManagement != null &&
                    this.PerIpManagement.Equals(input.PerIpManagement))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Guaranteed != null)
                {
                    hashCode = (hashCode * 59) + this.Guaranteed.GetHashCode();
                }
                if (this.Maximum != null)
                {
                    hashCode = (hashCode * 59) + this.Maximum.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Priority.GetHashCode();
                hashCode = (hashCode * 59) + this.Action.GetHashCode();
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                if (this.PerIpManagement != null)
                {
                    hashCode = (hashCode * 59) + this.PerIpManagement.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
