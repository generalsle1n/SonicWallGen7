/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Set all dns search list.
    /// </summary>
    [DataContract(Name = "ssl_vpn_device_profile_client_dns")]
    public partial class SslVpnDeviceProfileClientDns : IEquatable<SslVpnDeviceProfileClientDns>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SslVpnDeviceProfileClientDns" /> class.
        /// </summary>
        /// <param name="primary">primary.</param>
        /// <param name="secondary">secondary.</param>
        /// <param name="searchLists">Set all dns dns search list..</param>
        /// <param name="searchList">Add a dns to the dns search list..</param>
        public SslVpnDeviceProfileClientDns(SslVpnDeviceProfileClientDnsPrimary primary = default(SslVpnDeviceProfileClientDnsPrimary), SslVpnDeviceProfileClientDnsSecondary secondary = default(SslVpnDeviceProfileClientDnsSecondary), bool searchLists = default(bool), List<SslVpnDeviceProfileClientDnsSearchListInner> searchList = default(List<SslVpnDeviceProfileClientDnsSearchListInner>))
        {
            this.Primary = primary;
            this.Secondary = secondary;
            this.SearchLists = searchLists;
            this.SearchList = searchList;
        }

        /// <summary>
        /// Gets or Sets Primary
        /// </summary>
        [DataMember(Name = "primary", EmitDefaultValue = true)]
        public SslVpnDeviceProfileClientDnsPrimary Primary { get; set; }

        /// <summary>
        /// Gets or Sets Secondary
        /// </summary>
        [DataMember(Name = "secondary", EmitDefaultValue = true)]
        public SslVpnDeviceProfileClientDnsSecondary Secondary { get; set; }

        /// <summary>
        /// Set all dns dns search list.
        /// </summary>
        /// <value>Set all dns dns search list.</value>
        [DataMember(Name = "search_lists", EmitDefaultValue = true)]
        public bool SearchLists { get; set; }

        /// <summary>
        /// Add a dns to the dns search list.
        /// </summary>
        /// <value>Add a dns to the dns search list.</value>
        [DataMember(Name = "search_list", EmitDefaultValue = false)]
        public List<SslVpnDeviceProfileClientDnsSearchListInner> SearchList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SslVpnDeviceProfileClientDns {\n");
            sb.Append("  Primary: ").Append(Primary).Append("\n");
            sb.Append("  Secondary: ").Append(Secondary).Append("\n");
            sb.Append("  SearchLists: ").Append(SearchLists).Append("\n");
            sb.Append("  SearchList: ").Append(SearchList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SslVpnDeviceProfileClientDns);
        }

        /// <summary>
        /// Returns true if SslVpnDeviceProfileClientDns instances are equal
        /// </summary>
        /// <param name="input">Instance of SslVpnDeviceProfileClientDns to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SslVpnDeviceProfileClientDns input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Primary == input.Primary ||
                    (this.Primary != null &&
                    this.Primary.Equals(input.Primary))
                ) && 
                (
                    this.Secondary == input.Secondary ||
                    (this.Secondary != null &&
                    this.Secondary.Equals(input.Secondary))
                ) && 
                (
                    this.SearchLists == input.SearchLists ||
                    this.SearchLists.Equals(input.SearchLists)
                ) && 
                (
                    this.SearchList == input.SearchList ||
                    this.SearchList != null &&
                    input.SearchList != null &&
                    this.SearchList.SequenceEqual(input.SearchList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Primary != null)
                {
                    hashCode = (hashCode * 59) + this.Primary.GetHashCode();
                }
                if (this.Secondary != null)
                {
                    hashCode = (hashCode * 59) + this.Secondary.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SearchLists.GetHashCode();
                if (this.SearchList != null)
                {
                    hashCode = (hashCode * 59) + this.SearchList.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
