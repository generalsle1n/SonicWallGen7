/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Custom match configuration.
    /// </summary>
    [DataContract(Name = "custom_match")]
    public partial class CustomMatch : IEquatable<CustomMatch>, IValidatableObject
    {
        /// <summary>
        /// Set connection side.
        /// </summary>
        /// <value>Set connection side.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ConnectionSideEnum
        {
            /// <summary>
            /// Enum Client for value: client
            /// </summary>
            [EnumMember(Value = "client")]
            Client = 1,

            /// <summary>
            /// Enum Server for value: server
            /// </summary>
            [EnumMember(Value = "server")]
            Server = 2,

            /// <summary>
            /// Enum Both for value: both
            /// </summary>
            [EnumMember(Value = "both")]
            Both = 3
        }


        /// <summary>
        /// Set connection side.
        /// </summary>
        /// <value>Set connection side.</value>
        [DataMember(Name = "connection_side", EmitDefaultValue = false)]
        public ConnectionSideEnum? ConnectionSide { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomMatch" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomMatch() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomMatch" /> class.
        /// </summary>
        /// <param name="name">Custom match name. (required).</param>
        /// <param name="type">type.</param>
        /// <param name="matchObject">matchObject.</param>
        /// <param name="mailFrom">mailFrom.</param>
        /// <param name="rcptTo">rcptTo.</param>
        /// <param name="connectionSide">Set connection side..</param>
        /// <param name="direction">direction.</param>
        public CustomMatch(string name = default(string), CustomMatchType type = default(CustomMatchType), CustomMatchMatchObject matchObject = default(CustomMatchMatchObject), CustomMatchMailFrom mailFrom = default(CustomMatchMailFrom), CustomMatchRcptTo rcptTo = default(CustomMatchRcptTo), ConnectionSideEnum? connectionSide = default(ConnectionSideEnum?), CustomMatchDirection direction = default(CustomMatchDirection))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CustomMatch and cannot be null");
            }
            this.Name = name;
            this.Type = type;
            this.MatchObject = matchObject;
            this.MailFrom = mailFrom;
            this.RcptTo = rcptTo;
            this.ConnectionSide = connectionSide;
            this.Direction = direction;
        }

        /// <summary>
        /// Custom match name.
        /// </summary>
        /// <value>Custom match name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public CustomMatchType Type { get; set; }

        /// <summary>
        /// Gets or Sets MatchObject
        /// </summary>
        [DataMember(Name = "match_object", EmitDefaultValue = false)]
        public CustomMatchMatchObject MatchObject { get; set; }

        /// <summary>
        /// Gets or Sets MailFrom
        /// </summary>
        [DataMember(Name = "mail_from", EmitDefaultValue = false)]
        public CustomMatchMailFrom MailFrom { get; set; }

        /// <summary>
        /// Gets or Sets RcptTo
        /// </summary>
        [DataMember(Name = "rcpt_to", EmitDefaultValue = false)]
        public CustomMatchRcptTo RcptTo { get; set; }

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name = "direction", EmitDefaultValue = false)]
        public CustomMatchDirection Direction { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomMatch {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  MatchObject: ").Append(MatchObject).Append("\n");
            sb.Append("  MailFrom: ").Append(MailFrom).Append("\n");
            sb.Append("  RcptTo: ").Append(RcptTo).Append("\n");
            sb.Append("  ConnectionSide: ").Append(ConnectionSide).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomMatch);
        }

        /// <summary>
        /// Returns true if CustomMatch instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomMatch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomMatch input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.MatchObject == input.MatchObject ||
                    (this.MatchObject != null &&
                    this.MatchObject.Equals(input.MatchObject))
                ) && 
                (
                    this.MailFrom == input.MailFrom ||
                    (this.MailFrom != null &&
                    this.MailFrom.Equals(input.MailFrom))
                ) && 
                (
                    this.RcptTo == input.RcptTo ||
                    (this.RcptTo != null &&
                    this.RcptTo.Equals(input.RcptTo))
                ) && 
                (
                    this.ConnectionSide == input.ConnectionSide ||
                    this.ConnectionSide.Equals(input.ConnectionSide)
                ) && 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.MatchObject != null)
                {
                    hashCode = (hashCode * 59) + this.MatchObject.GetHashCode();
                }
                if (this.MailFrom != null)
                {
                    hashCode = (hashCode * 59) + this.MailFrom.GetHashCode();
                }
                if (this.RcptTo != null)
                {
                    hashCode = (hashCode * 59) + this.RcptTo.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ConnectionSide.GetHashCode();
                if (this.Direction != null)
                {
                    hashCode = (hashCode * 59) + this.Direction.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
