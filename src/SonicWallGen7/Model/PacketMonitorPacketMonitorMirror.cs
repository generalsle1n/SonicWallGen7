/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Set mirror params.
    /// </summary>
    [DataContract(Name = "packet_monitor_packet_monitor_mirror")]
    public partial class PacketMonitorPacketMonitorMirror : IEquatable<PacketMonitorPacketMonitorMirror>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PacketMonitorPacketMonitorMirror" /> class.
        /// </summary>
        /// <param name="maxRate">Set maximum mirror rate (in kilobits per second)..</param>
        /// <param name="onlyIpPackets">Enable mirror only IP packets..</param>
        /// <param name="varInterface">Mirror filtered packets to interface..</param>
        /// <param name="ip">Mirror filtered packets to remote SonicWall firewall (IP address)..</param>
        /// <param name="receiveFromIp">Receive mirrored packets from remote SonicWall firewall (IP address)..</param>
        /// <param name="forwardInterface">Send received remote mirrored packets to interface..</param>
        /// <param name="toCaptureBuffer">Enable sending received remote mirrored packets to capture                buffer..</param>
        /// <param name="encryptKey">Encrypt remote mirrored packets via IPSec (preshared key-IKE)..</param>
        /// <param name="decryptKey">Decrypt remote mirrored packets via IPSec (preshared key-IKE)..</param>
        public PacketMonitorPacketMonitorMirror(decimal maxRate = default(decimal), bool onlyIpPackets = default(bool), string varInterface = default(string), string ip = default(string), string receiveFromIp = default(string), string forwardInterface = default(string), bool toCaptureBuffer = default(bool), string encryptKey = default(string), string decryptKey = default(string))
        {
            this.MaxRate = maxRate;
            this.OnlyIpPackets = onlyIpPackets;
            this.VarInterface = varInterface;
            this.Ip = ip;
            this.ReceiveFromIp = receiveFromIp;
            this.ForwardInterface = forwardInterface;
            this.ToCaptureBuffer = toCaptureBuffer;
            this.EncryptKey = encryptKey;
            this.DecryptKey = decryptKey;
        }

        /// <summary>
        /// Set maximum mirror rate (in kilobits per second).
        /// </summary>
        /// <value>Set maximum mirror rate (in kilobits per second).</value>
        [DataMember(Name = "max_rate", EmitDefaultValue = false)]
        public decimal MaxRate { get; set; }

        /// <summary>
        /// Enable mirror only IP packets.
        /// </summary>
        /// <value>Enable mirror only IP packets.</value>
        [DataMember(Name = "only_ip_packets", EmitDefaultValue = true)]
        public bool OnlyIpPackets { get; set; }

        /// <summary>
        /// Mirror filtered packets to interface.
        /// </summary>
        /// <value>Mirror filtered packets to interface.</value>
        [DataMember(Name = "interface", EmitDefaultValue = false)]
        public string VarInterface { get; set; }

        /// <summary>
        /// Mirror filtered packets to remote SonicWall firewall (IP address).
        /// </summary>
        /// <value>Mirror filtered packets to remote SonicWall firewall (IP address).</value>
        [DataMember(Name = "ip", EmitDefaultValue = false)]
        public string Ip { get; set; }

        /// <summary>
        /// Receive mirrored packets from remote SonicWall firewall (IP address).
        /// </summary>
        /// <value>Receive mirrored packets from remote SonicWall firewall (IP address).</value>
        [DataMember(Name = "receive_from_ip", EmitDefaultValue = false)]
        public string ReceiveFromIp { get; set; }

        /// <summary>
        /// Send received remote mirrored packets to interface.
        /// </summary>
        /// <value>Send received remote mirrored packets to interface.</value>
        [DataMember(Name = "forward_interface", EmitDefaultValue = false)]
        public string ForwardInterface { get; set; }

        /// <summary>
        /// Enable sending received remote mirrored packets to capture                buffer.
        /// </summary>
        /// <value>Enable sending received remote mirrored packets to capture                buffer.</value>
        [DataMember(Name = "to_capture_buffer", EmitDefaultValue = true)]
        public bool ToCaptureBuffer { get; set; }

        /// <summary>
        /// Encrypt remote mirrored packets via IPSec (preshared key-IKE).
        /// </summary>
        /// <value>Encrypt remote mirrored packets via IPSec (preshared key-IKE).</value>
        [DataMember(Name = "encrypt_key", EmitDefaultValue = false)]
        public string EncryptKey { get; set; }

        /// <summary>
        /// Decrypt remote mirrored packets via IPSec (preshared key-IKE).
        /// </summary>
        /// <value>Decrypt remote mirrored packets via IPSec (preshared key-IKE).</value>
        [DataMember(Name = "decrypt_key", EmitDefaultValue = false)]
        public string DecryptKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PacketMonitorPacketMonitorMirror {\n");
            sb.Append("  MaxRate: ").Append(MaxRate).Append("\n");
            sb.Append("  OnlyIpPackets: ").Append(OnlyIpPackets).Append("\n");
            sb.Append("  VarInterface: ").Append(VarInterface).Append("\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  ReceiveFromIp: ").Append(ReceiveFromIp).Append("\n");
            sb.Append("  ForwardInterface: ").Append(ForwardInterface).Append("\n");
            sb.Append("  ToCaptureBuffer: ").Append(ToCaptureBuffer).Append("\n");
            sb.Append("  EncryptKey: ").Append(EncryptKey).Append("\n");
            sb.Append("  DecryptKey: ").Append(DecryptKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PacketMonitorPacketMonitorMirror);
        }

        /// <summary>
        /// Returns true if PacketMonitorPacketMonitorMirror instances are equal
        /// </summary>
        /// <param name="input">Instance of PacketMonitorPacketMonitorMirror to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PacketMonitorPacketMonitorMirror input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MaxRate == input.MaxRate ||
                    this.MaxRate.Equals(input.MaxRate)
                ) && 
                (
                    this.OnlyIpPackets == input.OnlyIpPackets ||
                    this.OnlyIpPackets.Equals(input.OnlyIpPackets)
                ) && 
                (
                    this.VarInterface == input.VarInterface ||
                    (this.VarInterface != null &&
                    this.VarInterface.Equals(input.VarInterface))
                ) && 
                (
                    this.Ip == input.Ip ||
                    (this.Ip != null &&
                    this.Ip.Equals(input.Ip))
                ) && 
                (
                    this.ReceiveFromIp == input.ReceiveFromIp ||
                    (this.ReceiveFromIp != null &&
                    this.ReceiveFromIp.Equals(input.ReceiveFromIp))
                ) && 
                (
                    this.ForwardInterface == input.ForwardInterface ||
                    (this.ForwardInterface != null &&
                    this.ForwardInterface.Equals(input.ForwardInterface))
                ) && 
                (
                    this.ToCaptureBuffer == input.ToCaptureBuffer ||
                    this.ToCaptureBuffer.Equals(input.ToCaptureBuffer)
                ) && 
                (
                    this.EncryptKey == input.EncryptKey ||
                    (this.EncryptKey != null &&
                    this.EncryptKey.Equals(input.EncryptKey))
                ) && 
                (
                    this.DecryptKey == input.DecryptKey ||
                    (this.DecryptKey != null &&
                    this.DecryptKey.Equals(input.DecryptKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.MaxRate.GetHashCode();
                hashCode = (hashCode * 59) + this.OnlyIpPackets.GetHashCode();
                if (this.VarInterface != null)
                {
                    hashCode = (hashCode * 59) + this.VarInterface.GetHashCode();
                }
                if (this.Ip != null)
                {
                    hashCode = (hashCode * 59) + this.Ip.GetHashCode();
                }
                if (this.ReceiveFromIp != null)
                {
                    hashCode = (hashCode * 59) + this.ReceiveFromIp.GetHashCode();
                }
                if (this.ForwardInterface != null)
                {
                    hashCode = (hashCode * 59) + this.ForwardInterface.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ToCaptureBuffer.GetHashCode();
                if (this.EncryptKey != null)
                {
                    hashCode = (hashCode * 59) + this.EncryptKey.GetHashCode();
                }
                if (this.DecryptKey != null)
                {
                    hashCode = (hashCode * 59) + this.DecryptKey.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
