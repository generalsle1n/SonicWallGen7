/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enable specified zone to allow incoming RADIUS requests.
    /// </summary>
    [DataContract(Name = "user_ldap_base_user_ldap_relay_clients_connect")]
    public partial class UserLdapBaseUserLdapRelayClientsConnect : IEquatable<UserLdapBaseUserLdapRelayClientsConnect>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserLdapBaseUserLdapRelayClientsConnect" /> class.
        /// </summary>
        /// <param name="trustedZones">Allow incoming RADIUS requests from trusted zones..</param>
        /// <param name="wanZone">Allow incoming RADIUS requests from wan zone..</param>
        /// <param name="publicZones">Allow incoming RADIUS requests from public zones..</param>
        /// <param name="vpnZone">Allow incoming RADIUS requests from vpn zone..</param>
        public UserLdapBaseUserLdapRelayClientsConnect(bool trustedZones = default(bool), bool wanZone = default(bool), bool publicZones = default(bool), bool vpnZone = default(bool))
        {
            this.TrustedZones = trustedZones;
            this.WanZone = wanZone;
            this.PublicZones = publicZones;
            this.VpnZone = vpnZone;
        }

        /// <summary>
        /// Allow incoming RADIUS requests from trusted zones.
        /// </summary>
        /// <value>Allow incoming RADIUS requests from trusted zones.</value>
        [DataMember(Name = "trusted_zones", EmitDefaultValue = true)]
        public bool TrustedZones { get; set; }

        /// <summary>
        /// Allow incoming RADIUS requests from wan zone.
        /// </summary>
        /// <value>Allow incoming RADIUS requests from wan zone.</value>
        [DataMember(Name = "wan_zone", EmitDefaultValue = true)]
        public bool WanZone { get; set; }

        /// <summary>
        /// Allow incoming RADIUS requests from public zones.
        /// </summary>
        /// <value>Allow incoming RADIUS requests from public zones.</value>
        [DataMember(Name = "public_zones", EmitDefaultValue = true)]
        public bool PublicZones { get; set; }

        /// <summary>
        /// Allow incoming RADIUS requests from vpn zone.
        /// </summary>
        /// <value>Allow incoming RADIUS requests from vpn zone.</value>
        [DataMember(Name = "vpn_zone", EmitDefaultValue = true)]
        public bool VpnZone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserLdapBaseUserLdapRelayClientsConnect {\n");
            sb.Append("  TrustedZones: ").Append(TrustedZones).Append("\n");
            sb.Append("  WanZone: ").Append(WanZone).Append("\n");
            sb.Append("  PublicZones: ").Append(PublicZones).Append("\n");
            sb.Append("  VpnZone: ").Append(VpnZone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserLdapBaseUserLdapRelayClientsConnect);
        }

        /// <summary>
        /// Returns true if UserLdapBaseUserLdapRelayClientsConnect instances are equal
        /// </summary>
        /// <param name="input">Instance of UserLdapBaseUserLdapRelayClientsConnect to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserLdapBaseUserLdapRelayClientsConnect input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TrustedZones == input.TrustedZones ||
                    this.TrustedZones.Equals(input.TrustedZones)
                ) && 
                (
                    this.WanZone == input.WanZone ||
                    this.WanZone.Equals(input.WanZone)
                ) && 
                (
                    this.PublicZones == input.PublicZones ||
                    this.PublicZones.Equals(input.PublicZones)
                ) && 
                (
                    this.VpnZone == input.VpnZone ||
                    this.VpnZone.Equals(input.VpnZone)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.TrustedZones.GetHashCode();
                hashCode = (hashCode * 59) + this.WanZone.GetHashCode();
                hashCode = (hashCode * 59) + this.PublicZones.GetHashCode();
                hashCode = (hashCode * 59) + this.VpnZone.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
