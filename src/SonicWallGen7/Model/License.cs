/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// License configuration schema.
    /// </summary>
    [DataContract(Name = "license")]
    public partial class License : IEquatable<License>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="License" /> class.
        /// </summary>
        /// <param name="key">Upgrade by key..</param>
        /// <param name="keySet">Upgrade by key set..</param>
        /// <param name="serialNumber">Product serial number..</param>
        /// <param name="authenticationCode1">Authentication code1..</param>
        /// <param name="authenticationCode2">Authentication code2..</param>
        /// <param name="registrationCode">Registration code..</param>
        public License(string key = default(string), string keySet = default(string), string serialNumber = default(string), string authenticationCode1 = default(string), string authenticationCode2 = default(string), string registrationCode = default(string))
        {
            this.Key = key;
            this.KeySet = keySet;
            this.SerialNumber = serialNumber;
            this.AuthenticationCode1 = authenticationCode1;
            this.AuthenticationCode2 = authenticationCode2;
            this.RegistrationCode = registrationCode;
        }

        /// <summary>
        /// Upgrade by key.
        /// </summary>
        /// <value>Upgrade by key.</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// Upgrade by key set.
        /// </summary>
        /// <value>Upgrade by key set.</value>
        [DataMember(Name = "key_set", EmitDefaultValue = false)]
        public string KeySet { get; set; }

        /// <summary>
        /// Product serial number.
        /// </summary>
        /// <value>Product serial number.</value>
        [DataMember(Name = "serial_number", EmitDefaultValue = false)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Authentication code1.
        /// </summary>
        /// <value>Authentication code1.</value>
        [DataMember(Name = "authentication_code1", EmitDefaultValue = false)]
        public string AuthenticationCode1 { get; set; }

        /// <summary>
        /// Authentication code2.
        /// </summary>
        /// <value>Authentication code2.</value>
        [DataMember(Name = "authentication_code2", EmitDefaultValue = false)]
        public string AuthenticationCode2 { get; set; }

        /// <summary>
        /// Registration code.
        /// </summary>
        /// <value>Registration code.</value>
        [DataMember(Name = "registration_code", EmitDefaultValue = false)]
        public string RegistrationCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class License {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  KeySet: ").Append(KeySet).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  AuthenticationCode1: ").Append(AuthenticationCode1).Append("\n");
            sb.Append("  AuthenticationCode2: ").Append(AuthenticationCode2).Append("\n");
            sb.Append("  RegistrationCode: ").Append(RegistrationCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as License);
        }

        /// <summary>
        /// Returns true if License instances are equal
        /// </summary>
        /// <param name="input">Instance of License to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(License input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.KeySet == input.KeySet ||
                    (this.KeySet != null &&
                    this.KeySet.Equals(input.KeySet))
                ) && 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) && 
                (
                    this.AuthenticationCode1 == input.AuthenticationCode1 ||
                    (this.AuthenticationCode1 != null &&
                    this.AuthenticationCode1.Equals(input.AuthenticationCode1))
                ) && 
                (
                    this.AuthenticationCode2 == input.AuthenticationCode2 ||
                    (this.AuthenticationCode2 != null &&
                    this.AuthenticationCode2.Equals(input.AuthenticationCode2))
                ) && 
                (
                    this.RegistrationCode == input.RegistrationCode ||
                    (this.RegistrationCode != null &&
                    this.RegistrationCode.Equals(input.RegistrationCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                {
                    hashCode = (hashCode * 59) + this.Key.GetHashCode();
                }
                if (this.KeySet != null)
                {
                    hashCode = (hashCode * 59) + this.KeySet.GetHashCode();
                }
                if (this.SerialNumber != null)
                {
                    hashCode = (hashCode * 59) + this.SerialNumber.GetHashCode();
                }
                if (this.AuthenticationCode1 != null)
                {
                    hashCode = (hashCode * 59) + this.AuthenticationCode1.GetHashCode();
                }
                if (this.AuthenticationCode2 != null)
                {
                    hashCode = (hashCode * 59) + this.AuthenticationCode2.GetHashCode();
                }
                if (this.RegistrationCode != null)
                {
                    hashCode = (hashCode * 59) + this.RegistrationCode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
