/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enter configuration mode.
    /// </summary>
    [DataContract(Name = "zone_guest_services")]
    public partial class ZoneGuestServices : IEquatable<ZoneGuestServices>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ZoneGuestServices" /> class.
        /// </summary>
        /// <param name="enable">Enable guest services..</param>
        /// <param name="interGuest">Enable inter-guest communication..</param>
        /// <param name="externalAuth">externalAuth.</param>
        /// <param name="policyPageNonAuthentication">policyPageNonAuthentication.</param>
        /// <param name="customAuthPage">customAuthPage.</param>
        /// <param name="postAuth">Enable page to direct users to after successful authentication. * Set to null to represent an unconfigured state..</param>
        /// <param name="bypassGuestAuth">bypassGuestAuth.</param>
        /// <param name="smtpRedirect">smtpRedirect.</param>
        /// <param name="denyNetworks">denyNetworks.</param>
        /// <param name="passNetworks">passNetworks.</param>
        /// <param name="maxGuests">Specify the maximum number of guest users allowed to connect to the WLAN zone..</param>
        public ZoneGuestServices(bool enable = default(bool), bool interGuest = default(bool), ZoneGuestServicesExternalAuth externalAuth = default(ZoneGuestServicesExternalAuth), ZoneGuestServicesPolicyPageNonAuthentication policyPageNonAuthentication = default(ZoneGuestServicesPolicyPageNonAuthentication), ZoneGuestServicesCustomAuthPage customAuthPage = default(ZoneGuestServicesCustomAuthPage), string postAuth = default(string), ZoneGuestServicesBypassGuestAuth bypassGuestAuth = default(ZoneGuestServicesBypassGuestAuth), ZoneGuestServicesSmtpRedirect smtpRedirect = default(ZoneGuestServicesSmtpRedirect), ZoneGuestServicesDenyNetworks denyNetworks = default(ZoneGuestServicesDenyNetworks), ZoneGuestServicesPassNetworks passNetworks = default(ZoneGuestServicesPassNetworks), decimal maxGuests = default(decimal))
        {
            this.Enable = enable;
            this.InterGuest = interGuest;
            this.ExternalAuth = externalAuth;
            this.PolicyPageNonAuthentication = policyPageNonAuthentication;
            this.CustomAuthPage = customAuthPage;
            this.PostAuth = postAuth;
            this.BypassGuestAuth = bypassGuestAuth;
            this.SmtpRedirect = smtpRedirect;
            this.DenyNetworks = denyNetworks;
            this.PassNetworks = passNetworks;
            this.MaxGuests = maxGuests;
        }

        /// <summary>
        /// Enable guest services.
        /// </summary>
        /// <value>Enable guest services.</value>
        [DataMember(Name = "enable", EmitDefaultValue = true)]
        public bool Enable { get; set; }

        /// <summary>
        /// Enable inter-guest communication.
        /// </summary>
        /// <value>Enable inter-guest communication.</value>
        [DataMember(Name = "inter_guest", EmitDefaultValue = true)]
        public bool InterGuest { get; set; }

        /// <summary>
        /// Gets or Sets ExternalAuth
        /// </summary>
        [DataMember(Name = "external_auth", EmitDefaultValue = false)]
        public ZoneGuestServicesExternalAuth ExternalAuth { get; set; }

        /// <summary>
        /// Gets or Sets PolicyPageNonAuthentication
        /// </summary>
        [DataMember(Name = "policy_page_non_authentication", EmitDefaultValue = false)]
        public ZoneGuestServicesPolicyPageNonAuthentication PolicyPageNonAuthentication { get; set; }

        /// <summary>
        /// Gets or Sets CustomAuthPage
        /// </summary>
        [DataMember(Name = "custom_auth_page", EmitDefaultValue = false)]
        public ZoneGuestServicesCustomAuthPage CustomAuthPage { get; set; }

        /// <summary>
        /// Enable page to direct users to after successful authentication. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Enable page to direct users to after successful authentication. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "post_auth", EmitDefaultValue = true)]
        public string PostAuth { get; set; }

        /// <summary>
        /// Gets or Sets BypassGuestAuth
        /// </summary>
        [DataMember(Name = "bypass_guest_auth", EmitDefaultValue = false)]
        public ZoneGuestServicesBypassGuestAuth BypassGuestAuth { get; set; }

        /// <summary>
        /// Gets or Sets SmtpRedirect
        /// </summary>
        [DataMember(Name = "smtp_redirect", EmitDefaultValue = false)]
        public ZoneGuestServicesSmtpRedirect SmtpRedirect { get; set; }

        /// <summary>
        /// Gets or Sets DenyNetworks
        /// </summary>
        [DataMember(Name = "deny_networks", EmitDefaultValue = false)]
        public ZoneGuestServicesDenyNetworks DenyNetworks { get; set; }

        /// <summary>
        /// Gets or Sets PassNetworks
        /// </summary>
        [DataMember(Name = "pass_networks", EmitDefaultValue = false)]
        public ZoneGuestServicesPassNetworks PassNetworks { get; set; }

        /// <summary>
        /// Specify the maximum number of guest users allowed to connect to the WLAN zone.
        /// </summary>
        /// <value>Specify the maximum number of guest users allowed to connect to the WLAN zone.</value>
        [DataMember(Name = "max_guests", EmitDefaultValue = false)]
        public decimal MaxGuests { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ZoneGuestServices {\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  InterGuest: ").Append(InterGuest).Append("\n");
            sb.Append("  ExternalAuth: ").Append(ExternalAuth).Append("\n");
            sb.Append("  PolicyPageNonAuthentication: ").Append(PolicyPageNonAuthentication).Append("\n");
            sb.Append("  CustomAuthPage: ").Append(CustomAuthPage).Append("\n");
            sb.Append("  PostAuth: ").Append(PostAuth).Append("\n");
            sb.Append("  BypassGuestAuth: ").Append(BypassGuestAuth).Append("\n");
            sb.Append("  SmtpRedirect: ").Append(SmtpRedirect).Append("\n");
            sb.Append("  DenyNetworks: ").Append(DenyNetworks).Append("\n");
            sb.Append("  PassNetworks: ").Append(PassNetworks).Append("\n");
            sb.Append("  MaxGuests: ").Append(MaxGuests).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ZoneGuestServices);
        }

        /// <summary>
        /// Returns true if ZoneGuestServices instances are equal
        /// </summary>
        /// <param name="input">Instance of ZoneGuestServices to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ZoneGuestServices input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.InterGuest == input.InterGuest ||
                    this.InterGuest.Equals(input.InterGuest)
                ) && 
                (
                    this.ExternalAuth == input.ExternalAuth ||
                    (this.ExternalAuth != null &&
                    this.ExternalAuth.Equals(input.ExternalAuth))
                ) && 
                (
                    this.PolicyPageNonAuthentication == input.PolicyPageNonAuthentication ||
                    (this.PolicyPageNonAuthentication != null &&
                    this.PolicyPageNonAuthentication.Equals(input.PolicyPageNonAuthentication))
                ) && 
                (
                    this.CustomAuthPage == input.CustomAuthPage ||
                    (this.CustomAuthPage != null &&
                    this.CustomAuthPage.Equals(input.CustomAuthPage))
                ) && 
                (
                    this.PostAuth == input.PostAuth ||
                    (this.PostAuth != null &&
                    this.PostAuth.Equals(input.PostAuth))
                ) && 
                (
                    this.BypassGuestAuth == input.BypassGuestAuth ||
                    (this.BypassGuestAuth != null &&
                    this.BypassGuestAuth.Equals(input.BypassGuestAuth))
                ) && 
                (
                    this.SmtpRedirect == input.SmtpRedirect ||
                    (this.SmtpRedirect != null &&
                    this.SmtpRedirect.Equals(input.SmtpRedirect))
                ) && 
                (
                    this.DenyNetworks == input.DenyNetworks ||
                    (this.DenyNetworks != null &&
                    this.DenyNetworks.Equals(input.DenyNetworks))
                ) && 
                (
                    this.PassNetworks == input.PassNetworks ||
                    (this.PassNetworks != null &&
                    this.PassNetworks.Equals(input.PassNetworks))
                ) && 
                (
                    this.MaxGuests == input.MaxGuests ||
                    this.MaxGuests.Equals(input.MaxGuests)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Enable.GetHashCode();
                hashCode = (hashCode * 59) + this.InterGuest.GetHashCode();
                if (this.ExternalAuth != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalAuth.GetHashCode();
                }
                if (this.PolicyPageNonAuthentication != null)
                {
                    hashCode = (hashCode * 59) + this.PolicyPageNonAuthentication.GetHashCode();
                }
                if (this.CustomAuthPage != null)
                {
                    hashCode = (hashCode * 59) + this.CustomAuthPage.GetHashCode();
                }
                if (this.PostAuth != null)
                {
                    hashCode = (hashCode * 59) + this.PostAuth.GetHashCode();
                }
                if (this.BypassGuestAuth != null)
                {
                    hashCode = (hashCode * 59) + this.BypassGuestAuth.GetHashCode();
                }
                if (this.SmtpRedirect != null)
                {
                    hashCode = (hashCode * 59) + this.SmtpRedirect.GetHashCode();
                }
                if (this.DenyNetworks != null)
                {
                    hashCode = (hashCode * 59) + this.DenyNetworks.GetHashCode();
                }
                if (this.PassNetworks != null)
                {
                    hashCode = (hashCode * 59) + this.PassNetworks.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MaxGuests.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
