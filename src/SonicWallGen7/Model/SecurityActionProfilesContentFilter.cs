/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enter security policy content filter configuration mode.
    /// </summary>
    [DataContract(Name = "security_action_profiles_content_filter")]
    public partial class SecurityActionProfilesContentFilter : IEquatable<SecurityActionProfilesContentFilter>, IValidatableObject
    {
        /// <summary>
        /// Set content filter action.
        /// </summary>
        /// <value>Set content filter action.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            /// <summary>
            /// Enum Allow for value: allow
            /// </summary>
            [EnumMember(Value = "allow")]
            Allow = 1,

            /// <summary>
            /// Enum Confirm for value: confirm
            /// </summary>
            [EnumMember(Value = "confirm")]
            Confirm = 2,

            /// <summary>
            /// Enum Passphrase for value: passphrase
            /// </summary>
            [EnumMember(Value = "passphrase")]
            Passphrase = 3
        }


        /// <summary>
        /// Set content filter action.
        /// </summary>
        /// <value>Set content filter action.</value>
        [DataMember(Name = "action", EmitDefaultValue = false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityActionProfilesContentFilter" /> class.
        /// </summary>
        /// <param name="enable">Enable content filtering..</param>
        /// <param name="action">Set content filter action..</param>
        /// <param name="safeSearch">Enable safe search enforcement..</param>
        /// <param name="googleForceSafeSearch">Enable Google force safe search..</param>
        /// <param name="youtubeRestrictMode">Enable YouTube restrict mode..</param>
        /// <param name="bingForceSafeSearch">Enable Bing force safe search..</param>
        /// <param name="wipeCookies">Enable wipe cookies..</param>
        /// <param name="flowReporting">Enable flow reporting..</param>
        /// <param name="passphrase">passphrase.</param>
        /// <param name="confirm">confirm.</param>
        /// <param name="consent">consent.</param>
        /// <param name="customHeader">customHeader.</param>
        public SecurityActionProfilesContentFilter(bool enable = default(bool), ActionEnum? action = default(ActionEnum?), bool safeSearch = default(bool), bool googleForceSafeSearch = default(bool), bool youtubeRestrictMode = default(bool), bool bingForceSafeSearch = default(bool), bool wipeCookies = default(bool), bool flowReporting = default(bool), SecurityActionProfilesContentFilterPassphrase passphrase = default(SecurityActionProfilesContentFilterPassphrase), SecurityActionProfilesContentFilterConfirm confirm = default(SecurityActionProfilesContentFilterConfirm), SecurityActionProfilesContentFilterConsent consent = default(SecurityActionProfilesContentFilterConsent), ContentFilterProfileCustomHeader customHeader = default(ContentFilterProfileCustomHeader))
        {
            this.Enable = enable;
            this.Action = action;
            this.SafeSearch = safeSearch;
            this.GoogleForceSafeSearch = googleForceSafeSearch;
            this.YoutubeRestrictMode = youtubeRestrictMode;
            this.BingForceSafeSearch = bingForceSafeSearch;
            this.WipeCookies = wipeCookies;
            this.FlowReporting = flowReporting;
            this.Passphrase = passphrase;
            this.Confirm = confirm;
            this.Consent = consent;
            this.CustomHeader = customHeader;
        }

        /// <summary>
        /// Enable content filtering.
        /// </summary>
        /// <value>Enable content filtering.</value>
        [DataMember(Name = "enable", EmitDefaultValue = true)]
        public bool Enable { get; set; }

        /// <summary>
        /// Enable safe search enforcement.
        /// </summary>
        /// <value>Enable safe search enforcement.</value>
        [DataMember(Name = "safe_search", EmitDefaultValue = true)]
        public bool SafeSearch { get; set; }

        /// <summary>
        /// Enable Google force safe search.
        /// </summary>
        /// <value>Enable Google force safe search.</value>
        [DataMember(Name = "google_force_safe_search", EmitDefaultValue = true)]
        public bool GoogleForceSafeSearch { get; set; }

        /// <summary>
        /// Enable YouTube restrict mode.
        /// </summary>
        /// <value>Enable YouTube restrict mode.</value>
        [DataMember(Name = "youtube_restrict_mode", EmitDefaultValue = true)]
        public bool YoutubeRestrictMode { get; set; }

        /// <summary>
        /// Enable Bing force safe search.
        /// </summary>
        /// <value>Enable Bing force safe search.</value>
        [DataMember(Name = "bing_force_safe_search", EmitDefaultValue = true)]
        public bool BingForceSafeSearch { get; set; }

        /// <summary>
        /// Enable wipe cookies.
        /// </summary>
        /// <value>Enable wipe cookies.</value>
        [DataMember(Name = "wipe_cookies", EmitDefaultValue = true)]
        public bool WipeCookies { get; set; }

        /// <summary>
        /// Enable flow reporting.
        /// </summary>
        /// <value>Enable flow reporting.</value>
        [DataMember(Name = "flow_reporting", EmitDefaultValue = true)]
        public bool FlowReporting { get; set; }

        /// <summary>
        /// Gets or Sets Passphrase
        /// </summary>
        [DataMember(Name = "passphrase", EmitDefaultValue = false)]
        public SecurityActionProfilesContentFilterPassphrase Passphrase { get; set; }

        /// <summary>
        /// Gets or Sets Confirm
        /// </summary>
        [DataMember(Name = "confirm", EmitDefaultValue = false)]
        public SecurityActionProfilesContentFilterConfirm Confirm { get; set; }

        /// <summary>
        /// Gets or Sets Consent
        /// </summary>
        [DataMember(Name = "consent", EmitDefaultValue = false)]
        public SecurityActionProfilesContentFilterConsent Consent { get; set; }

        /// <summary>
        /// Gets or Sets CustomHeader
        /// </summary>
        [DataMember(Name = "custom_header", EmitDefaultValue = false)]
        public ContentFilterProfileCustomHeader CustomHeader { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SecurityActionProfilesContentFilter {\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  SafeSearch: ").Append(SafeSearch).Append("\n");
            sb.Append("  GoogleForceSafeSearch: ").Append(GoogleForceSafeSearch).Append("\n");
            sb.Append("  YoutubeRestrictMode: ").Append(YoutubeRestrictMode).Append("\n");
            sb.Append("  BingForceSafeSearch: ").Append(BingForceSafeSearch).Append("\n");
            sb.Append("  WipeCookies: ").Append(WipeCookies).Append("\n");
            sb.Append("  FlowReporting: ").Append(FlowReporting).Append("\n");
            sb.Append("  Passphrase: ").Append(Passphrase).Append("\n");
            sb.Append("  Confirm: ").Append(Confirm).Append("\n");
            sb.Append("  Consent: ").Append(Consent).Append("\n");
            sb.Append("  CustomHeader: ").Append(CustomHeader).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecurityActionProfilesContentFilter);
        }

        /// <summary>
        /// Returns true if SecurityActionProfilesContentFilter instances are equal
        /// </summary>
        /// <param name="input">Instance of SecurityActionProfilesContentFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecurityActionProfilesContentFilter input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.Action == input.Action ||
                    this.Action.Equals(input.Action)
                ) && 
                (
                    this.SafeSearch == input.SafeSearch ||
                    this.SafeSearch.Equals(input.SafeSearch)
                ) && 
                (
                    this.GoogleForceSafeSearch == input.GoogleForceSafeSearch ||
                    this.GoogleForceSafeSearch.Equals(input.GoogleForceSafeSearch)
                ) && 
                (
                    this.YoutubeRestrictMode == input.YoutubeRestrictMode ||
                    this.YoutubeRestrictMode.Equals(input.YoutubeRestrictMode)
                ) && 
                (
                    this.BingForceSafeSearch == input.BingForceSafeSearch ||
                    this.BingForceSafeSearch.Equals(input.BingForceSafeSearch)
                ) && 
                (
                    this.WipeCookies == input.WipeCookies ||
                    this.WipeCookies.Equals(input.WipeCookies)
                ) && 
                (
                    this.FlowReporting == input.FlowReporting ||
                    this.FlowReporting.Equals(input.FlowReporting)
                ) && 
                (
                    this.Passphrase == input.Passphrase ||
                    (this.Passphrase != null &&
                    this.Passphrase.Equals(input.Passphrase))
                ) && 
                (
                    this.Confirm == input.Confirm ||
                    (this.Confirm != null &&
                    this.Confirm.Equals(input.Confirm))
                ) && 
                (
                    this.Consent == input.Consent ||
                    (this.Consent != null &&
                    this.Consent.Equals(input.Consent))
                ) && 
                (
                    this.CustomHeader == input.CustomHeader ||
                    (this.CustomHeader != null &&
                    this.CustomHeader.Equals(input.CustomHeader))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Enable.GetHashCode();
                hashCode = (hashCode * 59) + this.Action.GetHashCode();
                hashCode = (hashCode * 59) + this.SafeSearch.GetHashCode();
                hashCode = (hashCode * 59) + this.GoogleForceSafeSearch.GetHashCode();
                hashCode = (hashCode * 59) + this.YoutubeRestrictMode.GetHashCode();
                hashCode = (hashCode * 59) + this.BingForceSafeSearch.GetHashCode();
                hashCode = (hashCode * 59) + this.WipeCookies.GetHashCode();
                hashCode = (hashCode * 59) + this.FlowReporting.GetHashCode();
                if (this.Passphrase != null)
                {
                    hashCode = (hashCode * 59) + this.Passphrase.GetHashCode();
                }
                if (this.Confirm != null)
                {
                    hashCode = (hashCode * 59) + this.Confirm.GetHashCode();
                }
                if (this.Consent != null)
                {
                    hashCode = (hashCode * 59) + this.Consent.GetHashCode();
                }
                if (this.CustomHeader != null)
                {
                    hashCode = (hashCode * 59) + this.CustomHeader.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
