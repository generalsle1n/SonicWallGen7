/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// ShowStatusUserGuestUserBynameStatisticListInner
    /// </summary>
    [DataContract(Name = "show_status_user_guest_user_byname_statistic_list_inner")]
    public partial class ShowStatusUserGuestUserBynameStatisticListInner : IEquatable<ShowStatusUserGuestUserBynameStatisticListInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusUserGuestUserBynameStatisticListInner" /> class.
        /// </summary>
        /// <param name="userName">userName.</param>
        /// <param name="userIp">userIp.</param>
        /// <param name="rxBytes">rxBytes.</param>
        /// <param name="rxPackets">rxPackets.</param>
        /// <param name="txBytes">txBytes.</param>
        /// <param name="txPackets">txPackets.</param>
        public ShowStatusUserGuestUserBynameStatisticListInner(string userName = default(string), string userIp = default(string), string rxBytes = default(string), string rxPackets = default(string), string txBytes = default(string), string txPackets = default(string))
        {
            this.UserName = userName;
            this.UserIp = userIp;
            this.RxBytes = rxBytes;
            this.RxPackets = rxPackets;
            this.TxBytes = txBytes;
            this.TxPackets = txPackets;
        }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name = "user_name", EmitDefaultValue = false)]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets UserIp
        /// </summary>
        [DataMember(Name = "user_ip", EmitDefaultValue = false)]
        public string UserIp { get; set; }

        /// <summary>
        /// Gets or Sets RxBytes
        /// </summary>
        [DataMember(Name = "rx_bytes", EmitDefaultValue = false)]
        public string RxBytes { get; set; }

        /// <summary>
        /// Gets or Sets RxPackets
        /// </summary>
        [DataMember(Name = "rx_packets", EmitDefaultValue = false)]
        public string RxPackets { get; set; }

        /// <summary>
        /// Gets or Sets TxBytes
        /// </summary>
        [DataMember(Name = "tx_bytes", EmitDefaultValue = false)]
        public string TxBytes { get; set; }

        /// <summary>
        /// Gets or Sets TxPackets
        /// </summary>
        [DataMember(Name = "tx_packets", EmitDefaultValue = false)]
        public string TxPackets { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusUserGuestUserBynameStatisticListInner {\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  UserIp: ").Append(UserIp).Append("\n");
            sb.Append("  RxBytes: ").Append(RxBytes).Append("\n");
            sb.Append("  RxPackets: ").Append(RxPackets).Append("\n");
            sb.Append("  TxBytes: ").Append(TxBytes).Append("\n");
            sb.Append("  TxPackets: ").Append(TxPackets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusUserGuestUserBynameStatisticListInner);
        }

        /// <summary>
        /// Returns true if ShowStatusUserGuestUserBynameStatisticListInner instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusUserGuestUserBynameStatisticListInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusUserGuestUserBynameStatisticListInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.UserIp == input.UserIp ||
                    (this.UserIp != null &&
                    this.UserIp.Equals(input.UserIp))
                ) && 
                (
                    this.RxBytes == input.RxBytes ||
                    (this.RxBytes != null &&
                    this.RxBytes.Equals(input.RxBytes))
                ) && 
                (
                    this.RxPackets == input.RxPackets ||
                    (this.RxPackets != null &&
                    this.RxPackets.Equals(input.RxPackets))
                ) && 
                (
                    this.TxBytes == input.TxBytes ||
                    (this.TxBytes != null &&
                    this.TxBytes.Equals(input.TxBytes))
                ) && 
                (
                    this.TxPackets == input.TxPackets ||
                    (this.TxPackets != null &&
                    this.TxPackets.Equals(input.TxPackets))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserName != null)
                {
                    hashCode = (hashCode * 59) + this.UserName.GetHashCode();
                }
                if (this.UserIp != null)
                {
                    hashCode = (hashCode * 59) + this.UserIp.GetHashCode();
                }
                if (this.RxBytes != null)
                {
                    hashCode = (hashCode * 59) + this.RxBytes.GetHashCode();
                }
                if (this.RxPackets != null)
                {
                    hashCode = (hashCode * 59) + this.RxPackets.GetHashCode();
                }
                if (this.TxBytes != null)
                {
                    hashCode = (hashCode * 59) + this.TxBytes.GetHashCode();
                }
                if (this.TxPackets != null)
                {
                    hashCode = (hashCode * 59) + this.TxPackets.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
