/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// dynamic external object detail schema.
    /// </summary>
    [DataContract(Name = "show_status_dynamic_external_object_detail")]
    public partial class ShowStatusDynamicExternalObjectDetail : IEquatable<ShowStatusDynamicExternalObjectDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusDynamicExternalObjectDetail" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="downloadStatus">downloadStatus.</param>
        /// <param name="lastCheckedTime">lastCheckedTime.</param>
        /// <param name="lastDownloadedTime">lastDownloadedTime.</param>
        /// <param name="newFileDownloadedTime">newFileDownloadedTime.</param>
        /// <param name="nextDownloadedTime">nextDownloadedTime.</param>
        /// <param name="fileFlushTime">fileFlushTime.</param>
        /// <param name="status">status.</param>
        /// <param name="subnetCount">subnetCount.</param>
        /// <param name="ipCount">ipCount.</param>
        /// <param name="fileFormatFailure">fileFormatFailure.</param>
        public ShowStatusDynamicExternalObjectDetail(string name = default(string), string downloadStatus = default(string), string lastCheckedTime = default(string), string lastDownloadedTime = default(string), string newFileDownloadedTime = default(string), string nextDownloadedTime = default(string), string fileFlushTime = default(string), string status = default(string), string subnetCount = default(string), string ipCount = default(string), string fileFormatFailure = default(string))
        {
            this.Name = name;
            this.DownloadStatus = downloadStatus;
            this.LastCheckedTime = lastCheckedTime;
            this.LastDownloadedTime = lastDownloadedTime;
            this.NewFileDownloadedTime = newFileDownloadedTime;
            this.NextDownloadedTime = nextDownloadedTime;
            this.FileFlushTime = fileFlushTime;
            this.Status = status;
            this.SubnetCount = subnetCount;
            this.IpCount = ipCount;
            this.FileFormatFailure = fileFormatFailure;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DownloadStatus
        /// </summary>
        [DataMember(Name = "download_status", EmitDefaultValue = false)]
        public string DownloadStatus { get; set; }

        /// <summary>
        /// Gets or Sets LastCheckedTime
        /// </summary>
        [DataMember(Name = "last_checked_time", EmitDefaultValue = false)]
        public string LastCheckedTime { get; set; }

        /// <summary>
        /// Gets or Sets LastDownloadedTime
        /// </summary>
        [DataMember(Name = "last_downloaded_time", EmitDefaultValue = false)]
        public string LastDownloadedTime { get; set; }

        /// <summary>
        /// Gets or Sets NewFileDownloadedTime
        /// </summary>
        [DataMember(Name = "new_file_downloaded_time", EmitDefaultValue = false)]
        public string NewFileDownloadedTime { get; set; }

        /// <summary>
        /// Gets or Sets NextDownloadedTime
        /// </summary>
        [DataMember(Name = "next_downloaded_time", EmitDefaultValue = false)]
        public string NextDownloadedTime { get; set; }

        /// <summary>
        /// Gets or Sets FileFlushTime
        /// </summary>
        [DataMember(Name = "file_flush_time", EmitDefaultValue = false)]
        public string FileFlushTime { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets SubnetCount
        /// </summary>
        [DataMember(Name = "subnet_count", EmitDefaultValue = false)]
        public string SubnetCount { get; set; }

        /// <summary>
        /// Gets or Sets IpCount
        /// </summary>
        [DataMember(Name = "ip_count", EmitDefaultValue = false)]
        public string IpCount { get; set; }

        /// <summary>
        /// Gets or Sets FileFormatFailure
        /// </summary>
        [DataMember(Name = "file_format_failure", EmitDefaultValue = false)]
        public string FileFormatFailure { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusDynamicExternalObjectDetail {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DownloadStatus: ").Append(DownloadStatus).Append("\n");
            sb.Append("  LastCheckedTime: ").Append(LastCheckedTime).Append("\n");
            sb.Append("  LastDownloadedTime: ").Append(LastDownloadedTime).Append("\n");
            sb.Append("  NewFileDownloadedTime: ").Append(NewFileDownloadedTime).Append("\n");
            sb.Append("  NextDownloadedTime: ").Append(NextDownloadedTime).Append("\n");
            sb.Append("  FileFlushTime: ").Append(FileFlushTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SubnetCount: ").Append(SubnetCount).Append("\n");
            sb.Append("  IpCount: ").Append(IpCount).Append("\n");
            sb.Append("  FileFormatFailure: ").Append(FileFormatFailure).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusDynamicExternalObjectDetail);
        }

        /// <summary>
        /// Returns true if ShowStatusDynamicExternalObjectDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusDynamicExternalObjectDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusDynamicExternalObjectDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DownloadStatus == input.DownloadStatus ||
                    (this.DownloadStatus != null &&
                    this.DownloadStatus.Equals(input.DownloadStatus))
                ) && 
                (
                    this.LastCheckedTime == input.LastCheckedTime ||
                    (this.LastCheckedTime != null &&
                    this.LastCheckedTime.Equals(input.LastCheckedTime))
                ) && 
                (
                    this.LastDownloadedTime == input.LastDownloadedTime ||
                    (this.LastDownloadedTime != null &&
                    this.LastDownloadedTime.Equals(input.LastDownloadedTime))
                ) && 
                (
                    this.NewFileDownloadedTime == input.NewFileDownloadedTime ||
                    (this.NewFileDownloadedTime != null &&
                    this.NewFileDownloadedTime.Equals(input.NewFileDownloadedTime))
                ) && 
                (
                    this.NextDownloadedTime == input.NextDownloadedTime ||
                    (this.NextDownloadedTime != null &&
                    this.NextDownloadedTime.Equals(input.NextDownloadedTime))
                ) && 
                (
                    this.FileFlushTime == input.FileFlushTime ||
                    (this.FileFlushTime != null &&
                    this.FileFlushTime.Equals(input.FileFlushTime))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.SubnetCount == input.SubnetCount ||
                    (this.SubnetCount != null &&
                    this.SubnetCount.Equals(input.SubnetCount))
                ) && 
                (
                    this.IpCount == input.IpCount ||
                    (this.IpCount != null &&
                    this.IpCount.Equals(input.IpCount))
                ) && 
                (
                    this.FileFormatFailure == input.FileFormatFailure ||
                    (this.FileFormatFailure != null &&
                    this.FileFormatFailure.Equals(input.FileFormatFailure))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.DownloadStatus != null)
                {
                    hashCode = (hashCode * 59) + this.DownloadStatus.GetHashCode();
                }
                if (this.LastCheckedTime != null)
                {
                    hashCode = (hashCode * 59) + this.LastCheckedTime.GetHashCode();
                }
                if (this.LastDownloadedTime != null)
                {
                    hashCode = (hashCode * 59) + this.LastDownloadedTime.GetHashCode();
                }
                if (this.NewFileDownloadedTime != null)
                {
                    hashCode = (hashCode * 59) + this.NewFileDownloadedTime.GetHashCode();
                }
                if (this.NextDownloadedTime != null)
                {
                    hashCode = (hashCode * 59) + this.NextDownloadedTime.GetHashCode();
                }
                if (this.FileFlushTime != null)
                {
                    hashCode = (hashCode * 59) + this.FileFlushTime.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.SubnetCount != null)
                {
                    hashCode = (hashCode * 59) + this.SubnetCount.GetHashCode();
                }
                if (this.IpCount != null)
                {
                    hashCode = (hashCode * 59) + this.IpCount.GetHashCode();
                }
                if (this.FileFormatFailure != null)
                {
                    hashCode = (hashCode * 59) + this.FileFormatFailure.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
