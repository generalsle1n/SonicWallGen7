/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure advanced diag GeoIP/Location service.
    /// </summary>
    [DataContract(Name = "diag_advanced_geoip_location_service_diag_advanced_geoip_location_service")]
    public partial class DiagAdvancedGeoipLocationServiceDiagAdvancedGeoipLocationService : IEquatable<DiagAdvancedGeoipLocationServiceDiagAdvancedGeoipLocationService>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagAdvancedGeoipLocationServiceDiagAdvancedGeoipLocationService" /> class.
        /// </summary>
        /// <param name="remoteGeoipServer">remoteGeoipServer.</param>
        /// <param name="useControlPlane">Use control plane for GeoIP database lookups..</param>
        /// <param name="bypassGeoipBlocking">Bypass GeoIp blocking for stack initiated connections..</param>
        /// <param name="bypassBotnetBlocking">Bypass BOTNET blocking for stack initiated connections..</param>
        /// <param name="geoipBotnetMapFileUpload">Allow Geo-IP/Botnet filter map database file upload..</param>
        public DiagAdvancedGeoipLocationServiceDiagAdvancedGeoipLocationService(DiagAdvancedGeoipLocationServiceDiagAdvancedGeoipLocationServiceRemoteGeoipServer remoteGeoipServer = default(DiagAdvancedGeoipLocationServiceDiagAdvancedGeoipLocationServiceRemoteGeoipServer), bool useControlPlane = default(bool), bool bypassGeoipBlocking = default(bool), bool bypassBotnetBlocking = default(bool), bool geoipBotnetMapFileUpload = default(bool))
        {
            this.RemoteGeoipServer = remoteGeoipServer;
            this.UseControlPlane = useControlPlane;
            this.BypassGeoipBlocking = bypassGeoipBlocking;
            this.BypassBotnetBlocking = bypassBotnetBlocking;
            this.GeoipBotnetMapFileUpload = geoipBotnetMapFileUpload;
        }

        /// <summary>
        /// Gets or Sets RemoteGeoipServer
        /// </summary>
        [DataMember(Name = "remote_geoip_server", EmitDefaultValue = false)]
        public DiagAdvancedGeoipLocationServiceDiagAdvancedGeoipLocationServiceRemoteGeoipServer RemoteGeoipServer { get; set; }

        /// <summary>
        /// Use control plane for GeoIP database lookups.
        /// </summary>
        /// <value>Use control plane for GeoIP database lookups.</value>
        [DataMember(Name = "use_control_plane", EmitDefaultValue = true)]
        public bool UseControlPlane { get; set; }

        /// <summary>
        /// Bypass GeoIp blocking for stack initiated connections.
        /// </summary>
        /// <value>Bypass GeoIp blocking for stack initiated connections.</value>
        [DataMember(Name = "bypass_geoip_blocking", EmitDefaultValue = true)]
        public bool BypassGeoipBlocking { get; set; }

        /// <summary>
        /// Bypass BOTNET blocking for stack initiated connections.
        /// </summary>
        /// <value>Bypass BOTNET blocking for stack initiated connections.</value>
        [DataMember(Name = "bypass_botnet_blocking", EmitDefaultValue = true)]
        public bool BypassBotnetBlocking { get; set; }

        /// <summary>
        /// Allow Geo-IP/Botnet filter map database file upload.
        /// </summary>
        /// <value>Allow Geo-IP/Botnet filter map database file upload.</value>
        [DataMember(Name = "geoip_botnet_map_file_upload", EmitDefaultValue = true)]
        public bool GeoipBotnetMapFileUpload { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DiagAdvancedGeoipLocationServiceDiagAdvancedGeoipLocationService {\n");
            sb.Append("  RemoteGeoipServer: ").Append(RemoteGeoipServer).Append("\n");
            sb.Append("  UseControlPlane: ").Append(UseControlPlane).Append("\n");
            sb.Append("  BypassGeoipBlocking: ").Append(BypassGeoipBlocking).Append("\n");
            sb.Append("  BypassBotnetBlocking: ").Append(BypassBotnetBlocking).Append("\n");
            sb.Append("  GeoipBotnetMapFileUpload: ").Append(GeoipBotnetMapFileUpload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiagAdvancedGeoipLocationServiceDiagAdvancedGeoipLocationService);
        }

        /// <summary>
        /// Returns true if DiagAdvancedGeoipLocationServiceDiagAdvancedGeoipLocationService instances are equal
        /// </summary>
        /// <param name="input">Instance of DiagAdvancedGeoipLocationServiceDiagAdvancedGeoipLocationService to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiagAdvancedGeoipLocationServiceDiagAdvancedGeoipLocationService input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RemoteGeoipServer == input.RemoteGeoipServer ||
                    (this.RemoteGeoipServer != null &&
                    this.RemoteGeoipServer.Equals(input.RemoteGeoipServer))
                ) && 
                (
                    this.UseControlPlane == input.UseControlPlane ||
                    this.UseControlPlane.Equals(input.UseControlPlane)
                ) && 
                (
                    this.BypassGeoipBlocking == input.BypassGeoipBlocking ||
                    this.BypassGeoipBlocking.Equals(input.BypassGeoipBlocking)
                ) && 
                (
                    this.BypassBotnetBlocking == input.BypassBotnetBlocking ||
                    this.BypassBotnetBlocking.Equals(input.BypassBotnetBlocking)
                ) && 
                (
                    this.GeoipBotnetMapFileUpload == input.GeoipBotnetMapFileUpload ||
                    this.GeoipBotnetMapFileUpload.Equals(input.GeoipBotnetMapFileUpload)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RemoteGeoipServer != null)
                {
                    hashCode = (hashCode * 59) + this.RemoteGeoipServer.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UseControlPlane.GetHashCode();
                hashCode = (hashCode * 59) + this.BypassGeoipBlocking.GetHashCode();
                hashCode = (hashCode * 59) + this.BypassBotnetBlocking.GetHashCode();
                hashCode = (hashCode * 59) + this.GeoipBotnetMapFileUpload.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
