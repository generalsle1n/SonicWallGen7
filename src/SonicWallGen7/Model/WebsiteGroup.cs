/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Web site group configuration.
    /// </summary>
    [DataContract(Name = "website_group")]
    public partial class WebsiteGroup : IEquatable<WebsiteGroup>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebsiteGroup" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WebsiteGroup() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebsiteGroup" /> class.
        /// </summary>
        /// <param name="name">Set website group name. (required).</param>
        /// <param name="websiteObject">Assign website object to group..</param>
        /// <param name="varWebsiteGroup">Assign website group to group..</param>
        public WebsiteGroup(string name = default(string), List<AddressGroupIpv4Ipv4AddressGroupIpv4Inner> websiteObject = default(List<AddressGroupIpv4Ipv4AddressGroupIpv4Inner>), List<AddressGroupIpv4Ipv4AddressGroupIpv4Inner> varWebsiteGroup = default(List<AddressGroupIpv4Ipv4AddressGroupIpv4Inner>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for WebsiteGroup and cannot be null");
            }
            this.Name = name;
            this.WebsiteObject = websiteObject;
            this.VarWebsiteGroup = varWebsiteGroup;
        }

        /// <summary>
        /// Set website group name.
        /// </summary>
        /// <value>Set website group name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Website group UUID.
        /// </summary>
        /// <value>Website group UUID.</value>
        [DataMember(Name = "uuid", EmitDefaultValue = false)]
        public string Uuid { get; private set; }

        /// <summary>
        /// Returns false as Uuid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUuid()
        {
            return false;
        }
        /// <summary>
        /// Assign website object to group.
        /// </summary>
        /// <value>Assign website object to group.</value>
        [DataMember(Name = "website_object", EmitDefaultValue = false)]
        public List<AddressGroupIpv4Ipv4AddressGroupIpv4Inner> WebsiteObject { get; set; }

        /// <summary>
        /// Assign website group to group.
        /// </summary>
        /// <value>Assign website group to group.</value>
        [DataMember(Name = "website_group", EmitDefaultValue = false)]
        public List<AddressGroupIpv4Ipv4AddressGroupIpv4Inner> VarWebsiteGroup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebsiteGroup {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  WebsiteObject: ").Append(WebsiteObject).Append("\n");
            sb.Append("  VarWebsiteGroup: ").Append(VarWebsiteGroup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebsiteGroup);
        }

        /// <summary>
        /// Returns true if WebsiteGroup instances are equal
        /// </summary>
        /// <param name="input">Instance of WebsiteGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebsiteGroup input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.WebsiteObject == input.WebsiteObject ||
                    this.WebsiteObject != null &&
                    input.WebsiteObject != null &&
                    this.WebsiteObject.SequenceEqual(input.WebsiteObject)
                ) && 
                (
                    this.VarWebsiteGroup == input.VarWebsiteGroup ||
                    this.VarWebsiteGroup != null &&
                    input.VarWebsiteGroup != null &&
                    this.VarWebsiteGroup.SequenceEqual(input.VarWebsiteGroup)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Uuid != null)
                {
                    hashCode = (hashCode * 59) + this.Uuid.GetHashCode();
                }
                if (this.WebsiteObject != null)
                {
                    hashCode = (hashCode * 59) + this.WebsiteObject.GetHashCode();
                }
                if (this.VarWebsiteGroup != null)
                {
                    hashCode = (hashCode * 59) + this.VarWebsiteGroup.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
