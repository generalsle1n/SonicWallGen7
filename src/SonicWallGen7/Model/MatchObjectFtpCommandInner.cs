/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// MatchObjectFtpCommandInner
    /// </summary>
    [DataContract(Name = "match_object_ftp_command_inner")]
    public partial class MatchObjectFtpCommandInner : IEquatable<MatchObjectFtpCommandInner>, IValidatableObject
    {
        /// <summary>
        /// Add match object FTP command.
        /// </summary>
        /// <value>Add match object FTP command.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FtpCommandEnum
        {
            /// <summary>
            /// Enum Abort for value: abort
            /// </summary>
            [EnumMember(Value = "abort")]
            Abort = 1,

            /// <summary>
            /// Enum Account for value: account
            /// </summary>
            [EnumMember(Value = "account")]
            Account = 2,

            /// <summary>
            /// Enum Allocate for value: allocate
            /// </summary>
            [EnumMember(Value = "allocate")]
            Allocate = 3,

            /// <summary>
            /// Enum Append for value: append
            /// </summary>
            [EnumMember(Value = "append")]
            Append = 4,

            /// <summary>
            /// Enum Ascii for value: ascii
            /// </summary>
            [EnumMember(Value = "ascii")]
            Ascii = 5,

            /// <summary>
            /// Enum Binary for value: binary
            /// </summary>
            [EnumMember(Value = "binary")]
            Binary = 6,

            /// <summary>
            /// Enum Cd for value: cd
            /// </summary>
            [EnumMember(Value = "cd")]
            Cd = 7,

            /// <summary>
            /// Enum Cdup for value: cdup
            /// </summary>
            [EnumMember(Value = "cdup")]
            Cdup = 8,

            /// <summary>
            /// Enum Delete for value: delete
            /// </summary>
            [EnumMember(Value = "delete")]
            Delete = 9,

            /// <summary>
            /// Enum Get for value: get
            /// </summary>
            [EnumMember(Value = "get")]
            Get = 10,

            /// <summary>
            /// Enum Help for value: help
            /// </summary>
            [EnumMember(Value = "help")]
            Help = 11,

            /// <summary>
            /// Enum Ls for value: ls
            /// </summary>
            [EnumMember(Value = "ls")]
            Ls = 12,

            /// <summary>
            /// Enum ModifiedTime for value: modified-time
            /// </summary>
            [EnumMember(Value = "modified-time")]
            ModifiedTime = 13,

            /// <summary>
            /// Enum Mkdir for value: mkdir
            /// </summary>
            [EnumMember(Value = "mkdir")]
            Mkdir = 14,

            /// <summary>
            /// Enum Mode for value: mode
            /// </summary>
            [EnumMember(Value = "mode")]
            Mode = 15,

            /// <summary>
            /// Enum Nlist for value: nlist
            /// </summary>
            [EnumMember(Value = "nlist")]
            Nlist = 16,

            /// <summary>
            /// Enum Noop for value: noop
            /// </summary>
            [EnumMember(Value = "noop")]
            Noop = 17,

            /// <summary>
            /// Enum Password for value: password
            /// </summary>
            [EnumMember(Value = "password")]
            Password = 18,

            /// <summary>
            /// Enum Passive for value: passive
            /// </summary>
            [EnumMember(Value = "passive")]
            Passive = 19,

            /// <summary>
            /// Enum Port for value: port
            /// </summary>
            [EnumMember(Value = "port")]
            Port = 20,

            /// <summary>
            /// Enum Put for value: put
            /// </summary>
            [EnumMember(Value = "put")]
            Put = 21,

            /// <summary>
            /// Enum Pwd for value: pwd
            /// </summary>
            [EnumMember(Value = "pwd")]
            Pwd = 22,

            /// <summary>
            /// Enum Quit for value: quit
            /// </summary>
            [EnumMember(Value = "quit")]
            Quit = 23,

            /// <summary>
            /// Enum RenameFrom for value: rename-from
            /// </summary>
            [EnumMember(Value = "rename-from")]
            RenameFrom = 24,

            /// <summary>
            /// Enum RenameTo for value: rename-to
            /// </summary>
            [EnumMember(Value = "rename-to")]
            RenameTo = 25,

            /// <summary>
            /// Enum Reinitialize for value: reinitialize
            /// </summary>
            [EnumMember(Value = "reinitialize")]
            Reinitialize = 26,

            /// <summary>
            /// Enum Restart for value: restart
            /// </summary>
            [EnumMember(Value = "restart")]
            Restart = 27,

            /// <summary>
            /// Enum Rmdir for value: rmdir
            /// </summary>
            [EnumMember(Value = "rmdir")]
            Rmdir = 28,

            /// <summary>
            /// Enum Site for value: site
            /// </summary>
            [EnumMember(Value = "site")]
            Site = 29,

            /// <summary>
            /// Enum Size for value: size
            /// </summary>
            [EnumMember(Value = "size")]
            Size = 30,

            /// <summary>
            /// Enum Status for value: status
            /// </summary>
            [EnumMember(Value = "status")]
            Status = 31,

            /// <summary>
            /// Enum StructureUnique for value: structure-unique
            /// </summary>
            [EnumMember(Value = "structure-unique")]
            StructureUnique = 32,

            /// <summary>
            /// Enum Structure for value: structure
            /// </summary>
            [EnumMember(Value = "structure")]
            Structure = 33,

            /// <summary>
            /// Enum StructureMount for value: structure-mount
            /// </summary>
            [EnumMember(Value = "structure-mount")]
            StructureMount = 34,

            /// <summary>
            /// Enum System for value: system
            /// </summary>
            [EnumMember(Value = "system")]
            System = 35,

            /// <summary>
            /// Enum Type for value: type
            /// </summary>
            [EnumMember(Value = "type")]
            Type = 36,

            /// <summary>
            /// Enum User for value: user
            /// </summary>
            [EnumMember(Value = "user")]
            User = 37
        }


        /// <summary>
        /// Add match object FTP command.
        /// </summary>
        /// <value>Add match object FTP command.</value>
        [DataMember(Name = "ftp_command", EmitDefaultValue = false)]
        public FtpCommandEnum? FtpCommand { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchObjectFtpCommandInner" /> class.
        /// </summary>
        /// <param name="ftpCommand">Add match object FTP command..</param>
        public MatchObjectFtpCommandInner(FtpCommandEnum? ftpCommand = default(FtpCommandEnum?))
        {
            this.FtpCommand = ftpCommand;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MatchObjectFtpCommandInner {\n");
            sb.Append("  FtpCommand: ").Append(FtpCommand).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MatchObjectFtpCommandInner);
        }

        /// <summary>
        /// Returns true if MatchObjectFtpCommandInner instances are equal
        /// </summary>
        /// <param name="input">Instance of MatchObjectFtpCommandInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MatchObjectFtpCommandInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FtpCommand == input.FtpCommand ||
                    this.FtpCommand.Equals(input.FtpCommand)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.FtpCommand.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
