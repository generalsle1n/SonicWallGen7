/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Set the search filter for advanced mode.
    /// </summary>
    [DataContract(Name = "user_ldap_test_advanced_search_user_ldap_test_type_ldap_search_filter")]
    public partial class UserLdapTestAdvancedSearchUserLdapTestTypeLdapSearchFilter : IEquatable<UserLdapTestAdvancedSearchUserLdapTestTypeLdapSearchFilter>, IValidatableObject
    {
        /// <summary>
        /// Set the search scope.
        /// </summary>
        /// <value>Set the search scope.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScopeEnum
        {
            /// <summary>
            /// Enum SubTree for value: subTree
            /// </summary>
            [EnumMember(Value = "subTree")]
            SubTree = 1,

            /// <summary>
            /// Enum BaseEntryOnly for value: base-entry-only
            /// </summary>
            [EnumMember(Value = "base-entry-only")]
            BaseEntryOnly = 2,

            /// <summary>
            /// Enum LevelBelowBase for value: level-below-base
            /// </summary>
            [EnumMember(Value = "level-below-base")]
            LevelBelowBase = 3
        }


        /// <summary>
        /// Set the search scope.
        /// </summary>
        /// <value>Set the search scope.</value>
        [DataMember(Name = "scope", EmitDefaultValue = false)]
        public ScopeEnum? Scope { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserLdapTestAdvancedSearchUserLdapTestTypeLdapSearchFilter" /> class.
        /// </summary>
        /// <param name="filterContent">The search filter content..</param>
        /// <param name="varBase">varBase.</param>
        /// <param name="scope">Set the search scope..</param>
        public UserLdapTestAdvancedSearchUserLdapTestTypeLdapSearchFilter(string filterContent = default(string), UserLdapTestAdvancedSearchUserLdapTestTypeLdapSearchFilterBase varBase = default(UserLdapTestAdvancedSearchUserLdapTestTypeLdapSearchFilterBase), ScopeEnum? scope = default(ScopeEnum?))
        {
            this.FilterContent = filterContent;
            this.VarBase = varBase;
            this.Scope = scope;
        }

        /// <summary>
        /// The search filter content.
        /// </summary>
        /// <value>The search filter content.</value>
        [DataMember(Name = "filterContent", EmitDefaultValue = false)]
        public string FilterContent { get; set; }

        /// <summary>
        /// Gets or Sets VarBase
        /// </summary>
        [DataMember(Name = "base", EmitDefaultValue = false)]
        public UserLdapTestAdvancedSearchUserLdapTestTypeLdapSearchFilterBase VarBase { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserLdapTestAdvancedSearchUserLdapTestTypeLdapSearchFilter {\n");
            sb.Append("  FilterContent: ").Append(FilterContent).Append("\n");
            sb.Append("  VarBase: ").Append(VarBase).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserLdapTestAdvancedSearchUserLdapTestTypeLdapSearchFilter);
        }

        /// <summary>
        /// Returns true if UserLdapTestAdvancedSearchUserLdapTestTypeLdapSearchFilter instances are equal
        /// </summary>
        /// <param name="input">Instance of UserLdapTestAdvancedSearchUserLdapTestTypeLdapSearchFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserLdapTestAdvancedSearchUserLdapTestTypeLdapSearchFilter input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FilterContent == input.FilterContent ||
                    (this.FilterContent != null &&
                    this.FilterContent.Equals(input.FilterContent))
                ) && 
                (
                    this.VarBase == input.VarBase ||
                    (this.VarBase != null &&
                    this.VarBase.Equals(input.VarBase))
                ) && 
                (
                    this.Scope == input.Scope ||
                    this.Scope.Equals(input.Scope)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FilterContent != null)
                {
                    hashCode = (hashCode * 59) + this.FilterContent.GetHashCode();
                }
                if (this.VarBase != null)
                {
                    hashCode = (hashCode * 59) + this.VarBase.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Scope.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
