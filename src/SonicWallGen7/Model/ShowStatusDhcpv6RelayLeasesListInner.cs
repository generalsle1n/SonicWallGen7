/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// ShowStatusDhcpv6RelayLeasesListInner
    /// </summary>
    [DataContract(Name = "show_status_dhcpv6_relay_leases_list_inner")]
    public partial class ShowStatusDhcpv6RelayLeasesListInner : IEquatable<ShowStatusDhcpv6RelayLeasesListInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusDhcpv6RelayLeasesListInner" /> class.
        /// </summary>
        /// <param name="clientSIpAddress">clientSIpAddress.</param>
        /// <param name="iaid">iaid.</param>
        /// <param name="duid">duid.</param>
        /// <param name="serverSIpAddress">serverSIpAddress.</param>
        /// <param name="leaseTime">leaseTime.</param>
        /// <param name="remainingTime">remainingTime.</param>
        public ShowStatusDhcpv6RelayLeasesListInner(string clientSIpAddress = default(string), string iaid = default(string), string duid = default(string), string serverSIpAddress = default(string), string leaseTime = default(string), string remainingTime = default(string))
        {
            this.ClientSIpAddress = clientSIpAddress;
            this.Iaid = iaid;
            this.Duid = duid;
            this.ServerSIpAddress = serverSIpAddress;
            this.LeaseTime = leaseTime;
            this.RemainingTime = remainingTime;
        }

        /// <summary>
        /// Gets or Sets ClientSIpAddress
        /// </summary>
        [DataMember(Name = "client_s_ip_address", EmitDefaultValue = false)]
        public string ClientSIpAddress { get; set; }

        /// <summary>
        /// Gets or Sets Iaid
        /// </summary>
        [DataMember(Name = "iaid", EmitDefaultValue = false)]
        public string Iaid { get; set; }

        /// <summary>
        /// Gets or Sets Duid
        /// </summary>
        [DataMember(Name = "duid", EmitDefaultValue = false)]
        public string Duid { get; set; }

        /// <summary>
        /// Gets or Sets ServerSIpAddress
        /// </summary>
        [DataMember(Name = "server_s_ip_address", EmitDefaultValue = false)]
        public string ServerSIpAddress { get; set; }

        /// <summary>
        /// Gets or Sets LeaseTime
        /// </summary>
        [DataMember(Name = "lease_time", EmitDefaultValue = false)]
        public string LeaseTime { get; set; }

        /// <summary>
        /// Gets or Sets RemainingTime
        /// </summary>
        [DataMember(Name = "remaining_time", EmitDefaultValue = false)]
        public string RemainingTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusDhcpv6RelayLeasesListInner {\n");
            sb.Append("  ClientSIpAddress: ").Append(ClientSIpAddress).Append("\n");
            sb.Append("  Iaid: ").Append(Iaid).Append("\n");
            sb.Append("  Duid: ").Append(Duid).Append("\n");
            sb.Append("  ServerSIpAddress: ").Append(ServerSIpAddress).Append("\n");
            sb.Append("  LeaseTime: ").Append(LeaseTime).Append("\n");
            sb.Append("  RemainingTime: ").Append(RemainingTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusDhcpv6RelayLeasesListInner);
        }

        /// <summary>
        /// Returns true if ShowStatusDhcpv6RelayLeasesListInner instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusDhcpv6RelayLeasesListInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusDhcpv6RelayLeasesListInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ClientSIpAddress == input.ClientSIpAddress ||
                    (this.ClientSIpAddress != null &&
                    this.ClientSIpAddress.Equals(input.ClientSIpAddress))
                ) && 
                (
                    this.Iaid == input.Iaid ||
                    (this.Iaid != null &&
                    this.Iaid.Equals(input.Iaid))
                ) && 
                (
                    this.Duid == input.Duid ||
                    (this.Duid != null &&
                    this.Duid.Equals(input.Duid))
                ) && 
                (
                    this.ServerSIpAddress == input.ServerSIpAddress ||
                    (this.ServerSIpAddress != null &&
                    this.ServerSIpAddress.Equals(input.ServerSIpAddress))
                ) && 
                (
                    this.LeaseTime == input.LeaseTime ||
                    (this.LeaseTime != null &&
                    this.LeaseTime.Equals(input.LeaseTime))
                ) && 
                (
                    this.RemainingTime == input.RemainingTime ||
                    (this.RemainingTime != null &&
                    this.RemainingTime.Equals(input.RemainingTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientSIpAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ClientSIpAddress.GetHashCode();
                }
                if (this.Iaid != null)
                {
                    hashCode = (hashCode * 59) + this.Iaid.GetHashCode();
                }
                if (this.Duid != null)
                {
                    hashCode = (hashCode * 59) + this.Duid.GetHashCode();
                }
                if (this.ServerSIpAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ServerSIpAddress.GetHashCode();
                }
                if (this.LeaseTime != null)
                {
                    hashCode = (hashCode * 59) + this.LeaseTime.GetHashCode();
                }
                if (this.RemainingTime != null)
                {
                    hashCode = (hashCode * 59) + this.RemainingTime.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
