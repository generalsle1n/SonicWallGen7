/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// interface ip detail schema.
    /// </summary>
    [DataContract(Name = "show_status_interface_ip_detail")]
    public partial class ShowStatusInterfaceIpDetail : IEquatable<ShowStatusInterfaceIpDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusInterfaceIpDetail" /> class.
        /// </summary>
        /// <param name="interfaceName">interfaceName.</param>
        /// <param name="zone">zone.</param>
        /// <param name="type">type.</param>
        /// <param name="ipMode">ipMode.</param>
        /// <param name="ipAddress">ipAddress.</param>
        /// <param name="subnetMask">subnetMask.</param>
        /// <param name="defaultGateway">defaultGateway.</param>
        /// <param name="pppoeMru">pppoeMru.</param>
        /// <param name="l2tpIpAddress">l2tpIpAddress.</param>
        /// <param name="l2tpSubnetMask">l2tpSubnetMask.</param>
        /// <param name="l2tpDefaultGateway">l2tpDefaultGateway.</param>
        /// <param name="pptpIpAddress">pptpIpAddress.</param>
        /// <param name="pptpSubnetMask">pptpSubnetMask.</param>
        /// <param name="pptpDefaultGateway">pptpDefaultGateway.</param>
        /// <param name="linkStatus">linkStatus.</param>
        /// <param name="primarySonicDns">primarySonicDns.</param>
        /// <param name="secondarySonicDns">secondarySonicDns.</param>
        /// <param name="tertiarySonicDns">tertiarySonicDns.</param>
        /// <param name="leaseExpires">leaseExpires.</param>
        public ShowStatusInterfaceIpDetail(string interfaceName = default(string), string zone = default(string), string type = default(string), string ipMode = default(string), string ipAddress = default(string), string subnetMask = default(string), string defaultGateway = default(string), string pppoeMru = default(string), string l2tpIpAddress = default(string), string l2tpSubnetMask = default(string), string l2tpDefaultGateway = default(string), string pptpIpAddress = default(string), string pptpSubnetMask = default(string), string pptpDefaultGateway = default(string), string linkStatus = default(string), string primarySonicDns = default(string), string secondarySonicDns = default(string), string tertiarySonicDns = default(string), string leaseExpires = default(string))
        {
            this.InterfaceName = interfaceName;
            this.Zone = zone;
            this.Type = type;
            this.IpMode = ipMode;
            this.IpAddress = ipAddress;
            this.SubnetMask = subnetMask;
            this.DefaultGateway = defaultGateway;
            this.PppoeMru = pppoeMru;
            this.L2tpIpAddress = l2tpIpAddress;
            this.L2tpSubnetMask = l2tpSubnetMask;
            this.L2tpDefaultGateway = l2tpDefaultGateway;
            this.PptpIpAddress = pptpIpAddress;
            this.PptpSubnetMask = pptpSubnetMask;
            this.PptpDefaultGateway = pptpDefaultGateway;
            this.LinkStatus = linkStatus;
            this.PrimarySonicDns = primarySonicDns;
            this.SecondarySonicDns = secondarySonicDns;
            this.TertiarySonicDns = tertiarySonicDns;
            this.LeaseExpires = leaseExpires;
        }

        /// <summary>
        /// Gets or Sets InterfaceName
        /// </summary>
        [DataMember(Name = "interface_name", EmitDefaultValue = false)]
        public string InterfaceName { get; set; }

        /// <summary>
        /// Gets or Sets Zone
        /// </summary>
        [DataMember(Name = "zone", EmitDefaultValue = false)]
        public string Zone { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets IpMode
        /// </summary>
        [DataMember(Name = "ip_mode", EmitDefaultValue = false)]
        public string IpMode { get; set; }

        /// <summary>
        /// Gets or Sets IpAddress
        /// </summary>
        [DataMember(Name = "ip_address", EmitDefaultValue = false)]
        public string IpAddress { get; set; }

        /// <summary>
        /// Gets or Sets SubnetMask
        /// </summary>
        [DataMember(Name = "subnet_mask", EmitDefaultValue = false)]
        public string SubnetMask { get; set; }

        /// <summary>
        /// Gets or Sets DefaultGateway
        /// </summary>
        [DataMember(Name = "default_gateway", EmitDefaultValue = false)]
        public string DefaultGateway { get; set; }

        /// <summary>
        /// Gets or Sets PppoeMru
        /// </summary>
        [DataMember(Name = "pppoe_mru", EmitDefaultValue = false)]
        public string PppoeMru { get; set; }

        /// <summary>
        /// Gets or Sets L2tpIpAddress
        /// </summary>
        [DataMember(Name = "l2tp_ip_address", EmitDefaultValue = false)]
        public string L2tpIpAddress { get; set; }

        /// <summary>
        /// Gets or Sets L2tpSubnetMask
        /// </summary>
        [DataMember(Name = "l2tp_subnet_mask", EmitDefaultValue = false)]
        public string L2tpSubnetMask { get; set; }

        /// <summary>
        /// Gets or Sets L2tpDefaultGateway
        /// </summary>
        [DataMember(Name = "l2tp_default_gateway", EmitDefaultValue = false)]
        public string L2tpDefaultGateway { get; set; }

        /// <summary>
        /// Gets or Sets PptpIpAddress
        /// </summary>
        [DataMember(Name = "pptp_ip_address", EmitDefaultValue = false)]
        public string PptpIpAddress { get; set; }

        /// <summary>
        /// Gets or Sets PptpSubnetMask
        /// </summary>
        [DataMember(Name = "pptp_subnet_mask", EmitDefaultValue = false)]
        public string PptpSubnetMask { get; set; }

        /// <summary>
        /// Gets or Sets PptpDefaultGateway
        /// </summary>
        [DataMember(Name = "pptp_default_gateway", EmitDefaultValue = false)]
        public string PptpDefaultGateway { get; set; }

        /// <summary>
        /// Gets or Sets LinkStatus
        /// </summary>
        [DataMember(Name = "link_status", EmitDefaultValue = false)]
        public string LinkStatus { get; set; }

        /// <summary>
        /// Gets or Sets PrimarySonicDns
        /// </summary>
        [DataMember(Name = "primary_SonicDns", EmitDefaultValue = false)]
        public string PrimarySonicDns { get; set; }

        /// <summary>
        /// Gets or Sets SecondarySonicDns
        /// </summary>
        [DataMember(Name = "secondary_SonicDns", EmitDefaultValue = false)]
        public string SecondarySonicDns { get; set; }

        /// <summary>
        /// Gets or Sets TertiarySonicDns
        /// </summary>
        [DataMember(Name = "tertiary_SonicDns", EmitDefaultValue = false)]
        public string TertiarySonicDns { get; set; }

        /// <summary>
        /// Gets or Sets LeaseExpires
        /// </summary>
        [DataMember(Name = "lease_expires", EmitDefaultValue = false)]
        public string LeaseExpires { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusInterfaceIpDetail {\n");
            sb.Append("  InterfaceName: ").Append(InterfaceName).Append("\n");
            sb.Append("  Zone: ").Append(Zone).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IpMode: ").Append(IpMode).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  SubnetMask: ").Append(SubnetMask).Append("\n");
            sb.Append("  DefaultGateway: ").Append(DefaultGateway).Append("\n");
            sb.Append("  PppoeMru: ").Append(PppoeMru).Append("\n");
            sb.Append("  L2tpIpAddress: ").Append(L2tpIpAddress).Append("\n");
            sb.Append("  L2tpSubnetMask: ").Append(L2tpSubnetMask).Append("\n");
            sb.Append("  L2tpDefaultGateway: ").Append(L2tpDefaultGateway).Append("\n");
            sb.Append("  PptpIpAddress: ").Append(PptpIpAddress).Append("\n");
            sb.Append("  PptpSubnetMask: ").Append(PptpSubnetMask).Append("\n");
            sb.Append("  PptpDefaultGateway: ").Append(PptpDefaultGateway).Append("\n");
            sb.Append("  LinkStatus: ").Append(LinkStatus).Append("\n");
            sb.Append("  PrimarySonicDns: ").Append(PrimarySonicDns).Append("\n");
            sb.Append("  SecondarySonicDns: ").Append(SecondarySonicDns).Append("\n");
            sb.Append("  TertiarySonicDns: ").Append(TertiarySonicDns).Append("\n");
            sb.Append("  LeaseExpires: ").Append(LeaseExpires).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusInterfaceIpDetail);
        }

        /// <summary>
        /// Returns true if ShowStatusInterfaceIpDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusInterfaceIpDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusInterfaceIpDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InterfaceName == input.InterfaceName ||
                    (this.InterfaceName != null &&
                    this.InterfaceName.Equals(input.InterfaceName))
                ) && 
                (
                    this.Zone == input.Zone ||
                    (this.Zone != null &&
                    this.Zone.Equals(input.Zone))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.IpMode == input.IpMode ||
                    (this.IpMode != null &&
                    this.IpMode.Equals(input.IpMode))
                ) && 
                (
                    this.IpAddress == input.IpAddress ||
                    (this.IpAddress != null &&
                    this.IpAddress.Equals(input.IpAddress))
                ) && 
                (
                    this.SubnetMask == input.SubnetMask ||
                    (this.SubnetMask != null &&
                    this.SubnetMask.Equals(input.SubnetMask))
                ) && 
                (
                    this.DefaultGateway == input.DefaultGateway ||
                    (this.DefaultGateway != null &&
                    this.DefaultGateway.Equals(input.DefaultGateway))
                ) && 
                (
                    this.PppoeMru == input.PppoeMru ||
                    (this.PppoeMru != null &&
                    this.PppoeMru.Equals(input.PppoeMru))
                ) && 
                (
                    this.L2tpIpAddress == input.L2tpIpAddress ||
                    (this.L2tpIpAddress != null &&
                    this.L2tpIpAddress.Equals(input.L2tpIpAddress))
                ) && 
                (
                    this.L2tpSubnetMask == input.L2tpSubnetMask ||
                    (this.L2tpSubnetMask != null &&
                    this.L2tpSubnetMask.Equals(input.L2tpSubnetMask))
                ) && 
                (
                    this.L2tpDefaultGateway == input.L2tpDefaultGateway ||
                    (this.L2tpDefaultGateway != null &&
                    this.L2tpDefaultGateway.Equals(input.L2tpDefaultGateway))
                ) && 
                (
                    this.PptpIpAddress == input.PptpIpAddress ||
                    (this.PptpIpAddress != null &&
                    this.PptpIpAddress.Equals(input.PptpIpAddress))
                ) && 
                (
                    this.PptpSubnetMask == input.PptpSubnetMask ||
                    (this.PptpSubnetMask != null &&
                    this.PptpSubnetMask.Equals(input.PptpSubnetMask))
                ) && 
                (
                    this.PptpDefaultGateway == input.PptpDefaultGateway ||
                    (this.PptpDefaultGateway != null &&
                    this.PptpDefaultGateway.Equals(input.PptpDefaultGateway))
                ) && 
                (
                    this.LinkStatus == input.LinkStatus ||
                    (this.LinkStatus != null &&
                    this.LinkStatus.Equals(input.LinkStatus))
                ) && 
                (
                    this.PrimarySonicDns == input.PrimarySonicDns ||
                    (this.PrimarySonicDns != null &&
                    this.PrimarySonicDns.Equals(input.PrimarySonicDns))
                ) && 
                (
                    this.SecondarySonicDns == input.SecondarySonicDns ||
                    (this.SecondarySonicDns != null &&
                    this.SecondarySonicDns.Equals(input.SecondarySonicDns))
                ) && 
                (
                    this.TertiarySonicDns == input.TertiarySonicDns ||
                    (this.TertiarySonicDns != null &&
                    this.TertiarySonicDns.Equals(input.TertiarySonicDns))
                ) && 
                (
                    this.LeaseExpires == input.LeaseExpires ||
                    (this.LeaseExpires != null &&
                    this.LeaseExpires.Equals(input.LeaseExpires))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InterfaceName != null)
                {
                    hashCode = (hashCode * 59) + this.InterfaceName.GetHashCode();
                }
                if (this.Zone != null)
                {
                    hashCode = (hashCode * 59) + this.Zone.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.IpMode != null)
                {
                    hashCode = (hashCode * 59) + this.IpMode.GetHashCode();
                }
                if (this.IpAddress != null)
                {
                    hashCode = (hashCode * 59) + this.IpAddress.GetHashCode();
                }
                if (this.SubnetMask != null)
                {
                    hashCode = (hashCode * 59) + this.SubnetMask.GetHashCode();
                }
                if (this.DefaultGateway != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultGateway.GetHashCode();
                }
                if (this.PppoeMru != null)
                {
                    hashCode = (hashCode * 59) + this.PppoeMru.GetHashCode();
                }
                if (this.L2tpIpAddress != null)
                {
                    hashCode = (hashCode * 59) + this.L2tpIpAddress.GetHashCode();
                }
                if (this.L2tpSubnetMask != null)
                {
                    hashCode = (hashCode * 59) + this.L2tpSubnetMask.GetHashCode();
                }
                if (this.L2tpDefaultGateway != null)
                {
                    hashCode = (hashCode * 59) + this.L2tpDefaultGateway.GetHashCode();
                }
                if (this.PptpIpAddress != null)
                {
                    hashCode = (hashCode * 59) + this.PptpIpAddress.GetHashCode();
                }
                if (this.PptpSubnetMask != null)
                {
                    hashCode = (hashCode * 59) + this.PptpSubnetMask.GetHashCode();
                }
                if (this.PptpDefaultGateway != null)
                {
                    hashCode = (hashCode * 59) + this.PptpDefaultGateway.GetHashCode();
                }
                if (this.LinkStatus != null)
                {
                    hashCode = (hashCode * 59) + this.LinkStatus.GetHashCode();
                }
                if (this.PrimarySonicDns != null)
                {
                    hashCode = (hashCode * 59) + this.PrimarySonicDns.GetHashCode();
                }
                if (this.SecondarySonicDns != null)
                {
                    hashCode = (hashCode * 59) + this.SecondarySonicDns.GetHashCode();
                }
                if (this.TertiarySonicDns != null)
                {
                    hashCode = (hashCode * 59) + this.TertiarySonicDns.GetHashCode();
                }
                if (this.LeaseExpires != null)
                {
                    hashCode = (hashCode * 59) + this.LeaseExpires.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
