/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Set certificate signing request distinguished name second element.
    /// </summary>
    [DataContract(Name = "certificates_generate_signing_request_distinguished_name_element2")]
    public partial class CertificatesGenerateSigningRequestDistinguishedNameElement2 : IEquatable<CertificatesGenerateSigningRequestDistinguishedNameElement2>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificatesGenerateSigningRequestDistinguishedNameElement2" /> class.
        /// </summary>
        /// <param name="country">Country. Adds C&#x3D;country-name to distinguished name..</param>
        /// <param name="state">State. Adds ST&#x3D;state-name to distinguished name..</param>
        /// <param name="locality">Locality, City, or County. Adds L&#x3D;locality-name to distinguished name..</param>
        /// <param name="organization">Company or organization. Adds O&#x3D;orgainization-name to distinguished name..</param>
        /// <param name="department">Department. Adds OU&#x3D;department-name to distinguished name..</param>
        public CertificatesGenerateSigningRequestDistinguishedNameElement2(string country = default(string), string state = default(string), string locality = default(string), string organization = default(string), string department = default(string))
        {
            this.Country = country;
            this.State = state;
            this.Locality = locality;
            this.Organization = organization;
            this.Department = department;
        }

        /// <summary>
        /// Country. Adds C&#x3D;country-name to distinguished name.
        /// </summary>
        /// <value>Country. Adds C&#x3D;country-name to distinguished name.</value>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// State. Adds ST&#x3D;state-name to distinguished name.
        /// </summary>
        /// <value>State. Adds ST&#x3D;state-name to distinguished name.</value>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Locality, City, or County. Adds L&#x3D;locality-name to distinguished name.
        /// </summary>
        /// <value>Locality, City, or County. Adds L&#x3D;locality-name to distinguished name.</value>
        [DataMember(Name = "locality", EmitDefaultValue = false)]
        public string Locality { get; set; }

        /// <summary>
        /// Company or organization. Adds O&#x3D;orgainization-name to distinguished name.
        /// </summary>
        /// <value>Company or organization. Adds O&#x3D;orgainization-name to distinguished name.</value>
        [DataMember(Name = "organization", EmitDefaultValue = false)]
        public string Organization { get; set; }

        /// <summary>
        /// Department. Adds OU&#x3D;department-name to distinguished name.
        /// </summary>
        /// <value>Department. Adds OU&#x3D;department-name to distinguished name.</value>
        [DataMember(Name = "department", EmitDefaultValue = false)]
        public string Department { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CertificatesGenerateSigningRequestDistinguishedNameElement2 {\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Locality: ").Append(Locality).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  Department: ").Append(Department).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CertificatesGenerateSigningRequestDistinguishedNameElement2);
        }

        /// <summary>
        /// Returns true if CertificatesGenerateSigningRequestDistinguishedNameElement2 instances are equal
        /// </summary>
        /// <param name="input">Instance of CertificatesGenerateSigningRequestDistinguishedNameElement2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CertificatesGenerateSigningRequestDistinguishedNameElement2 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Locality == input.Locality ||
                    (this.Locality != null &&
                    this.Locality.Equals(input.Locality))
                ) && 
                (
                    this.Organization == input.Organization ||
                    (this.Organization != null &&
                    this.Organization.Equals(input.Organization))
                ) && 
                (
                    this.Department == input.Department ||
                    (this.Department != null &&
                    this.Department.Equals(input.Department))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                if (this.Locality != null)
                {
                    hashCode = (hashCode * 59) + this.Locality.GetHashCode();
                }
                if (this.Organization != null)
                {
                    hashCode = (hashCode * 59) + this.Organization.GetHashCode();
                }
                if (this.Department != null)
                {
                    hashCode = (hashCode * 59) + this.Department.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
