/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// ShowStatusSysfileLogsListInner
    /// </summary>
    [DataContract(Name = "show_status_sysfile_logs_list_inner")]
    public partial class ShowStatusSysfileLogsListInner : IEquatable<ShowStatusSysfileLogsListInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusSysfileLogsListInner" /> class.
        /// </summary>
        /// <param name="fileName">fileName.</param>
        /// <param name="fileSize">fileSize.</param>
        /// <param name="fileLocation">fileLocation.</param>
        /// <param name="fileTime">fileTime.</param>
        /// <param name="fileOperation">fileOperation.</param>
        public ShowStatusSysfileLogsListInner(string fileName = default(string), string fileSize = default(string), string fileLocation = default(string), string fileTime = default(string), string fileOperation = default(string))
        {
            this.FileName = fileName;
            this.FileSize = fileSize;
            this.FileLocation = fileLocation;
            this.FileTime = fileTime;
            this.FileOperation = fileOperation;
        }

        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [DataMember(Name = "file_name", EmitDefaultValue = false)]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or Sets FileSize
        /// </summary>
        [DataMember(Name = "file_size", EmitDefaultValue = false)]
        public string FileSize { get; set; }

        /// <summary>
        /// Gets or Sets FileLocation
        /// </summary>
        [DataMember(Name = "file_location", EmitDefaultValue = false)]
        public string FileLocation { get; set; }

        /// <summary>
        /// Gets or Sets FileTime
        /// </summary>
        [DataMember(Name = "file_time", EmitDefaultValue = false)]
        public string FileTime { get; set; }

        /// <summary>
        /// Gets or Sets FileOperation
        /// </summary>
        [DataMember(Name = "file_operation", EmitDefaultValue = false)]
        public string FileOperation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusSysfileLogsListInner {\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  FileSize: ").Append(FileSize).Append("\n");
            sb.Append("  FileLocation: ").Append(FileLocation).Append("\n");
            sb.Append("  FileTime: ").Append(FileTime).Append("\n");
            sb.Append("  FileOperation: ").Append(FileOperation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusSysfileLogsListInner);
        }

        /// <summary>
        /// Returns true if ShowStatusSysfileLogsListInner instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusSysfileLogsListInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusSysfileLogsListInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.FileSize == input.FileSize ||
                    (this.FileSize != null &&
                    this.FileSize.Equals(input.FileSize))
                ) && 
                (
                    this.FileLocation == input.FileLocation ||
                    (this.FileLocation != null &&
                    this.FileLocation.Equals(input.FileLocation))
                ) && 
                (
                    this.FileTime == input.FileTime ||
                    (this.FileTime != null &&
                    this.FileTime.Equals(input.FileTime))
                ) && 
                (
                    this.FileOperation == input.FileOperation ||
                    (this.FileOperation != null &&
                    this.FileOperation.Equals(input.FileOperation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FileName != null)
                {
                    hashCode = (hashCode * 59) + this.FileName.GetHashCode();
                }
                if (this.FileSize != null)
                {
                    hashCode = (hashCode * 59) + this.FileSize.GetHashCode();
                }
                if (this.FileLocation != null)
                {
                    hashCode = (hashCode * 59) + this.FileLocation.GetHashCode();
                }
                if (this.FileTime != null)
                {
                    hashCode = (hashCode * 59) + this.FileTime.GetHashCode();
                }
                if (this.FileOperation != null)
                {
                    hashCode = (hashCode * 59) + this.FileOperation.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
