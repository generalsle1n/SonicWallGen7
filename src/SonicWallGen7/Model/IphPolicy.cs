/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// IP helper policies configuration schema.
    /// </summary>
    [DataContract(Name = "iph_policy")]
    public partial class IphPolicy : IEquatable<IphPolicy>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IphPolicy" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IphPolicy() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IphPolicy" /> class.
        /// </summary>
        /// <param name="protocol">Specify IP helper relay protocol to associate with this policy. (required).</param>
        /// <param name="source">source (required).</param>
        /// <param name="destination">destination.</param>
        /// <param name="enable">Enable IP helper policy..</param>
        /// <param name="comment">Specify comment for IP helper policy..</param>
        /// <param name="egressif">Set Egress Interface. * Set to null to represent an unconfigured state..</param>
        public IphPolicy(string protocol = default(string), IphPolicySource source = default(IphPolicySource), IphPolicyDestination destination = default(IphPolicyDestination), bool enable = default(bool), string comment = default(string), string egressif = default(string))
        {
            // to ensure "protocol" is required (not null)
            if (protocol == null)
            {
                throw new ArgumentNullException("protocol is a required property for IphPolicy and cannot be null");
            }
            this.Protocol = protocol;
            // to ensure "source" is required (not null)
            if (source == null)
            {
                throw new ArgumentNullException("source is a required property for IphPolicy and cannot be null");
            }
            this.Source = source;
            this.Destination = destination;
            this.Enable = enable;
            this.Comment = comment;
            this.Egressif = egressif;
        }

        /// <summary>
        /// Specify IP helper relay protocol to associate with this policy.
        /// </summary>
        /// <value>Specify IP helper relay protocol to associate with this policy.</value>
        [DataMember(Name = "protocol", IsRequired = true, EmitDefaultValue = true)]
        public string Protocol { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", IsRequired = true, EmitDefaultValue = true)]
        public IphPolicySource Source { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [DataMember(Name = "destination", EmitDefaultValue = false)]
        public IphPolicyDestination Destination { get; set; }

        /// <summary>
        /// Enable IP helper policy.
        /// </summary>
        /// <value>Enable IP helper policy.</value>
        [DataMember(Name = "enable", EmitDefaultValue = true)]
        public bool Enable { get; set; }

        /// <summary>
        /// Specify comment for IP helper policy.
        /// </summary>
        /// <value>Specify comment for IP helper policy.</value>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Set Egress Interface. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Set Egress Interface. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "egressif", EmitDefaultValue = true)]
        public string Egressif { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IphPolicy {\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Egressif: ").Append(Egressif).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IphPolicy);
        }

        /// <summary>
        /// Returns true if IphPolicy instances are equal
        /// </summary>
        /// <param name="input">Instance of IphPolicy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IphPolicy input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Protocol == input.Protocol ||
                    (this.Protocol != null &&
                    this.Protocol.Equals(input.Protocol))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.Destination == input.Destination ||
                    (this.Destination != null &&
                    this.Destination.Equals(input.Destination))
                ) && 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Egressif == input.Egressif ||
                    (this.Egressif != null &&
                    this.Egressif.Equals(input.Egressif))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Protocol != null)
                {
                    hashCode = (hashCode * 59) + this.Protocol.GetHashCode();
                }
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                if (this.Destination != null)
                {
                    hashCode = (hashCode * 59) + this.Destination.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Enable.GetHashCode();
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                if (this.Egressif != null)
                {
                    hashCode = (hashCode * 59) + this.Egressif.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
