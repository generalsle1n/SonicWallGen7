/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Content filter profile object configuration.
    /// </summary>
    [DataContract(Name = "content_filter_profile")]
    public partial class ContentFilterProfile : IEquatable<ContentFilterProfile>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentFilterProfile" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContentFilterProfile() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentFilterProfile" /> class.
        /// </summary>
        /// <param name="name">Set profile object name. (required).</param>
        /// <param name="uriList">uriList.</param>
        /// <param name="category">Set operation of category..</param>
        /// <param name="categories">Set operation for all categories..</param>
        /// <param name="httpsFiltering">Enable CFS HTTPS filtering..</param>
        /// <param name="smartFilter">Enable smart filtering for embedded URI..</param>
        /// <param name="safeSearch">Enable safe search enforcement..</param>
        /// <param name="threatApi">Enable threat api enforcement..</param>
        /// <param name="googleForceSafeSearch">Enable Google force safe search..</param>
        /// <param name="youtubeRestrictMode">Enable YouTube restrict mode..</param>
        /// <param name="bingForceSafeSearch">Enable Bing force safe search..</param>
        /// <param name="consent">consent.</param>
        /// <param name="customHeader">customHeader.</param>
        public ContentFilterProfile(string name = default(string), ContentFilterProfileUriList uriList = default(ContentFilterProfileUriList), List<ContentFilterProfileCategoryInner> category = default(List<ContentFilterProfileCategoryInner>), string categories = default(string), bool httpsFiltering = default(bool), bool smartFilter = default(bool), bool safeSearch = default(bool), bool threatApi = default(bool), bool googleForceSafeSearch = default(bool), bool youtubeRestrictMode = default(bool), bool bingForceSafeSearch = default(bool), ContentFilterProfileConsent consent = default(ContentFilterProfileConsent), ContentFilterProfileCustomHeader customHeader = default(ContentFilterProfileCustomHeader))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ContentFilterProfile and cannot be null");
            }
            this.Name = name;
            this.UriList = uriList;
            this.Category = category;
            this.Categories = categories;
            this.HttpsFiltering = httpsFiltering;
            this.SmartFilter = smartFilter;
            this.SafeSearch = safeSearch;
            this.ThreatApi = threatApi;
            this.GoogleForceSafeSearch = googleForceSafeSearch;
            this.YoutubeRestrictMode = youtubeRestrictMode;
            this.BingForceSafeSearch = bingForceSafeSearch;
            this.Consent = consent;
            this.CustomHeader = customHeader;
        }

        /// <summary>
        /// Set profile object name.
        /// </summary>
        /// <value>Set profile object name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Select CFS profile object by UUID.
        /// </summary>
        /// <value>Select CFS profile object by UUID.</value>
        [DataMember(Name = "uuid", EmitDefaultValue = false)]
        public string Uuid { get; private set; }

        /// <summary>
        /// Returns false as Uuid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUuid()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UriList
        /// </summary>
        [DataMember(Name = "uri_list", EmitDefaultValue = false)]
        public ContentFilterProfileUriList UriList { get; set; }

        /// <summary>
        /// Set operation of category.
        /// </summary>
        /// <value>Set operation of category.</value>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        public List<ContentFilterProfileCategoryInner> Category { get; set; }

        /// <summary>
        /// Set operation for all categories.
        /// </summary>
        /// <value>Set operation for all categories.</value>
        [DataMember(Name = "categories", EmitDefaultValue = false)]
        public string Categories { get; set; }

        /// <summary>
        /// Enable CFS HTTPS filtering.
        /// </summary>
        /// <value>Enable CFS HTTPS filtering.</value>
        [DataMember(Name = "https_filtering", EmitDefaultValue = true)]
        public bool HttpsFiltering { get; set; }

        /// <summary>
        /// Enable smart filtering for embedded URI.
        /// </summary>
        /// <value>Enable smart filtering for embedded URI.</value>
        [DataMember(Name = "smart_filter", EmitDefaultValue = true)]
        public bool SmartFilter { get; set; }

        /// <summary>
        /// Enable safe search enforcement.
        /// </summary>
        /// <value>Enable safe search enforcement.</value>
        [DataMember(Name = "safe_search", EmitDefaultValue = true)]
        public bool SafeSearch { get; set; }

        /// <summary>
        /// Enable threat api enforcement.
        /// </summary>
        /// <value>Enable threat api enforcement.</value>
        [DataMember(Name = "threat_api", EmitDefaultValue = true)]
        public bool ThreatApi { get; set; }

        /// <summary>
        /// Enable Google force safe search.
        /// </summary>
        /// <value>Enable Google force safe search.</value>
        [DataMember(Name = "google_force_safe_search", EmitDefaultValue = true)]
        public bool GoogleForceSafeSearch { get; set; }

        /// <summary>
        /// Enable YouTube restrict mode.
        /// </summary>
        /// <value>Enable YouTube restrict mode.</value>
        [DataMember(Name = "youtube_restrict_mode", EmitDefaultValue = true)]
        public bool YoutubeRestrictMode { get; set; }

        /// <summary>
        /// Enable Bing force safe search.
        /// </summary>
        /// <value>Enable Bing force safe search.</value>
        [DataMember(Name = "bing_force_safe_search", EmitDefaultValue = true)]
        public bool BingForceSafeSearch { get; set; }

        /// <summary>
        /// Gets or Sets Consent
        /// </summary>
        [DataMember(Name = "consent", EmitDefaultValue = false)]
        public ContentFilterProfileConsent Consent { get; set; }

        /// <summary>
        /// Gets or Sets CustomHeader
        /// </summary>
        [DataMember(Name = "custom_header", EmitDefaultValue = false)]
        public ContentFilterProfileCustomHeader CustomHeader { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContentFilterProfile {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  UriList: ").Append(UriList).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  HttpsFiltering: ").Append(HttpsFiltering).Append("\n");
            sb.Append("  SmartFilter: ").Append(SmartFilter).Append("\n");
            sb.Append("  SafeSearch: ").Append(SafeSearch).Append("\n");
            sb.Append("  ThreatApi: ").Append(ThreatApi).Append("\n");
            sb.Append("  GoogleForceSafeSearch: ").Append(GoogleForceSafeSearch).Append("\n");
            sb.Append("  YoutubeRestrictMode: ").Append(YoutubeRestrictMode).Append("\n");
            sb.Append("  BingForceSafeSearch: ").Append(BingForceSafeSearch).Append("\n");
            sb.Append("  Consent: ").Append(Consent).Append("\n");
            sb.Append("  CustomHeader: ").Append(CustomHeader).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContentFilterProfile);
        }

        /// <summary>
        /// Returns true if ContentFilterProfile instances are equal
        /// </summary>
        /// <param name="input">Instance of ContentFilterProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContentFilterProfile input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.UriList == input.UriList ||
                    (this.UriList != null &&
                    this.UriList.Equals(input.UriList))
                ) && 
                (
                    this.Category == input.Category ||
                    this.Category != null &&
                    input.Category != null &&
                    this.Category.SequenceEqual(input.Category)
                ) && 
                (
                    this.Categories == input.Categories ||
                    (this.Categories != null &&
                    this.Categories.Equals(input.Categories))
                ) && 
                (
                    this.HttpsFiltering == input.HttpsFiltering ||
                    this.HttpsFiltering.Equals(input.HttpsFiltering)
                ) && 
                (
                    this.SmartFilter == input.SmartFilter ||
                    this.SmartFilter.Equals(input.SmartFilter)
                ) && 
                (
                    this.SafeSearch == input.SafeSearch ||
                    this.SafeSearch.Equals(input.SafeSearch)
                ) && 
                (
                    this.ThreatApi == input.ThreatApi ||
                    this.ThreatApi.Equals(input.ThreatApi)
                ) && 
                (
                    this.GoogleForceSafeSearch == input.GoogleForceSafeSearch ||
                    this.GoogleForceSafeSearch.Equals(input.GoogleForceSafeSearch)
                ) && 
                (
                    this.YoutubeRestrictMode == input.YoutubeRestrictMode ||
                    this.YoutubeRestrictMode.Equals(input.YoutubeRestrictMode)
                ) && 
                (
                    this.BingForceSafeSearch == input.BingForceSafeSearch ||
                    this.BingForceSafeSearch.Equals(input.BingForceSafeSearch)
                ) && 
                (
                    this.Consent == input.Consent ||
                    (this.Consent != null &&
                    this.Consent.Equals(input.Consent))
                ) && 
                (
                    this.CustomHeader == input.CustomHeader ||
                    (this.CustomHeader != null &&
                    this.CustomHeader.Equals(input.CustomHeader))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Uuid != null)
                {
                    hashCode = (hashCode * 59) + this.Uuid.GetHashCode();
                }
                if (this.UriList != null)
                {
                    hashCode = (hashCode * 59) + this.UriList.GetHashCode();
                }
                if (this.Category != null)
                {
                    hashCode = (hashCode * 59) + this.Category.GetHashCode();
                }
                if (this.Categories != null)
                {
                    hashCode = (hashCode * 59) + this.Categories.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HttpsFiltering.GetHashCode();
                hashCode = (hashCode * 59) + this.SmartFilter.GetHashCode();
                hashCode = (hashCode * 59) + this.SafeSearch.GetHashCode();
                hashCode = (hashCode * 59) + this.ThreatApi.GetHashCode();
                hashCode = (hashCode * 59) + this.GoogleForceSafeSearch.GetHashCode();
                hashCode = (hashCode * 59) + this.YoutubeRestrictMode.GetHashCode();
                hashCode = (hashCode * 59) + this.BingForceSafeSearch.GetHashCode();
                if (this.Consent != null)
                {
                    hashCode = (hashCode * 59) + this.Consent.GetHashCode();
                }
                if (this.CustomHeader != null)
                {
                    hashCode = (hashCode * 59) + this.CustomHeader.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
