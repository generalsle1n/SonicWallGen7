/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// flb group status detail schema.
    /// </summary>
    [DataContract(Name = "show_status_flb_group_status_detail")]
    public partial class ShowStatusFlbGroupStatusDetail : IEquatable<ShowStatusFlbGroupStatusDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusFlbGroupStatusDetail" /> class.
        /// </summary>
        /// <param name="groupName">groupName.</param>
        /// <param name="type">type.</param>
        /// <param name="status">status.</param>
        /// <param name="totalMembers">totalMembers.</param>
        /// <param name="primaryMember">primaryMember.</param>
        /// <param name="activeMember">activeMember.</param>
        /// <param name="loadBalancingMember">loadBalancingMember.</param>
        /// <param name="finalBackUp">finalBackUp.</param>
        /// <param name="globalProbing">globalProbing.</param>
        public ShowStatusFlbGroupStatusDetail(string groupName = default(string), string type = default(string), string status = default(string), string totalMembers = default(string), string primaryMember = default(string), string activeMember = default(string), string loadBalancingMember = default(string), string finalBackUp = default(string), string globalProbing = default(string))
        {
            this.GroupName = groupName;
            this.Type = type;
            this.Status = status;
            this.TotalMembers = totalMembers;
            this.PrimaryMember = primaryMember;
            this.ActiveMember = activeMember;
            this.LoadBalancingMember = loadBalancingMember;
            this.FinalBackUp = finalBackUp;
            this.GlobalProbing = globalProbing;
        }

        /// <summary>
        /// Gets or Sets GroupName
        /// </summary>
        [DataMember(Name = "group_name", EmitDefaultValue = false)]
        public string GroupName { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets TotalMembers
        /// </summary>
        [DataMember(Name = "total_members", EmitDefaultValue = false)]
        public string TotalMembers { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryMember
        /// </summary>
        [DataMember(Name = "primary_member", EmitDefaultValue = false)]
        public string PrimaryMember { get; set; }

        /// <summary>
        /// Gets or Sets ActiveMember
        /// </summary>
        [DataMember(Name = "active_member", EmitDefaultValue = false)]
        public string ActiveMember { get; set; }

        /// <summary>
        /// Gets or Sets LoadBalancingMember
        /// </summary>
        [DataMember(Name = "load_balancing_member", EmitDefaultValue = false)]
        public string LoadBalancingMember { get; set; }

        /// <summary>
        /// Gets or Sets FinalBackUp
        /// </summary>
        [DataMember(Name = "final_back_up", EmitDefaultValue = false)]
        public string FinalBackUp { get; set; }

        /// <summary>
        /// Gets or Sets GlobalProbing
        /// </summary>
        [DataMember(Name = "global_probing", EmitDefaultValue = false)]
        public string GlobalProbing { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusFlbGroupStatusDetail {\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TotalMembers: ").Append(TotalMembers).Append("\n");
            sb.Append("  PrimaryMember: ").Append(PrimaryMember).Append("\n");
            sb.Append("  ActiveMember: ").Append(ActiveMember).Append("\n");
            sb.Append("  LoadBalancingMember: ").Append(LoadBalancingMember).Append("\n");
            sb.Append("  FinalBackUp: ").Append(FinalBackUp).Append("\n");
            sb.Append("  GlobalProbing: ").Append(GlobalProbing).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusFlbGroupStatusDetail);
        }

        /// <summary>
        /// Returns true if ShowStatusFlbGroupStatusDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusFlbGroupStatusDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusFlbGroupStatusDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.GroupName == input.GroupName ||
                    (this.GroupName != null &&
                    this.GroupName.Equals(input.GroupName))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TotalMembers == input.TotalMembers ||
                    (this.TotalMembers != null &&
                    this.TotalMembers.Equals(input.TotalMembers))
                ) && 
                (
                    this.PrimaryMember == input.PrimaryMember ||
                    (this.PrimaryMember != null &&
                    this.PrimaryMember.Equals(input.PrimaryMember))
                ) && 
                (
                    this.ActiveMember == input.ActiveMember ||
                    (this.ActiveMember != null &&
                    this.ActiveMember.Equals(input.ActiveMember))
                ) && 
                (
                    this.LoadBalancingMember == input.LoadBalancingMember ||
                    (this.LoadBalancingMember != null &&
                    this.LoadBalancingMember.Equals(input.LoadBalancingMember))
                ) && 
                (
                    this.FinalBackUp == input.FinalBackUp ||
                    (this.FinalBackUp != null &&
                    this.FinalBackUp.Equals(input.FinalBackUp))
                ) && 
                (
                    this.GlobalProbing == input.GlobalProbing ||
                    (this.GlobalProbing != null &&
                    this.GlobalProbing.Equals(input.GlobalProbing))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GroupName != null)
                {
                    hashCode = (hashCode * 59) + this.GroupName.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.TotalMembers != null)
                {
                    hashCode = (hashCode * 59) + this.TotalMembers.GetHashCode();
                }
                if (this.PrimaryMember != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryMember.GetHashCode();
                }
                if (this.ActiveMember != null)
                {
                    hashCode = (hashCode * 59) + this.ActiveMember.GetHashCode();
                }
                if (this.LoadBalancingMember != null)
                {
                    hashCode = (hashCode * 59) + this.LoadBalancingMember.GetHashCode();
                }
                if (this.FinalBackUp != null)
                {
                    hashCode = (hashCode * 59) + this.FinalBackUp.GetHashCode();
                }
                if (this.GlobalProbing != null)
                {
                    hashCode = (hashCode * 59) + this.GlobalProbing.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
