/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enable including of specified additional reports via IPFIX.
    /// </summary>
    [DataContract(Name = "appflow_external_collector_appflow_external_collector_ipfix_reports")]
    public partial class AppflowExternalCollectorAppflowExternalCollectorIpfixReports : IEquatable<AppflowExternalCollectorAppflowExternalCollectorIpfixReports>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppflowExternalCollectorAppflowExternalCollectorIpfixReports" /> class.
        /// </summary>
        /// <param name="top10Apps">Top 10 applications..</param>
        /// <param name="interfaceStatistics">Interface statistics..</param>
        /// <param name="coreUtilization">Core utilization..</param>
        /// <param name="memoryUtilization">Memory utilization..</param>
        /// <param name="systemLogs">System logs..</param>
        /// <param name="sdwanProbe">SD-WAN probe stats..</param>
        public AppflowExternalCollectorAppflowExternalCollectorIpfixReports(bool top10Apps = default(bool), bool interfaceStatistics = default(bool), bool coreUtilization = default(bool), bool memoryUtilization = default(bool), bool systemLogs = default(bool), bool sdwanProbe = default(bool))
        {
            this.Top10Apps = top10Apps;
            this.InterfaceStatistics = interfaceStatistics;
            this.CoreUtilization = coreUtilization;
            this.MemoryUtilization = memoryUtilization;
            this.SystemLogs = systemLogs;
            this.SdwanProbe = sdwanProbe;
        }

        /// <summary>
        /// Top 10 applications.
        /// </summary>
        /// <value>Top 10 applications.</value>
        [DataMember(Name = "top_10_apps", EmitDefaultValue = true)]
        public bool Top10Apps { get; set; }

        /// <summary>
        /// Interface statistics.
        /// </summary>
        /// <value>Interface statistics.</value>
        [DataMember(Name = "interface_statistics", EmitDefaultValue = true)]
        public bool InterfaceStatistics { get; set; }

        /// <summary>
        /// Core utilization.
        /// </summary>
        /// <value>Core utilization.</value>
        [DataMember(Name = "core_utilization", EmitDefaultValue = true)]
        public bool CoreUtilization { get; set; }

        /// <summary>
        /// Memory utilization.
        /// </summary>
        /// <value>Memory utilization.</value>
        [DataMember(Name = "memory_utilization", EmitDefaultValue = true)]
        public bool MemoryUtilization { get; set; }

        /// <summary>
        /// System logs.
        /// </summary>
        /// <value>System logs.</value>
        [DataMember(Name = "system_logs", EmitDefaultValue = true)]
        public bool SystemLogs { get; set; }

        /// <summary>
        /// SD-WAN probe stats.
        /// </summary>
        /// <value>SD-WAN probe stats.</value>
        [DataMember(Name = "sdwan_probe", EmitDefaultValue = true)]
        public bool SdwanProbe { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppflowExternalCollectorAppflowExternalCollectorIpfixReports {\n");
            sb.Append("  Top10Apps: ").Append(Top10Apps).Append("\n");
            sb.Append("  InterfaceStatistics: ").Append(InterfaceStatistics).Append("\n");
            sb.Append("  CoreUtilization: ").Append(CoreUtilization).Append("\n");
            sb.Append("  MemoryUtilization: ").Append(MemoryUtilization).Append("\n");
            sb.Append("  SystemLogs: ").Append(SystemLogs).Append("\n");
            sb.Append("  SdwanProbe: ").Append(SdwanProbe).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppflowExternalCollectorAppflowExternalCollectorIpfixReports);
        }

        /// <summary>
        /// Returns true if AppflowExternalCollectorAppflowExternalCollectorIpfixReports instances are equal
        /// </summary>
        /// <param name="input">Instance of AppflowExternalCollectorAppflowExternalCollectorIpfixReports to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppflowExternalCollectorAppflowExternalCollectorIpfixReports input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Top10Apps == input.Top10Apps ||
                    this.Top10Apps.Equals(input.Top10Apps)
                ) && 
                (
                    this.InterfaceStatistics == input.InterfaceStatistics ||
                    this.InterfaceStatistics.Equals(input.InterfaceStatistics)
                ) && 
                (
                    this.CoreUtilization == input.CoreUtilization ||
                    this.CoreUtilization.Equals(input.CoreUtilization)
                ) && 
                (
                    this.MemoryUtilization == input.MemoryUtilization ||
                    this.MemoryUtilization.Equals(input.MemoryUtilization)
                ) && 
                (
                    this.SystemLogs == input.SystemLogs ||
                    this.SystemLogs.Equals(input.SystemLogs)
                ) && 
                (
                    this.SdwanProbe == input.SdwanProbe ||
                    this.SdwanProbe.Equals(input.SdwanProbe)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Top10Apps.GetHashCode();
                hashCode = (hashCode * 59) + this.InterfaceStatistics.GetHashCode();
                hashCode = (hashCode * 59) + this.CoreUtilization.GetHashCode();
                hashCode = (hashCode * 59) + this.MemoryUtilization.GetHashCode();
                hashCode = (hashCode * 59) + this.SystemLogs.GetHashCode();
                hashCode = (hashCode * 59) + this.SdwanProbe.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
