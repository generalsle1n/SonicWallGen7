/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// email object configuration.
    /// </summary>
    [DataContract(Name = "email_object")]
    public partial class EmailObject : IEquatable<EmailObject>, IValidatableObject
    {
        /// <summary>
        /// Set e-mail address object match type.
        /// </summary>
        /// <value>Set e-mail address object match type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MatchTypeEnum
        {
            /// <summary>
            /// Enum Exact for value: exact
            /// </summary>
            [EnumMember(Value = "exact")]
            Exact = 1,

            /// <summary>
            /// Enum Partial for value: partial
            /// </summary>
            [EnumMember(Value = "partial")]
            Partial = 2,

            /// <summary>
            /// Enum Regex for value: regex
            /// </summary>
            [EnumMember(Value = "regex")]
            Regex = 3
        }


        /// <summary>
        /// Set e-mail address object match type.
        /// </summary>
        /// <value>Set e-mail address object match type.</value>
        [DataMember(Name = "match_type", EmitDefaultValue = false)]
        public MatchTypeEnum? MatchType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmailObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailObject" /> class.
        /// </summary>
        /// <param name="name">E-mail address object name. (required).</param>
        /// <param name="matchType">Set e-mail address object match type..</param>
        /// <param name="contentEntry">Add e-mail address object content entry..</param>
        public EmailObject(string name = default(string), MatchTypeEnum? matchType = default(MatchTypeEnum?), List<EmailObjectContentEntryInner> contentEntry = default(List<EmailObjectContentEntryInner>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for EmailObject and cannot be null");
            }
            this.Name = name;
            this.MatchType = matchType;
            this.ContentEntry = contentEntry;
        }

        /// <summary>
        /// E-mail address object name.
        /// </summary>
        /// <value>E-mail address object name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Add e-mail address object content entry.
        /// </summary>
        /// <value>Add e-mail address object content entry.</value>
        [DataMember(Name = "content_entry", EmitDefaultValue = false)]
        public List<EmailObjectContentEntryInner> ContentEntry { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailObject {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  MatchType: ").Append(MatchType).Append("\n");
            sb.Append("  ContentEntry: ").Append(ContentEntry).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailObject);
        }

        /// <summary>
        /// Returns true if EmailObject instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.MatchType == input.MatchType ||
                    this.MatchType.Equals(input.MatchType)
                ) && 
                (
                    this.ContentEntry == input.ContentEntry ||
                    this.ContentEntry != null &&
                    input.ContentEntry != null &&
                    this.ContentEntry.SequenceEqual(input.ContentEntry)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MatchType.GetHashCode();
                if (this.ContentEntry != null)
                {
                    hashCode = (hashCode * 59) + this.ContentEntry.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
