/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enter Websense configuration mode..
    /// </summary>
    [DataContract(Name = "content_filter_websense_content_filter_websense")]
    public partial class ContentFilterWebsenseContentFilterWebsense : IEquatable<ContentFilterWebsenseContentFilterWebsense>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentFilterWebsenseContentFilterWebsense" /> class.
        /// </summary>
        /// <param name="server">Set Websense server address..</param>
        /// <param name="port">Set Websense server port..</param>
        /// <param name="userName">Set user name of Websense..</param>
        /// <param name="maxUrlCaches">Set maximum URL cache entries that can be added..</param>
        /// <param name="httpsContentFiltering">Enable https content filtering..</param>
        /// <param name="probe">probe.</param>
        /// <param name="blockIfServerUnavailable">Block if Websense server is unavailable..</param>
        /// <param name="serverTimeout">Set Websense server timeout..</param>
        /// <param name="block">block.</param>
        /// <param name="exclude">exclude.</param>
        /// <param name="blockingPage">blockingPage.</param>
        public ContentFilterWebsenseContentFilterWebsense(string server = default(string), decimal port = default(decimal), string userName = default(string), decimal maxUrlCaches = default(decimal), bool httpsContentFiltering = default(bool), ContentFilterSettingsContentFilterWebsenseProbe probe = default(ContentFilterSettingsContentFilterWebsenseProbe), bool blockIfServerUnavailable = default(bool), decimal serverTimeout = default(decimal), ContentFilterSettingsContentFilterWebsenseBlock block = default(ContentFilterSettingsContentFilterWebsenseBlock), ContentFilterWebsenseContentFilterWebsenseExclude exclude = default(ContentFilterWebsenseContentFilterWebsenseExclude), ContentFilterWebsenseContentFilterWebsenseBlockingPage blockingPage = default(ContentFilterWebsenseContentFilterWebsenseBlockingPage))
        {
            this.Server = server;
            this.Port = port;
            this.UserName = userName;
            this.MaxUrlCaches = maxUrlCaches;
            this.HttpsContentFiltering = httpsContentFiltering;
            this.Probe = probe;
            this.BlockIfServerUnavailable = blockIfServerUnavailable;
            this.ServerTimeout = serverTimeout;
            this.Block = block;
            this.Exclude = exclude;
            this.BlockingPage = blockingPage;
        }

        /// <summary>
        /// Set Websense server address.
        /// </summary>
        /// <value>Set Websense server address.</value>
        [DataMember(Name = "server", EmitDefaultValue = false)]
        public string Server { get; set; }

        /// <summary>
        /// Set Websense server port.
        /// </summary>
        /// <value>Set Websense server port.</value>
        [DataMember(Name = "port", EmitDefaultValue = false)]
        public decimal Port { get; set; }

        /// <summary>
        /// Set user name of Websense.
        /// </summary>
        /// <value>Set user name of Websense.</value>
        [DataMember(Name = "user_name", EmitDefaultValue = false)]
        public string UserName { get; set; }

        /// <summary>
        /// Set maximum URL cache entries that can be added.
        /// </summary>
        /// <value>Set maximum URL cache entries that can be added.</value>
        [DataMember(Name = "max_url_caches", EmitDefaultValue = false)]
        public decimal MaxUrlCaches { get; set; }

        /// <summary>
        /// Enable https content filtering.
        /// </summary>
        /// <value>Enable https content filtering.</value>
        [DataMember(Name = "https_content_filtering", EmitDefaultValue = true)]
        public bool HttpsContentFiltering { get; set; }

        /// <summary>
        /// Gets or Sets Probe
        /// </summary>
        [DataMember(Name = "probe", EmitDefaultValue = false)]
        public ContentFilterSettingsContentFilterWebsenseProbe Probe { get; set; }

        /// <summary>
        /// Block if Websense server is unavailable.
        /// </summary>
        /// <value>Block if Websense server is unavailable.</value>
        [DataMember(Name = "block_if_server_unavailable", EmitDefaultValue = true)]
        public bool BlockIfServerUnavailable { get; set; }

        /// <summary>
        /// Set Websense server timeout.
        /// </summary>
        /// <value>Set Websense server timeout.</value>
        [DataMember(Name = "server_timeout", EmitDefaultValue = false)]
        public decimal ServerTimeout { get; set; }

        /// <summary>
        /// Gets or Sets Block
        /// </summary>
        [DataMember(Name = "block", EmitDefaultValue = false)]
        public ContentFilterSettingsContentFilterWebsenseBlock Block { get; set; }

        /// <summary>
        /// Gets or Sets Exclude
        /// </summary>
        [DataMember(Name = "exclude", EmitDefaultValue = false)]
        public ContentFilterWebsenseContentFilterWebsenseExclude Exclude { get; set; }

        /// <summary>
        /// Gets or Sets BlockingPage
        /// </summary>
        [DataMember(Name = "blocking_page", EmitDefaultValue = false)]
        public ContentFilterWebsenseContentFilterWebsenseBlockingPage BlockingPage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContentFilterWebsenseContentFilterWebsense {\n");
            sb.Append("  Server: ").Append(Server).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  MaxUrlCaches: ").Append(MaxUrlCaches).Append("\n");
            sb.Append("  HttpsContentFiltering: ").Append(HttpsContentFiltering).Append("\n");
            sb.Append("  Probe: ").Append(Probe).Append("\n");
            sb.Append("  BlockIfServerUnavailable: ").Append(BlockIfServerUnavailable).Append("\n");
            sb.Append("  ServerTimeout: ").Append(ServerTimeout).Append("\n");
            sb.Append("  Block: ").Append(Block).Append("\n");
            sb.Append("  Exclude: ").Append(Exclude).Append("\n");
            sb.Append("  BlockingPage: ").Append(BlockingPage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContentFilterWebsenseContentFilterWebsense);
        }

        /// <summary>
        /// Returns true if ContentFilterWebsenseContentFilterWebsense instances are equal
        /// </summary>
        /// <param name="input">Instance of ContentFilterWebsenseContentFilterWebsense to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContentFilterWebsenseContentFilterWebsense input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Server == input.Server ||
                    (this.Server != null &&
                    this.Server.Equals(input.Server))
                ) && 
                (
                    this.Port == input.Port ||
                    this.Port.Equals(input.Port)
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.MaxUrlCaches == input.MaxUrlCaches ||
                    this.MaxUrlCaches.Equals(input.MaxUrlCaches)
                ) && 
                (
                    this.HttpsContentFiltering == input.HttpsContentFiltering ||
                    this.HttpsContentFiltering.Equals(input.HttpsContentFiltering)
                ) && 
                (
                    this.Probe == input.Probe ||
                    (this.Probe != null &&
                    this.Probe.Equals(input.Probe))
                ) && 
                (
                    this.BlockIfServerUnavailable == input.BlockIfServerUnavailable ||
                    this.BlockIfServerUnavailable.Equals(input.BlockIfServerUnavailable)
                ) && 
                (
                    this.ServerTimeout == input.ServerTimeout ||
                    this.ServerTimeout.Equals(input.ServerTimeout)
                ) && 
                (
                    this.Block == input.Block ||
                    (this.Block != null &&
                    this.Block.Equals(input.Block))
                ) && 
                (
                    this.Exclude == input.Exclude ||
                    (this.Exclude != null &&
                    this.Exclude.Equals(input.Exclude))
                ) && 
                (
                    this.BlockingPage == input.BlockingPage ||
                    (this.BlockingPage != null &&
                    this.BlockingPage.Equals(input.BlockingPage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Server != null)
                {
                    hashCode = (hashCode * 59) + this.Server.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Port.GetHashCode();
                if (this.UserName != null)
                {
                    hashCode = (hashCode * 59) + this.UserName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MaxUrlCaches.GetHashCode();
                hashCode = (hashCode * 59) + this.HttpsContentFiltering.GetHashCode();
                if (this.Probe != null)
                {
                    hashCode = (hashCode * 59) + this.Probe.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BlockIfServerUnavailable.GetHashCode();
                hashCode = (hashCode * 59) + this.ServerTimeout.GetHashCode();
                if (this.Block != null)
                {
                    hashCode = (hashCode * 59) + this.Block.GetHashCode();
                }
                if (this.Exclude != null)
                {
                    hashCode = (hashCode * 59) + this.Exclude.GetHashCode();
                }
                if (this.BlockingPage != null)
                {
                    hashCode = (hashCode * 59) + this.BlockingPage.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
