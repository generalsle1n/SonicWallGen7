/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure portal settings.
    /// </summary>
    [DataContract(Name = "ssl_vpn_portal_ssl_vpn_portal")]
    public partial class SslVpnPortalSslVpnPortal : IEquatable<SslVpnPortalSslVpnPortal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SslVpnPortalSslVpnPortal" /> class.
        /// </summary>
        /// <param name="siteTitle">Set SSL VPN portal site title..</param>
        /// <param name="bannerTitle">Set SSL VPN portal banner title..</param>
        /// <param name="homePageMessage">homePageMessage.</param>
        /// <param name="loginMessage">loginMessage.</param>
        /// <param name="autoLaunch">Enable launch NetExtender after login..</param>
        /// <param name="cacheControl">Enable HTTP meta tags for cache control (recommended)..</param>
        /// <param name="displayLink">Enable display UTM management link on SSL VPN portal(not recommended)..</param>
        /// <param name="logo">logo.</param>
        public SslVpnPortalSslVpnPortal(string siteTitle = default(string), string bannerTitle = default(string), SslVpnPortalSslVpnPortalHomePageMessage homePageMessage = default(SslVpnPortalSslVpnPortalHomePageMessage), SslVpnPortalSslVpnPortalLoginMessage loginMessage = default(SslVpnPortalSslVpnPortalLoginMessage), bool autoLaunch = default(bool), bool cacheControl = default(bool), bool displayLink = default(bool), SslVpnPortalSslVpnPortalLogo logo = default(SslVpnPortalSslVpnPortalLogo))
        {
            this.SiteTitle = siteTitle;
            this.BannerTitle = bannerTitle;
            this.HomePageMessage = homePageMessage;
            this.LoginMessage = loginMessage;
            this.AutoLaunch = autoLaunch;
            this.CacheControl = cacheControl;
            this.DisplayLink = displayLink;
            this.Logo = logo;
        }

        /// <summary>
        /// Set SSL VPN portal site title.
        /// </summary>
        /// <value>Set SSL VPN portal site title.</value>
        [DataMember(Name = "site_title", EmitDefaultValue = false)]
        public string SiteTitle { get; set; }

        /// <summary>
        /// Set SSL VPN portal banner title.
        /// </summary>
        /// <value>Set SSL VPN portal banner title.</value>
        [DataMember(Name = "banner_title", EmitDefaultValue = false)]
        public string BannerTitle { get; set; }

        /// <summary>
        /// Gets or Sets HomePageMessage
        /// </summary>
        [DataMember(Name = "home_page_message", EmitDefaultValue = false)]
        public SslVpnPortalSslVpnPortalHomePageMessage HomePageMessage { get; set; }

        /// <summary>
        /// Gets or Sets LoginMessage
        /// </summary>
        [DataMember(Name = "login_message", EmitDefaultValue = false)]
        public SslVpnPortalSslVpnPortalLoginMessage LoginMessage { get; set; }

        /// <summary>
        /// Enable launch NetExtender after login.
        /// </summary>
        /// <value>Enable launch NetExtender after login.</value>
        [DataMember(Name = "auto_launch", EmitDefaultValue = true)]
        public bool AutoLaunch { get; set; }

        /// <summary>
        /// Enable HTTP meta tags for cache control (recommended).
        /// </summary>
        /// <value>Enable HTTP meta tags for cache control (recommended).</value>
        [DataMember(Name = "cache_control", EmitDefaultValue = true)]
        public bool CacheControl { get; set; }

        /// <summary>
        /// Enable display UTM management link on SSL VPN portal(not recommended).
        /// </summary>
        /// <value>Enable display UTM management link on SSL VPN portal(not recommended).</value>
        [DataMember(Name = "display_link", EmitDefaultValue = true)]
        public bool DisplayLink { get; set; }

        /// <summary>
        /// Gets or Sets Logo
        /// </summary>
        [DataMember(Name = "logo", EmitDefaultValue = false)]
        public SslVpnPortalSslVpnPortalLogo Logo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SslVpnPortalSslVpnPortal {\n");
            sb.Append("  SiteTitle: ").Append(SiteTitle).Append("\n");
            sb.Append("  BannerTitle: ").Append(BannerTitle).Append("\n");
            sb.Append("  HomePageMessage: ").Append(HomePageMessage).Append("\n");
            sb.Append("  LoginMessage: ").Append(LoginMessage).Append("\n");
            sb.Append("  AutoLaunch: ").Append(AutoLaunch).Append("\n");
            sb.Append("  CacheControl: ").Append(CacheControl).Append("\n");
            sb.Append("  DisplayLink: ").Append(DisplayLink).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SslVpnPortalSslVpnPortal);
        }

        /// <summary>
        /// Returns true if SslVpnPortalSslVpnPortal instances are equal
        /// </summary>
        /// <param name="input">Instance of SslVpnPortalSslVpnPortal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SslVpnPortalSslVpnPortal input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SiteTitle == input.SiteTitle ||
                    (this.SiteTitle != null &&
                    this.SiteTitle.Equals(input.SiteTitle))
                ) && 
                (
                    this.BannerTitle == input.BannerTitle ||
                    (this.BannerTitle != null &&
                    this.BannerTitle.Equals(input.BannerTitle))
                ) && 
                (
                    this.HomePageMessage == input.HomePageMessage ||
                    (this.HomePageMessage != null &&
                    this.HomePageMessage.Equals(input.HomePageMessage))
                ) && 
                (
                    this.LoginMessage == input.LoginMessage ||
                    (this.LoginMessage != null &&
                    this.LoginMessage.Equals(input.LoginMessage))
                ) && 
                (
                    this.AutoLaunch == input.AutoLaunch ||
                    this.AutoLaunch.Equals(input.AutoLaunch)
                ) && 
                (
                    this.CacheControl == input.CacheControl ||
                    this.CacheControl.Equals(input.CacheControl)
                ) && 
                (
                    this.DisplayLink == input.DisplayLink ||
                    this.DisplayLink.Equals(input.DisplayLink)
                ) && 
                (
                    this.Logo == input.Logo ||
                    (this.Logo != null &&
                    this.Logo.Equals(input.Logo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SiteTitle != null)
                {
                    hashCode = (hashCode * 59) + this.SiteTitle.GetHashCode();
                }
                if (this.BannerTitle != null)
                {
                    hashCode = (hashCode * 59) + this.BannerTitle.GetHashCode();
                }
                if (this.HomePageMessage != null)
                {
                    hashCode = (hashCode * 59) + this.HomePageMessage.GetHashCode();
                }
                if (this.LoginMessage != null)
                {
                    hashCode = (hashCode * 59) + this.LoginMessage.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AutoLaunch.GetHashCode();
                hashCode = (hashCode * 59) + this.CacheControl.GetHashCode();
                hashCode = (hashCode * 59) + this.DisplayLink.GetHashCode();
                if (this.Logo != null)
                {
                    hashCode = (hashCode * 59) + this.Logo.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
