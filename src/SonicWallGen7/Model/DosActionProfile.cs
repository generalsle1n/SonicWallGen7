/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// DoS action object configuration.
    /// </summary>
    [DataContract(Name = "dos_action_profile")]
    public partial class DosActionProfile : IEquatable<DosActionProfile>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DosActionProfile" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DosActionProfile() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DosActionProfile" /> class.
        /// </summary>
        /// <param name="name">Name of DoS action profile. (required).</param>
        /// <param name="synFloodProtection">synFloodProtection.</param>
        /// <param name="synAttackThreshold">synAttackThreshold.</param>
        /// <param name="tcpSack">Enable TCP SACK option support..</param>
        /// <param name="limitMss">limitMss.</param>
        /// <param name="logSynPackets">Enable always log SYN packets received..</param>
        /// <param name="synFloodBlacklisting">Enable SYN/RST/FIN flood blacklisting..</param>
        /// <param name="blacklistThreshold">Set threshold for SYN/RST/FIN flood blacklisting (packets / sec)..</param>
        /// <param name="neverBlacklistWan">Enable never blacklist WAN machines..</param>
        /// <param name="management">Enable always allow SonicWall management traffic..</param>
        /// <param name="udpFloodProtection">Enable UDP flood protection..</param>
        /// <param name="udpFloodAttack">udpFloodAttack.</param>
        /// <param name="icmpFloodProtection">Enable ICMP flood protection..</param>
        /// <param name="icmpFloodAttack">icmpFloodAttack.</param>
        /// <param name="ddos">ddos.</param>
        /// <param name="spankProtection">Enable spank protection..</param>
        /// <param name="smurfProtection">Enable smurf protection..</param>
        /// <param name="landAttackProtection">Enable land-attack protection..</param>
        /// <param name="connectionLimit">connectionLimit.</param>
        public DosActionProfile(string name = default(string), DosActionProfileSynFloodProtection synFloodProtection = default(DosActionProfileSynFloodProtection), DosActionProfileSynAttackThreshold synAttackThreshold = default(DosActionProfileSynAttackThreshold), bool tcpSack = default(bool), DosActionProfileLimitMss limitMss = default(DosActionProfileLimitMss), bool logSynPackets = default(bool), bool synFloodBlacklisting = default(bool), decimal blacklistThreshold = default(decimal), bool neverBlacklistWan = default(bool), bool management = default(bool), bool udpFloodProtection = default(bool), DosActionProfileUdpFloodAttack udpFloodAttack = default(DosActionProfileUdpFloodAttack), bool icmpFloodProtection = default(bool), DosActionProfileIcmpFloodAttack icmpFloodAttack = default(DosActionProfileIcmpFloodAttack), DosActionProfileDdos ddos = default(DosActionProfileDdos), bool spankProtection = default(bool), bool smurfProtection = default(bool), bool landAttackProtection = default(bool), DosActionProfileConnectionLimit connectionLimit = default(DosActionProfileConnectionLimit))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for DosActionProfile and cannot be null");
            }
            this.Name = name;
            this.SynFloodProtection = synFloodProtection;
            this.SynAttackThreshold = synAttackThreshold;
            this.TcpSack = tcpSack;
            this.LimitMss = limitMss;
            this.LogSynPackets = logSynPackets;
            this.SynFloodBlacklisting = synFloodBlacklisting;
            this.BlacklistThreshold = blacklistThreshold;
            this.NeverBlacklistWan = neverBlacklistWan;
            this.Management = management;
            this.UdpFloodProtection = udpFloodProtection;
            this.UdpFloodAttack = udpFloodAttack;
            this.IcmpFloodProtection = icmpFloodProtection;
            this.IcmpFloodAttack = icmpFloodAttack;
            this.Ddos = ddos;
            this.SpankProtection = spankProtection;
            this.SmurfProtection = smurfProtection;
            this.LandAttackProtection = landAttackProtection;
            this.ConnectionLimit = connectionLimit;
        }

        /// <summary>
        /// Name of DoS action profile.
        /// </summary>
        /// <value>Name of DoS action profile.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Name of DoS action profile.
        /// </summary>
        /// <value>Name of DoS action profile.</value>
        [DataMember(Name = "uuid", EmitDefaultValue = false)]
        public string Uuid { get; private set; }

        /// <summary>
        /// Returns false as Uuid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUuid()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets SynFloodProtection
        /// </summary>
        [DataMember(Name = "syn_flood_protection", EmitDefaultValue = false)]
        public DosActionProfileSynFloodProtection SynFloodProtection { get; set; }

        /// <summary>
        /// Gets or Sets SynAttackThreshold
        /// </summary>
        [DataMember(Name = "syn_attack_threshold", EmitDefaultValue = true)]
        public DosActionProfileSynAttackThreshold SynAttackThreshold { get; set; }

        /// <summary>
        /// Enable TCP SACK option support.
        /// </summary>
        /// <value>Enable TCP SACK option support.</value>
        [DataMember(Name = "tcp_sack", EmitDefaultValue = true)]
        public bool TcpSack { get; set; }

        /// <summary>
        /// Gets or Sets LimitMss
        /// </summary>
        [DataMember(Name = "limit_mss", EmitDefaultValue = false)]
        public DosActionProfileLimitMss LimitMss { get; set; }

        /// <summary>
        /// Enable always log SYN packets received.
        /// </summary>
        /// <value>Enable always log SYN packets received.</value>
        [DataMember(Name = "log_syn_packets", EmitDefaultValue = true)]
        public bool LogSynPackets { get; set; }

        /// <summary>
        /// Enable SYN/RST/FIN flood blacklisting.
        /// </summary>
        /// <value>Enable SYN/RST/FIN flood blacklisting.</value>
        [DataMember(Name = "syn_flood_blacklisting", EmitDefaultValue = true)]
        public bool SynFloodBlacklisting { get; set; }

        /// <summary>
        /// Set threshold for SYN/RST/FIN flood blacklisting (packets / sec).
        /// </summary>
        /// <value>Set threshold for SYN/RST/FIN flood blacklisting (packets / sec).</value>
        [DataMember(Name = "blacklist_threshold", EmitDefaultValue = false)]
        public decimal BlacklistThreshold { get; set; }

        /// <summary>
        /// Enable never blacklist WAN machines.
        /// </summary>
        /// <value>Enable never blacklist WAN machines.</value>
        [DataMember(Name = "never_blacklist_wan", EmitDefaultValue = true)]
        public bool NeverBlacklistWan { get; set; }

        /// <summary>
        /// Enable always allow SonicWall management traffic.
        /// </summary>
        /// <value>Enable always allow SonicWall management traffic.</value>
        [DataMember(Name = "management", EmitDefaultValue = true)]
        public bool Management { get; set; }

        /// <summary>
        /// Enable UDP flood protection.
        /// </summary>
        /// <value>Enable UDP flood protection.</value>
        [DataMember(Name = "udp_flood_protection", EmitDefaultValue = true)]
        public bool UdpFloodProtection { get; set; }

        /// <summary>
        /// Gets or Sets UdpFloodAttack
        /// </summary>
        [DataMember(Name = "udp_flood_attack", EmitDefaultValue = false)]
        public DosActionProfileUdpFloodAttack UdpFloodAttack { get; set; }

        /// <summary>
        /// Enable ICMP flood protection.
        /// </summary>
        /// <value>Enable ICMP flood protection.</value>
        [DataMember(Name = "icmp_flood_protection", EmitDefaultValue = true)]
        public bool IcmpFloodProtection { get; set; }

        /// <summary>
        /// Gets or Sets IcmpFloodAttack
        /// </summary>
        [DataMember(Name = "icmp_flood_attack", EmitDefaultValue = false)]
        public DosActionProfileIcmpFloodAttack IcmpFloodAttack { get; set; }

        /// <summary>
        /// Gets or Sets Ddos
        /// </summary>
        [DataMember(Name = "ddos", EmitDefaultValue = false)]
        public DosActionProfileDdos Ddos { get; set; }

        /// <summary>
        /// Enable spank protection.
        /// </summary>
        /// <value>Enable spank protection.</value>
        [DataMember(Name = "spank_protection", EmitDefaultValue = true)]
        public bool SpankProtection { get; set; }

        /// <summary>
        /// Enable smurf protection.
        /// </summary>
        /// <value>Enable smurf protection.</value>
        [DataMember(Name = "smurf_protection", EmitDefaultValue = true)]
        public bool SmurfProtection { get; set; }

        /// <summary>
        /// Enable land-attack protection.
        /// </summary>
        /// <value>Enable land-attack protection.</value>
        [DataMember(Name = "land_attack_protection", EmitDefaultValue = true)]
        public bool LandAttackProtection { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionLimit
        /// </summary>
        [DataMember(Name = "connection_limit", EmitDefaultValue = false)]
        public DosActionProfileConnectionLimit ConnectionLimit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DosActionProfile {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  SynFloodProtection: ").Append(SynFloodProtection).Append("\n");
            sb.Append("  SynAttackThreshold: ").Append(SynAttackThreshold).Append("\n");
            sb.Append("  TcpSack: ").Append(TcpSack).Append("\n");
            sb.Append("  LimitMss: ").Append(LimitMss).Append("\n");
            sb.Append("  LogSynPackets: ").Append(LogSynPackets).Append("\n");
            sb.Append("  SynFloodBlacklisting: ").Append(SynFloodBlacklisting).Append("\n");
            sb.Append("  BlacklistThreshold: ").Append(BlacklistThreshold).Append("\n");
            sb.Append("  NeverBlacklistWan: ").Append(NeverBlacklistWan).Append("\n");
            sb.Append("  Management: ").Append(Management).Append("\n");
            sb.Append("  UdpFloodProtection: ").Append(UdpFloodProtection).Append("\n");
            sb.Append("  UdpFloodAttack: ").Append(UdpFloodAttack).Append("\n");
            sb.Append("  IcmpFloodProtection: ").Append(IcmpFloodProtection).Append("\n");
            sb.Append("  IcmpFloodAttack: ").Append(IcmpFloodAttack).Append("\n");
            sb.Append("  Ddos: ").Append(Ddos).Append("\n");
            sb.Append("  SpankProtection: ").Append(SpankProtection).Append("\n");
            sb.Append("  SmurfProtection: ").Append(SmurfProtection).Append("\n");
            sb.Append("  LandAttackProtection: ").Append(LandAttackProtection).Append("\n");
            sb.Append("  ConnectionLimit: ").Append(ConnectionLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DosActionProfile);
        }

        /// <summary>
        /// Returns true if DosActionProfile instances are equal
        /// </summary>
        /// <param name="input">Instance of DosActionProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DosActionProfile input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.SynFloodProtection == input.SynFloodProtection ||
                    (this.SynFloodProtection != null &&
                    this.SynFloodProtection.Equals(input.SynFloodProtection))
                ) && 
                (
                    this.SynAttackThreshold == input.SynAttackThreshold ||
                    (this.SynAttackThreshold != null &&
                    this.SynAttackThreshold.Equals(input.SynAttackThreshold))
                ) && 
                (
                    this.TcpSack == input.TcpSack ||
                    this.TcpSack.Equals(input.TcpSack)
                ) && 
                (
                    this.LimitMss == input.LimitMss ||
                    (this.LimitMss != null &&
                    this.LimitMss.Equals(input.LimitMss))
                ) && 
                (
                    this.LogSynPackets == input.LogSynPackets ||
                    this.LogSynPackets.Equals(input.LogSynPackets)
                ) && 
                (
                    this.SynFloodBlacklisting == input.SynFloodBlacklisting ||
                    this.SynFloodBlacklisting.Equals(input.SynFloodBlacklisting)
                ) && 
                (
                    this.BlacklistThreshold == input.BlacklistThreshold ||
                    this.BlacklistThreshold.Equals(input.BlacklistThreshold)
                ) && 
                (
                    this.NeverBlacklistWan == input.NeverBlacklistWan ||
                    this.NeverBlacklistWan.Equals(input.NeverBlacklistWan)
                ) && 
                (
                    this.Management == input.Management ||
                    this.Management.Equals(input.Management)
                ) && 
                (
                    this.UdpFloodProtection == input.UdpFloodProtection ||
                    this.UdpFloodProtection.Equals(input.UdpFloodProtection)
                ) && 
                (
                    this.UdpFloodAttack == input.UdpFloodAttack ||
                    (this.UdpFloodAttack != null &&
                    this.UdpFloodAttack.Equals(input.UdpFloodAttack))
                ) && 
                (
                    this.IcmpFloodProtection == input.IcmpFloodProtection ||
                    this.IcmpFloodProtection.Equals(input.IcmpFloodProtection)
                ) && 
                (
                    this.IcmpFloodAttack == input.IcmpFloodAttack ||
                    (this.IcmpFloodAttack != null &&
                    this.IcmpFloodAttack.Equals(input.IcmpFloodAttack))
                ) && 
                (
                    this.Ddos == input.Ddos ||
                    (this.Ddos != null &&
                    this.Ddos.Equals(input.Ddos))
                ) && 
                (
                    this.SpankProtection == input.SpankProtection ||
                    this.SpankProtection.Equals(input.SpankProtection)
                ) && 
                (
                    this.SmurfProtection == input.SmurfProtection ||
                    this.SmurfProtection.Equals(input.SmurfProtection)
                ) && 
                (
                    this.LandAttackProtection == input.LandAttackProtection ||
                    this.LandAttackProtection.Equals(input.LandAttackProtection)
                ) && 
                (
                    this.ConnectionLimit == input.ConnectionLimit ||
                    (this.ConnectionLimit != null &&
                    this.ConnectionLimit.Equals(input.ConnectionLimit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Uuid != null)
                {
                    hashCode = (hashCode * 59) + this.Uuid.GetHashCode();
                }
                if (this.SynFloodProtection != null)
                {
                    hashCode = (hashCode * 59) + this.SynFloodProtection.GetHashCode();
                }
                if (this.SynAttackThreshold != null)
                {
                    hashCode = (hashCode * 59) + this.SynAttackThreshold.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TcpSack.GetHashCode();
                if (this.LimitMss != null)
                {
                    hashCode = (hashCode * 59) + this.LimitMss.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LogSynPackets.GetHashCode();
                hashCode = (hashCode * 59) + this.SynFloodBlacklisting.GetHashCode();
                hashCode = (hashCode * 59) + this.BlacklistThreshold.GetHashCode();
                hashCode = (hashCode * 59) + this.NeverBlacklistWan.GetHashCode();
                hashCode = (hashCode * 59) + this.Management.GetHashCode();
                hashCode = (hashCode * 59) + this.UdpFloodProtection.GetHashCode();
                if (this.UdpFloodAttack != null)
                {
                    hashCode = (hashCode * 59) + this.UdpFloodAttack.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IcmpFloodProtection.GetHashCode();
                if (this.IcmpFloodAttack != null)
                {
                    hashCode = (hashCode * 59) + this.IcmpFloodAttack.GetHashCode();
                }
                if (this.Ddos != null)
                {
                    hashCode = (hashCode * 59) + this.Ddos.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SpankProtection.GetHashCode();
                hashCode = (hashCode * 59) + this.SmurfProtection.GetHashCode();
                hashCode = (hashCode * 59) + this.LandAttackProtection.GetHashCode();
                if (this.ConnectionLimit != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionLimit.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
