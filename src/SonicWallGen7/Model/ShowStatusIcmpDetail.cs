/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// icmp detail schema.
    /// </summary>
    [DataContract(Name = "show_status_icmp_detail")]
    public partial class ShowStatusIcmpDetail : IEquatable<ShowStatusIcmpDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusIcmpDetail" /> class.
        /// </summary>
        /// <param name="connectionsOpened">connectionsOpened.</param>
        /// <param name="connectionsClosed">connectionsClosed.</param>
        /// <param name="totalIcmpPackets">totalIcmpPackets.</param>
        /// <param name="validatedPacketsPassed">validatedPacketsPassed.</param>
        /// <param name="malformedPacketsDropped">malformedPacketsDropped.</param>
        /// <param name="averageIcmpPacketRate">averageIcmpPacketRate.</param>
        /// <param name="icmpFloodsInProgress">icmpFloodsInProgress.</param>
        /// <param name="totalIcmpFloodsDetected">totalIcmpFloodsDetected.</param>
        /// <param name="totalIcmpFloodPacketsRejected">totalIcmpFloodPacketsRejected.</param>
        public ShowStatusIcmpDetail(string connectionsOpened = default(string), string connectionsClosed = default(string), string totalIcmpPackets = default(string), string validatedPacketsPassed = default(string), string malformedPacketsDropped = default(string), string averageIcmpPacketRate = default(string), string icmpFloodsInProgress = default(string), string totalIcmpFloodsDetected = default(string), string totalIcmpFloodPacketsRejected = default(string))
        {
            this.ConnectionsOpened = connectionsOpened;
            this.ConnectionsClosed = connectionsClosed;
            this.TotalIcmpPackets = totalIcmpPackets;
            this.ValidatedPacketsPassed = validatedPacketsPassed;
            this.MalformedPacketsDropped = malformedPacketsDropped;
            this.AverageIcmpPacketRate = averageIcmpPacketRate;
            this.IcmpFloodsInProgress = icmpFloodsInProgress;
            this.TotalIcmpFloodsDetected = totalIcmpFloodsDetected;
            this.TotalIcmpFloodPacketsRejected = totalIcmpFloodPacketsRejected;
        }

        /// <summary>
        /// Gets or Sets ConnectionsOpened
        /// </summary>
        [DataMember(Name = "connections_opened", EmitDefaultValue = false)]
        public string ConnectionsOpened { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionsClosed
        /// </summary>
        [DataMember(Name = "connections_closed", EmitDefaultValue = false)]
        public string ConnectionsClosed { get; set; }

        /// <summary>
        /// Gets or Sets TotalIcmpPackets
        /// </summary>
        [DataMember(Name = "total_icmp_packets", EmitDefaultValue = false)]
        public string TotalIcmpPackets { get; set; }

        /// <summary>
        /// Gets or Sets ValidatedPacketsPassed
        /// </summary>
        [DataMember(Name = "validated_packets_passed", EmitDefaultValue = false)]
        public string ValidatedPacketsPassed { get; set; }

        /// <summary>
        /// Gets or Sets MalformedPacketsDropped
        /// </summary>
        [DataMember(Name = "malformed_packets_dropped", EmitDefaultValue = false)]
        public string MalformedPacketsDropped { get; set; }

        /// <summary>
        /// Gets or Sets AverageIcmpPacketRate
        /// </summary>
        [DataMember(Name = "average_icmp_packet_rate", EmitDefaultValue = false)]
        public string AverageIcmpPacketRate { get; set; }

        /// <summary>
        /// Gets or Sets IcmpFloodsInProgress
        /// </summary>
        [DataMember(Name = "icmp_floods_in_progress", EmitDefaultValue = false)]
        public string IcmpFloodsInProgress { get; set; }

        /// <summary>
        /// Gets or Sets TotalIcmpFloodsDetected
        /// </summary>
        [DataMember(Name = "total_icmp_floods_detected", EmitDefaultValue = false)]
        public string TotalIcmpFloodsDetected { get; set; }

        /// <summary>
        /// Gets or Sets TotalIcmpFloodPacketsRejected
        /// </summary>
        [DataMember(Name = "total_icmp_flood_packets_rejected", EmitDefaultValue = false)]
        public string TotalIcmpFloodPacketsRejected { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusIcmpDetail {\n");
            sb.Append("  ConnectionsOpened: ").Append(ConnectionsOpened).Append("\n");
            sb.Append("  ConnectionsClosed: ").Append(ConnectionsClosed).Append("\n");
            sb.Append("  TotalIcmpPackets: ").Append(TotalIcmpPackets).Append("\n");
            sb.Append("  ValidatedPacketsPassed: ").Append(ValidatedPacketsPassed).Append("\n");
            sb.Append("  MalformedPacketsDropped: ").Append(MalformedPacketsDropped).Append("\n");
            sb.Append("  AverageIcmpPacketRate: ").Append(AverageIcmpPacketRate).Append("\n");
            sb.Append("  IcmpFloodsInProgress: ").Append(IcmpFloodsInProgress).Append("\n");
            sb.Append("  TotalIcmpFloodsDetected: ").Append(TotalIcmpFloodsDetected).Append("\n");
            sb.Append("  TotalIcmpFloodPacketsRejected: ").Append(TotalIcmpFloodPacketsRejected).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusIcmpDetail);
        }

        /// <summary>
        /// Returns true if ShowStatusIcmpDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusIcmpDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusIcmpDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ConnectionsOpened == input.ConnectionsOpened ||
                    (this.ConnectionsOpened != null &&
                    this.ConnectionsOpened.Equals(input.ConnectionsOpened))
                ) && 
                (
                    this.ConnectionsClosed == input.ConnectionsClosed ||
                    (this.ConnectionsClosed != null &&
                    this.ConnectionsClosed.Equals(input.ConnectionsClosed))
                ) && 
                (
                    this.TotalIcmpPackets == input.TotalIcmpPackets ||
                    (this.TotalIcmpPackets != null &&
                    this.TotalIcmpPackets.Equals(input.TotalIcmpPackets))
                ) && 
                (
                    this.ValidatedPacketsPassed == input.ValidatedPacketsPassed ||
                    (this.ValidatedPacketsPassed != null &&
                    this.ValidatedPacketsPassed.Equals(input.ValidatedPacketsPassed))
                ) && 
                (
                    this.MalformedPacketsDropped == input.MalformedPacketsDropped ||
                    (this.MalformedPacketsDropped != null &&
                    this.MalformedPacketsDropped.Equals(input.MalformedPacketsDropped))
                ) && 
                (
                    this.AverageIcmpPacketRate == input.AverageIcmpPacketRate ||
                    (this.AverageIcmpPacketRate != null &&
                    this.AverageIcmpPacketRate.Equals(input.AverageIcmpPacketRate))
                ) && 
                (
                    this.IcmpFloodsInProgress == input.IcmpFloodsInProgress ||
                    (this.IcmpFloodsInProgress != null &&
                    this.IcmpFloodsInProgress.Equals(input.IcmpFloodsInProgress))
                ) && 
                (
                    this.TotalIcmpFloodsDetected == input.TotalIcmpFloodsDetected ||
                    (this.TotalIcmpFloodsDetected != null &&
                    this.TotalIcmpFloodsDetected.Equals(input.TotalIcmpFloodsDetected))
                ) && 
                (
                    this.TotalIcmpFloodPacketsRejected == input.TotalIcmpFloodPacketsRejected ||
                    (this.TotalIcmpFloodPacketsRejected != null &&
                    this.TotalIcmpFloodPacketsRejected.Equals(input.TotalIcmpFloodPacketsRejected))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConnectionsOpened != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionsOpened.GetHashCode();
                }
                if (this.ConnectionsClosed != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionsClosed.GetHashCode();
                }
                if (this.TotalIcmpPackets != null)
                {
                    hashCode = (hashCode * 59) + this.TotalIcmpPackets.GetHashCode();
                }
                if (this.ValidatedPacketsPassed != null)
                {
                    hashCode = (hashCode * 59) + this.ValidatedPacketsPassed.GetHashCode();
                }
                if (this.MalformedPacketsDropped != null)
                {
                    hashCode = (hashCode * 59) + this.MalformedPacketsDropped.GetHashCode();
                }
                if (this.AverageIcmpPacketRate != null)
                {
                    hashCode = (hashCode * 59) + this.AverageIcmpPacketRate.GetHashCode();
                }
                if (this.IcmpFloodsInProgress != null)
                {
                    hashCode = (hashCode * 59) + this.IcmpFloodsInProgress.GetHashCode();
                }
                if (this.TotalIcmpFloodsDetected != null)
                {
                    hashCode = (hashCode * 59) + this.TotalIcmpFloodsDetected.GetHashCode();
                }
                if (this.TotalIcmpFloodPacketsRejected != null)
                {
                    hashCode = (hashCode * 59) + this.TotalIcmpFloodPacketsRejected.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
