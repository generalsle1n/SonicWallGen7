/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// VPN.
    /// </summary>
    [DataContract(Name = "tunnel_interface_vpn_vpn")]
    public partial class TunnelInterfaceVpnVpn : IEquatable<TunnelInterfaceVpnVpn>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TunnelInterfaceVpnVpn" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TunnelInterfaceVpnVpn() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TunnelInterfaceVpnVpn" /> class.
        /// </summary>
        /// <param name="name">Interface name. (required).</param>
        /// <param name="ipAssignment">ipAssignment.</param>
        /// <param name="policy">Set tunnel interface VPN policy..</param>
        /// <param name="comment">Set interface comment..</param>
        /// <param name="management">management.</param>
        /// <param name="userLogin">userLogin.</param>
        /// <param name="fragmentPackets">Enable fragment non-VPN outbound packets larger than this interface&#39;s MTU..</param>
        /// <param name="ignoreDfBit">Enable ignore don&#39;t fragment (DF) bit..</param>
        /// <param name="flowReporting">Enable flow reporting on the interface..</param>
        /// <param name="multicast">Enable multicast support..</param>
        /// <param name="asymmetricRoute">Enable asymmetric route..</param>
        public TunnelInterfaceVpnVpn(string name = default(string), TunnelInterfaceVpnVpnIpAssignment ipAssignment = default(TunnelInterfaceVpnVpnIpAssignment), string policy = default(string), string comment = default(string), InterfaceIpv4Ipv4Management management = default(InterfaceIpv4Ipv4Management), InterfaceIpv4Ipv4UserLogin userLogin = default(InterfaceIpv4Ipv4UserLogin), bool fragmentPackets = default(bool), bool ignoreDfBit = default(bool), bool flowReporting = default(bool), bool multicast = default(bool), bool asymmetricRoute = default(bool))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for TunnelInterfaceVpnVpn and cannot be null");
            }
            this.Name = name;
            this.IpAssignment = ipAssignment;
            this.Policy = policy;
            this.Comment = comment;
            this.Management = management;
            this.UserLogin = userLogin;
            this.FragmentPackets = fragmentPackets;
            this.IgnoreDfBit = ignoreDfBit;
            this.FlowReporting = flowReporting;
            this.Multicast = multicast;
            this.AsymmetricRoute = asymmetricRoute;
        }

        /// <summary>
        /// Interface name.
        /// </summary>
        /// <value>Interface name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets IpAssignment
        /// </summary>
        [DataMember(Name = "ip_assignment", EmitDefaultValue = true)]
        public TunnelInterfaceVpnVpnIpAssignment IpAssignment { get; set; }

        /// <summary>
        /// Set tunnel interface VPN policy.
        /// </summary>
        /// <value>Set tunnel interface VPN policy.</value>
        [DataMember(Name = "policy", EmitDefaultValue = false)]
        public string Policy { get; set; }

        /// <summary>
        /// Set interface comment.
        /// </summary>
        /// <value>Set interface comment.</value>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets Management
        /// </summary>
        [DataMember(Name = "management", EmitDefaultValue = false)]
        public InterfaceIpv4Ipv4Management Management { get; set; }

        /// <summary>
        /// Gets or Sets UserLogin
        /// </summary>
        [DataMember(Name = "user_login", EmitDefaultValue = false)]
        public InterfaceIpv4Ipv4UserLogin UserLogin { get; set; }

        /// <summary>
        /// Enable fragment non-VPN outbound packets larger than this interface&#39;s MTU.
        /// </summary>
        /// <value>Enable fragment non-VPN outbound packets larger than this interface&#39;s MTU.</value>
        [DataMember(Name = "fragment_packets", EmitDefaultValue = true)]
        public bool FragmentPackets { get; set; }

        /// <summary>
        /// Enable ignore don&#39;t fragment (DF) bit.
        /// </summary>
        /// <value>Enable ignore don&#39;t fragment (DF) bit.</value>
        [DataMember(Name = "ignore_df_bit", EmitDefaultValue = true)]
        public bool IgnoreDfBit { get; set; }

        /// <summary>
        /// Enable flow reporting on the interface.
        /// </summary>
        /// <value>Enable flow reporting on the interface.</value>
        [DataMember(Name = "flow_reporting", EmitDefaultValue = true)]
        public bool FlowReporting { get; set; }

        /// <summary>
        /// Enable multicast support.
        /// </summary>
        /// <value>Enable multicast support.</value>
        [DataMember(Name = "multicast", EmitDefaultValue = true)]
        public bool Multicast { get; set; }

        /// <summary>
        /// Enable asymmetric route.
        /// </summary>
        /// <value>Enable asymmetric route.</value>
        [DataMember(Name = "asymmetric_route", EmitDefaultValue = true)]
        public bool AsymmetricRoute { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TunnelInterfaceVpnVpn {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IpAssignment: ").Append(IpAssignment).Append("\n");
            sb.Append("  Policy: ").Append(Policy).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Management: ").Append(Management).Append("\n");
            sb.Append("  UserLogin: ").Append(UserLogin).Append("\n");
            sb.Append("  FragmentPackets: ").Append(FragmentPackets).Append("\n");
            sb.Append("  IgnoreDfBit: ").Append(IgnoreDfBit).Append("\n");
            sb.Append("  FlowReporting: ").Append(FlowReporting).Append("\n");
            sb.Append("  Multicast: ").Append(Multicast).Append("\n");
            sb.Append("  AsymmetricRoute: ").Append(AsymmetricRoute).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TunnelInterfaceVpnVpn);
        }

        /// <summary>
        /// Returns true if TunnelInterfaceVpnVpn instances are equal
        /// </summary>
        /// <param name="input">Instance of TunnelInterfaceVpnVpn to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TunnelInterfaceVpnVpn input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.IpAssignment == input.IpAssignment ||
                    (this.IpAssignment != null &&
                    this.IpAssignment.Equals(input.IpAssignment))
                ) && 
                (
                    this.Policy == input.Policy ||
                    (this.Policy != null &&
                    this.Policy.Equals(input.Policy))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Management == input.Management ||
                    (this.Management != null &&
                    this.Management.Equals(input.Management))
                ) && 
                (
                    this.UserLogin == input.UserLogin ||
                    (this.UserLogin != null &&
                    this.UserLogin.Equals(input.UserLogin))
                ) && 
                (
                    this.FragmentPackets == input.FragmentPackets ||
                    this.FragmentPackets.Equals(input.FragmentPackets)
                ) && 
                (
                    this.IgnoreDfBit == input.IgnoreDfBit ||
                    this.IgnoreDfBit.Equals(input.IgnoreDfBit)
                ) && 
                (
                    this.FlowReporting == input.FlowReporting ||
                    this.FlowReporting.Equals(input.FlowReporting)
                ) && 
                (
                    this.Multicast == input.Multicast ||
                    this.Multicast.Equals(input.Multicast)
                ) && 
                (
                    this.AsymmetricRoute == input.AsymmetricRoute ||
                    this.AsymmetricRoute.Equals(input.AsymmetricRoute)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.IpAssignment != null)
                {
                    hashCode = (hashCode * 59) + this.IpAssignment.GetHashCode();
                }
                if (this.Policy != null)
                {
                    hashCode = (hashCode * 59) + this.Policy.GetHashCode();
                }
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                if (this.Management != null)
                {
                    hashCode = (hashCode * 59) + this.Management.GetHashCode();
                }
                if (this.UserLogin != null)
                {
                    hashCode = (hashCode * 59) + this.UserLogin.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FragmentPackets.GetHashCode();
                hashCode = (hashCode * 59) + this.IgnoreDfBit.GetHashCode();
                hashCode = (hashCode * 59) + this.FlowReporting.GetHashCode();
                hashCode = (hashCode * 59) + this.Multicast.GetHashCode();
                hashCode = (hashCode * 59) + this.AsymmetricRoute.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
