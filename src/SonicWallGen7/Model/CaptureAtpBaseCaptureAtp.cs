/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enter capture ATP mode and configure settings.
    /// </summary>
    [DataContract(Name = "capture_atp_base_capture_atp")]
    public partial class CaptureAtpBaseCaptureAtp : IEquatable<CaptureAtpBaseCaptureAtp>, IValidatableObject
    {
        /// <summary>
        /// Select Capture ATP location.
        /// </summary>
        /// <value>Select Capture ATP location.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LocationEnum
        {
            /// <summary>
            /// Enum Cloud for value: cloud
            /// </summary>
            [EnumMember(Value = "cloud")]
            Cloud = 1,

            /// <summary>
            /// Enum Local for value: local
            /// </summary>
            [EnumMember(Value = "local")]
            Local = 2
        }


        /// <summary>
        /// Select Capture ATP location.
        /// </summary>
        /// <value>Select Capture ATP location.</value>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public LocationEnum? Location { get; set; }
        /// <summary>
        /// Set the custom block behavior for files that are not identified as malicious by               other security services on the firewall and will be sent to capture ATP cloud service.
        /// </summary>
        /// <value>Set the custom block behavior for files that are not identified as malicious by               other security services on the firewall and will be sent to capture ATP cloud service.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AwaitVerdictEnum
        {
            /// <summary>
            /// Enum Allow for value: allow
            /// </summary>
            [EnumMember(Value = "allow")]
            Allow = 1,

            /// <summary>
            /// Enum Block for value: block
            /// </summary>
            [EnumMember(Value = "block")]
            Block = 2
        }


        /// <summary>
        /// Set the custom block behavior for files that are not identified as malicious by               other security services on the firewall and will be sent to capture ATP cloud service.
        /// </summary>
        /// <value>Set the custom block behavior for files that are not identified as malicious by               other security services on the firewall and will be sent to capture ATP cloud service.</value>
        [DataMember(Name = "await_verdict", EmitDefaultValue = false)]
        public AwaitVerdictEnum? AwaitVerdict { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CaptureAtpBaseCaptureAtp" /> class.
        /// </summary>
        /// <param name="enable">Enable the capture ATP services..</param>
        /// <param name="location">Select Capture ATP location..</param>
        /// <param name="localNameOrIp">Set local Capture ATP name or ip address..</param>
        /// <param name="fileType">fileType.</param>
        /// <param name="fileSize">fileSize.</param>
        /// <param name="awaitVerdict">Set the custom block behavior for files that are not identified as malicious by               other security services on the firewall and will be sent to capture ATP cloud service..</param>
        /// <param name="exclude">exclude.</param>
        public CaptureAtpBaseCaptureAtp(bool enable = default(bool), LocationEnum? location = default(LocationEnum?), string localNameOrIp = default(string), CaptureAtpBaseCaptureAtpFileType fileType = default(CaptureAtpBaseCaptureAtpFileType), CaptureAtpBaseCaptureAtpFileSize fileSize = default(CaptureAtpBaseCaptureAtpFileSize), AwaitVerdictEnum? awaitVerdict = default(AwaitVerdictEnum?), CaptureAtpBaseCaptureAtpExclude exclude = default(CaptureAtpBaseCaptureAtpExclude))
        {
            this.Enable = enable;
            this.Location = location;
            this.LocalNameOrIp = localNameOrIp;
            this.FileType = fileType;
            this.FileSize = fileSize;
            this.AwaitVerdict = awaitVerdict;
            this.Exclude = exclude;
        }

        /// <summary>
        /// Enable the capture ATP services.
        /// </summary>
        /// <value>Enable the capture ATP services.</value>
        [DataMember(Name = "enable", EmitDefaultValue = true)]
        public bool Enable { get; set; }

        /// <summary>
        /// Set local Capture ATP name or ip address.
        /// </summary>
        /// <value>Set local Capture ATP name or ip address.</value>
        [DataMember(Name = "local_name_or_ip", EmitDefaultValue = false)]
        public string LocalNameOrIp { get; set; }

        /// <summary>
        /// Gets or Sets FileType
        /// </summary>
        [DataMember(Name = "file_type", EmitDefaultValue = false)]
        public CaptureAtpBaseCaptureAtpFileType FileType { get; set; }

        /// <summary>
        /// Gets or Sets FileSize
        /// </summary>
        [DataMember(Name = "file_size", EmitDefaultValue = false)]
        public CaptureAtpBaseCaptureAtpFileSize FileSize { get; set; }

        /// <summary>
        /// Gets or Sets Exclude
        /// </summary>
        [DataMember(Name = "exclude", EmitDefaultValue = false)]
        public CaptureAtpBaseCaptureAtpExclude Exclude { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CaptureAtpBaseCaptureAtp {\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  LocalNameOrIp: ").Append(LocalNameOrIp).Append("\n");
            sb.Append("  FileType: ").Append(FileType).Append("\n");
            sb.Append("  FileSize: ").Append(FileSize).Append("\n");
            sb.Append("  AwaitVerdict: ").Append(AwaitVerdict).Append("\n");
            sb.Append("  Exclude: ").Append(Exclude).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CaptureAtpBaseCaptureAtp);
        }

        /// <summary>
        /// Returns true if CaptureAtpBaseCaptureAtp instances are equal
        /// </summary>
        /// <param name="input">Instance of CaptureAtpBaseCaptureAtp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CaptureAtpBaseCaptureAtp input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.Location == input.Location ||
                    this.Location.Equals(input.Location)
                ) && 
                (
                    this.LocalNameOrIp == input.LocalNameOrIp ||
                    (this.LocalNameOrIp != null &&
                    this.LocalNameOrIp.Equals(input.LocalNameOrIp))
                ) && 
                (
                    this.FileType == input.FileType ||
                    (this.FileType != null &&
                    this.FileType.Equals(input.FileType))
                ) && 
                (
                    this.FileSize == input.FileSize ||
                    (this.FileSize != null &&
                    this.FileSize.Equals(input.FileSize))
                ) && 
                (
                    this.AwaitVerdict == input.AwaitVerdict ||
                    this.AwaitVerdict.Equals(input.AwaitVerdict)
                ) && 
                (
                    this.Exclude == input.Exclude ||
                    (this.Exclude != null &&
                    this.Exclude.Equals(input.Exclude))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Enable.GetHashCode();
                hashCode = (hashCode * 59) + this.Location.GetHashCode();
                if (this.LocalNameOrIp != null)
                {
                    hashCode = (hashCode * 59) + this.LocalNameOrIp.GetHashCode();
                }
                if (this.FileType != null)
                {
                    hashCode = (hashCode * 59) + this.FileType.GetHashCode();
                }
                if (this.FileSize != null)
                {
                    hashCode = (hashCode * 59) + this.FileSize.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AwaitVerdict.GetHashCode();
                if (this.Exclude != null)
                {
                    hashCode = (hashCode * 59) + this.Exclude.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
