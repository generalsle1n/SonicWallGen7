/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// SSL VPN profile configuration.
    /// </summary>
    [DataContract(Name = "ssl_vpn_device_profile")]
    public partial class SslVpnDeviceProfile : IEquatable<SslVpnDeviceProfile>, IValidatableObject
    {
        /// <summary>
        /// Configure action for the device profile.
        /// </summary>
        /// <value>Configure action for the device profile.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            /// <summary>
            /// Enum Allow for value: allow
            /// </summary>
            [EnumMember(Value = "allow")]
            Allow = 1,

            /// <summary>
            /// Enum Deny for value: deny
            /// </summary>
            [EnumMember(Value = "deny")]
            Deny = 2
        }


        /// <summary>
        /// Configure action for the device profile.
        /// </summary>
        /// <value>Configure action for the device profile.</value>
        [DataMember(Name = "action", EmitDefaultValue = false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SslVpnDeviceProfile" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SslVpnDeviceProfile() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SslVpnDeviceProfile" /> class.
        /// </summary>
        /// <param name="name">Configure name for the device profile. (required).</param>
        /// <param name="description">Configure description for the device profile..</param>
        /// <param name="enable">Enable the device profile..</param>
        /// <param name="action">Configure action for the device profile..</param>
        /// <param name="networkAddress">networkAddress.</param>
        /// <param name="varClient">varClient.</param>
        /// <param name="routes">routes.</param>
        public SslVpnDeviceProfile(string name = default(string), string description = default(string), bool enable = default(bool), ActionEnum? action = default(ActionEnum?), SslVpnDeviceProfileNetworkAddress networkAddress = default(SslVpnDeviceProfileNetworkAddress), SslVpnDeviceProfileClient varClient = default(SslVpnDeviceProfileClient), SslVpnDeviceProfileRoutes routes = default(SslVpnDeviceProfileRoutes))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for SslVpnDeviceProfile and cannot be null");
            }
            this.Name = name;
            this.Description = description;
            this.Enable = enable;
            this.Action = action;
            this.NetworkAddress = networkAddress;
            this.VarClient = varClient;
            this.Routes = routes;
        }

        /// <summary>
        /// Configure name for the device profile.
        /// </summary>
        /// <value>Configure name for the device profile.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Configure description for the device profile.
        /// </summary>
        /// <value>Configure description for the device profile.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Enable the device profile.
        /// </summary>
        /// <value>Enable the device profile.</value>
        [DataMember(Name = "enable", EmitDefaultValue = true)]
        public bool Enable { get; set; }

        /// <summary>
        /// Gets or Sets NetworkAddress
        /// </summary>
        [DataMember(Name = "network_address", EmitDefaultValue = false)]
        public SslVpnDeviceProfileNetworkAddress NetworkAddress { get; set; }

        /// <summary>
        /// Gets or Sets VarClient
        /// </summary>
        [DataMember(Name = "client", EmitDefaultValue = false)]
        public SslVpnDeviceProfileClient VarClient { get; set; }

        /// <summary>
        /// Gets or Sets Routes
        /// </summary>
        [DataMember(Name = "routes", EmitDefaultValue = false)]
        public SslVpnDeviceProfileRoutes Routes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SslVpnDeviceProfile {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  NetworkAddress: ").Append(NetworkAddress).Append("\n");
            sb.Append("  VarClient: ").Append(VarClient).Append("\n");
            sb.Append("  Routes: ").Append(Routes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SslVpnDeviceProfile);
        }

        /// <summary>
        /// Returns true if SslVpnDeviceProfile instances are equal
        /// </summary>
        /// <param name="input">Instance of SslVpnDeviceProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SslVpnDeviceProfile input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.Action == input.Action ||
                    this.Action.Equals(input.Action)
                ) && 
                (
                    this.NetworkAddress == input.NetworkAddress ||
                    (this.NetworkAddress != null &&
                    this.NetworkAddress.Equals(input.NetworkAddress))
                ) && 
                (
                    this.VarClient == input.VarClient ||
                    (this.VarClient != null &&
                    this.VarClient.Equals(input.VarClient))
                ) && 
                (
                    this.Routes == input.Routes ||
                    (this.Routes != null &&
                    this.Routes.Equals(input.Routes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Enable.GetHashCode();
                hashCode = (hashCode * 59) + this.Action.GetHashCode();
                if (this.NetworkAddress != null)
                {
                    hashCode = (hashCode * 59) + this.NetworkAddress.GetHashCode();
                }
                if (this.VarClient != null)
                {
                    hashCode = (hashCode * 59) + this.VarClient.GetHashCode();
                }
                if (this.Routes != null)
                {
                    hashCode = (hashCode * 59) + this.Routes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
