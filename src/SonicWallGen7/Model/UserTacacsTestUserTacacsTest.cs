/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Run the TACACS test.
    /// </summary>
    [DataContract(Name = "user_tacacs_test_user_tacacs_test")]
    public partial class UserTacacsTestUserTacacsTest : IEquatable<UserTacacsTestUserTacacsTest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserTacacsTestUserTacacsTest" /> class.
        /// </summary>
        /// <param name="name">TACACS server to use..</param>
        /// <param name="user">user.</param>
        /// <param name="outbound">Run the test for outbound TACACS+ authentication..</param>
        /// <param name="combined">Run the test for combined AAA authentication..</param>
        /// <param name="clearPacket">Run the test by sending clear TACACS+ packet..</param>
        public UserTacacsTestUserTacacsTest(string name = default(string), UserTacacsTestUserTacacsTestUser user = default(UserTacacsTestUserTacacsTestUser), bool outbound = default(bool), bool combined = default(bool), bool clearPacket = default(bool))
        {
            this.Name = name;
            this.User = user;
            this.Outbound = outbound;
            this.Combined = combined;
            this.ClearPacket = clearPacket;
        }

        /// <summary>
        /// TACACS server to use.
        /// </summary>
        /// <value>TACACS server to use.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public UserTacacsTestUserTacacsTestUser User { get; set; }

        /// <summary>
        /// Run the test for outbound TACACS+ authentication.
        /// </summary>
        /// <value>Run the test for outbound TACACS+ authentication.</value>
        [DataMember(Name = "outbound", EmitDefaultValue = true)]
        public bool Outbound { get; set; }

        /// <summary>
        /// Run the test for combined AAA authentication.
        /// </summary>
        /// <value>Run the test for combined AAA authentication.</value>
        [DataMember(Name = "combined", EmitDefaultValue = true)]
        public bool Combined { get; set; }

        /// <summary>
        /// Run the test by sending clear TACACS+ packet.
        /// </summary>
        /// <value>Run the test by sending clear TACACS+ packet.</value>
        [DataMember(Name = "clear_packet", EmitDefaultValue = true)]
        public bool ClearPacket { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserTacacsTestUserTacacsTest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Outbound: ").Append(Outbound).Append("\n");
            sb.Append("  Combined: ").Append(Combined).Append("\n");
            sb.Append("  ClearPacket: ").Append(ClearPacket).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserTacacsTestUserTacacsTest);
        }

        /// <summary>
        /// Returns true if UserTacacsTestUserTacacsTest instances are equal
        /// </summary>
        /// <param name="input">Instance of UserTacacsTestUserTacacsTest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserTacacsTestUserTacacsTest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Outbound == input.Outbound ||
                    this.Outbound.Equals(input.Outbound)
                ) && 
                (
                    this.Combined == input.Combined ||
                    this.Combined.Equals(input.Combined)
                ) && 
                (
                    this.ClearPacket == input.ClearPacket ||
                    this.ClearPacket.Equals(input.ClearPacket)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Outbound.GetHashCode();
                hashCode = (hashCode * 59) + this.Combined.GetHashCode();
                hashCode = (hashCode * 59) + this.ClearPacket.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
