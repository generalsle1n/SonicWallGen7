/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Guest profile configuration.
    /// </summary>
    [DataContract(Name = "user_guest_profile")]
    public partial class UserGuestProfile : IEquatable<UserGuestProfile>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserGuestProfile" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserGuestProfile() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserGuestProfile" /> class.
        /// </summary>
        /// <param name="name">Set the name of the guest user profile. (required).</param>
        /// <param name="generate">generate.</param>
        /// <param name="namePrefix">Set a prefix for names of created guest accounts..</param>
        /// <param name="comment">Set comment for created guest accounts. * Set to null to represent an unconfigured state..</param>
        /// <param name="enable">Enable guest accounts to be created..</param>
        /// <param name="activateOnLogin">Enable activate account upon first login..</param>
        /// <param name="loginUniqueness">Enable enforcing unique login sessions..</param>
        /// <param name="pruneOnExpiry">Enable to delete the created guest accounts when they are expired..</param>
        /// <param name="accountLifetime">accountLifetime.</param>
        /// <param name="quotaCycle">quotaCycle.</param>
        /// <param name="sessionLifetime">sessionLifetime.</param>
        /// <param name="idleTimeout">idleTimeout.</param>
        /// <param name="limit">limit.</param>
        public UserGuestProfile(string name = default(string), UserGuestProfileGenerate generate = default(UserGuestProfileGenerate), string namePrefix = default(string), string comment = default(string), bool enable = default(bool), bool activateOnLogin = default(bool), bool loginUniqueness = default(bool), bool pruneOnExpiry = default(bool), UserGuestProfileAccountLifetime accountLifetime = default(UserGuestProfileAccountLifetime), UserGuestProfileQuotaCycle quotaCycle = default(UserGuestProfileQuotaCycle), UserGuestProfileSessionLifetime sessionLifetime = default(UserGuestProfileSessionLifetime), UserGuestProfileIdleTimeout idleTimeout = default(UserGuestProfileIdleTimeout), UserGuestProfileLimit limit = default(UserGuestProfileLimit))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for UserGuestProfile and cannot be null");
            }
            this.Name = name;
            this.Generate = generate;
            this.NamePrefix = namePrefix;
            this.Comment = comment;
            this.Enable = enable;
            this.ActivateOnLogin = activateOnLogin;
            this.LoginUniqueness = loginUniqueness;
            this.PruneOnExpiry = pruneOnExpiry;
            this.AccountLifetime = accountLifetime;
            this.QuotaCycle = quotaCycle;
            this.SessionLifetime = sessionLifetime;
            this.IdleTimeout = idleTimeout;
            this.Limit = limit;
        }

        /// <summary>
        /// Set the name of the guest user profile.
        /// </summary>
        /// <value>Set the name of the guest user profile.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Generate
        /// </summary>
        [DataMember(Name = "generate", EmitDefaultValue = false)]
        public UserGuestProfileGenerate Generate { get; set; }

        /// <summary>
        /// Set a prefix for names of created guest accounts.
        /// </summary>
        /// <value>Set a prefix for names of created guest accounts.</value>
        [DataMember(Name = "name_prefix", EmitDefaultValue = false)]
        public string NamePrefix { get; set; }

        /// <summary>
        /// Set comment for created guest accounts. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Set comment for created guest accounts. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "comment", EmitDefaultValue = true)]
        public string Comment { get; set; }

        /// <summary>
        /// Enable guest accounts to be created.
        /// </summary>
        /// <value>Enable guest accounts to be created.</value>
        [DataMember(Name = "enable", EmitDefaultValue = true)]
        public bool Enable { get; set; }

        /// <summary>
        /// Enable activate account upon first login.
        /// </summary>
        /// <value>Enable activate account upon first login.</value>
        [DataMember(Name = "activate_on_login", EmitDefaultValue = true)]
        public bool ActivateOnLogin { get; set; }

        /// <summary>
        /// Enable enforcing unique login sessions.
        /// </summary>
        /// <value>Enable enforcing unique login sessions.</value>
        [DataMember(Name = "login_uniqueness", EmitDefaultValue = true)]
        public bool LoginUniqueness { get; set; }

        /// <summary>
        /// Enable to delete the created guest accounts when they are expired.
        /// </summary>
        /// <value>Enable to delete the created guest accounts when they are expired.</value>
        [DataMember(Name = "prune_on_expiry", EmitDefaultValue = true)]
        public bool PruneOnExpiry { get; set; }

        /// <summary>
        /// Gets or Sets AccountLifetime
        /// </summary>
        [DataMember(Name = "account_lifetime", EmitDefaultValue = false)]
        public UserGuestProfileAccountLifetime AccountLifetime { get; set; }

        /// <summary>
        /// Gets or Sets QuotaCycle
        /// </summary>
        [DataMember(Name = "quota_cycle", EmitDefaultValue = false)]
        public UserGuestProfileQuotaCycle QuotaCycle { get; set; }

        /// <summary>
        /// Gets or Sets SessionLifetime
        /// </summary>
        [DataMember(Name = "session_lifetime", EmitDefaultValue = false)]
        public UserGuestProfileSessionLifetime SessionLifetime { get; set; }

        /// <summary>
        /// Gets or Sets IdleTimeout
        /// </summary>
        [DataMember(Name = "idle_timeout", EmitDefaultValue = false)]
        public UserGuestProfileIdleTimeout IdleTimeout { get; set; }

        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public UserGuestProfileLimit Limit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserGuestProfile {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Generate: ").Append(Generate).Append("\n");
            sb.Append("  NamePrefix: ").Append(NamePrefix).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  ActivateOnLogin: ").Append(ActivateOnLogin).Append("\n");
            sb.Append("  LoginUniqueness: ").Append(LoginUniqueness).Append("\n");
            sb.Append("  PruneOnExpiry: ").Append(PruneOnExpiry).Append("\n");
            sb.Append("  AccountLifetime: ").Append(AccountLifetime).Append("\n");
            sb.Append("  QuotaCycle: ").Append(QuotaCycle).Append("\n");
            sb.Append("  SessionLifetime: ").Append(SessionLifetime).Append("\n");
            sb.Append("  IdleTimeout: ").Append(IdleTimeout).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserGuestProfile);
        }

        /// <summary>
        /// Returns true if UserGuestProfile instances are equal
        /// </summary>
        /// <param name="input">Instance of UserGuestProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserGuestProfile input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Generate == input.Generate ||
                    (this.Generate != null &&
                    this.Generate.Equals(input.Generate))
                ) && 
                (
                    this.NamePrefix == input.NamePrefix ||
                    (this.NamePrefix != null &&
                    this.NamePrefix.Equals(input.NamePrefix))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.ActivateOnLogin == input.ActivateOnLogin ||
                    this.ActivateOnLogin.Equals(input.ActivateOnLogin)
                ) && 
                (
                    this.LoginUniqueness == input.LoginUniqueness ||
                    this.LoginUniqueness.Equals(input.LoginUniqueness)
                ) && 
                (
                    this.PruneOnExpiry == input.PruneOnExpiry ||
                    this.PruneOnExpiry.Equals(input.PruneOnExpiry)
                ) && 
                (
                    this.AccountLifetime == input.AccountLifetime ||
                    (this.AccountLifetime != null &&
                    this.AccountLifetime.Equals(input.AccountLifetime))
                ) && 
                (
                    this.QuotaCycle == input.QuotaCycle ||
                    (this.QuotaCycle != null &&
                    this.QuotaCycle.Equals(input.QuotaCycle))
                ) && 
                (
                    this.SessionLifetime == input.SessionLifetime ||
                    (this.SessionLifetime != null &&
                    this.SessionLifetime.Equals(input.SessionLifetime))
                ) && 
                (
                    this.IdleTimeout == input.IdleTimeout ||
                    (this.IdleTimeout != null &&
                    this.IdleTimeout.Equals(input.IdleTimeout))
                ) && 
                (
                    this.Limit == input.Limit ||
                    (this.Limit != null &&
                    this.Limit.Equals(input.Limit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Generate != null)
                {
                    hashCode = (hashCode * 59) + this.Generate.GetHashCode();
                }
                if (this.NamePrefix != null)
                {
                    hashCode = (hashCode * 59) + this.NamePrefix.GetHashCode();
                }
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Enable.GetHashCode();
                hashCode = (hashCode * 59) + this.ActivateOnLogin.GetHashCode();
                hashCode = (hashCode * 59) + this.LoginUniqueness.GetHashCode();
                hashCode = (hashCode * 59) + this.PruneOnExpiry.GetHashCode();
                if (this.AccountLifetime != null)
                {
                    hashCode = (hashCode * 59) + this.AccountLifetime.GetHashCode();
                }
                if (this.QuotaCycle != null)
                {
                    hashCode = (hashCode * 59) + this.QuotaCycle.GetHashCode();
                }
                if (this.SessionLifetime != null)
                {
                    hashCode = (hashCode * 59) + this.SessionLifetime.GetHashCode();
                }
                if (this.IdleTimeout != null)
                {
                    hashCode = (hashCode * 59) + this.IdleTimeout.GetHashCode();
                }
                if (this.Limit != null)
                {
                    hashCode = (hashCode * 59) + this.Limit.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
