/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// NAT64 NAT policy.
    /// </summary>
    [DataContract(Name = "nat_policy_nat64_nat64")]
    public partial class NatPolicyNat64Nat64 : IEquatable<NatPolicyNat64Nat64>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NatPolicyNat64Nat64" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NatPolicyNat64Nat64() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NatPolicyNat64Nat64" /> class.
        /// </summary>
        /// <param name="inbound">Specify the inbound interface for the NAT policy. (required).</param>
        /// <param name="outbound">Specify the outbound interface for the NAT policy. (required).</param>
        /// <param name="source">source (required).</param>
        /// <param name="translatedSource">translatedSource (required).</param>
        /// <param name="pref64">pref64 (required).</param>
        /// <param name="translatedDestination">translatedDestination (required).</param>
        /// <param name="service">service (required).</param>
        /// <param name="translatedService">translatedService (required).</param>
        /// <param name="uuid">Nat policy UUID..</param>
        /// <param name="name">Nat policy name..</param>
        /// <param name="enable">Enable NAT policy..</param>
        /// <param name="priority">priority.</param>
        /// <param name="comment">Set comment to help identify this NAT policy..</param>
        /// <param name="ticket">ticket.</param>
        public NatPolicyNat64Nat64(string inbound = default(string), string outbound = default(string), NatPolicyNat64Nat64Source source = default(NatPolicyNat64Nat64Source), NatPolicyNat64Nat64TranslatedSource translatedSource = default(NatPolicyNat64Nat64TranslatedSource), NatPolicyNat64Nat64Pref64 pref64 = default(NatPolicyNat64Nat64Pref64), NatPolicyNat64Nat64TranslatedDestination translatedDestination = default(NatPolicyNat64Nat64TranslatedDestination), NatPolicyNat64Nat64Service service = default(NatPolicyNat64Nat64Service), NatPolicyNat64Nat64TranslatedService translatedService = default(NatPolicyNat64Nat64TranslatedService), string uuid = default(string), string name = default(string), bool enable = default(bool), NatPolicyNat64Nat64Priority priority = default(NatPolicyNat64Nat64Priority), string comment = default(string), NatPolicyIpv4Ipv4Ticket ticket = default(NatPolicyIpv4Ipv4Ticket))
        {
            // to ensure "inbound" is required (not null)
            if (inbound == null)
            {
                throw new ArgumentNullException("inbound is a required property for NatPolicyNat64Nat64 and cannot be null");
            }
            this.Inbound = inbound;
            // to ensure "outbound" is required (not null)
            if (outbound == null)
            {
                throw new ArgumentNullException("outbound is a required property for NatPolicyNat64Nat64 and cannot be null");
            }
            this.Outbound = outbound;
            // to ensure "source" is required (not null)
            if (source == null)
            {
                throw new ArgumentNullException("source is a required property for NatPolicyNat64Nat64 and cannot be null");
            }
            this.Source = source;
            // to ensure "translatedSource" is required (not null)
            if (translatedSource == null)
            {
                throw new ArgumentNullException("translatedSource is a required property for NatPolicyNat64Nat64 and cannot be null");
            }
            this.TranslatedSource = translatedSource;
            // to ensure "pref64" is required (not null)
            if (pref64 == null)
            {
                throw new ArgumentNullException("pref64 is a required property for NatPolicyNat64Nat64 and cannot be null");
            }
            this.Pref64 = pref64;
            // to ensure "translatedDestination" is required (not null)
            if (translatedDestination == null)
            {
                throw new ArgumentNullException("translatedDestination is a required property for NatPolicyNat64Nat64 and cannot be null");
            }
            this.TranslatedDestination = translatedDestination;
            // to ensure "service" is required (not null)
            if (service == null)
            {
                throw new ArgumentNullException("service is a required property for NatPolicyNat64Nat64 and cannot be null");
            }
            this.Service = service;
            // to ensure "translatedService" is required (not null)
            if (translatedService == null)
            {
                throw new ArgumentNullException("translatedService is a required property for NatPolicyNat64Nat64 and cannot be null");
            }
            this.TranslatedService = translatedService;
            this.Uuid = uuid;
            this.Name = name;
            this.Enable = enable;
            this.Priority = priority;
            this.Comment = comment;
            this.Ticket = ticket;
        }

        /// <summary>
        /// Specify the inbound interface for the NAT policy.
        /// </summary>
        /// <value>Specify the inbound interface for the NAT policy.</value>
        [DataMember(Name = "inbound", IsRequired = true, EmitDefaultValue = true)]
        public string Inbound { get; set; }

        /// <summary>
        /// Specify the outbound interface for the NAT policy.
        /// </summary>
        /// <value>Specify the outbound interface for the NAT policy.</value>
        [DataMember(Name = "outbound", IsRequired = true, EmitDefaultValue = true)]
        public string Outbound { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", IsRequired = true, EmitDefaultValue = true)]
        public NatPolicyNat64Nat64Source Source { get; set; }

        /// <summary>
        /// Gets or Sets TranslatedSource
        /// </summary>
        [DataMember(Name = "translated_source", IsRequired = true, EmitDefaultValue = true)]
        public NatPolicyNat64Nat64TranslatedSource TranslatedSource { get; set; }

        /// <summary>
        /// Gets or Sets Pref64
        /// </summary>
        [DataMember(Name = "pref64", IsRequired = true, EmitDefaultValue = true)]
        public NatPolicyNat64Nat64Pref64 Pref64 { get; set; }

        /// <summary>
        /// Gets or Sets TranslatedDestination
        /// </summary>
        [DataMember(Name = "translated_destination", IsRequired = true, EmitDefaultValue = true)]
        public NatPolicyNat64Nat64TranslatedDestination TranslatedDestination { get; set; }

        /// <summary>
        /// Gets or Sets Service
        /// </summary>
        [DataMember(Name = "service", IsRequired = true, EmitDefaultValue = true)]
        public NatPolicyNat64Nat64Service Service { get; set; }

        /// <summary>
        /// Gets or Sets TranslatedService
        /// </summary>
        [DataMember(Name = "translated_service", IsRequired = true, EmitDefaultValue = true)]
        public NatPolicyNat64Nat64TranslatedService TranslatedService { get; set; }

        /// <summary>
        /// Nat policy UUID.
        /// </summary>
        /// <value>Nat policy UUID.</value>
        [DataMember(Name = "uuid", EmitDefaultValue = false)]
        public string Uuid { get; set; }

        /// <summary>
        /// Nat policy name.
        /// </summary>
        /// <value>Nat policy name.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Enable NAT policy.
        /// </summary>
        /// <value>Enable NAT policy.</value>
        [DataMember(Name = "enable", EmitDefaultValue = true)]
        public bool Enable { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name = "priority", EmitDefaultValue = false)]
        public NatPolicyNat64Nat64Priority Priority { get; set; }

        /// <summary>
        /// Set comment to help identify this NAT policy.
        /// </summary>
        /// <value>Set comment to help identify this NAT policy.</value>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets Ticket
        /// </summary>
        [DataMember(Name = "ticket", EmitDefaultValue = false)]
        public NatPolicyIpv4Ipv4Ticket Ticket { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NatPolicyNat64Nat64 {\n");
            sb.Append("  Inbound: ").Append(Inbound).Append("\n");
            sb.Append("  Outbound: ").Append(Outbound).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  TranslatedSource: ").Append(TranslatedSource).Append("\n");
            sb.Append("  Pref64: ").Append(Pref64).Append("\n");
            sb.Append("  TranslatedDestination: ").Append(TranslatedDestination).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  TranslatedService: ").Append(TranslatedService).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Ticket: ").Append(Ticket).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NatPolicyNat64Nat64);
        }

        /// <summary>
        /// Returns true if NatPolicyNat64Nat64 instances are equal
        /// </summary>
        /// <param name="input">Instance of NatPolicyNat64Nat64 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NatPolicyNat64Nat64 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Inbound == input.Inbound ||
                    (this.Inbound != null &&
                    this.Inbound.Equals(input.Inbound))
                ) && 
                (
                    this.Outbound == input.Outbound ||
                    (this.Outbound != null &&
                    this.Outbound.Equals(input.Outbound))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.TranslatedSource == input.TranslatedSource ||
                    (this.TranslatedSource != null &&
                    this.TranslatedSource.Equals(input.TranslatedSource))
                ) && 
                (
                    this.Pref64 == input.Pref64 ||
                    (this.Pref64 != null &&
                    this.Pref64.Equals(input.Pref64))
                ) && 
                (
                    this.TranslatedDestination == input.TranslatedDestination ||
                    (this.TranslatedDestination != null &&
                    this.TranslatedDestination.Equals(input.TranslatedDestination))
                ) && 
                (
                    this.Service == input.Service ||
                    (this.Service != null &&
                    this.Service.Equals(input.Service))
                ) && 
                (
                    this.TranslatedService == input.TranslatedService ||
                    (this.TranslatedService != null &&
                    this.TranslatedService.Equals(input.TranslatedService))
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Ticket == input.Ticket ||
                    (this.Ticket != null &&
                    this.Ticket.Equals(input.Ticket))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Inbound != null)
                {
                    hashCode = (hashCode * 59) + this.Inbound.GetHashCode();
                }
                if (this.Outbound != null)
                {
                    hashCode = (hashCode * 59) + this.Outbound.GetHashCode();
                }
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                if (this.TranslatedSource != null)
                {
                    hashCode = (hashCode * 59) + this.TranslatedSource.GetHashCode();
                }
                if (this.Pref64 != null)
                {
                    hashCode = (hashCode * 59) + this.Pref64.GetHashCode();
                }
                if (this.TranslatedDestination != null)
                {
                    hashCode = (hashCode * 59) + this.TranslatedDestination.GetHashCode();
                }
                if (this.Service != null)
                {
                    hashCode = (hashCode * 59) + this.Service.GetHashCode();
                }
                if (this.TranslatedService != null)
                {
                    hashCode = (hashCode * 59) + this.TranslatedService.GetHashCode();
                }
                if (this.Uuid != null)
                {
                    hashCode = (hashCode * 59) + this.Uuid.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Enable.GetHashCode();
                if (this.Priority != null)
                {
                    hashCode = (hashCode * 59) + this.Priority.GetHashCode();
                }
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                if (this.Ticket != null)
                {
                    hashCode = (hashCode * 59) + this.Ticket.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
