/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure server settings.
    /// </summary>
    [DataContract(Name = "ssl_vpn_server_ssl_vpn_server")]
    public partial class SslVpnServerSslVpnServer : IEquatable<SslVpnServerSslVpnServer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SslVpnServerSslVpnServer" /> class.
        /// </summary>
        /// <param name="port">Set SSL VPN server port..</param>
        /// <param name="certificate">certificate.</param>
        /// <param name="useRadius">useRadius.</param>
        /// <param name="userDomain">Set user domain..</param>
        /// <param name="management">management.</param>
        /// <param name="ccp">Enable Compression Control Protocol(CCP) for SSL VPN Connections..</param>
        /// <param name="sessionTimeout">Set the default session timeout in minutes..</param>
        /// <param name="inactivityCheck">Enable SSL VPN inactivity check..</param>
        /// <param name="autoRule">UPE Auto Rule enabled..</param>
        /// <param name="downloadUrl">downloadUrl.</param>
        public SslVpnServerSslVpnServer(decimal port = default(decimal), SslVpnServerSslVpnServerCertificate certificate = default(SslVpnServerSslVpnServerCertificate), SslVpnServerSslVpnServerUseRadius useRadius = default(SslVpnServerSslVpnServerUseRadius), string userDomain = default(string), SslVpnServerSslVpnServerManagement management = default(SslVpnServerSslVpnServerManagement), bool ccp = default(bool), decimal sessionTimeout = default(decimal), bool inactivityCheck = default(bool), bool autoRule = default(bool), SslVpnServerSslVpnServerDownloadUrl downloadUrl = default(SslVpnServerSslVpnServerDownloadUrl))
        {
            this.Port = port;
            this.Certificate = certificate;
            this.UseRadius = useRadius;
            this.UserDomain = userDomain;
            this.Management = management;
            this.Ccp = ccp;
            this.SessionTimeout = sessionTimeout;
            this.InactivityCheck = inactivityCheck;
            this.AutoRule = autoRule;
            this.DownloadUrl = downloadUrl;
        }

        /// <summary>
        /// Set SSL VPN server port.
        /// </summary>
        /// <value>Set SSL VPN server port.</value>
        [DataMember(Name = "port", EmitDefaultValue = false)]
        public decimal Port { get; set; }

        /// <summary>
        /// Gets or Sets Certificate
        /// </summary>
        [DataMember(Name = "certificate", EmitDefaultValue = false)]
        public SslVpnServerSslVpnServerCertificate Certificate { get; set; }

        /// <summary>
        /// Gets or Sets UseRadius
        /// </summary>
        [DataMember(Name = "use_radius", EmitDefaultValue = false)]
        public SslVpnServerSslVpnServerUseRadius UseRadius { get; set; }

        /// <summary>
        /// Set user domain.
        /// </summary>
        /// <value>Set user domain.</value>
        [DataMember(Name = "user_domain", EmitDefaultValue = false)]
        public string UserDomain { get; set; }

        /// <summary>
        /// Gets or Sets Management
        /// </summary>
        [DataMember(Name = "management", EmitDefaultValue = false)]
        public SslVpnServerSslVpnServerManagement Management { get; set; }

        /// <summary>
        /// Enable Compression Control Protocol(CCP) for SSL VPN Connections.
        /// </summary>
        /// <value>Enable Compression Control Protocol(CCP) for SSL VPN Connections.</value>
        [DataMember(Name = "ccp", EmitDefaultValue = true)]
        public bool Ccp { get; set; }

        /// <summary>
        /// Set the default session timeout in minutes.
        /// </summary>
        /// <value>Set the default session timeout in minutes.</value>
        [DataMember(Name = "session_timeout", EmitDefaultValue = false)]
        public decimal SessionTimeout { get; set; }

        /// <summary>
        /// Enable SSL VPN inactivity check.
        /// </summary>
        /// <value>Enable SSL VPN inactivity check.</value>
        [DataMember(Name = "inactivity_check", EmitDefaultValue = true)]
        public bool InactivityCheck { get; set; }

        /// <summary>
        /// UPE Auto Rule enabled.
        /// </summary>
        /// <value>UPE Auto Rule enabled.</value>
        [DataMember(Name = "auto_rule", EmitDefaultValue = true)]
        public bool AutoRule { get; set; }

        /// <summary>
        /// Gets or Sets DownloadUrl
        /// </summary>
        [DataMember(Name = "download_url", EmitDefaultValue = false)]
        public SslVpnServerSslVpnServerDownloadUrl DownloadUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SslVpnServerSslVpnServer {\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  Certificate: ").Append(Certificate).Append("\n");
            sb.Append("  UseRadius: ").Append(UseRadius).Append("\n");
            sb.Append("  UserDomain: ").Append(UserDomain).Append("\n");
            sb.Append("  Management: ").Append(Management).Append("\n");
            sb.Append("  Ccp: ").Append(Ccp).Append("\n");
            sb.Append("  SessionTimeout: ").Append(SessionTimeout).Append("\n");
            sb.Append("  InactivityCheck: ").Append(InactivityCheck).Append("\n");
            sb.Append("  AutoRule: ").Append(AutoRule).Append("\n");
            sb.Append("  DownloadUrl: ").Append(DownloadUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SslVpnServerSslVpnServer);
        }

        /// <summary>
        /// Returns true if SslVpnServerSslVpnServer instances are equal
        /// </summary>
        /// <param name="input">Instance of SslVpnServerSslVpnServer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SslVpnServerSslVpnServer input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Port == input.Port ||
                    this.Port.Equals(input.Port)
                ) && 
                (
                    this.Certificate == input.Certificate ||
                    (this.Certificate != null &&
                    this.Certificate.Equals(input.Certificate))
                ) && 
                (
                    this.UseRadius == input.UseRadius ||
                    (this.UseRadius != null &&
                    this.UseRadius.Equals(input.UseRadius))
                ) && 
                (
                    this.UserDomain == input.UserDomain ||
                    (this.UserDomain != null &&
                    this.UserDomain.Equals(input.UserDomain))
                ) && 
                (
                    this.Management == input.Management ||
                    (this.Management != null &&
                    this.Management.Equals(input.Management))
                ) && 
                (
                    this.Ccp == input.Ccp ||
                    this.Ccp.Equals(input.Ccp)
                ) && 
                (
                    this.SessionTimeout == input.SessionTimeout ||
                    this.SessionTimeout.Equals(input.SessionTimeout)
                ) && 
                (
                    this.InactivityCheck == input.InactivityCheck ||
                    this.InactivityCheck.Equals(input.InactivityCheck)
                ) && 
                (
                    this.AutoRule == input.AutoRule ||
                    this.AutoRule.Equals(input.AutoRule)
                ) && 
                (
                    this.DownloadUrl == input.DownloadUrl ||
                    (this.DownloadUrl != null &&
                    this.DownloadUrl.Equals(input.DownloadUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Port.GetHashCode();
                if (this.Certificate != null)
                {
                    hashCode = (hashCode * 59) + this.Certificate.GetHashCode();
                }
                if (this.UseRadius != null)
                {
                    hashCode = (hashCode * 59) + this.UseRadius.GetHashCode();
                }
                if (this.UserDomain != null)
                {
                    hashCode = (hashCode * 59) + this.UserDomain.GetHashCode();
                }
                if (this.Management != null)
                {
                    hashCode = (hashCode * 59) + this.Management.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Ccp.GetHashCode();
                hashCode = (hashCode * 59) + this.SessionTimeout.GetHashCode();
                hashCode = (hashCode * 59) + this.InactivityCheck.GetHashCode();
                hashCode = (hashCode * 59) + this.AutoRule.GetHashCode();
                if (this.DownloadUrl != null)
                {
                    hashCode = (hashCode * 59) + this.DownloadUrl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
