/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure anti-spyware exclusion list.
    /// </summary>
    [DataContract(Name = "anti_spyware_exclusion_list_anti_spyware_exclusion")]
    public partial class AntiSpywareExclusionListAntiSpywareExclusion : IEquatable<AntiSpywareExclusionListAntiSpywareExclusion>, IValidatableObject
    {
        /// <summary>
        /// Set exclusion list method.
        /// </summary>
        /// <value>Set exclusion list method.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AddressEnum
        {
            /// <summary>
            /// Enum Object for value: object
            /// </summary>
            [EnumMember(Value = "object")]
            Object = 1,

            /// <summary>
            /// Enum Range for value: range
            /// </summary>
            [EnumMember(Value = "range")]
            Range = 2
        }


        /// <summary>
        /// Set exclusion list method.
        /// </summary>
        /// <value>Set exclusion list method.</value>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public AddressEnum? Address { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AntiSpywareExclusionListAntiSpywareExclusion" /> class.
        /// </summary>
        /// <param name="list">Enable anti-spyware exclusion list..</param>
        /// <param name="address">Set exclusion list method..</param>
        /// <param name="addressObject">addressObject.</param>
        public AntiSpywareExclusionListAntiSpywareExclusion(bool list = default(bool), AddressEnum? address = default(AddressEnum?), AntiSpywareExclusionListAntiSpywareExclusionAddressObject addressObject = default(AntiSpywareExclusionListAntiSpywareExclusionAddressObject))
        {
            this.List = list;
            this.Address = address;
            this.AddressObject = addressObject;
        }

        /// <summary>
        /// Enable anti-spyware exclusion list.
        /// </summary>
        /// <value>Enable anti-spyware exclusion list.</value>
        [DataMember(Name = "list", EmitDefaultValue = true)]
        public bool List { get; set; }

        /// <summary>
        /// Gets or Sets AddressObject
        /// </summary>
        [DataMember(Name = "address_object", EmitDefaultValue = false)]
        public AntiSpywareExclusionListAntiSpywareExclusionAddressObject AddressObject { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AntiSpywareExclusionListAntiSpywareExclusion {\n");
            sb.Append("  List: ").Append(List).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  AddressObject: ").Append(AddressObject).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AntiSpywareExclusionListAntiSpywareExclusion);
        }

        /// <summary>
        /// Returns true if AntiSpywareExclusionListAntiSpywareExclusion instances are equal
        /// </summary>
        /// <param name="input">Instance of AntiSpywareExclusionListAntiSpywareExclusion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AntiSpywareExclusionListAntiSpywareExclusion input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.List == input.List ||
                    this.List.Equals(input.List)
                ) && 
                (
                    this.Address == input.Address ||
                    this.Address.Equals(input.Address)
                ) && 
                (
                    this.AddressObject == input.AddressObject ||
                    (this.AddressObject != null &&
                    this.AddressObject.Equals(input.AddressObject))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.List.GetHashCode();
                hashCode = (hashCode * 59) + this.Address.GetHashCode();
                if (this.AddressObject != null)
                {
                    hashCode = (hashCode * 59) + this.AddressObject.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
