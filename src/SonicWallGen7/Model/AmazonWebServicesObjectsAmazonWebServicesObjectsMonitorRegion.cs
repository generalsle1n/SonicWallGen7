/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enable Amazon web services objects region to monitor.
    /// </summary>
    [DataContract(Name = "amazon_web_services_objects_amazon_web_services_objects_monitor_region")]
    public partial class AmazonWebServicesObjectsAmazonWebServicesObjectsMonitorRegion : IEquatable<AmazonWebServicesObjectsAmazonWebServicesObjectsMonitorRegion>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AmazonWebServicesObjectsAmazonWebServicesObjectsMonitorRegion" /> class.
        /// </summary>
        /// <param name="northVirginia">US East (N. Virginia)..</param>
        /// <param name="ohio">US East (Ohio)..</param>
        /// <param name="northCalifornia">US West (N. California)..</param>
        /// <param name="oregon">US West (Oregon)..</param>
        /// <param name="canada">Canada (Central)..</param>
        /// <param name="mumbai">Asia Pacific (Mumbai)..</param>
        /// <param name="seoul">Asia Pacific (Seoul)..</param>
        /// <param name="singapore">Asia Pacific (Singapore)..</param>
        /// <param name="sydney">Asia Pacific (Sydney)..</param>
        /// <param name="tokyo">Asia Pacific (Tokyo)..</param>
        /// <param name="frankfurt">EU (Frankfurt)..</param>
        /// <param name="ireland">EU (Ireland)..</param>
        /// <param name="london">EU (London)..</param>
        /// <param name="paris">EU (Paris)..</param>
        /// <param name="saoPaulo">South America (São Paulo)..</param>
        public AmazonWebServicesObjectsAmazonWebServicesObjectsMonitorRegion(bool northVirginia = default(bool), bool ohio = default(bool), bool northCalifornia = default(bool), bool oregon = default(bool), bool canada = default(bool), bool mumbai = default(bool), bool seoul = default(bool), bool singapore = default(bool), bool sydney = default(bool), bool tokyo = default(bool), bool frankfurt = default(bool), bool ireland = default(bool), bool london = default(bool), bool paris = default(bool), bool saoPaulo = default(bool))
        {
            this.NorthVirginia = northVirginia;
            this.Ohio = ohio;
            this.NorthCalifornia = northCalifornia;
            this.Oregon = oregon;
            this.Canada = canada;
            this.Mumbai = mumbai;
            this.Seoul = seoul;
            this.Singapore = singapore;
            this.Sydney = sydney;
            this.Tokyo = tokyo;
            this.Frankfurt = frankfurt;
            this.Ireland = ireland;
            this.London = london;
            this.Paris = paris;
            this.SaoPaulo = saoPaulo;
        }

        /// <summary>
        /// US East (N. Virginia).
        /// </summary>
        /// <value>US East (N. Virginia).</value>
        [DataMember(Name = "north_virginia", EmitDefaultValue = true)]
        public bool NorthVirginia { get; set; }

        /// <summary>
        /// US East (Ohio).
        /// </summary>
        /// <value>US East (Ohio).</value>
        [DataMember(Name = "ohio", EmitDefaultValue = true)]
        public bool Ohio { get; set; }

        /// <summary>
        /// US West (N. California).
        /// </summary>
        /// <value>US West (N. California).</value>
        [DataMember(Name = "north_california", EmitDefaultValue = true)]
        public bool NorthCalifornia { get; set; }

        /// <summary>
        /// US West (Oregon).
        /// </summary>
        /// <value>US West (Oregon).</value>
        [DataMember(Name = "oregon", EmitDefaultValue = true)]
        public bool Oregon { get; set; }

        /// <summary>
        /// Canada (Central).
        /// </summary>
        /// <value>Canada (Central).</value>
        [DataMember(Name = "canada", EmitDefaultValue = true)]
        public bool Canada { get; set; }

        /// <summary>
        /// Asia Pacific (Mumbai).
        /// </summary>
        /// <value>Asia Pacific (Mumbai).</value>
        [DataMember(Name = "mumbai", EmitDefaultValue = true)]
        public bool Mumbai { get; set; }

        /// <summary>
        /// Asia Pacific (Seoul).
        /// </summary>
        /// <value>Asia Pacific (Seoul).</value>
        [DataMember(Name = "seoul", EmitDefaultValue = true)]
        public bool Seoul { get; set; }

        /// <summary>
        /// Asia Pacific (Singapore).
        /// </summary>
        /// <value>Asia Pacific (Singapore).</value>
        [DataMember(Name = "singapore", EmitDefaultValue = true)]
        public bool Singapore { get; set; }

        /// <summary>
        /// Asia Pacific (Sydney).
        /// </summary>
        /// <value>Asia Pacific (Sydney).</value>
        [DataMember(Name = "sydney", EmitDefaultValue = true)]
        public bool Sydney { get; set; }

        /// <summary>
        /// Asia Pacific (Tokyo).
        /// </summary>
        /// <value>Asia Pacific (Tokyo).</value>
        [DataMember(Name = "tokyo", EmitDefaultValue = true)]
        public bool Tokyo { get; set; }

        /// <summary>
        /// EU (Frankfurt).
        /// </summary>
        /// <value>EU (Frankfurt).</value>
        [DataMember(Name = "frankfurt", EmitDefaultValue = true)]
        public bool Frankfurt { get; set; }

        /// <summary>
        /// EU (Ireland).
        /// </summary>
        /// <value>EU (Ireland).</value>
        [DataMember(Name = "ireland", EmitDefaultValue = true)]
        public bool Ireland { get; set; }

        /// <summary>
        /// EU (London).
        /// </summary>
        /// <value>EU (London).</value>
        [DataMember(Name = "london", EmitDefaultValue = true)]
        public bool London { get; set; }

        /// <summary>
        /// EU (Paris).
        /// </summary>
        /// <value>EU (Paris).</value>
        [DataMember(Name = "paris", EmitDefaultValue = true)]
        public bool Paris { get; set; }

        /// <summary>
        /// South America (São Paulo).
        /// </summary>
        /// <value>South America (São Paulo).</value>
        [DataMember(Name = "sao_paulo", EmitDefaultValue = true)]
        public bool SaoPaulo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AmazonWebServicesObjectsAmazonWebServicesObjectsMonitorRegion {\n");
            sb.Append("  NorthVirginia: ").Append(NorthVirginia).Append("\n");
            sb.Append("  Ohio: ").Append(Ohio).Append("\n");
            sb.Append("  NorthCalifornia: ").Append(NorthCalifornia).Append("\n");
            sb.Append("  Oregon: ").Append(Oregon).Append("\n");
            sb.Append("  Canada: ").Append(Canada).Append("\n");
            sb.Append("  Mumbai: ").Append(Mumbai).Append("\n");
            sb.Append("  Seoul: ").Append(Seoul).Append("\n");
            sb.Append("  Singapore: ").Append(Singapore).Append("\n");
            sb.Append("  Sydney: ").Append(Sydney).Append("\n");
            sb.Append("  Tokyo: ").Append(Tokyo).Append("\n");
            sb.Append("  Frankfurt: ").Append(Frankfurt).Append("\n");
            sb.Append("  Ireland: ").Append(Ireland).Append("\n");
            sb.Append("  London: ").Append(London).Append("\n");
            sb.Append("  Paris: ").Append(Paris).Append("\n");
            sb.Append("  SaoPaulo: ").Append(SaoPaulo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AmazonWebServicesObjectsAmazonWebServicesObjectsMonitorRegion);
        }

        /// <summary>
        /// Returns true if AmazonWebServicesObjectsAmazonWebServicesObjectsMonitorRegion instances are equal
        /// </summary>
        /// <param name="input">Instance of AmazonWebServicesObjectsAmazonWebServicesObjectsMonitorRegion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AmazonWebServicesObjectsAmazonWebServicesObjectsMonitorRegion input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.NorthVirginia == input.NorthVirginia ||
                    this.NorthVirginia.Equals(input.NorthVirginia)
                ) && 
                (
                    this.Ohio == input.Ohio ||
                    this.Ohio.Equals(input.Ohio)
                ) && 
                (
                    this.NorthCalifornia == input.NorthCalifornia ||
                    this.NorthCalifornia.Equals(input.NorthCalifornia)
                ) && 
                (
                    this.Oregon == input.Oregon ||
                    this.Oregon.Equals(input.Oregon)
                ) && 
                (
                    this.Canada == input.Canada ||
                    this.Canada.Equals(input.Canada)
                ) && 
                (
                    this.Mumbai == input.Mumbai ||
                    this.Mumbai.Equals(input.Mumbai)
                ) && 
                (
                    this.Seoul == input.Seoul ||
                    this.Seoul.Equals(input.Seoul)
                ) && 
                (
                    this.Singapore == input.Singapore ||
                    this.Singapore.Equals(input.Singapore)
                ) && 
                (
                    this.Sydney == input.Sydney ||
                    this.Sydney.Equals(input.Sydney)
                ) && 
                (
                    this.Tokyo == input.Tokyo ||
                    this.Tokyo.Equals(input.Tokyo)
                ) && 
                (
                    this.Frankfurt == input.Frankfurt ||
                    this.Frankfurt.Equals(input.Frankfurt)
                ) && 
                (
                    this.Ireland == input.Ireland ||
                    this.Ireland.Equals(input.Ireland)
                ) && 
                (
                    this.London == input.London ||
                    this.London.Equals(input.London)
                ) && 
                (
                    this.Paris == input.Paris ||
                    this.Paris.Equals(input.Paris)
                ) && 
                (
                    this.SaoPaulo == input.SaoPaulo ||
                    this.SaoPaulo.Equals(input.SaoPaulo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.NorthVirginia.GetHashCode();
                hashCode = (hashCode * 59) + this.Ohio.GetHashCode();
                hashCode = (hashCode * 59) + this.NorthCalifornia.GetHashCode();
                hashCode = (hashCode * 59) + this.Oregon.GetHashCode();
                hashCode = (hashCode * 59) + this.Canada.GetHashCode();
                hashCode = (hashCode * 59) + this.Mumbai.GetHashCode();
                hashCode = (hashCode * 59) + this.Seoul.GetHashCode();
                hashCode = (hashCode * 59) + this.Singapore.GetHashCode();
                hashCode = (hashCode * 59) + this.Sydney.GetHashCode();
                hashCode = (hashCode * 59) + this.Tokyo.GetHashCode();
                hashCode = (hashCode * 59) + this.Frankfurt.GetHashCode();
                hashCode = (hashCode * 59) + this.Ireland.GetHashCode();
                hashCode = (hashCode * 59) + this.London.GetHashCode();
                hashCode = (hashCode * 59) + this.Paris.GetHashCode();
                hashCode = (hashCode * 59) + this.SaoPaulo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
