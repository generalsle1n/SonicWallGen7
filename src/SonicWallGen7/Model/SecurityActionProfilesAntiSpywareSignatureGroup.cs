/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enable signature group detection and log redundancy.
    /// </summary>
    [DataContract(Name = "security_action_profiles_anti_spyware_signature_group")]
    public partial class SecurityActionProfilesAntiSpywareSignatureGroup : IEquatable<SecurityActionProfilesAntiSpywareSignatureGroup>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityActionProfilesAntiSpywareSignatureGroup" /> class.
        /// </summary>
        /// <param name="highPriority">highPriority.</param>
        /// <param name="mediumPriority">mediumPriority.</param>
        /// <param name="lowPriority">lowPriority.</param>
        public SecurityActionProfilesAntiSpywareSignatureGroup(SecurityActionProfilesAntiSpywareSignatureGroupHighPriority highPriority = default(SecurityActionProfilesAntiSpywareSignatureGroupHighPriority), SecurityActionProfilesAntiSpywareSignatureGroupMediumPriority mediumPriority = default(SecurityActionProfilesAntiSpywareSignatureGroupMediumPriority), SecurityActionProfilesAntiSpywareSignatureGroupLowPriority lowPriority = default(SecurityActionProfilesAntiSpywareSignatureGroupLowPriority))
        {
            this.HighPriority = highPriority;
            this.MediumPriority = mediumPriority;
            this.LowPriority = lowPriority;
        }

        /// <summary>
        /// Gets or Sets HighPriority
        /// </summary>
        [DataMember(Name = "high_priority", EmitDefaultValue = false)]
        public SecurityActionProfilesAntiSpywareSignatureGroupHighPriority HighPriority { get; set; }

        /// <summary>
        /// Gets or Sets MediumPriority
        /// </summary>
        [DataMember(Name = "medium_priority", EmitDefaultValue = false)]
        public SecurityActionProfilesAntiSpywareSignatureGroupMediumPriority MediumPriority { get; set; }

        /// <summary>
        /// Gets or Sets LowPriority
        /// </summary>
        [DataMember(Name = "low_priority", EmitDefaultValue = false)]
        public SecurityActionProfilesAntiSpywareSignatureGroupLowPriority LowPriority { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SecurityActionProfilesAntiSpywareSignatureGroup {\n");
            sb.Append("  HighPriority: ").Append(HighPriority).Append("\n");
            sb.Append("  MediumPriority: ").Append(MediumPriority).Append("\n");
            sb.Append("  LowPriority: ").Append(LowPriority).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecurityActionProfilesAntiSpywareSignatureGroup);
        }

        /// <summary>
        /// Returns true if SecurityActionProfilesAntiSpywareSignatureGroup instances are equal
        /// </summary>
        /// <param name="input">Instance of SecurityActionProfilesAntiSpywareSignatureGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecurityActionProfilesAntiSpywareSignatureGroup input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.HighPriority == input.HighPriority ||
                    (this.HighPriority != null &&
                    this.HighPriority.Equals(input.HighPriority))
                ) && 
                (
                    this.MediumPriority == input.MediumPriority ||
                    (this.MediumPriority != null &&
                    this.MediumPriority.Equals(input.MediumPriority))
                ) && 
                (
                    this.LowPriority == input.LowPriority ||
                    (this.LowPriority != null &&
                    this.LowPriority.Equals(input.LowPriority))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HighPriority != null)
                {
                    hashCode = (hashCode * 59) + this.HighPriority.GetHashCode();
                }
                if (this.MediumPriority != null)
                {
                    hashCode = (hashCode * 59) + this.MediumPriority.GetHashCode();
                }
                if (this.LowPriority != null)
                {
                    hashCode = (hashCode * 59) + this.LowPriority.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
