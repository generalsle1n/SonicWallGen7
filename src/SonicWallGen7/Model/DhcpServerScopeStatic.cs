/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// DHCP server static scopes configuration.
    /// </summary>
    [DataContract(Name = "dhcp_server_scope_static")]
    public partial class DhcpServerScopeStatic : IEquatable<DhcpServerScopeStatic>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DhcpServerScopeStatic" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DhcpServerScopeStatic() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DhcpServerScopeStatic" /> class.
        /// </summary>
        /// <param name="ip">Set DHCP static scope IP address. (required).</param>
        /// <param name="mac">Set DHCP static scope ethernet address. (required).</param>
        /// <param name="enable">Enable DHCP server scope..</param>
        /// <param name="name">Set DHCP static scope name..</param>
        /// <param name="leaseTime">Set DHCP static scope lease time..</param>
        /// <param name="defaultGateway">Set DHCP static scope default gateway. * Set to null to represent an unconfigured state..</param>
        /// <param name="netmask">Set DHCP static scope subnet mask..</param>
        /// <param name="comment">Set DHCP static scope comment. * Set to null to represent an unconfigured state..</param>
        /// <param name="domainName">Set DHCP domain name. * Set to null to represent an unconfigured state..</param>
        /// <param name="SonicDns">SonicDns.</param>
        /// <param name="wins">wins.</param>
        /// <param name="callManager">callManager.</param>
        /// <param name="networkBoot">networkBoot.</param>
        /// <param name="genericOption">genericOption.</param>
        /// <param name="alwaysSendOption">Enable send generic options always..</param>
        public DhcpServerScopeStatic(string ip = default(string), string mac = default(string), bool enable = default(bool), string name = default(string), decimal leaseTime = default(decimal), string defaultGateway = default(string), string netmask = default(string), string comment = default(string), string domainName = default(string), DhcpServerScopeStaticSonicDns SonicDns = default(DhcpServerScopeStaticSonicDns), DhcpServerScopeDynamicWins wins = default(DhcpServerScopeDynamicWins), DhcpServerScopeDynamicCallManager callManager = default(DhcpServerScopeDynamicCallManager), DhcpServerScopeDynamicNetworkBoot networkBoot = default(DhcpServerScopeDynamicNetworkBoot), DhcpServerScopeStaticGenericOption genericOption = default(DhcpServerScopeStaticGenericOption), bool alwaysSendOption = default(bool))
        {
            // to ensure "ip" is required (not null)
            if (ip == null)
            {
                throw new ArgumentNullException("ip is a required property for DhcpServerScopeStatic and cannot be null");
            }
            this.Ip = ip;
            // to ensure "mac" is required (not null)
            if (mac == null)
            {
                throw new ArgumentNullException("mac is a required property for DhcpServerScopeStatic and cannot be null");
            }
            this.Mac = mac;
            this.Enable = enable;
            this.Name = name;
            this.LeaseTime = leaseTime;
            this.DefaultGateway = defaultGateway;
            this.Netmask = netmask;
            this.Comment = comment;
            this.DomainName = domainName;
            this.SonicDns = SonicDns;
            this.Wins = wins;
            this.CallManager = callManager;
            this.NetworkBoot = networkBoot;
            this.GenericOption = genericOption;
            this.AlwaysSendOption = alwaysSendOption;
        }

        /// <summary>
        /// Set DHCP static scope IP address.
        /// </summary>
        /// <value>Set DHCP static scope IP address.</value>
        [DataMember(Name = "ip", IsRequired = true, EmitDefaultValue = true)]
        public string Ip { get; set; }

        /// <summary>
        /// Set DHCP static scope ethernet address.
        /// </summary>
        /// <value>Set DHCP static scope ethernet address.</value>
        [DataMember(Name = "mac", IsRequired = true, EmitDefaultValue = true)]
        public string Mac { get; set; }

        /// <summary>
        /// Enable DHCP server scope.
        /// </summary>
        /// <value>Enable DHCP server scope.</value>
        [DataMember(Name = "enable", EmitDefaultValue = true)]
        public bool Enable { get; set; }

        /// <summary>
        /// Set DHCP static scope name.
        /// </summary>
        /// <value>Set DHCP static scope name.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Set DHCP static scope lease time.
        /// </summary>
        /// <value>Set DHCP static scope lease time.</value>
        [DataMember(Name = "lease_time", EmitDefaultValue = false)]
        public decimal LeaseTime { get; set; }

        /// <summary>
        /// Set DHCP static scope default gateway. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Set DHCP static scope default gateway. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "default_gateway", EmitDefaultValue = true)]
        public string DefaultGateway { get; set; }

        /// <summary>
        /// Set DHCP static scope subnet mask.
        /// </summary>
        /// <value>Set DHCP static scope subnet mask.</value>
        [DataMember(Name = "netmask", EmitDefaultValue = false)]
        public string Netmask { get; set; }

        /// <summary>
        /// Set DHCP static scope comment. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Set DHCP static scope comment. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "comment", EmitDefaultValue = true)]
        public string Comment { get; set; }

        /// <summary>
        /// Set DHCP domain name. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Set DHCP domain name. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "domain_name", EmitDefaultValue = true)]
        public string DomainName { get; set; }

        /// <summary>
        /// Gets or Sets SonicDns
        /// </summary>
        [DataMember(Name = "SonicDns", EmitDefaultValue = false)]
        public DhcpServerScopeStaticSonicDns SonicDns { get; set; }

        /// <summary>
        /// Gets or Sets Wins
        /// </summary>
        [DataMember(Name = "wins", EmitDefaultValue = false)]
        public DhcpServerScopeDynamicWins Wins { get; set; }

        /// <summary>
        /// Gets or Sets CallManager
        /// </summary>
        [DataMember(Name = "call_manager", EmitDefaultValue = false)]
        public DhcpServerScopeDynamicCallManager CallManager { get; set; }

        /// <summary>
        /// Gets or Sets NetworkBoot
        /// </summary>
        [DataMember(Name = "network_boot", EmitDefaultValue = false)]
        public DhcpServerScopeDynamicNetworkBoot NetworkBoot { get; set; }

        /// <summary>
        /// Gets or Sets GenericOption
        /// </summary>
        [DataMember(Name = "generic_option", EmitDefaultValue = false)]
        public DhcpServerScopeStaticGenericOption GenericOption { get; set; }

        /// <summary>
        /// Enable send generic options always.
        /// </summary>
        /// <value>Enable send generic options always.</value>
        [DataMember(Name = "always_send_option", EmitDefaultValue = true)]
        public bool AlwaysSendOption { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DhcpServerScopeStatic {\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  Mac: ").Append(Mac).Append("\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  LeaseTime: ").Append(LeaseTime).Append("\n");
            sb.Append("  DefaultGateway: ").Append(DefaultGateway).Append("\n");
            sb.Append("  Netmask: ").Append(Netmask).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  DomainName: ").Append(DomainName).Append("\n");
            sb.Append("  SonicDns: ").Append(SonicDns).Append("\n");
            sb.Append("  Wins: ").Append(Wins).Append("\n");
            sb.Append("  CallManager: ").Append(CallManager).Append("\n");
            sb.Append("  NetworkBoot: ").Append(NetworkBoot).Append("\n");
            sb.Append("  GenericOption: ").Append(GenericOption).Append("\n");
            sb.Append("  AlwaysSendOption: ").Append(AlwaysSendOption).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DhcpServerScopeStatic);
        }

        /// <summary>
        /// Returns true if DhcpServerScopeStatic instances are equal
        /// </summary>
        /// <param name="input">Instance of DhcpServerScopeStatic to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DhcpServerScopeStatic input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Ip == input.Ip ||
                    (this.Ip != null &&
                    this.Ip.Equals(input.Ip))
                ) && 
                (
                    this.Mac == input.Mac ||
                    (this.Mac != null &&
                    this.Mac.Equals(input.Mac))
                ) && 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.LeaseTime == input.LeaseTime ||
                    this.LeaseTime.Equals(input.LeaseTime)
                ) && 
                (
                    this.DefaultGateway == input.DefaultGateway ||
                    (this.DefaultGateway != null &&
                    this.DefaultGateway.Equals(input.DefaultGateway))
                ) && 
                (
                    this.Netmask == input.Netmask ||
                    (this.Netmask != null &&
                    this.Netmask.Equals(input.Netmask))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.DomainName == input.DomainName ||
                    (this.DomainName != null &&
                    this.DomainName.Equals(input.DomainName))
                ) && 
                (
                    this.SonicDns == input.SonicDns ||
                    (this.SonicDns != null &&
                    this.SonicDns.Equals(input.SonicDns))
                ) && 
                (
                    this.Wins == input.Wins ||
                    (this.Wins != null &&
                    this.Wins.Equals(input.Wins))
                ) && 
                (
                    this.CallManager == input.CallManager ||
                    (this.CallManager != null &&
                    this.CallManager.Equals(input.CallManager))
                ) && 
                (
                    this.NetworkBoot == input.NetworkBoot ||
                    (this.NetworkBoot != null &&
                    this.NetworkBoot.Equals(input.NetworkBoot))
                ) && 
                (
                    this.GenericOption == input.GenericOption ||
                    (this.GenericOption != null &&
                    this.GenericOption.Equals(input.GenericOption))
                ) && 
                (
                    this.AlwaysSendOption == input.AlwaysSendOption ||
                    this.AlwaysSendOption.Equals(input.AlwaysSendOption)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ip != null)
                {
                    hashCode = (hashCode * 59) + this.Ip.GetHashCode();
                }
                if (this.Mac != null)
                {
                    hashCode = (hashCode * 59) + this.Mac.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Enable.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LeaseTime.GetHashCode();
                if (this.DefaultGateway != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultGateway.GetHashCode();
                }
                if (this.Netmask != null)
                {
                    hashCode = (hashCode * 59) + this.Netmask.GetHashCode();
                }
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                if (this.DomainName != null)
                {
                    hashCode = (hashCode * 59) + this.DomainName.GetHashCode();
                }
                if (this.SonicDns != null)
                {
                    hashCode = (hashCode * 59) + this.SonicDns.GetHashCode();
                }
                if (this.Wins != null)
                {
                    hashCode = (hashCode * 59) + this.Wins.GetHashCode();
                }
                if (this.CallManager != null)
                {
                    hashCode = (hashCode * 59) + this.CallManager.GetHashCode();
                }
                if (this.NetworkBoot != null)
                {
                    hashCode = (hashCode * 59) + this.NetworkBoot.GetHashCode();
                }
                if (this.GenericOption != null)
                {
                    hashCode = (hashCode * 59) + this.GenericOption.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AlwaysSendOption.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
