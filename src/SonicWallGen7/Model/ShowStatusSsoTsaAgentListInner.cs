/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// ShowStatusSsoTsaAgentListInner
    /// </summary>
    [DataContract(Name = "show_status_sso_tsa_agent_list_inner")]
    public partial class ShowStatusSsoTsaAgentListInner : IEquatable<ShowStatusSsoTsaAgentListInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusSsoTsaAgentListInner" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="port">port.</param>
        /// <param name="ipAddress">ipAddress.</param>
        /// <param name="status">status.</param>
        /// <param name="messagesReceivedFromAgent">messagesReceivedFromAgent.</param>
        /// <param name="openNotificationsReceived">openNotificationsReceived.</param>
        /// <param name="closeNotificationsReceived">closeNotificationsReceived.</param>
        /// <param name="badMessagesReceived">badMessagesReceived.</param>
        /// <param name="connectionsReceivedNeedingIdentification">connectionsReceivedNeedingIdentification.</param>
        /// <param name="connectionsReturnedNewUser">connectionsReturnedNewUser.</param>
        /// <param name="connectionsReturnedExistingUser">connectionsReturnedExistingUser.</param>
        /// <param name="timedOutConnections">timedOutConnections.</param>
        /// <param name="connectionsWithErrorNotification">connectionsWithErrorNotification.</param>
        /// <param name="connectionsWithCloseWithNoOpen">connectionsWithCloseWithNoOpen.</param>
        /// <param name="discardedRepeatedAttempts">discardedRepeatedAttempts.</param>
        /// <param name="successesWithNoWaitForAgent">successesWithNoWaitForAgent.</param>
        public ShowStatusSsoTsaAgentListInner(string name = default(string), string port = default(string), string ipAddress = default(string), string status = default(string), string messagesReceivedFromAgent = default(string), string openNotificationsReceived = default(string), string closeNotificationsReceived = default(string), string badMessagesReceived = default(string), string connectionsReceivedNeedingIdentification = default(string), string connectionsReturnedNewUser = default(string), string connectionsReturnedExistingUser = default(string), string timedOutConnections = default(string), string connectionsWithErrorNotification = default(string), string connectionsWithCloseWithNoOpen = default(string), string discardedRepeatedAttempts = default(string), string successesWithNoWaitForAgent = default(string))
        {
            this.Name = name;
            this.Port = port;
            this.IpAddress = ipAddress;
            this.Status = status;
            this.MessagesReceivedFromAgent = messagesReceivedFromAgent;
            this.OpenNotificationsReceived = openNotificationsReceived;
            this.CloseNotificationsReceived = closeNotificationsReceived;
            this.BadMessagesReceived = badMessagesReceived;
            this.ConnectionsReceivedNeedingIdentification = connectionsReceivedNeedingIdentification;
            this.ConnectionsReturnedNewUser = connectionsReturnedNewUser;
            this.ConnectionsReturnedExistingUser = connectionsReturnedExistingUser;
            this.TimedOutConnections = timedOutConnections;
            this.ConnectionsWithErrorNotification = connectionsWithErrorNotification;
            this.ConnectionsWithCloseWithNoOpen = connectionsWithCloseWithNoOpen;
            this.DiscardedRepeatedAttempts = discardedRepeatedAttempts;
            this.SuccessesWithNoWaitForAgent = successesWithNoWaitForAgent;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [DataMember(Name = "port", EmitDefaultValue = false)]
        public string Port { get; set; }

        /// <summary>
        /// Gets or Sets IpAddress
        /// </summary>
        [DataMember(Name = "ip_address", EmitDefaultValue = false)]
        public string IpAddress { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets MessagesReceivedFromAgent
        /// </summary>
        [DataMember(Name = "messages_received_from_agent", EmitDefaultValue = false)]
        public string MessagesReceivedFromAgent { get; set; }

        /// <summary>
        /// Gets or Sets OpenNotificationsReceived
        /// </summary>
        [DataMember(Name = "open_notifications_received", EmitDefaultValue = false)]
        public string OpenNotificationsReceived { get; set; }

        /// <summary>
        /// Gets or Sets CloseNotificationsReceived
        /// </summary>
        [DataMember(Name = "close_notifications_received", EmitDefaultValue = false)]
        public string CloseNotificationsReceived { get; set; }

        /// <summary>
        /// Gets or Sets BadMessagesReceived
        /// </summary>
        [DataMember(Name = "bad_messages_received", EmitDefaultValue = false)]
        public string BadMessagesReceived { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionsReceivedNeedingIdentification
        /// </summary>
        [DataMember(Name = "connections_received_needing_identification", EmitDefaultValue = false)]
        public string ConnectionsReceivedNeedingIdentification { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionsReturnedNewUser
        /// </summary>
        [DataMember(Name = "connections_returned_new_user", EmitDefaultValue = false)]
        public string ConnectionsReturnedNewUser { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionsReturnedExistingUser
        /// </summary>
        [DataMember(Name = "connections_returned_existing_user", EmitDefaultValue = false)]
        public string ConnectionsReturnedExistingUser { get; set; }

        /// <summary>
        /// Gets or Sets TimedOutConnections
        /// </summary>
        [DataMember(Name = "timed_out_connections", EmitDefaultValue = false)]
        public string TimedOutConnections { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionsWithErrorNotification
        /// </summary>
        [DataMember(Name = "connections_with_error_notification", EmitDefaultValue = false)]
        public string ConnectionsWithErrorNotification { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionsWithCloseWithNoOpen
        /// </summary>
        [DataMember(Name = "connections_with_close_with_no_open", EmitDefaultValue = false)]
        public string ConnectionsWithCloseWithNoOpen { get; set; }

        /// <summary>
        /// Gets or Sets DiscardedRepeatedAttempts
        /// </summary>
        [DataMember(Name = "discarded_repeated_attempts", EmitDefaultValue = false)]
        public string DiscardedRepeatedAttempts { get; set; }

        /// <summary>
        /// Gets or Sets SuccessesWithNoWaitForAgent
        /// </summary>
        [DataMember(Name = "successes_with_no_wait_for_agent", EmitDefaultValue = false)]
        public string SuccessesWithNoWaitForAgent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusSsoTsaAgentListInner {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  MessagesReceivedFromAgent: ").Append(MessagesReceivedFromAgent).Append("\n");
            sb.Append("  OpenNotificationsReceived: ").Append(OpenNotificationsReceived).Append("\n");
            sb.Append("  CloseNotificationsReceived: ").Append(CloseNotificationsReceived).Append("\n");
            sb.Append("  BadMessagesReceived: ").Append(BadMessagesReceived).Append("\n");
            sb.Append("  ConnectionsReceivedNeedingIdentification: ").Append(ConnectionsReceivedNeedingIdentification).Append("\n");
            sb.Append("  ConnectionsReturnedNewUser: ").Append(ConnectionsReturnedNewUser).Append("\n");
            sb.Append("  ConnectionsReturnedExistingUser: ").Append(ConnectionsReturnedExistingUser).Append("\n");
            sb.Append("  TimedOutConnections: ").Append(TimedOutConnections).Append("\n");
            sb.Append("  ConnectionsWithErrorNotification: ").Append(ConnectionsWithErrorNotification).Append("\n");
            sb.Append("  ConnectionsWithCloseWithNoOpen: ").Append(ConnectionsWithCloseWithNoOpen).Append("\n");
            sb.Append("  DiscardedRepeatedAttempts: ").Append(DiscardedRepeatedAttempts).Append("\n");
            sb.Append("  SuccessesWithNoWaitForAgent: ").Append(SuccessesWithNoWaitForAgent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusSsoTsaAgentListInner);
        }

        /// <summary>
        /// Returns true if ShowStatusSsoTsaAgentListInner instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusSsoTsaAgentListInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusSsoTsaAgentListInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Port == input.Port ||
                    (this.Port != null &&
                    this.Port.Equals(input.Port))
                ) && 
                (
                    this.IpAddress == input.IpAddress ||
                    (this.IpAddress != null &&
                    this.IpAddress.Equals(input.IpAddress))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.MessagesReceivedFromAgent == input.MessagesReceivedFromAgent ||
                    (this.MessagesReceivedFromAgent != null &&
                    this.MessagesReceivedFromAgent.Equals(input.MessagesReceivedFromAgent))
                ) && 
                (
                    this.OpenNotificationsReceived == input.OpenNotificationsReceived ||
                    (this.OpenNotificationsReceived != null &&
                    this.OpenNotificationsReceived.Equals(input.OpenNotificationsReceived))
                ) && 
                (
                    this.CloseNotificationsReceived == input.CloseNotificationsReceived ||
                    (this.CloseNotificationsReceived != null &&
                    this.CloseNotificationsReceived.Equals(input.CloseNotificationsReceived))
                ) && 
                (
                    this.BadMessagesReceived == input.BadMessagesReceived ||
                    (this.BadMessagesReceived != null &&
                    this.BadMessagesReceived.Equals(input.BadMessagesReceived))
                ) && 
                (
                    this.ConnectionsReceivedNeedingIdentification == input.ConnectionsReceivedNeedingIdentification ||
                    (this.ConnectionsReceivedNeedingIdentification != null &&
                    this.ConnectionsReceivedNeedingIdentification.Equals(input.ConnectionsReceivedNeedingIdentification))
                ) && 
                (
                    this.ConnectionsReturnedNewUser == input.ConnectionsReturnedNewUser ||
                    (this.ConnectionsReturnedNewUser != null &&
                    this.ConnectionsReturnedNewUser.Equals(input.ConnectionsReturnedNewUser))
                ) && 
                (
                    this.ConnectionsReturnedExistingUser == input.ConnectionsReturnedExistingUser ||
                    (this.ConnectionsReturnedExistingUser != null &&
                    this.ConnectionsReturnedExistingUser.Equals(input.ConnectionsReturnedExistingUser))
                ) && 
                (
                    this.TimedOutConnections == input.TimedOutConnections ||
                    (this.TimedOutConnections != null &&
                    this.TimedOutConnections.Equals(input.TimedOutConnections))
                ) && 
                (
                    this.ConnectionsWithErrorNotification == input.ConnectionsWithErrorNotification ||
                    (this.ConnectionsWithErrorNotification != null &&
                    this.ConnectionsWithErrorNotification.Equals(input.ConnectionsWithErrorNotification))
                ) && 
                (
                    this.ConnectionsWithCloseWithNoOpen == input.ConnectionsWithCloseWithNoOpen ||
                    (this.ConnectionsWithCloseWithNoOpen != null &&
                    this.ConnectionsWithCloseWithNoOpen.Equals(input.ConnectionsWithCloseWithNoOpen))
                ) && 
                (
                    this.DiscardedRepeatedAttempts == input.DiscardedRepeatedAttempts ||
                    (this.DiscardedRepeatedAttempts != null &&
                    this.DiscardedRepeatedAttempts.Equals(input.DiscardedRepeatedAttempts))
                ) && 
                (
                    this.SuccessesWithNoWaitForAgent == input.SuccessesWithNoWaitForAgent ||
                    (this.SuccessesWithNoWaitForAgent != null &&
                    this.SuccessesWithNoWaitForAgent.Equals(input.SuccessesWithNoWaitForAgent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Port != null)
                {
                    hashCode = (hashCode * 59) + this.Port.GetHashCode();
                }
                if (this.IpAddress != null)
                {
                    hashCode = (hashCode * 59) + this.IpAddress.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.MessagesReceivedFromAgent != null)
                {
                    hashCode = (hashCode * 59) + this.MessagesReceivedFromAgent.GetHashCode();
                }
                if (this.OpenNotificationsReceived != null)
                {
                    hashCode = (hashCode * 59) + this.OpenNotificationsReceived.GetHashCode();
                }
                if (this.CloseNotificationsReceived != null)
                {
                    hashCode = (hashCode * 59) + this.CloseNotificationsReceived.GetHashCode();
                }
                if (this.BadMessagesReceived != null)
                {
                    hashCode = (hashCode * 59) + this.BadMessagesReceived.GetHashCode();
                }
                if (this.ConnectionsReceivedNeedingIdentification != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionsReceivedNeedingIdentification.GetHashCode();
                }
                if (this.ConnectionsReturnedNewUser != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionsReturnedNewUser.GetHashCode();
                }
                if (this.ConnectionsReturnedExistingUser != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionsReturnedExistingUser.GetHashCode();
                }
                if (this.TimedOutConnections != null)
                {
                    hashCode = (hashCode * 59) + this.TimedOutConnections.GetHashCode();
                }
                if (this.ConnectionsWithErrorNotification != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionsWithErrorNotification.GetHashCode();
                }
                if (this.ConnectionsWithCloseWithNoOpen != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionsWithCloseWithNoOpen.GetHashCode();
                }
                if (this.DiscardedRepeatedAttempts != null)
                {
                    hashCode = (hashCode * 59) + this.DiscardedRepeatedAttempts.GetHashCode();
                }
                if (this.SuccessesWithNoWaitForAgent != null)
                {
                    hashCode = (hashCode * 59) + this.SuccessesWithNoWaitForAgent.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
