/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// ARP entries configuration.
    /// </summary>
    [DataContract(Name = "arp_entries")]
    public partial class ArpEntries : IEquatable<ArpEntries>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArpEntries" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ArpEntries() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ArpEntries" /> class.
        /// </summary>
        /// <param name="ip">Configure static ARP IP. * Set to null to represent an unconfigured state. (required).</param>
        /// <param name="mac">Configure static ARP MAC address. (required).</param>
        /// <param name="varInterface">Configure static ARP interface. (required).</param>
        /// <param name="publish">Publish ARP entry..</param>
        /// <param name="bindMac">Enable MAC binding..</param>
        /// <param name="dynamic">Enable update IP address dynamically..</param>
        public ArpEntries(string ip = default(string), string mac = default(string), string varInterface = default(string), bool publish = default(bool), bool bindMac = default(bool), bool dynamic = default(bool))
        {
            // to ensure "ip" is required (not null)
            if (ip == null)
            {
                throw new ArgumentNullException("ip is a required property for ArpEntries and cannot be null");
            }
            this.Ip = ip;
            // to ensure "mac" is required (not null)
            if (mac == null)
            {
                throw new ArgumentNullException("mac is a required property for ArpEntries and cannot be null");
            }
            this.Mac = mac;
            // to ensure "varInterface" is required (not null)
            if (varInterface == null)
            {
                throw new ArgumentNullException("varInterface is a required property for ArpEntries and cannot be null");
            }
            this.VarInterface = varInterface;
            this.Publish = publish;
            this.BindMac = bindMac;
            this.Dynamic = dynamic;
        }

        /// <summary>
        /// Configure static ARP IP. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Configure static ARP IP. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "ip", IsRequired = true, EmitDefaultValue = true)]
        public string Ip { get; set; }

        /// <summary>
        /// Configure static ARP MAC address.
        /// </summary>
        /// <value>Configure static ARP MAC address.</value>
        [DataMember(Name = "mac", IsRequired = true, EmitDefaultValue = true)]
        public string Mac { get; set; }

        /// <summary>
        /// Configure static ARP interface.
        /// </summary>
        /// <value>Configure static ARP interface.</value>
        [DataMember(Name = "interface", IsRequired = true, EmitDefaultValue = true)]
        public string VarInterface { get; set; }

        /// <summary>
        /// Publish ARP entry.
        /// </summary>
        /// <value>Publish ARP entry.</value>
        [DataMember(Name = "publish", EmitDefaultValue = true)]
        public bool Publish { get; set; }

        /// <summary>
        /// Enable MAC binding.
        /// </summary>
        /// <value>Enable MAC binding.</value>
        [DataMember(Name = "bind_mac", EmitDefaultValue = true)]
        public bool BindMac { get; set; }

        /// <summary>
        /// Enable update IP address dynamically.
        /// </summary>
        /// <value>Enable update IP address dynamically.</value>
        [DataMember(Name = "dynamic", EmitDefaultValue = true)]
        public bool Dynamic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ArpEntries {\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  Mac: ").Append(Mac).Append("\n");
            sb.Append("  VarInterface: ").Append(VarInterface).Append("\n");
            sb.Append("  Publish: ").Append(Publish).Append("\n");
            sb.Append("  BindMac: ").Append(BindMac).Append("\n");
            sb.Append("  Dynamic: ").Append(Dynamic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArpEntries);
        }

        /// <summary>
        /// Returns true if ArpEntries instances are equal
        /// </summary>
        /// <param name="input">Instance of ArpEntries to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArpEntries input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Ip == input.Ip ||
                    (this.Ip != null &&
                    this.Ip.Equals(input.Ip))
                ) && 
                (
                    this.Mac == input.Mac ||
                    (this.Mac != null &&
                    this.Mac.Equals(input.Mac))
                ) && 
                (
                    this.VarInterface == input.VarInterface ||
                    (this.VarInterface != null &&
                    this.VarInterface.Equals(input.VarInterface))
                ) && 
                (
                    this.Publish == input.Publish ||
                    this.Publish.Equals(input.Publish)
                ) && 
                (
                    this.BindMac == input.BindMac ||
                    this.BindMac.Equals(input.BindMac)
                ) && 
                (
                    this.Dynamic == input.Dynamic ||
                    this.Dynamic.Equals(input.Dynamic)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ip != null)
                {
                    hashCode = (hashCode * 59) + this.Ip.GetHashCode();
                }
                if (this.Mac != null)
                {
                    hashCode = (hashCode * 59) + this.Mac.GetHashCode();
                }
                if (this.VarInterface != null)
                {
                    hashCode = (hashCode * 59) + this.VarInterface.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Publish.GetHashCode();
                hashCode = (hashCode * 59) + this.BindMac.GetHashCode();
                hashCode = (hashCode * 59) + this.Dynamic.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
