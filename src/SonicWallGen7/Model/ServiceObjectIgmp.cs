/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// ServiceObjectIgmp
    /// </summary>
    [DataContract(Name = "service_object_igmp")]
    public partial class ServiceObjectIgmp : IEquatable<ServiceObjectIgmp>, IValidatableObject
    {
        /// <summary>
        /// Service object IGMP.
        /// </summary>
        /// <value>Service object IGMP.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IgmpEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum MemberQuery for value: member-query
            /// </summary>
            [EnumMember(Value = "member-query")]
            MemberQuery = 2,

            /// <summary>
            /// Enum V1MemberReport for value: v1-member-report
            /// </summary>
            [EnumMember(Value = "v1-member-report")]
            V1MemberReport = 3,

            /// <summary>
            /// Enum V2MemberReport for value: v2-member-report
            /// </summary>
            [EnumMember(Value = "v2-member-report")]
            V2MemberReport = 4,

            /// <summary>
            /// Enum LeaveGroup for value: leave-group
            /// </summary>
            [EnumMember(Value = "leave-group")]
            LeaveGroup = 5,

            /// <summary>
            /// Enum V3MemberReport for value: v3-member-report
            /// </summary>
            [EnumMember(Value = "v3-member-report")]
            V3MemberReport = 6
        }


        /// <summary>
        /// Service object IGMP.
        /// </summary>
        /// <value>Service object IGMP.</value>
        [DataMember(Name = "igmp", EmitDefaultValue = false)]
        public IgmpEnum? Igmp { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceObjectIgmp" /> class.
        /// </summary>
        /// <param name="igmp">Service object IGMP..</param>
        public ServiceObjectIgmp(IgmpEnum? igmp = default(IgmpEnum?))
        {
            this.Igmp = igmp;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServiceObjectIgmp {\n");
            sb.Append("  Igmp: ").Append(Igmp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServiceObjectIgmp);
        }

        /// <summary>
        /// Returns true if ServiceObjectIgmp instances are equal
        /// </summary>
        /// <param name="input">Instance of ServiceObjectIgmp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceObjectIgmp input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Igmp == input.Igmp ||
                    this.Igmp.Equals(input.Igmp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Igmp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
