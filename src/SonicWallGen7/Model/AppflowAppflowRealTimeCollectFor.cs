/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enable what to collect real-time data for.
    /// </summary>
    [DataContract(Name = "appflow_appflow_real_time_collect_for")]
    public partial class AppflowAppflowRealTimeCollectFor : IEquatable<AppflowAppflowRealTimeCollectFor>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppflowAppflowRealTimeCollectFor" /> class.
        /// </summary>
        /// <param name="topApplications">Top applications..</param>
        /// <param name="bitsPerSecond">Bits per second..</param>
        /// <param name="packetsPerSecond">Packets per second..</param>
        /// <param name="averagePacketSize">Average packet size..</param>
        /// <param name="connectionsPerSecond">Connections per second..</param>
        /// <param name="coreUtilization">Core utilization..</param>
        /// <param name="interfaceProtocols">Interface Protocols..</param>
        /// <param name="memoryUtilization">Memory utilization..</param>
        public AppflowAppflowRealTimeCollectFor(bool topApplications = default(bool), bool bitsPerSecond = default(bool), bool packetsPerSecond = default(bool), bool averagePacketSize = default(bool), bool connectionsPerSecond = default(bool), bool coreUtilization = default(bool), bool interfaceProtocols = default(bool), bool memoryUtilization = default(bool))
        {
            this.TopApplications = topApplications;
            this.BitsPerSecond = bitsPerSecond;
            this.PacketsPerSecond = packetsPerSecond;
            this.AveragePacketSize = averagePacketSize;
            this.ConnectionsPerSecond = connectionsPerSecond;
            this.CoreUtilization = coreUtilization;
            this.InterfaceProtocols = interfaceProtocols;
            this.MemoryUtilization = memoryUtilization;
        }

        /// <summary>
        /// Top applications.
        /// </summary>
        /// <value>Top applications.</value>
        [DataMember(Name = "top_applications", EmitDefaultValue = true)]
        public bool TopApplications { get; set; }

        /// <summary>
        /// Bits per second.
        /// </summary>
        /// <value>Bits per second.</value>
        [DataMember(Name = "bits_per_second", EmitDefaultValue = true)]
        public bool BitsPerSecond { get; set; }

        /// <summary>
        /// Packets per second.
        /// </summary>
        /// <value>Packets per second.</value>
        [DataMember(Name = "packets_per_second", EmitDefaultValue = true)]
        public bool PacketsPerSecond { get; set; }

        /// <summary>
        /// Average packet size.
        /// </summary>
        /// <value>Average packet size.</value>
        [DataMember(Name = "average_packet_size", EmitDefaultValue = true)]
        public bool AveragePacketSize { get; set; }

        /// <summary>
        /// Connections per second.
        /// </summary>
        /// <value>Connections per second.</value>
        [DataMember(Name = "connections_per_second", EmitDefaultValue = true)]
        public bool ConnectionsPerSecond { get; set; }

        /// <summary>
        /// Core utilization.
        /// </summary>
        /// <value>Core utilization.</value>
        [DataMember(Name = "core_utilization", EmitDefaultValue = true)]
        public bool CoreUtilization { get; set; }

        /// <summary>
        /// Interface Protocols.
        /// </summary>
        /// <value>Interface Protocols.</value>
        [DataMember(Name = "interface_protocols", EmitDefaultValue = true)]
        public bool InterfaceProtocols { get; set; }

        /// <summary>
        /// Memory utilization.
        /// </summary>
        /// <value>Memory utilization.</value>
        [DataMember(Name = "memory_utilization", EmitDefaultValue = true)]
        public bool MemoryUtilization { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppflowAppflowRealTimeCollectFor {\n");
            sb.Append("  TopApplications: ").Append(TopApplications).Append("\n");
            sb.Append("  BitsPerSecond: ").Append(BitsPerSecond).Append("\n");
            sb.Append("  PacketsPerSecond: ").Append(PacketsPerSecond).Append("\n");
            sb.Append("  AveragePacketSize: ").Append(AveragePacketSize).Append("\n");
            sb.Append("  ConnectionsPerSecond: ").Append(ConnectionsPerSecond).Append("\n");
            sb.Append("  CoreUtilization: ").Append(CoreUtilization).Append("\n");
            sb.Append("  InterfaceProtocols: ").Append(InterfaceProtocols).Append("\n");
            sb.Append("  MemoryUtilization: ").Append(MemoryUtilization).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppflowAppflowRealTimeCollectFor);
        }

        /// <summary>
        /// Returns true if AppflowAppflowRealTimeCollectFor instances are equal
        /// </summary>
        /// <param name="input">Instance of AppflowAppflowRealTimeCollectFor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppflowAppflowRealTimeCollectFor input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TopApplications == input.TopApplications ||
                    this.TopApplications.Equals(input.TopApplications)
                ) && 
                (
                    this.BitsPerSecond == input.BitsPerSecond ||
                    this.BitsPerSecond.Equals(input.BitsPerSecond)
                ) && 
                (
                    this.PacketsPerSecond == input.PacketsPerSecond ||
                    this.PacketsPerSecond.Equals(input.PacketsPerSecond)
                ) && 
                (
                    this.AveragePacketSize == input.AveragePacketSize ||
                    this.AveragePacketSize.Equals(input.AveragePacketSize)
                ) && 
                (
                    this.ConnectionsPerSecond == input.ConnectionsPerSecond ||
                    this.ConnectionsPerSecond.Equals(input.ConnectionsPerSecond)
                ) && 
                (
                    this.CoreUtilization == input.CoreUtilization ||
                    this.CoreUtilization.Equals(input.CoreUtilization)
                ) && 
                (
                    this.InterfaceProtocols == input.InterfaceProtocols ||
                    this.InterfaceProtocols.Equals(input.InterfaceProtocols)
                ) && 
                (
                    this.MemoryUtilization == input.MemoryUtilization ||
                    this.MemoryUtilization.Equals(input.MemoryUtilization)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.TopApplications.GetHashCode();
                hashCode = (hashCode * 59) + this.BitsPerSecond.GetHashCode();
                hashCode = (hashCode * 59) + this.PacketsPerSecond.GetHashCode();
                hashCode = (hashCode * 59) + this.AveragePacketSize.GetHashCode();
                hashCode = (hashCode * 59) + this.ConnectionsPerSecond.GetHashCode();
                hashCode = (hashCode * 59) + this.CoreUtilization.GetHashCode();
                hashCode = (hashCode * 59) + this.InterfaceProtocols.GetHashCode();
                hashCode = (hashCode * 59) + this.MemoryUtilization.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
