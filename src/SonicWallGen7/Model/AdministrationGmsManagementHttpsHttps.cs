/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Use HTTPS.
    /// </summary>
    [DataContract(Name = "administration_gms_management_https_https")]
    public partial class AdministrationGmsManagementHttpsHttps : IEquatable<AdministrationGmsManagementHttpsHttps>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdministrationGmsManagementHttpsHttps" /> class.
        /// </summary>
        /// <param name="hostName">Set the GMS server IP or hostname..</param>
        /// <param name="syslogServerPort">Set the syslog server port of the GMS server..</param>
        /// <param name="heartbeatStatusOnly">Enable send heartbeat status messages Only..</param>
        /// <param name="behindNatDevice">behindNatDevice.</param>
        /// <param name="reportingServer">reportingServer.</param>
        public AdministrationGmsManagementHttpsHttps(string hostName = default(string), decimal syslogServerPort = default(decimal), bool heartbeatStatusOnly = default(bool), AdministrationGmsManagementIpsecTunnelIpsecTunnelBehindNatDevice behindNatDevice = default(AdministrationGmsManagementIpsecTunnelIpsecTunnelBehindNatDevice), AdministrationGmsManagementHttpsHttpsReportingServer reportingServer = default(AdministrationGmsManagementHttpsHttpsReportingServer))
        {
            this.HostName = hostName;
            this.SyslogServerPort = syslogServerPort;
            this.HeartbeatStatusOnly = heartbeatStatusOnly;
            this.BehindNatDevice = behindNatDevice;
            this.ReportingServer = reportingServer;
        }

        /// <summary>
        /// Set the GMS server IP or hostname.
        /// </summary>
        /// <value>Set the GMS server IP or hostname.</value>
        [DataMember(Name = "host_name", EmitDefaultValue = false)]
        public string HostName { get; set; }

        /// <summary>
        /// Set the syslog server port of the GMS server.
        /// </summary>
        /// <value>Set the syslog server port of the GMS server.</value>
        [DataMember(Name = "syslog_server_port", EmitDefaultValue = false)]
        public decimal SyslogServerPort { get; set; }

        /// <summary>
        /// Enable send heartbeat status messages Only.
        /// </summary>
        /// <value>Enable send heartbeat status messages Only.</value>
        [DataMember(Name = "heartbeat_status_only", EmitDefaultValue = true)]
        public bool HeartbeatStatusOnly { get; set; }

        /// <summary>
        /// Gets or Sets BehindNatDevice
        /// </summary>
        [DataMember(Name = "behind_nat_device", EmitDefaultValue = true)]
        public AdministrationGmsManagementIpsecTunnelIpsecTunnelBehindNatDevice BehindNatDevice { get; set; }

        /// <summary>
        /// Gets or Sets ReportingServer
        /// </summary>
        [DataMember(Name = "reporting_server", EmitDefaultValue = true)]
        public AdministrationGmsManagementHttpsHttpsReportingServer ReportingServer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdministrationGmsManagementHttpsHttps {\n");
            sb.Append("  HostName: ").Append(HostName).Append("\n");
            sb.Append("  SyslogServerPort: ").Append(SyslogServerPort).Append("\n");
            sb.Append("  HeartbeatStatusOnly: ").Append(HeartbeatStatusOnly).Append("\n");
            sb.Append("  BehindNatDevice: ").Append(BehindNatDevice).Append("\n");
            sb.Append("  ReportingServer: ").Append(ReportingServer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdministrationGmsManagementHttpsHttps);
        }

        /// <summary>
        /// Returns true if AdministrationGmsManagementHttpsHttps instances are equal
        /// </summary>
        /// <param name="input">Instance of AdministrationGmsManagementHttpsHttps to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdministrationGmsManagementHttpsHttps input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.HostName == input.HostName ||
                    (this.HostName != null &&
                    this.HostName.Equals(input.HostName))
                ) && 
                (
                    this.SyslogServerPort == input.SyslogServerPort ||
                    this.SyslogServerPort.Equals(input.SyslogServerPort)
                ) && 
                (
                    this.HeartbeatStatusOnly == input.HeartbeatStatusOnly ||
                    this.HeartbeatStatusOnly.Equals(input.HeartbeatStatusOnly)
                ) && 
                (
                    this.BehindNatDevice == input.BehindNatDevice ||
                    (this.BehindNatDevice != null &&
                    this.BehindNatDevice.Equals(input.BehindNatDevice))
                ) && 
                (
                    this.ReportingServer == input.ReportingServer ||
                    (this.ReportingServer != null &&
                    this.ReportingServer.Equals(input.ReportingServer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HostName != null)
                {
                    hashCode = (hashCode * 59) + this.HostName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SyslogServerPort.GetHashCode();
                hashCode = (hashCode * 59) + this.HeartbeatStatusOnly.GetHashCode();
                if (this.BehindNatDevice != null)
                {
                    hashCode = (hashCode * 59) + this.BehindNatDevice.GetHashCode();
                }
                if (this.ReportingServer != null)
                {
                    hashCode = (hashCode * 59) + this.ReportingServer.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
