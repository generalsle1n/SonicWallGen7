/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// PacketDissectionObjectFamilyIcmpv4
    /// </summary>
    [DataContract(Name = "packet_dissection_object_family_icmpv4")]
    public partial class PacketDissectionObjectFamilyIcmpv4 : IEquatable<PacketDissectionObjectFamilyIcmpv4>, IValidatableObject
    {
        /// <summary>
        /// ICMPv4 header.
        /// </summary>
        /// <value>ICMPv4 header.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Icmpv4Enum
        {
            /// <summary>
            /// Enum Type for value: type
            /// </summary>
            [EnumMember(Value = "type")]
            Type = 1,

            /// <summary>
            /// Enum Code for value: code
            /// </summary>
            [EnumMember(Value = "code")]
            Code = 2,

            /// <summary>
            /// Enum Checksum for value: checksum
            /// </summary>
            [EnumMember(Value = "checksum")]
            Checksum = 3,

            /// <summary>
            /// Enum Identifier for value: identifier
            /// </summary>
            [EnumMember(Value = "identifier")]
            Identifier = 4,

            /// <summary>
            /// Enum Sequence for value: sequence
            /// </summary>
            [EnumMember(Value = "sequence")]
            Sequence = 5,

            /// <summary>
            /// Enum GatewayAddress for value: gateway-address
            /// </summary>
            [EnumMember(Value = "gateway-address")]
            GatewayAddress = 6,

            /// <summary>
            /// Enum OrigTimestamp for value: orig-timestamp
            /// </summary>
            [EnumMember(Value = "orig-timestamp")]
            OrigTimestamp = 7,

            /// <summary>
            /// Enum RecvTimestamp for value: recv-timestamp
            /// </summary>
            [EnumMember(Value = "recv-timestamp")]
            RecvTimestamp = 8,

            /// <summary>
            /// Enum TransTimestamp for value: trans-timestamp
            /// </summary>
            [EnumMember(Value = "trans-timestamp")]
            TransTimestamp = 9,

            /// <summary>
            /// Enum ParamProblemPointer for value: param-problem-pointer
            /// </summary>
            [EnumMember(Value = "param-problem-pointer")]
            ParamProblemPointer = 10
        }


        /// <summary>
        /// ICMPv4 header.
        /// </summary>
        /// <value>ICMPv4 header.</value>
        [DataMember(Name = "icmpv4", EmitDefaultValue = false)]
        public Icmpv4Enum? Icmpv4 { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PacketDissectionObjectFamilyIcmpv4" /> class.
        /// </summary>
        /// <param name="icmpv4">ICMPv4 header..</param>
        public PacketDissectionObjectFamilyIcmpv4(Icmpv4Enum? icmpv4 = default(Icmpv4Enum?))
        {
            this.Icmpv4 = icmpv4;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PacketDissectionObjectFamilyIcmpv4 {\n");
            sb.Append("  Icmpv4: ").Append(Icmpv4).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PacketDissectionObjectFamilyIcmpv4);
        }

        /// <summary>
        /// Returns true if PacketDissectionObjectFamilyIcmpv4 instances are equal
        /// </summary>
        /// <param name="input">Instance of PacketDissectionObjectFamilyIcmpv4 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PacketDissectionObjectFamilyIcmpv4 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Icmpv4 == input.Icmpv4 ||
                    this.Icmpv4.Equals(input.Icmpv4)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Icmpv4.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
