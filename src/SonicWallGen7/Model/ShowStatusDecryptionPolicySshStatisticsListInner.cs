/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// ShowStatusDecryptionPolicySshStatisticsListInner
    /// </summary>
    [DataContract(Name = "show_status_decryption_policy_ssh_statistics_list_inner")]
    public partial class ShowStatusDecryptionPolicySshStatisticsListInner : IEquatable<ShowStatusDecryptionPolicySshStatisticsListInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusDecryptionPolicySshStatisticsListInner" /> class.
        /// </summary>
        /// <param name="uuid">uuid.</param>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="type">type.</param>
        /// <param name="ipVersion">ipVersion.</param>
        /// <param name="priority">priority.</param>
        /// <param name="enable">enable.</param>
        /// <param name="active">active.</param>
        /// <param name="timeCreated">timeCreated.</param>
        /// <param name="timeUpdated">timeUpdated.</param>
        /// <param name="timeLastHit">timeLastHit.</param>
        /// <param name="sourceAddress">sourceAddress.</param>
        /// <param name="destinationAddress">destinationAddress.</param>
        /// <param name="service">service.</param>
        /// <param name="user">user.</param>
        /// <param name="country">country.</param>
        /// <param name="schedule">schedule.</param>
        /// <param name="action">action.</param>
        /// <param name="receivedBytes">receivedBytes.</param>
        /// <param name="sentBytes">sentBytes.</param>
        /// <param name="receivedPackets">receivedPackets.</param>
        /// <param name="sentPackets">sentPackets.</param>
        /// <param name="activeConnections">activeConnections.</param>
        /// <param name="totalConnections">totalConnections.</param>
        /// <param name="hitCounts">hitCounts.</param>
        public ShowStatusDecryptionPolicySshStatisticsListInner(string uuid = default(string), string id = default(string), string name = default(string), string type = default(string), string ipVersion = default(string), string priority = default(string), string enable = default(string), string active = default(string), string timeCreated = default(string), string timeUpdated = default(string), string timeLastHit = default(string), string sourceAddress = default(string), string destinationAddress = default(string), string service = default(string), string user = default(string), string country = default(string), string schedule = default(string), string action = default(string), string receivedBytes = default(string), string sentBytes = default(string), string receivedPackets = default(string), string sentPackets = default(string), string activeConnections = default(string), string totalConnections = default(string), string hitCounts = default(string))
        {
            this.Uuid = uuid;
            this.Id = id;
            this.Name = name;
            this.Type = type;
            this.IpVersion = ipVersion;
            this.Priority = priority;
            this.Enable = enable;
            this.Active = active;
            this.TimeCreated = timeCreated;
            this.TimeUpdated = timeUpdated;
            this.TimeLastHit = timeLastHit;
            this.SourceAddress = sourceAddress;
            this.DestinationAddress = destinationAddress;
            this.Service = service;
            this.User = user;
            this.Country = country;
            this.Schedule = schedule;
            this.Action = action;
            this.ReceivedBytes = receivedBytes;
            this.SentBytes = sentBytes;
            this.ReceivedPackets = receivedPackets;
            this.SentPackets = sentPackets;
            this.ActiveConnections = activeConnections;
            this.TotalConnections = totalConnections;
            this.HitCounts = hitCounts;
        }

        /// <summary>
        /// Gets or Sets Uuid
        /// </summary>
        [DataMember(Name = "uuid", EmitDefaultValue = false)]
        public string Uuid { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets IpVersion
        /// </summary>
        [DataMember(Name = "ip_version", EmitDefaultValue = false)]
        public string IpVersion { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name = "priority", EmitDefaultValue = false)]
        public string Priority { get; set; }

        /// <summary>
        /// Gets or Sets Enable
        /// </summary>
        [DataMember(Name = "enable", EmitDefaultValue = false)]
        public string Enable { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = false)]
        public string Active { get; set; }

        /// <summary>
        /// Gets or Sets TimeCreated
        /// </summary>
        [DataMember(Name = "time_created", EmitDefaultValue = false)]
        public string TimeCreated { get; set; }

        /// <summary>
        /// Gets or Sets TimeUpdated
        /// </summary>
        [DataMember(Name = "time_updated", EmitDefaultValue = false)]
        public string TimeUpdated { get; set; }

        /// <summary>
        /// Gets or Sets TimeLastHit
        /// </summary>
        [DataMember(Name = "time_last_hit", EmitDefaultValue = false)]
        public string TimeLastHit { get; set; }

        /// <summary>
        /// Gets or Sets SourceAddress
        /// </summary>
        [DataMember(Name = "source_address", EmitDefaultValue = false)]
        public string SourceAddress { get; set; }

        /// <summary>
        /// Gets or Sets DestinationAddress
        /// </summary>
        [DataMember(Name = "destination_address", EmitDefaultValue = false)]
        public string DestinationAddress { get; set; }

        /// <summary>
        /// Gets or Sets Service
        /// </summary>
        [DataMember(Name = "service", EmitDefaultValue = false)]
        public string Service { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public string User { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets Schedule
        /// </summary>
        [DataMember(Name = "schedule", EmitDefaultValue = false)]
        public string Schedule { get; set; }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name = "action", EmitDefaultValue = false)]
        public string Action { get; set; }

        /// <summary>
        /// Gets or Sets ReceivedBytes
        /// </summary>
        [DataMember(Name = "received_bytes", EmitDefaultValue = false)]
        public string ReceivedBytes { get; set; }

        /// <summary>
        /// Gets or Sets SentBytes
        /// </summary>
        [DataMember(Name = "sent_bytes", EmitDefaultValue = false)]
        public string SentBytes { get; set; }

        /// <summary>
        /// Gets or Sets ReceivedPackets
        /// </summary>
        [DataMember(Name = "received_packets", EmitDefaultValue = false)]
        public string ReceivedPackets { get; set; }

        /// <summary>
        /// Gets or Sets SentPackets
        /// </summary>
        [DataMember(Name = "sent_packets", EmitDefaultValue = false)]
        public string SentPackets { get; set; }

        /// <summary>
        /// Gets or Sets ActiveConnections
        /// </summary>
        [DataMember(Name = "active_connections", EmitDefaultValue = false)]
        public string ActiveConnections { get; set; }

        /// <summary>
        /// Gets or Sets TotalConnections
        /// </summary>
        [DataMember(Name = "total_connections", EmitDefaultValue = false)]
        public string TotalConnections { get; set; }

        /// <summary>
        /// Gets or Sets HitCounts
        /// </summary>
        [DataMember(Name = "hit_counts", EmitDefaultValue = false)]
        public string HitCounts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusDecryptionPolicySshStatisticsListInner {\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IpVersion: ").Append(IpVersion).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  TimeCreated: ").Append(TimeCreated).Append("\n");
            sb.Append("  TimeUpdated: ").Append(TimeUpdated).Append("\n");
            sb.Append("  TimeLastHit: ").Append(TimeLastHit).Append("\n");
            sb.Append("  SourceAddress: ").Append(SourceAddress).Append("\n");
            sb.Append("  DestinationAddress: ").Append(DestinationAddress).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Schedule: ").Append(Schedule).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  ReceivedBytes: ").Append(ReceivedBytes).Append("\n");
            sb.Append("  SentBytes: ").Append(SentBytes).Append("\n");
            sb.Append("  ReceivedPackets: ").Append(ReceivedPackets).Append("\n");
            sb.Append("  SentPackets: ").Append(SentPackets).Append("\n");
            sb.Append("  ActiveConnections: ").Append(ActiveConnections).Append("\n");
            sb.Append("  TotalConnections: ").Append(TotalConnections).Append("\n");
            sb.Append("  HitCounts: ").Append(HitCounts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusDecryptionPolicySshStatisticsListInner);
        }

        /// <summary>
        /// Returns true if ShowStatusDecryptionPolicySshStatisticsListInner instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusDecryptionPolicySshStatisticsListInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusDecryptionPolicySshStatisticsListInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.IpVersion == input.IpVersion ||
                    (this.IpVersion != null &&
                    this.IpVersion.Equals(input.IpVersion))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.Enable == input.Enable ||
                    (this.Enable != null &&
                    this.Enable.Equals(input.Enable))
                ) && 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.TimeCreated == input.TimeCreated ||
                    (this.TimeCreated != null &&
                    this.TimeCreated.Equals(input.TimeCreated))
                ) && 
                (
                    this.TimeUpdated == input.TimeUpdated ||
                    (this.TimeUpdated != null &&
                    this.TimeUpdated.Equals(input.TimeUpdated))
                ) && 
                (
                    this.TimeLastHit == input.TimeLastHit ||
                    (this.TimeLastHit != null &&
                    this.TimeLastHit.Equals(input.TimeLastHit))
                ) && 
                (
                    this.SourceAddress == input.SourceAddress ||
                    (this.SourceAddress != null &&
                    this.SourceAddress.Equals(input.SourceAddress))
                ) && 
                (
                    this.DestinationAddress == input.DestinationAddress ||
                    (this.DestinationAddress != null &&
                    this.DestinationAddress.Equals(input.DestinationAddress))
                ) && 
                (
                    this.Service == input.Service ||
                    (this.Service != null &&
                    this.Service.Equals(input.Service))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Schedule == input.Schedule ||
                    (this.Schedule != null &&
                    this.Schedule.Equals(input.Schedule))
                ) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.ReceivedBytes == input.ReceivedBytes ||
                    (this.ReceivedBytes != null &&
                    this.ReceivedBytes.Equals(input.ReceivedBytes))
                ) && 
                (
                    this.SentBytes == input.SentBytes ||
                    (this.SentBytes != null &&
                    this.SentBytes.Equals(input.SentBytes))
                ) && 
                (
                    this.ReceivedPackets == input.ReceivedPackets ||
                    (this.ReceivedPackets != null &&
                    this.ReceivedPackets.Equals(input.ReceivedPackets))
                ) && 
                (
                    this.SentPackets == input.SentPackets ||
                    (this.SentPackets != null &&
                    this.SentPackets.Equals(input.SentPackets))
                ) && 
                (
                    this.ActiveConnections == input.ActiveConnections ||
                    (this.ActiveConnections != null &&
                    this.ActiveConnections.Equals(input.ActiveConnections))
                ) && 
                (
                    this.TotalConnections == input.TotalConnections ||
                    (this.TotalConnections != null &&
                    this.TotalConnections.Equals(input.TotalConnections))
                ) && 
                (
                    this.HitCounts == input.HitCounts ||
                    (this.HitCounts != null &&
                    this.HitCounts.Equals(input.HitCounts))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uuid != null)
                {
                    hashCode = (hashCode * 59) + this.Uuid.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.IpVersion != null)
                {
                    hashCode = (hashCode * 59) + this.IpVersion.GetHashCode();
                }
                if (this.Priority != null)
                {
                    hashCode = (hashCode * 59) + this.Priority.GetHashCode();
                }
                if (this.Enable != null)
                {
                    hashCode = (hashCode * 59) + this.Enable.GetHashCode();
                }
                if (this.Active != null)
                {
                    hashCode = (hashCode * 59) + this.Active.GetHashCode();
                }
                if (this.TimeCreated != null)
                {
                    hashCode = (hashCode * 59) + this.TimeCreated.GetHashCode();
                }
                if (this.TimeUpdated != null)
                {
                    hashCode = (hashCode * 59) + this.TimeUpdated.GetHashCode();
                }
                if (this.TimeLastHit != null)
                {
                    hashCode = (hashCode * 59) + this.TimeLastHit.GetHashCode();
                }
                if (this.SourceAddress != null)
                {
                    hashCode = (hashCode * 59) + this.SourceAddress.GetHashCode();
                }
                if (this.DestinationAddress != null)
                {
                    hashCode = (hashCode * 59) + this.DestinationAddress.GetHashCode();
                }
                if (this.Service != null)
                {
                    hashCode = (hashCode * 59) + this.Service.GetHashCode();
                }
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.Schedule != null)
                {
                    hashCode = (hashCode * 59) + this.Schedule.GetHashCode();
                }
                if (this.Action != null)
                {
                    hashCode = (hashCode * 59) + this.Action.GetHashCode();
                }
                if (this.ReceivedBytes != null)
                {
                    hashCode = (hashCode * 59) + this.ReceivedBytes.GetHashCode();
                }
                if (this.SentBytes != null)
                {
                    hashCode = (hashCode * 59) + this.SentBytes.GetHashCode();
                }
                if (this.ReceivedPackets != null)
                {
                    hashCode = (hashCode * 59) + this.ReceivedPackets.GetHashCode();
                }
                if (this.SentPackets != null)
                {
                    hashCode = (hashCode * 59) + this.SentPackets.GetHashCode();
                }
                if (this.ActiveConnections != null)
                {
                    hashCode = (hashCode * 59) + this.ActiveConnections.GetHashCode();
                }
                if (this.TotalConnections != null)
                {
                    hashCode = (hashCode * 59) + this.TotalConnections.GetHashCode();
                }
                if (this.HitCounts != null)
                {
                    hashCode = (hashCode * 59) + this.HitCounts.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
