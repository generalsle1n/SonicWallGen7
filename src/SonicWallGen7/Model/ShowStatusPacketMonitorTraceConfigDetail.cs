/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// packet monitor trace config detail schema.
    /// </summary>
    [DataContract(Name = "show_status_packet_monitor_trace_config_detail")]
    public partial class ShowStatusPacketMonitorTraceConfigDetail : IEquatable<ShowStatusPacketMonitorTraceConfigDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusPacketMonitorTraceConfigDetail" /> class.
        /// </summary>
        /// <param name="mirrorFilteredPacketsToInterface">mirrorFilteredPacketsToInterface.</param>
        /// <param name="mirrorSettingsOnlyIpPackets">mirrorSettingsOnlyIpPackets.</param>
        /// <param name="mirrorSettingsInterface">mirrorSettingsInterface.</param>
        /// <param name="mirrorSettingsMaxRate">mirrorSettingsMaxRate.</param>
        /// <param name="mirrorSettingsForwardInterface">mirrorSettingsForwardInterface.</param>
        /// <param name="mirrorSettingsToCaptureBuffer">mirrorSettingsToCaptureBuffer.</param>
        /// <param name="mirrorSettingsIp">mirrorSettingsIp.</param>
        /// <param name="mirrorSettingsReceiveFromIp">mirrorSettingsReceiveFromIp.</param>
        /// <param name="mirrorSettingsEncryptKey">mirrorSettingsEncryptKey.</param>
        /// <param name="captureSettingsWrapBuff">captureSettingsWrapBuff.</param>
        /// <param name="captureSettingsMulticast">captureSettingsMulticast.</param>
        /// <param name="captureSettingsIphelper">captureSettingsIphelper.</param>
        /// <param name="captureSettingsReassembled">captureSettingsReassembled.</param>
        /// <param name="captureSettingsFragmented">captureSettingsFragmented.</param>
        /// <param name="captureSettingsRemoteMirrored">captureSettingsRemoteMirrored.</param>
        /// <param name="captureSettingsIpsec">captureSettingsIpsec.</param>
        /// <param name="captureSettingsSsl">captureSettingsSsl.</param>
        /// <param name="captureSettingsRestorePortsSsl">captureSettingsRestorePortsSsl.</param>
        /// <param name="captureSettingsFtpAutomatic">captureSettingsFtpAutomatic.</param>
        /// <param name="captureSettingsFtpHtml">captureSettingsFtpHtml.</param>
        /// <param name="captureSettingsFtpPcapng">captureSettingsFtpPcapng.</param>
        /// <param name="captureSettingsFirewallGenerated">captureSettingsFirewallGenerated.</param>
        /// <param name="captureSettingsBytesToCapture">captureSettingsBytesToCapture.</param>
        /// <param name="captureSettingsFtpServer">captureSettingsFtpServer.</param>
        /// <param name="captureSettingsFtpPassword">captureSettingsFtpPassword.</param>
        /// <param name="captureSettingsFtpLogin">captureSettingsFtpLogin.</param>
        /// <param name="captureSettingsFtpDirectory">captureSettingsFtpDirectory.</param>
        /// <param name="captureSettingsIntermediate">captureSettingsIntermediate.</param>
        /// <param name="captureSettingsLdapOverTls">captureSettingsLdapOverTls.</param>
        /// <param name="captureSettingsSsoAgent">captureSettingsSsoAgent.</param>
        /// <param name="captureSettingsExcludeManagementHttp">captureSettingsExcludeManagementHttp.</param>
        /// <param name="captureSettingsExcludeManagementSnmp">captureSettingsExcludeManagementSnmp.</param>
        /// <param name="captureSettingsExcludeManagementSsh">captureSettingsExcludeManagementSsh.</param>
        /// <param name="captureSettingsExcludeSyslogServers">captureSettingsExcludeSyslogServers.</param>
        /// <param name="captureSettingsExcludeGmsServer">captureSettingsExcludeGmsServer.</param>
        /// <param name="captureSettingsExcludeEncryptedGms">captureSettingsExcludeEncryptedGms.</param>
        /// <param name="captureSettingsExcludeEncryptedMgms">captureSettingsExcludeEncryptedMgms.</param>
        /// <param name="captureSettingsExcludeInternalTrafficHa">captureSettingsExcludeInternalTrafficHa.</param>
        /// <param name="captureSettingsExcludeInternalTrafficSonicpoint">captureSettingsExcludeInternalTrafficSonicpoint.</param>
        /// <param name="captureFilterInterfaceName">captureFilterInterfaceName.</param>
        /// <param name="captureFilterEtherType">captureFilterEtherType.</param>
        /// <param name="captureFilterIpType">captureFilterIpType.</param>
        /// <param name="captureFilterSourceIp">captureFilterSourceIp.</param>
        /// <param name="captureFilterSourcePort">captureFilterSourcePort.</param>
        /// <param name="captureFilterDestinationIp">captureFilterDestinationIp.</param>
        /// <param name="captureFilterDestinationPort">captureFilterDestinationPort.</param>
        /// <param name="captureFilterFirewallRule">captureFilterFirewallRule.</param>
        /// <param name="captureFilterBidirectional">captureFilterBidirectional.</param>
        /// <param name="captureFilterForwarded">captureFilterForwarded.</param>
        /// <param name="captureFilterGenerated">captureFilterGenerated.</param>
        /// <param name="captureFilterConsumed">captureFilterConsumed.</param>
        /// <param name="captureFilterDropped">captureFilterDropped.</param>
        /// <param name="interfaceName">interfaceName.</param>
        /// <param name="displayFilterEtherType">displayFilterEtherType.</param>
        /// <param name="displayFilterIpType">displayFilterIpType.</param>
        /// <param name="displayFilterSourceIp">displayFilterSourceIp.</param>
        /// <param name="displayFilterSourcePort">displayFilterSourcePort.</param>
        /// <param name="displayFilterDestinationIp">displayFilterDestinationIp.</param>
        /// <param name="displayFilterDestinationPort">displayFilterDestinationPort.</param>
        /// <param name="displayFilterBidirectional">displayFilterBidirectional.</param>
        /// <param name="displayFilterForwarded">displayFilterForwarded.</param>
        /// <param name="displayFilterGenerated">displayFilterGenerated.</param>
        /// <param name="displayFilterConsumed">displayFilterConsumed.</param>
        /// <param name="displayFilterDropped">displayFilterDropped.</param>
        public ShowStatusPacketMonitorTraceConfigDetail(string mirrorFilteredPacketsToInterface = default(string), string mirrorSettingsOnlyIpPackets = default(string), string mirrorSettingsInterface = default(string), string mirrorSettingsMaxRate = default(string), string mirrorSettingsForwardInterface = default(string), string mirrorSettingsToCaptureBuffer = default(string), string mirrorSettingsIp = default(string), string mirrorSettingsReceiveFromIp = default(string), string mirrorSettingsEncryptKey = default(string), string captureSettingsWrapBuff = default(string), string captureSettingsMulticast = default(string), string captureSettingsIphelper = default(string), string captureSettingsReassembled = default(string), string captureSettingsFragmented = default(string), string captureSettingsRemoteMirrored = default(string), string captureSettingsIpsec = default(string), string captureSettingsSsl = default(string), string captureSettingsRestorePortsSsl = default(string), string captureSettingsFtpAutomatic = default(string), string captureSettingsFtpHtml = default(string), string captureSettingsFtpPcapng = default(string), string captureSettingsFirewallGenerated = default(string), string captureSettingsBytesToCapture = default(string), string captureSettingsFtpServer = default(string), string captureSettingsFtpPassword = default(string), string captureSettingsFtpLogin = default(string), string captureSettingsFtpDirectory = default(string), string captureSettingsIntermediate = default(string), string captureSettingsLdapOverTls = default(string), string captureSettingsSsoAgent = default(string), string captureSettingsExcludeManagementHttp = default(string), string captureSettingsExcludeManagementSnmp = default(string), string captureSettingsExcludeManagementSsh = default(string), string captureSettingsExcludeSyslogServers = default(string), string captureSettingsExcludeGmsServer = default(string), string captureSettingsExcludeEncryptedGms = default(string), string captureSettingsExcludeEncryptedMgms = default(string), string captureSettingsExcludeInternalTrafficHa = default(string), string captureSettingsExcludeInternalTrafficSonicpoint = default(string), string captureFilterInterfaceName = default(string), string captureFilterEtherType = default(string), string captureFilterIpType = default(string), string captureFilterSourceIp = default(string), string captureFilterSourcePort = default(string), string captureFilterDestinationIp = default(string), string captureFilterDestinationPort = default(string), string captureFilterFirewallRule = default(string), string captureFilterBidirectional = default(string), string captureFilterForwarded = default(string), string captureFilterGenerated = default(string), string captureFilterConsumed = default(string), string captureFilterDropped = default(string), string interfaceName = default(string), string displayFilterEtherType = default(string), string displayFilterIpType = default(string), string displayFilterSourceIp = default(string), string displayFilterSourcePort = default(string), string displayFilterDestinationIp = default(string), string displayFilterDestinationPort = default(string), string displayFilterBidirectional = default(string), string displayFilterForwarded = default(string), string displayFilterGenerated = default(string), string displayFilterConsumed = default(string), string displayFilterDropped = default(string))
        {
            this.MirrorFilteredPacketsToInterface = mirrorFilteredPacketsToInterface;
            this.MirrorSettingsOnlyIpPackets = mirrorSettingsOnlyIpPackets;
            this.MirrorSettingsInterface = mirrorSettingsInterface;
            this.MirrorSettingsMaxRate = mirrorSettingsMaxRate;
            this.MirrorSettingsForwardInterface = mirrorSettingsForwardInterface;
            this.MirrorSettingsToCaptureBuffer = mirrorSettingsToCaptureBuffer;
            this.MirrorSettingsIp = mirrorSettingsIp;
            this.MirrorSettingsReceiveFromIp = mirrorSettingsReceiveFromIp;
            this.MirrorSettingsEncryptKey = mirrorSettingsEncryptKey;
            this.CaptureSettingsWrapBuff = captureSettingsWrapBuff;
            this.CaptureSettingsMulticast = captureSettingsMulticast;
            this.CaptureSettingsIphelper = captureSettingsIphelper;
            this.CaptureSettingsReassembled = captureSettingsReassembled;
            this.CaptureSettingsFragmented = captureSettingsFragmented;
            this.CaptureSettingsRemoteMirrored = captureSettingsRemoteMirrored;
            this.CaptureSettingsIpsec = captureSettingsIpsec;
            this.CaptureSettingsSsl = captureSettingsSsl;
            this.CaptureSettingsRestorePortsSsl = captureSettingsRestorePortsSsl;
            this.CaptureSettingsFtpAutomatic = captureSettingsFtpAutomatic;
            this.CaptureSettingsFtpHtml = captureSettingsFtpHtml;
            this.CaptureSettingsFtpPcapng = captureSettingsFtpPcapng;
            this.CaptureSettingsFirewallGenerated = captureSettingsFirewallGenerated;
            this.CaptureSettingsBytesToCapture = captureSettingsBytesToCapture;
            this.CaptureSettingsFtpServer = captureSettingsFtpServer;
            this.CaptureSettingsFtpPassword = captureSettingsFtpPassword;
            this.CaptureSettingsFtpLogin = captureSettingsFtpLogin;
            this.CaptureSettingsFtpDirectory = captureSettingsFtpDirectory;
            this.CaptureSettingsIntermediate = captureSettingsIntermediate;
            this.CaptureSettingsLdapOverTls = captureSettingsLdapOverTls;
            this.CaptureSettingsSsoAgent = captureSettingsSsoAgent;
            this.CaptureSettingsExcludeManagementHttp = captureSettingsExcludeManagementHttp;
            this.CaptureSettingsExcludeManagementSnmp = captureSettingsExcludeManagementSnmp;
            this.CaptureSettingsExcludeManagementSsh = captureSettingsExcludeManagementSsh;
            this.CaptureSettingsExcludeSyslogServers = captureSettingsExcludeSyslogServers;
            this.CaptureSettingsExcludeGmsServer = captureSettingsExcludeGmsServer;
            this.CaptureSettingsExcludeEncryptedGms = captureSettingsExcludeEncryptedGms;
            this.CaptureSettingsExcludeEncryptedMgms = captureSettingsExcludeEncryptedMgms;
            this.CaptureSettingsExcludeInternalTrafficHa = captureSettingsExcludeInternalTrafficHa;
            this.CaptureSettingsExcludeInternalTrafficSonicpoint = captureSettingsExcludeInternalTrafficSonicpoint;
            this.CaptureFilterInterfaceName = captureFilterInterfaceName;
            this.CaptureFilterEtherType = captureFilterEtherType;
            this.CaptureFilterIpType = captureFilterIpType;
            this.CaptureFilterSourceIp = captureFilterSourceIp;
            this.CaptureFilterSourcePort = captureFilterSourcePort;
            this.CaptureFilterDestinationIp = captureFilterDestinationIp;
            this.CaptureFilterDestinationPort = captureFilterDestinationPort;
            this.CaptureFilterFirewallRule = captureFilterFirewallRule;
            this.CaptureFilterBidirectional = captureFilterBidirectional;
            this.CaptureFilterForwarded = captureFilterForwarded;
            this.CaptureFilterGenerated = captureFilterGenerated;
            this.CaptureFilterConsumed = captureFilterConsumed;
            this.CaptureFilterDropped = captureFilterDropped;
            this.InterfaceName = interfaceName;
            this.DisplayFilterEtherType = displayFilterEtherType;
            this.DisplayFilterIpType = displayFilterIpType;
            this.DisplayFilterSourceIp = displayFilterSourceIp;
            this.DisplayFilterSourcePort = displayFilterSourcePort;
            this.DisplayFilterDestinationIp = displayFilterDestinationIp;
            this.DisplayFilterDestinationPort = displayFilterDestinationPort;
            this.DisplayFilterBidirectional = displayFilterBidirectional;
            this.DisplayFilterForwarded = displayFilterForwarded;
            this.DisplayFilterGenerated = displayFilterGenerated;
            this.DisplayFilterConsumed = displayFilterConsumed;
            this.DisplayFilterDropped = displayFilterDropped;
        }

        /// <summary>
        /// Gets or Sets MirrorFilteredPacketsToInterface
        /// </summary>
        [DataMember(Name = "mirror_filtered_packets_to_interface", EmitDefaultValue = false)]
        public string MirrorFilteredPacketsToInterface { get; set; }

        /// <summary>
        /// Gets or Sets MirrorSettingsOnlyIpPackets
        /// </summary>
        [DataMember(Name = "mirror_settings_only_ip_packets", EmitDefaultValue = false)]
        public string MirrorSettingsOnlyIpPackets { get; set; }

        /// <summary>
        /// Gets or Sets MirrorSettingsInterface
        /// </summary>
        [DataMember(Name = "mirror_settings_interface", EmitDefaultValue = false)]
        public string MirrorSettingsInterface { get; set; }

        /// <summary>
        /// Gets or Sets MirrorSettingsMaxRate
        /// </summary>
        [DataMember(Name = "mirror_settings_max_rate", EmitDefaultValue = false)]
        public string MirrorSettingsMaxRate { get; set; }

        /// <summary>
        /// Gets or Sets MirrorSettingsForwardInterface
        /// </summary>
        [DataMember(Name = "mirror_settings_forward_interface", EmitDefaultValue = false)]
        public string MirrorSettingsForwardInterface { get; set; }

        /// <summary>
        /// Gets or Sets MirrorSettingsToCaptureBuffer
        /// </summary>
        [DataMember(Name = "mirror_settings_to_capture_buffer", EmitDefaultValue = false)]
        public string MirrorSettingsToCaptureBuffer { get; set; }

        /// <summary>
        /// Gets or Sets MirrorSettingsIp
        /// </summary>
        [DataMember(Name = "mirror_settings_ip", EmitDefaultValue = false)]
        public string MirrorSettingsIp { get; set; }

        /// <summary>
        /// Gets or Sets MirrorSettingsReceiveFromIp
        /// </summary>
        [DataMember(Name = "mirror_settings_receive_from_ip", EmitDefaultValue = false)]
        public string MirrorSettingsReceiveFromIp { get; set; }

        /// <summary>
        /// Gets or Sets MirrorSettingsEncryptKey
        /// </summary>
        [DataMember(Name = "mirror_settings_encrypt_key", EmitDefaultValue = false)]
        public string MirrorSettingsEncryptKey { get; set; }

        /// <summary>
        /// Gets or Sets CaptureSettingsWrapBuff
        /// </summary>
        [DataMember(Name = "capture_settings_wrap_buff", EmitDefaultValue = false)]
        public string CaptureSettingsWrapBuff { get; set; }

        /// <summary>
        /// Gets or Sets CaptureSettingsMulticast
        /// </summary>
        [DataMember(Name = "capture_settings_multicast", EmitDefaultValue = false)]
        public string CaptureSettingsMulticast { get; set; }

        /// <summary>
        /// Gets or Sets CaptureSettingsIphelper
        /// </summary>
        [DataMember(Name = "capture_settings_iphelper", EmitDefaultValue = false)]
        public string CaptureSettingsIphelper { get; set; }

        /// <summary>
        /// Gets or Sets CaptureSettingsReassembled
        /// </summary>
        [DataMember(Name = "capture_settings_reassembled", EmitDefaultValue = false)]
        public string CaptureSettingsReassembled { get; set; }

        /// <summary>
        /// Gets or Sets CaptureSettingsFragmented
        /// </summary>
        [DataMember(Name = "capture_settings_fragmented", EmitDefaultValue = false)]
        public string CaptureSettingsFragmented { get; set; }

        /// <summary>
        /// Gets or Sets CaptureSettingsRemoteMirrored
        /// </summary>
        [DataMember(Name = "capture_settings_remote_mirrored", EmitDefaultValue = false)]
        public string CaptureSettingsRemoteMirrored { get; set; }

        /// <summary>
        /// Gets or Sets CaptureSettingsIpsec
        /// </summary>
        [DataMember(Name = "capture_settings_ipsec", EmitDefaultValue = false)]
        public string CaptureSettingsIpsec { get; set; }

        /// <summary>
        /// Gets or Sets CaptureSettingsSsl
        /// </summary>
        [DataMember(Name = "capture_settings_ssl", EmitDefaultValue = false)]
        public string CaptureSettingsSsl { get; set; }

        /// <summary>
        /// Gets or Sets CaptureSettingsRestorePortsSsl
        /// </summary>
        [DataMember(Name = "capture_settings_restore_ports_ssl", EmitDefaultValue = false)]
        public string CaptureSettingsRestorePortsSsl { get; set; }

        /// <summary>
        /// Gets or Sets CaptureSettingsFtpAutomatic
        /// </summary>
        [DataMember(Name = "capture_settings_ftp_automatic", EmitDefaultValue = false)]
        public string CaptureSettingsFtpAutomatic { get; set; }

        /// <summary>
        /// Gets or Sets CaptureSettingsFtpHtml
        /// </summary>
        [DataMember(Name = "capture_settings_ftp_html", EmitDefaultValue = false)]
        public string CaptureSettingsFtpHtml { get; set; }

        /// <summary>
        /// Gets or Sets CaptureSettingsFtpPcapng
        /// </summary>
        [DataMember(Name = "capture_settings_ftp_pcapng", EmitDefaultValue = false)]
        public string CaptureSettingsFtpPcapng { get; set; }

        /// <summary>
        /// Gets or Sets CaptureSettingsFirewallGenerated
        /// </summary>
        [DataMember(Name = "capture_settings_firewall_generated", EmitDefaultValue = false)]
        public string CaptureSettingsFirewallGenerated { get; set; }

        /// <summary>
        /// Gets or Sets CaptureSettingsBytesToCapture
        /// </summary>
        [DataMember(Name = "capture_settings_bytes_to_capture", EmitDefaultValue = false)]
        public string CaptureSettingsBytesToCapture { get; set; }

        /// <summary>
        /// Gets or Sets CaptureSettingsFtpServer
        /// </summary>
        [DataMember(Name = "capture_settings_ftp_server", EmitDefaultValue = false)]
        public string CaptureSettingsFtpServer { get; set; }

        /// <summary>
        /// Gets or Sets CaptureSettingsFtpPassword
        /// </summary>
        [DataMember(Name = "capture_settings_ftp_password", EmitDefaultValue = false)]
        public string CaptureSettingsFtpPassword { get; set; }

        /// <summary>
        /// Gets or Sets CaptureSettingsFtpLogin
        /// </summary>
        [DataMember(Name = "capture_settings_ftp_login", EmitDefaultValue = false)]
        public string CaptureSettingsFtpLogin { get; set; }

        /// <summary>
        /// Gets or Sets CaptureSettingsFtpDirectory
        /// </summary>
        [DataMember(Name = "capture_settings_ftp_directory", EmitDefaultValue = false)]
        public string CaptureSettingsFtpDirectory { get; set; }

        /// <summary>
        /// Gets or Sets CaptureSettingsIntermediate
        /// </summary>
        [DataMember(Name = "capture_settings_intermediate", EmitDefaultValue = false)]
        public string CaptureSettingsIntermediate { get; set; }

        /// <summary>
        /// Gets or Sets CaptureSettingsLdapOverTls
        /// </summary>
        [DataMember(Name = "capture_settings_ldap_over_tls", EmitDefaultValue = false)]
        public string CaptureSettingsLdapOverTls { get; set; }

        /// <summary>
        /// Gets or Sets CaptureSettingsSsoAgent
        /// </summary>
        [DataMember(Name = "capture_settings_sso_agent", EmitDefaultValue = false)]
        public string CaptureSettingsSsoAgent { get; set; }

        /// <summary>
        /// Gets or Sets CaptureSettingsExcludeManagementHttp
        /// </summary>
        [DataMember(Name = "capture_settings_exclude_management_http", EmitDefaultValue = false)]
        public string CaptureSettingsExcludeManagementHttp { get; set; }

        /// <summary>
        /// Gets or Sets CaptureSettingsExcludeManagementSnmp
        /// </summary>
        [DataMember(Name = "capture_settings_exclude_management_snmp", EmitDefaultValue = false)]
        public string CaptureSettingsExcludeManagementSnmp { get; set; }

        /// <summary>
        /// Gets or Sets CaptureSettingsExcludeManagementSsh
        /// </summary>
        [DataMember(Name = "capture_settings_exclude_management_ssh", EmitDefaultValue = false)]
        public string CaptureSettingsExcludeManagementSsh { get; set; }

        /// <summary>
        /// Gets or Sets CaptureSettingsExcludeSyslogServers
        /// </summary>
        [DataMember(Name = "capture_settings_exclude_syslog_servers", EmitDefaultValue = false)]
        public string CaptureSettingsExcludeSyslogServers { get; set; }

        /// <summary>
        /// Gets or Sets CaptureSettingsExcludeGmsServer
        /// </summary>
        [DataMember(Name = "capture_settings_exclude_gms_server", EmitDefaultValue = false)]
        public string CaptureSettingsExcludeGmsServer { get; set; }

        /// <summary>
        /// Gets or Sets CaptureSettingsExcludeEncryptedGms
        /// </summary>
        [DataMember(Name = "capture_settings_exclude_encrypted_gms", EmitDefaultValue = false)]
        public string CaptureSettingsExcludeEncryptedGms { get; set; }

        /// <summary>
        /// Gets or Sets CaptureSettingsExcludeEncryptedMgms
        /// </summary>
        [DataMember(Name = "capture_settings_exclude_encrypted_mgms", EmitDefaultValue = false)]
        public string CaptureSettingsExcludeEncryptedMgms { get; set; }

        /// <summary>
        /// Gets or Sets CaptureSettingsExcludeInternalTrafficHa
        /// </summary>
        [DataMember(Name = "capture_settings_exclude_internal_traffic_ha", EmitDefaultValue = false)]
        public string CaptureSettingsExcludeInternalTrafficHa { get; set; }

        /// <summary>
        /// Gets or Sets CaptureSettingsExcludeInternalTrafficSonicpoint
        /// </summary>
        [DataMember(Name = "capture_settings_exclude_internal_traffic_sonicpoint", EmitDefaultValue = false)]
        public string CaptureSettingsExcludeInternalTrafficSonicpoint { get; set; }

        /// <summary>
        /// Gets or Sets CaptureFilterInterfaceName
        /// </summary>
        [DataMember(Name = "capture_filter_interface_name", EmitDefaultValue = false)]
        public string CaptureFilterInterfaceName { get; set; }

        /// <summary>
        /// Gets or Sets CaptureFilterEtherType
        /// </summary>
        [DataMember(Name = "capture_filter_ether_type", EmitDefaultValue = false)]
        public string CaptureFilterEtherType { get; set; }

        /// <summary>
        /// Gets or Sets CaptureFilterIpType
        /// </summary>
        [DataMember(Name = "capture_filter_ip_type", EmitDefaultValue = false)]
        public string CaptureFilterIpType { get; set; }

        /// <summary>
        /// Gets or Sets CaptureFilterSourceIp
        /// </summary>
        [DataMember(Name = "capture_filter_source_ip", EmitDefaultValue = false)]
        public string CaptureFilterSourceIp { get; set; }

        /// <summary>
        /// Gets or Sets CaptureFilterSourcePort
        /// </summary>
        [DataMember(Name = "capture_filter_source_port", EmitDefaultValue = false)]
        public string CaptureFilterSourcePort { get; set; }

        /// <summary>
        /// Gets or Sets CaptureFilterDestinationIp
        /// </summary>
        [DataMember(Name = "capture_filter_destination_ip", EmitDefaultValue = false)]
        public string CaptureFilterDestinationIp { get; set; }

        /// <summary>
        /// Gets or Sets CaptureFilterDestinationPort
        /// </summary>
        [DataMember(Name = "capture_filter_destination_port", EmitDefaultValue = false)]
        public string CaptureFilterDestinationPort { get; set; }

        /// <summary>
        /// Gets or Sets CaptureFilterFirewallRule
        /// </summary>
        [DataMember(Name = "capture_filter_firewall_rule", EmitDefaultValue = false)]
        public string CaptureFilterFirewallRule { get; set; }

        /// <summary>
        /// Gets or Sets CaptureFilterBidirectional
        /// </summary>
        [DataMember(Name = "capture_filter_bidirectional", EmitDefaultValue = false)]
        public string CaptureFilterBidirectional { get; set; }

        /// <summary>
        /// Gets or Sets CaptureFilterForwarded
        /// </summary>
        [DataMember(Name = "capture_filter_forwarded", EmitDefaultValue = false)]
        public string CaptureFilterForwarded { get; set; }

        /// <summary>
        /// Gets or Sets CaptureFilterGenerated
        /// </summary>
        [DataMember(Name = "capture_filter_generated", EmitDefaultValue = false)]
        public string CaptureFilterGenerated { get; set; }

        /// <summary>
        /// Gets or Sets CaptureFilterConsumed
        /// </summary>
        [DataMember(Name = "capture_filter_consumed", EmitDefaultValue = false)]
        public string CaptureFilterConsumed { get; set; }

        /// <summary>
        /// Gets or Sets CaptureFilterDropped
        /// </summary>
        [DataMember(Name = "capture_filter_dropped", EmitDefaultValue = false)]
        public string CaptureFilterDropped { get; set; }

        /// <summary>
        /// Gets or Sets InterfaceName
        /// </summary>
        [DataMember(Name = "interface_name", EmitDefaultValue = false)]
        public string InterfaceName { get; set; }

        /// <summary>
        /// Gets or Sets DisplayFilterEtherType
        /// </summary>
        [DataMember(Name = "display_filter_ether_type", EmitDefaultValue = false)]
        public string DisplayFilterEtherType { get; set; }

        /// <summary>
        /// Gets or Sets DisplayFilterIpType
        /// </summary>
        [DataMember(Name = "display_filter_ip_type", EmitDefaultValue = false)]
        public string DisplayFilterIpType { get; set; }

        /// <summary>
        /// Gets or Sets DisplayFilterSourceIp
        /// </summary>
        [DataMember(Name = "display_filter_source_ip", EmitDefaultValue = false)]
        public string DisplayFilterSourceIp { get; set; }

        /// <summary>
        /// Gets or Sets DisplayFilterSourcePort
        /// </summary>
        [DataMember(Name = "display_filter_source_port", EmitDefaultValue = false)]
        public string DisplayFilterSourcePort { get; set; }

        /// <summary>
        /// Gets or Sets DisplayFilterDestinationIp
        /// </summary>
        [DataMember(Name = "display_filter_destination_ip", EmitDefaultValue = false)]
        public string DisplayFilterDestinationIp { get; set; }

        /// <summary>
        /// Gets or Sets DisplayFilterDestinationPort
        /// </summary>
        [DataMember(Name = "display_filter_destination_port", EmitDefaultValue = false)]
        public string DisplayFilterDestinationPort { get; set; }

        /// <summary>
        /// Gets or Sets DisplayFilterBidirectional
        /// </summary>
        [DataMember(Name = "display_filter_bidirectional", EmitDefaultValue = false)]
        public string DisplayFilterBidirectional { get; set; }

        /// <summary>
        /// Gets or Sets DisplayFilterForwarded
        /// </summary>
        [DataMember(Name = "display_filter_forwarded", EmitDefaultValue = false)]
        public string DisplayFilterForwarded { get; set; }

        /// <summary>
        /// Gets or Sets DisplayFilterGenerated
        /// </summary>
        [DataMember(Name = "display_filter_generated", EmitDefaultValue = false)]
        public string DisplayFilterGenerated { get; set; }

        /// <summary>
        /// Gets or Sets DisplayFilterConsumed
        /// </summary>
        [DataMember(Name = "display_filter_consumed", EmitDefaultValue = false)]
        public string DisplayFilterConsumed { get; set; }

        /// <summary>
        /// Gets or Sets DisplayFilterDropped
        /// </summary>
        [DataMember(Name = "display_filter_dropped", EmitDefaultValue = false)]
        public string DisplayFilterDropped { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusPacketMonitorTraceConfigDetail {\n");
            sb.Append("  MirrorFilteredPacketsToInterface: ").Append(MirrorFilteredPacketsToInterface).Append("\n");
            sb.Append("  MirrorSettingsOnlyIpPackets: ").Append(MirrorSettingsOnlyIpPackets).Append("\n");
            sb.Append("  MirrorSettingsInterface: ").Append(MirrorSettingsInterface).Append("\n");
            sb.Append("  MirrorSettingsMaxRate: ").Append(MirrorSettingsMaxRate).Append("\n");
            sb.Append("  MirrorSettingsForwardInterface: ").Append(MirrorSettingsForwardInterface).Append("\n");
            sb.Append("  MirrorSettingsToCaptureBuffer: ").Append(MirrorSettingsToCaptureBuffer).Append("\n");
            sb.Append("  MirrorSettingsIp: ").Append(MirrorSettingsIp).Append("\n");
            sb.Append("  MirrorSettingsReceiveFromIp: ").Append(MirrorSettingsReceiveFromIp).Append("\n");
            sb.Append("  MirrorSettingsEncryptKey: ").Append(MirrorSettingsEncryptKey).Append("\n");
            sb.Append("  CaptureSettingsWrapBuff: ").Append(CaptureSettingsWrapBuff).Append("\n");
            sb.Append("  CaptureSettingsMulticast: ").Append(CaptureSettingsMulticast).Append("\n");
            sb.Append("  CaptureSettingsIphelper: ").Append(CaptureSettingsIphelper).Append("\n");
            sb.Append("  CaptureSettingsReassembled: ").Append(CaptureSettingsReassembled).Append("\n");
            sb.Append("  CaptureSettingsFragmented: ").Append(CaptureSettingsFragmented).Append("\n");
            sb.Append("  CaptureSettingsRemoteMirrored: ").Append(CaptureSettingsRemoteMirrored).Append("\n");
            sb.Append("  CaptureSettingsIpsec: ").Append(CaptureSettingsIpsec).Append("\n");
            sb.Append("  CaptureSettingsSsl: ").Append(CaptureSettingsSsl).Append("\n");
            sb.Append("  CaptureSettingsRestorePortsSsl: ").Append(CaptureSettingsRestorePortsSsl).Append("\n");
            sb.Append("  CaptureSettingsFtpAutomatic: ").Append(CaptureSettingsFtpAutomatic).Append("\n");
            sb.Append("  CaptureSettingsFtpHtml: ").Append(CaptureSettingsFtpHtml).Append("\n");
            sb.Append("  CaptureSettingsFtpPcapng: ").Append(CaptureSettingsFtpPcapng).Append("\n");
            sb.Append("  CaptureSettingsFirewallGenerated: ").Append(CaptureSettingsFirewallGenerated).Append("\n");
            sb.Append("  CaptureSettingsBytesToCapture: ").Append(CaptureSettingsBytesToCapture).Append("\n");
            sb.Append("  CaptureSettingsFtpServer: ").Append(CaptureSettingsFtpServer).Append("\n");
            sb.Append("  CaptureSettingsFtpPassword: ").Append(CaptureSettingsFtpPassword).Append("\n");
            sb.Append("  CaptureSettingsFtpLogin: ").Append(CaptureSettingsFtpLogin).Append("\n");
            sb.Append("  CaptureSettingsFtpDirectory: ").Append(CaptureSettingsFtpDirectory).Append("\n");
            sb.Append("  CaptureSettingsIntermediate: ").Append(CaptureSettingsIntermediate).Append("\n");
            sb.Append("  CaptureSettingsLdapOverTls: ").Append(CaptureSettingsLdapOverTls).Append("\n");
            sb.Append("  CaptureSettingsSsoAgent: ").Append(CaptureSettingsSsoAgent).Append("\n");
            sb.Append("  CaptureSettingsExcludeManagementHttp: ").Append(CaptureSettingsExcludeManagementHttp).Append("\n");
            sb.Append("  CaptureSettingsExcludeManagementSnmp: ").Append(CaptureSettingsExcludeManagementSnmp).Append("\n");
            sb.Append("  CaptureSettingsExcludeManagementSsh: ").Append(CaptureSettingsExcludeManagementSsh).Append("\n");
            sb.Append("  CaptureSettingsExcludeSyslogServers: ").Append(CaptureSettingsExcludeSyslogServers).Append("\n");
            sb.Append("  CaptureSettingsExcludeGmsServer: ").Append(CaptureSettingsExcludeGmsServer).Append("\n");
            sb.Append("  CaptureSettingsExcludeEncryptedGms: ").Append(CaptureSettingsExcludeEncryptedGms).Append("\n");
            sb.Append("  CaptureSettingsExcludeEncryptedMgms: ").Append(CaptureSettingsExcludeEncryptedMgms).Append("\n");
            sb.Append("  CaptureSettingsExcludeInternalTrafficHa: ").Append(CaptureSettingsExcludeInternalTrafficHa).Append("\n");
            sb.Append("  CaptureSettingsExcludeInternalTrafficSonicpoint: ").Append(CaptureSettingsExcludeInternalTrafficSonicpoint).Append("\n");
            sb.Append("  CaptureFilterInterfaceName: ").Append(CaptureFilterInterfaceName).Append("\n");
            sb.Append("  CaptureFilterEtherType: ").Append(CaptureFilterEtherType).Append("\n");
            sb.Append("  CaptureFilterIpType: ").Append(CaptureFilterIpType).Append("\n");
            sb.Append("  CaptureFilterSourceIp: ").Append(CaptureFilterSourceIp).Append("\n");
            sb.Append("  CaptureFilterSourcePort: ").Append(CaptureFilterSourcePort).Append("\n");
            sb.Append("  CaptureFilterDestinationIp: ").Append(CaptureFilterDestinationIp).Append("\n");
            sb.Append("  CaptureFilterDestinationPort: ").Append(CaptureFilterDestinationPort).Append("\n");
            sb.Append("  CaptureFilterFirewallRule: ").Append(CaptureFilterFirewallRule).Append("\n");
            sb.Append("  CaptureFilterBidirectional: ").Append(CaptureFilterBidirectional).Append("\n");
            sb.Append("  CaptureFilterForwarded: ").Append(CaptureFilterForwarded).Append("\n");
            sb.Append("  CaptureFilterGenerated: ").Append(CaptureFilterGenerated).Append("\n");
            sb.Append("  CaptureFilterConsumed: ").Append(CaptureFilterConsumed).Append("\n");
            sb.Append("  CaptureFilterDropped: ").Append(CaptureFilterDropped).Append("\n");
            sb.Append("  InterfaceName: ").Append(InterfaceName).Append("\n");
            sb.Append("  DisplayFilterEtherType: ").Append(DisplayFilterEtherType).Append("\n");
            sb.Append("  DisplayFilterIpType: ").Append(DisplayFilterIpType).Append("\n");
            sb.Append("  DisplayFilterSourceIp: ").Append(DisplayFilterSourceIp).Append("\n");
            sb.Append("  DisplayFilterSourcePort: ").Append(DisplayFilterSourcePort).Append("\n");
            sb.Append("  DisplayFilterDestinationIp: ").Append(DisplayFilterDestinationIp).Append("\n");
            sb.Append("  DisplayFilterDestinationPort: ").Append(DisplayFilterDestinationPort).Append("\n");
            sb.Append("  DisplayFilterBidirectional: ").Append(DisplayFilterBidirectional).Append("\n");
            sb.Append("  DisplayFilterForwarded: ").Append(DisplayFilterForwarded).Append("\n");
            sb.Append("  DisplayFilterGenerated: ").Append(DisplayFilterGenerated).Append("\n");
            sb.Append("  DisplayFilterConsumed: ").Append(DisplayFilterConsumed).Append("\n");
            sb.Append("  DisplayFilterDropped: ").Append(DisplayFilterDropped).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusPacketMonitorTraceConfigDetail);
        }

        /// <summary>
        /// Returns true if ShowStatusPacketMonitorTraceConfigDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusPacketMonitorTraceConfigDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusPacketMonitorTraceConfigDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MirrorFilteredPacketsToInterface == input.MirrorFilteredPacketsToInterface ||
                    (this.MirrorFilteredPacketsToInterface != null &&
                    this.MirrorFilteredPacketsToInterface.Equals(input.MirrorFilteredPacketsToInterface))
                ) && 
                (
                    this.MirrorSettingsOnlyIpPackets == input.MirrorSettingsOnlyIpPackets ||
                    (this.MirrorSettingsOnlyIpPackets != null &&
                    this.MirrorSettingsOnlyIpPackets.Equals(input.MirrorSettingsOnlyIpPackets))
                ) && 
                (
                    this.MirrorSettingsInterface == input.MirrorSettingsInterface ||
                    (this.MirrorSettingsInterface != null &&
                    this.MirrorSettingsInterface.Equals(input.MirrorSettingsInterface))
                ) && 
                (
                    this.MirrorSettingsMaxRate == input.MirrorSettingsMaxRate ||
                    (this.MirrorSettingsMaxRate != null &&
                    this.MirrorSettingsMaxRate.Equals(input.MirrorSettingsMaxRate))
                ) && 
                (
                    this.MirrorSettingsForwardInterface == input.MirrorSettingsForwardInterface ||
                    (this.MirrorSettingsForwardInterface != null &&
                    this.MirrorSettingsForwardInterface.Equals(input.MirrorSettingsForwardInterface))
                ) && 
                (
                    this.MirrorSettingsToCaptureBuffer == input.MirrorSettingsToCaptureBuffer ||
                    (this.MirrorSettingsToCaptureBuffer != null &&
                    this.MirrorSettingsToCaptureBuffer.Equals(input.MirrorSettingsToCaptureBuffer))
                ) && 
                (
                    this.MirrorSettingsIp == input.MirrorSettingsIp ||
                    (this.MirrorSettingsIp != null &&
                    this.MirrorSettingsIp.Equals(input.MirrorSettingsIp))
                ) && 
                (
                    this.MirrorSettingsReceiveFromIp == input.MirrorSettingsReceiveFromIp ||
                    (this.MirrorSettingsReceiveFromIp != null &&
                    this.MirrorSettingsReceiveFromIp.Equals(input.MirrorSettingsReceiveFromIp))
                ) && 
                (
                    this.MirrorSettingsEncryptKey == input.MirrorSettingsEncryptKey ||
                    (this.MirrorSettingsEncryptKey != null &&
                    this.MirrorSettingsEncryptKey.Equals(input.MirrorSettingsEncryptKey))
                ) && 
                (
                    this.CaptureSettingsWrapBuff == input.CaptureSettingsWrapBuff ||
                    (this.CaptureSettingsWrapBuff != null &&
                    this.CaptureSettingsWrapBuff.Equals(input.CaptureSettingsWrapBuff))
                ) && 
                (
                    this.CaptureSettingsMulticast == input.CaptureSettingsMulticast ||
                    (this.CaptureSettingsMulticast != null &&
                    this.CaptureSettingsMulticast.Equals(input.CaptureSettingsMulticast))
                ) && 
                (
                    this.CaptureSettingsIphelper == input.CaptureSettingsIphelper ||
                    (this.CaptureSettingsIphelper != null &&
                    this.CaptureSettingsIphelper.Equals(input.CaptureSettingsIphelper))
                ) && 
                (
                    this.CaptureSettingsReassembled == input.CaptureSettingsReassembled ||
                    (this.CaptureSettingsReassembled != null &&
                    this.CaptureSettingsReassembled.Equals(input.CaptureSettingsReassembled))
                ) && 
                (
                    this.CaptureSettingsFragmented == input.CaptureSettingsFragmented ||
                    (this.CaptureSettingsFragmented != null &&
                    this.CaptureSettingsFragmented.Equals(input.CaptureSettingsFragmented))
                ) && 
                (
                    this.CaptureSettingsRemoteMirrored == input.CaptureSettingsRemoteMirrored ||
                    (this.CaptureSettingsRemoteMirrored != null &&
                    this.CaptureSettingsRemoteMirrored.Equals(input.CaptureSettingsRemoteMirrored))
                ) && 
                (
                    this.CaptureSettingsIpsec == input.CaptureSettingsIpsec ||
                    (this.CaptureSettingsIpsec != null &&
                    this.CaptureSettingsIpsec.Equals(input.CaptureSettingsIpsec))
                ) && 
                (
                    this.CaptureSettingsSsl == input.CaptureSettingsSsl ||
                    (this.CaptureSettingsSsl != null &&
                    this.CaptureSettingsSsl.Equals(input.CaptureSettingsSsl))
                ) && 
                (
                    this.CaptureSettingsRestorePortsSsl == input.CaptureSettingsRestorePortsSsl ||
                    (this.CaptureSettingsRestorePortsSsl != null &&
                    this.CaptureSettingsRestorePortsSsl.Equals(input.CaptureSettingsRestorePortsSsl))
                ) && 
                (
                    this.CaptureSettingsFtpAutomatic == input.CaptureSettingsFtpAutomatic ||
                    (this.CaptureSettingsFtpAutomatic != null &&
                    this.CaptureSettingsFtpAutomatic.Equals(input.CaptureSettingsFtpAutomatic))
                ) && 
                (
                    this.CaptureSettingsFtpHtml == input.CaptureSettingsFtpHtml ||
                    (this.CaptureSettingsFtpHtml != null &&
                    this.CaptureSettingsFtpHtml.Equals(input.CaptureSettingsFtpHtml))
                ) && 
                (
                    this.CaptureSettingsFtpPcapng == input.CaptureSettingsFtpPcapng ||
                    (this.CaptureSettingsFtpPcapng != null &&
                    this.CaptureSettingsFtpPcapng.Equals(input.CaptureSettingsFtpPcapng))
                ) && 
                (
                    this.CaptureSettingsFirewallGenerated == input.CaptureSettingsFirewallGenerated ||
                    (this.CaptureSettingsFirewallGenerated != null &&
                    this.CaptureSettingsFirewallGenerated.Equals(input.CaptureSettingsFirewallGenerated))
                ) && 
                (
                    this.CaptureSettingsBytesToCapture == input.CaptureSettingsBytesToCapture ||
                    (this.CaptureSettingsBytesToCapture != null &&
                    this.CaptureSettingsBytesToCapture.Equals(input.CaptureSettingsBytesToCapture))
                ) && 
                (
                    this.CaptureSettingsFtpServer == input.CaptureSettingsFtpServer ||
                    (this.CaptureSettingsFtpServer != null &&
                    this.CaptureSettingsFtpServer.Equals(input.CaptureSettingsFtpServer))
                ) && 
                (
                    this.CaptureSettingsFtpPassword == input.CaptureSettingsFtpPassword ||
                    (this.CaptureSettingsFtpPassword != null &&
                    this.CaptureSettingsFtpPassword.Equals(input.CaptureSettingsFtpPassword))
                ) && 
                (
                    this.CaptureSettingsFtpLogin == input.CaptureSettingsFtpLogin ||
                    (this.CaptureSettingsFtpLogin != null &&
                    this.CaptureSettingsFtpLogin.Equals(input.CaptureSettingsFtpLogin))
                ) && 
                (
                    this.CaptureSettingsFtpDirectory == input.CaptureSettingsFtpDirectory ||
                    (this.CaptureSettingsFtpDirectory != null &&
                    this.CaptureSettingsFtpDirectory.Equals(input.CaptureSettingsFtpDirectory))
                ) && 
                (
                    this.CaptureSettingsIntermediate == input.CaptureSettingsIntermediate ||
                    (this.CaptureSettingsIntermediate != null &&
                    this.CaptureSettingsIntermediate.Equals(input.CaptureSettingsIntermediate))
                ) && 
                (
                    this.CaptureSettingsLdapOverTls == input.CaptureSettingsLdapOverTls ||
                    (this.CaptureSettingsLdapOverTls != null &&
                    this.CaptureSettingsLdapOverTls.Equals(input.CaptureSettingsLdapOverTls))
                ) && 
                (
                    this.CaptureSettingsSsoAgent == input.CaptureSettingsSsoAgent ||
                    (this.CaptureSettingsSsoAgent != null &&
                    this.CaptureSettingsSsoAgent.Equals(input.CaptureSettingsSsoAgent))
                ) && 
                (
                    this.CaptureSettingsExcludeManagementHttp == input.CaptureSettingsExcludeManagementHttp ||
                    (this.CaptureSettingsExcludeManagementHttp != null &&
                    this.CaptureSettingsExcludeManagementHttp.Equals(input.CaptureSettingsExcludeManagementHttp))
                ) && 
                (
                    this.CaptureSettingsExcludeManagementSnmp == input.CaptureSettingsExcludeManagementSnmp ||
                    (this.CaptureSettingsExcludeManagementSnmp != null &&
                    this.CaptureSettingsExcludeManagementSnmp.Equals(input.CaptureSettingsExcludeManagementSnmp))
                ) && 
                (
                    this.CaptureSettingsExcludeManagementSsh == input.CaptureSettingsExcludeManagementSsh ||
                    (this.CaptureSettingsExcludeManagementSsh != null &&
                    this.CaptureSettingsExcludeManagementSsh.Equals(input.CaptureSettingsExcludeManagementSsh))
                ) && 
                (
                    this.CaptureSettingsExcludeSyslogServers == input.CaptureSettingsExcludeSyslogServers ||
                    (this.CaptureSettingsExcludeSyslogServers != null &&
                    this.CaptureSettingsExcludeSyslogServers.Equals(input.CaptureSettingsExcludeSyslogServers))
                ) && 
                (
                    this.CaptureSettingsExcludeGmsServer == input.CaptureSettingsExcludeGmsServer ||
                    (this.CaptureSettingsExcludeGmsServer != null &&
                    this.CaptureSettingsExcludeGmsServer.Equals(input.CaptureSettingsExcludeGmsServer))
                ) && 
                (
                    this.CaptureSettingsExcludeEncryptedGms == input.CaptureSettingsExcludeEncryptedGms ||
                    (this.CaptureSettingsExcludeEncryptedGms != null &&
                    this.CaptureSettingsExcludeEncryptedGms.Equals(input.CaptureSettingsExcludeEncryptedGms))
                ) && 
                (
                    this.CaptureSettingsExcludeEncryptedMgms == input.CaptureSettingsExcludeEncryptedMgms ||
                    (this.CaptureSettingsExcludeEncryptedMgms != null &&
                    this.CaptureSettingsExcludeEncryptedMgms.Equals(input.CaptureSettingsExcludeEncryptedMgms))
                ) && 
                (
                    this.CaptureSettingsExcludeInternalTrafficHa == input.CaptureSettingsExcludeInternalTrafficHa ||
                    (this.CaptureSettingsExcludeInternalTrafficHa != null &&
                    this.CaptureSettingsExcludeInternalTrafficHa.Equals(input.CaptureSettingsExcludeInternalTrafficHa))
                ) && 
                (
                    this.CaptureSettingsExcludeInternalTrafficSonicpoint == input.CaptureSettingsExcludeInternalTrafficSonicpoint ||
                    (this.CaptureSettingsExcludeInternalTrafficSonicpoint != null &&
                    this.CaptureSettingsExcludeInternalTrafficSonicpoint.Equals(input.CaptureSettingsExcludeInternalTrafficSonicpoint))
                ) && 
                (
                    this.CaptureFilterInterfaceName == input.CaptureFilterInterfaceName ||
                    (this.CaptureFilterInterfaceName != null &&
                    this.CaptureFilterInterfaceName.Equals(input.CaptureFilterInterfaceName))
                ) && 
                (
                    this.CaptureFilterEtherType == input.CaptureFilterEtherType ||
                    (this.CaptureFilterEtherType != null &&
                    this.CaptureFilterEtherType.Equals(input.CaptureFilterEtherType))
                ) && 
                (
                    this.CaptureFilterIpType == input.CaptureFilterIpType ||
                    (this.CaptureFilterIpType != null &&
                    this.CaptureFilterIpType.Equals(input.CaptureFilterIpType))
                ) && 
                (
                    this.CaptureFilterSourceIp == input.CaptureFilterSourceIp ||
                    (this.CaptureFilterSourceIp != null &&
                    this.CaptureFilterSourceIp.Equals(input.CaptureFilterSourceIp))
                ) && 
                (
                    this.CaptureFilterSourcePort == input.CaptureFilterSourcePort ||
                    (this.CaptureFilterSourcePort != null &&
                    this.CaptureFilterSourcePort.Equals(input.CaptureFilterSourcePort))
                ) && 
                (
                    this.CaptureFilterDestinationIp == input.CaptureFilterDestinationIp ||
                    (this.CaptureFilterDestinationIp != null &&
                    this.CaptureFilterDestinationIp.Equals(input.CaptureFilterDestinationIp))
                ) && 
                (
                    this.CaptureFilterDestinationPort == input.CaptureFilterDestinationPort ||
                    (this.CaptureFilterDestinationPort != null &&
                    this.CaptureFilterDestinationPort.Equals(input.CaptureFilterDestinationPort))
                ) && 
                (
                    this.CaptureFilterFirewallRule == input.CaptureFilterFirewallRule ||
                    (this.CaptureFilterFirewallRule != null &&
                    this.CaptureFilterFirewallRule.Equals(input.CaptureFilterFirewallRule))
                ) && 
                (
                    this.CaptureFilterBidirectional == input.CaptureFilterBidirectional ||
                    (this.CaptureFilterBidirectional != null &&
                    this.CaptureFilterBidirectional.Equals(input.CaptureFilterBidirectional))
                ) && 
                (
                    this.CaptureFilterForwarded == input.CaptureFilterForwarded ||
                    (this.CaptureFilterForwarded != null &&
                    this.CaptureFilterForwarded.Equals(input.CaptureFilterForwarded))
                ) && 
                (
                    this.CaptureFilterGenerated == input.CaptureFilterGenerated ||
                    (this.CaptureFilterGenerated != null &&
                    this.CaptureFilterGenerated.Equals(input.CaptureFilterGenerated))
                ) && 
                (
                    this.CaptureFilterConsumed == input.CaptureFilterConsumed ||
                    (this.CaptureFilterConsumed != null &&
                    this.CaptureFilterConsumed.Equals(input.CaptureFilterConsumed))
                ) && 
                (
                    this.CaptureFilterDropped == input.CaptureFilterDropped ||
                    (this.CaptureFilterDropped != null &&
                    this.CaptureFilterDropped.Equals(input.CaptureFilterDropped))
                ) && 
                (
                    this.InterfaceName == input.InterfaceName ||
                    (this.InterfaceName != null &&
                    this.InterfaceName.Equals(input.InterfaceName))
                ) && 
                (
                    this.DisplayFilterEtherType == input.DisplayFilterEtherType ||
                    (this.DisplayFilterEtherType != null &&
                    this.DisplayFilterEtherType.Equals(input.DisplayFilterEtherType))
                ) && 
                (
                    this.DisplayFilterIpType == input.DisplayFilterIpType ||
                    (this.DisplayFilterIpType != null &&
                    this.DisplayFilterIpType.Equals(input.DisplayFilterIpType))
                ) && 
                (
                    this.DisplayFilterSourceIp == input.DisplayFilterSourceIp ||
                    (this.DisplayFilterSourceIp != null &&
                    this.DisplayFilterSourceIp.Equals(input.DisplayFilterSourceIp))
                ) && 
                (
                    this.DisplayFilterSourcePort == input.DisplayFilterSourcePort ||
                    (this.DisplayFilterSourcePort != null &&
                    this.DisplayFilterSourcePort.Equals(input.DisplayFilterSourcePort))
                ) && 
                (
                    this.DisplayFilterDestinationIp == input.DisplayFilterDestinationIp ||
                    (this.DisplayFilterDestinationIp != null &&
                    this.DisplayFilterDestinationIp.Equals(input.DisplayFilterDestinationIp))
                ) && 
                (
                    this.DisplayFilterDestinationPort == input.DisplayFilterDestinationPort ||
                    (this.DisplayFilterDestinationPort != null &&
                    this.DisplayFilterDestinationPort.Equals(input.DisplayFilterDestinationPort))
                ) && 
                (
                    this.DisplayFilterBidirectional == input.DisplayFilterBidirectional ||
                    (this.DisplayFilterBidirectional != null &&
                    this.DisplayFilterBidirectional.Equals(input.DisplayFilterBidirectional))
                ) && 
                (
                    this.DisplayFilterForwarded == input.DisplayFilterForwarded ||
                    (this.DisplayFilterForwarded != null &&
                    this.DisplayFilterForwarded.Equals(input.DisplayFilterForwarded))
                ) && 
                (
                    this.DisplayFilterGenerated == input.DisplayFilterGenerated ||
                    (this.DisplayFilterGenerated != null &&
                    this.DisplayFilterGenerated.Equals(input.DisplayFilterGenerated))
                ) && 
                (
                    this.DisplayFilterConsumed == input.DisplayFilterConsumed ||
                    (this.DisplayFilterConsumed != null &&
                    this.DisplayFilterConsumed.Equals(input.DisplayFilterConsumed))
                ) && 
                (
                    this.DisplayFilterDropped == input.DisplayFilterDropped ||
                    (this.DisplayFilterDropped != null &&
                    this.DisplayFilterDropped.Equals(input.DisplayFilterDropped))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MirrorFilteredPacketsToInterface != null)
                {
                    hashCode = (hashCode * 59) + this.MirrorFilteredPacketsToInterface.GetHashCode();
                }
                if (this.MirrorSettingsOnlyIpPackets != null)
                {
                    hashCode = (hashCode * 59) + this.MirrorSettingsOnlyIpPackets.GetHashCode();
                }
                if (this.MirrorSettingsInterface != null)
                {
                    hashCode = (hashCode * 59) + this.MirrorSettingsInterface.GetHashCode();
                }
                if (this.MirrorSettingsMaxRate != null)
                {
                    hashCode = (hashCode * 59) + this.MirrorSettingsMaxRate.GetHashCode();
                }
                if (this.MirrorSettingsForwardInterface != null)
                {
                    hashCode = (hashCode * 59) + this.MirrorSettingsForwardInterface.GetHashCode();
                }
                if (this.MirrorSettingsToCaptureBuffer != null)
                {
                    hashCode = (hashCode * 59) + this.MirrorSettingsToCaptureBuffer.GetHashCode();
                }
                if (this.MirrorSettingsIp != null)
                {
                    hashCode = (hashCode * 59) + this.MirrorSettingsIp.GetHashCode();
                }
                if (this.MirrorSettingsReceiveFromIp != null)
                {
                    hashCode = (hashCode * 59) + this.MirrorSettingsReceiveFromIp.GetHashCode();
                }
                if (this.MirrorSettingsEncryptKey != null)
                {
                    hashCode = (hashCode * 59) + this.MirrorSettingsEncryptKey.GetHashCode();
                }
                if (this.CaptureSettingsWrapBuff != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureSettingsWrapBuff.GetHashCode();
                }
                if (this.CaptureSettingsMulticast != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureSettingsMulticast.GetHashCode();
                }
                if (this.CaptureSettingsIphelper != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureSettingsIphelper.GetHashCode();
                }
                if (this.CaptureSettingsReassembled != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureSettingsReassembled.GetHashCode();
                }
                if (this.CaptureSettingsFragmented != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureSettingsFragmented.GetHashCode();
                }
                if (this.CaptureSettingsRemoteMirrored != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureSettingsRemoteMirrored.GetHashCode();
                }
                if (this.CaptureSettingsIpsec != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureSettingsIpsec.GetHashCode();
                }
                if (this.CaptureSettingsSsl != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureSettingsSsl.GetHashCode();
                }
                if (this.CaptureSettingsRestorePortsSsl != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureSettingsRestorePortsSsl.GetHashCode();
                }
                if (this.CaptureSettingsFtpAutomatic != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureSettingsFtpAutomatic.GetHashCode();
                }
                if (this.CaptureSettingsFtpHtml != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureSettingsFtpHtml.GetHashCode();
                }
                if (this.CaptureSettingsFtpPcapng != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureSettingsFtpPcapng.GetHashCode();
                }
                if (this.CaptureSettingsFirewallGenerated != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureSettingsFirewallGenerated.GetHashCode();
                }
                if (this.CaptureSettingsBytesToCapture != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureSettingsBytesToCapture.GetHashCode();
                }
                if (this.CaptureSettingsFtpServer != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureSettingsFtpServer.GetHashCode();
                }
                if (this.CaptureSettingsFtpPassword != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureSettingsFtpPassword.GetHashCode();
                }
                if (this.CaptureSettingsFtpLogin != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureSettingsFtpLogin.GetHashCode();
                }
                if (this.CaptureSettingsFtpDirectory != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureSettingsFtpDirectory.GetHashCode();
                }
                if (this.CaptureSettingsIntermediate != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureSettingsIntermediate.GetHashCode();
                }
                if (this.CaptureSettingsLdapOverTls != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureSettingsLdapOverTls.GetHashCode();
                }
                if (this.CaptureSettingsSsoAgent != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureSettingsSsoAgent.GetHashCode();
                }
                if (this.CaptureSettingsExcludeManagementHttp != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureSettingsExcludeManagementHttp.GetHashCode();
                }
                if (this.CaptureSettingsExcludeManagementSnmp != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureSettingsExcludeManagementSnmp.GetHashCode();
                }
                if (this.CaptureSettingsExcludeManagementSsh != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureSettingsExcludeManagementSsh.GetHashCode();
                }
                if (this.CaptureSettingsExcludeSyslogServers != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureSettingsExcludeSyslogServers.GetHashCode();
                }
                if (this.CaptureSettingsExcludeGmsServer != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureSettingsExcludeGmsServer.GetHashCode();
                }
                if (this.CaptureSettingsExcludeEncryptedGms != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureSettingsExcludeEncryptedGms.GetHashCode();
                }
                if (this.CaptureSettingsExcludeEncryptedMgms != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureSettingsExcludeEncryptedMgms.GetHashCode();
                }
                if (this.CaptureSettingsExcludeInternalTrafficHa != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureSettingsExcludeInternalTrafficHa.GetHashCode();
                }
                if (this.CaptureSettingsExcludeInternalTrafficSonicpoint != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureSettingsExcludeInternalTrafficSonicpoint.GetHashCode();
                }
                if (this.CaptureFilterInterfaceName != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureFilterInterfaceName.GetHashCode();
                }
                if (this.CaptureFilterEtherType != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureFilterEtherType.GetHashCode();
                }
                if (this.CaptureFilterIpType != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureFilterIpType.GetHashCode();
                }
                if (this.CaptureFilterSourceIp != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureFilterSourceIp.GetHashCode();
                }
                if (this.CaptureFilterSourcePort != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureFilterSourcePort.GetHashCode();
                }
                if (this.CaptureFilterDestinationIp != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureFilterDestinationIp.GetHashCode();
                }
                if (this.CaptureFilterDestinationPort != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureFilterDestinationPort.GetHashCode();
                }
                if (this.CaptureFilterFirewallRule != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureFilterFirewallRule.GetHashCode();
                }
                if (this.CaptureFilterBidirectional != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureFilterBidirectional.GetHashCode();
                }
                if (this.CaptureFilterForwarded != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureFilterForwarded.GetHashCode();
                }
                if (this.CaptureFilterGenerated != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureFilterGenerated.GetHashCode();
                }
                if (this.CaptureFilterConsumed != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureFilterConsumed.GetHashCode();
                }
                if (this.CaptureFilterDropped != null)
                {
                    hashCode = (hashCode * 59) + this.CaptureFilterDropped.GetHashCode();
                }
                if (this.InterfaceName != null)
                {
                    hashCode = (hashCode * 59) + this.InterfaceName.GetHashCode();
                }
                if (this.DisplayFilterEtherType != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayFilterEtherType.GetHashCode();
                }
                if (this.DisplayFilterIpType != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayFilterIpType.GetHashCode();
                }
                if (this.DisplayFilterSourceIp != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayFilterSourceIp.GetHashCode();
                }
                if (this.DisplayFilterSourcePort != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayFilterSourcePort.GetHashCode();
                }
                if (this.DisplayFilterDestinationIp != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayFilterDestinationIp.GetHashCode();
                }
                if (this.DisplayFilterDestinationPort != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayFilterDestinationPort.GetHashCode();
                }
                if (this.DisplayFilterBidirectional != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayFilterBidirectional.GetHashCode();
                }
                if (this.DisplayFilterForwarded != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayFilterForwarded.GetHashCode();
                }
                if (this.DisplayFilterGenerated != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayFilterGenerated.GetHashCode();
                }
                if (this.DisplayFilterConsumed != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayFilterConsumed.GetHashCode();
                }
                if (this.DisplayFilterDropped != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayFilterDropped.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
