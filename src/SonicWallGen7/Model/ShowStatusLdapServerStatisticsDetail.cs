/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// ldap server statistics detail schema.
    /// </summary>
    [DataContract(Name = "show_status_ldap_server_statistics_detail")]
    public partial class ShowStatusLdapServerStatisticsDetail : IEquatable<ShowStatusLdapServerStatisticsDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusLdapServerStatisticsDetail" /> class.
        /// </summary>
        /// <param name="server">server.</param>
        /// <param name="ipAddress">ipAddress.</param>
        /// <param name="status">status.</param>
        /// <param name="authRequests">authRequests.</param>
        /// <param name="authRequestFailures">authRequestFailures.</param>
        /// <param name="userInfoRequests">userInfoRequests.</param>
        /// <param name="userInfoFailures">userInfoFailures.</param>
        /// <param name="bindRequests">bindRequests.</param>
        /// <param name="bindFailures">bindFailures.</param>
        /// <param name="searchRequests">searchRequests.</param>
        /// <param name="searchFailures">searchFailures.</param>
        /// <param name="connectivityRequests">connectivityRequests.</param>
        /// <param name="connectivityErrors">connectivityErrors.</param>
        /// <param name="sendRequestFailures">sendRequestFailures.</param>
        /// <param name="serverTimeouts">serverTimeouts.</param>
        /// <param name="serverDownErrors">serverDownErrors.</param>
        /// <param name="otherServerRequestErrors">otherServerRequestErrors.</param>
        /// <param name="maximumConcurrentRequests">maximumConcurrentRequests.</param>
        /// <param name="currentConnections">currentConnections.</param>
        /// <param name="maxConnections">maxConnections.</param>
        /// <param name="maximumSuccessfulSearchTime">maximumSuccessfulSearchTime.</param>
        /// <param name="maximumUserOrGroupSearchTime">maximumUserOrGroupSearchTime.</param>
        /// <param name="maxAdditionalUserGroupSearchTime">maxAdditionalUserGroupSearchTime.</param>
        /// <param name="lastError">lastError.</param>
        public ShowStatusLdapServerStatisticsDetail(string server = default(string), string ipAddress = default(string), string status = default(string), string authRequests = default(string), string authRequestFailures = default(string), string userInfoRequests = default(string), string userInfoFailures = default(string), string bindRequests = default(string), string bindFailures = default(string), string searchRequests = default(string), string searchFailures = default(string), string connectivityRequests = default(string), string connectivityErrors = default(string), string sendRequestFailures = default(string), string serverTimeouts = default(string), string serverDownErrors = default(string), string otherServerRequestErrors = default(string), string maximumConcurrentRequests = default(string), string currentConnections = default(string), string maxConnections = default(string), string maximumSuccessfulSearchTime = default(string), string maximumUserOrGroupSearchTime = default(string), string maxAdditionalUserGroupSearchTime = default(string), string lastError = default(string))
        {
            this.Server = server;
            this.IpAddress = ipAddress;
            this.Status = status;
            this.AuthRequests = authRequests;
            this.AuthRequestFailures = authRequestFailures;
            this.UserInfoRequests = userInfoRequests;
            this.UserInfoFailures = userInfoFailures;
            this.BindRequests = bindRequests;
            this.BindFailures = bindFailures;
            this.SearchRequests = searchRequests;
            this.SearchFailures = searchFailures;
            this.ConnectivityRequests = connectivityRequests;
            this.ConnectivityErrors = connectivityErrors;
            this.SendRequestFailures = sendRequestFailures;
            this.ServerTimeouts = serverTimeouts;
            this.ServerDownErrors = serverDownErrors;
            this.OtherServerRequestErrors = otherServerRequestErrors;
            this.MaximumConcurrentRequests = maximumConcurrentRequests;
            this.CurrentConnections = currentConnections;
            this.MaxConnections = maxConnections;
            this.MaximumSuccessfulSearchTime = maximumSuccessfulSearchTime;
            this.MaximumUserOrGroupSearchTime = maximumUserOrGroupSearchTime;
            this.MaxAdditionalUserGroupSearchTime = maxAdditionalUserGroupSearchTime;
            this.LastError = lastError;
        }

        /// <summary>
        /// Gets or Sets Server
        /// </summary>
        [DataMember(Name = "server", EmitDefaultValue = false)]
        public string Server { get; set; }

        /// <summary>
        /// Gets or Sets IpAddress
        /// </summary>
        [DataMember(Name = "ip_address", EmitDefaultValue = false)]
        public string IpAddress { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets AuthRequests
        /// </summary>
        [DataMember(Name = "auth_requests", EmitDefaultValue = false)]
        public string AuthRequests { get; set; }

        /// <summary>
        /// Gets or Sets AuthRequestFailures
        /// </summary>
        [DataMember(Name = "auth_request_failures", EmitDefaultValue = false)]
        public string AuthRequestFailures { get; set; }

        /// <summary>
        /// Gets or Sets UserInfoRequests
        /// </summary>
        [DataMember(Name = "user_info_requests", EmitDefaultValue = false)]
        public string UserInfoRequests { get; set; }

        /// <summary>
        /// Gets or Sets UserInfoFailures
        /// </summary>
        [DataMember(Name = "user_info_failures", EmitDefaultValue = false)]
        public string UserInfoFailures { get; set; }

        /// <summary>
        /// Gets or Sets BindRequests
        /// </summary>
        [DataMember(Name = "bind_requests", EmitDefaultValue = false)]
        public string BindRequests { get; set; }

        /// <summary>
        /// Gets or Sets BindFailures
        /// </summary>
        [DataMember(Name = "bind_failures", EmitDefaultValue = false)]
        public string BindFailures { get; set; }

        /// <summary>
        /// Gets or Sets SearchRequests
        /// </summary>
        [DataMember(Name = "search_requests", EmitDefaultValue = false)]
        public string SearchRequests { get; set; }

        /// <summary>
        /// Gets or Sets SearchFailures
        /// </summary>
        [DataMember(Name = "search_failures", EmitDefaultValue = false)]
        public string SearchFailures { get; set; }

        /// <summary>
        /// Gets or Sets ConnectivityRequests
        /// </summary>
        [DataMember(Name = "connectivity_requests", EmitDefaultValue = false)]
        public string ConnectivityRequests { get; set; }

        /// <summary>
        /// Gets or Sets ConnectivityErrors
        /// </summary>
        [DataMember(Name = "connectivity_errors", EmitDefaultValue = false)]
        public string ConnectivityErrors { get; set; }

        /// <summary>
        /// Gets or Sets SendRequestFailures
        /// </summary>
        [DataMember(Name = "send_request_failures", EmitDefaultValue = false)]
        public string SendRequestFailures { get; set; }

        /// <summary>
        /// Gets or Sets ServerTimeouts
        /// </summary>
        [DataMember(Name = "server_timeouts", EmitDefaultValue = false)]
        public string ServerTimeouts { get; set; }

        /// <summary>
        /// Gets or Sets ServerDownErrors
        /// </summary>
        [DataMember(Name = "server_down_errors", EmitDefaultValue = false)]
        public string ServerDownErrors { get; set; }

        /// <summary>
        /// Gets or Sets OtherServerRequestErrors
        /// </summary>
        [DataMember(Name = "other_server_request_errors", EmitDefaultValue = false)]
        public string OtherServerRequestErrors { get; set; }

        /// <summary>
        /// Gets or Sets MaximumConcurrentRequests
        /// </summary>
        [DataMember(Name = "maximum_concurrent_requests", EmitDefaultValue = false)]
        public string MaximumConcurrentRequests { get; set; }

        /// <summary>
        /// Gets or Sets CurrentConnections
        /// </summary>
        [DataMember(Name = "current_connections", EmitDefaultValue = false)]
        public string CurrentConnections { get; set; }

        /// <summary>
        /// Gets or Sets MaxConnections
        /// </summary>
        [DataMember(Name = "max_connections", EmitDefaultValue = false)]
        public string MaxConnections { get; set; }

        /// <summary>
        /// Gets or Sets MaximumSuccessfulSearchTime
        /// </summary>
        [DataMember(Name = "maximum_successful_search_time", EmitDefaultValue = false)]
        public string MaximumSuccessfulSearchTime { get; set; }

        /// <summary>
        /// Gets or Sets MaximumUserOrGroupSearchTime
        /// </summary>
        [DataMember(Name = "maximum_user_or_group_search_time", EmitDefaultValue = false)]
        public string MaximumUserOrGroupSearchTime { get; set; }

        /// <summary>
        /// Gets or Sets MaxAdditionalUserGroupSearchTime
        /// </summary>
        [DataMember(Name = "max_additional_user_group_search_time", EmitDefaultValue = false)]
        public string MaxAdditionalUserGroupSearchTime { get; set; }

        /// <summary>
        /// Gets or Sets LastError
        /// </summary>
        [DataMember(Name = "last_error", EmitDefaultValue = false)]
        public string LastError { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusLdapServerStatisticsDetail {\n");
            sb.Append("  Server: ").Append(Server).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  AuthRequests: ").Append(AuthRequests).Append("\n");
            sb.Append("  AuthRequestFailures: ").Append(AuthRequestFailures).Append("\n");
            sb.Append("  UserInfoRequests: ").Append(UserInfoRequests).Append("\n");
            sb.Append("  UserInfoFailures: ").Append(UserInfoFailures).Append("\n");
            sb.Append("  BindRequests: ").Append(BindRequests).Append("\n");
            sb.Append("  BindFailures: ").Append(BindFailures).Append("\n");
            sb.Append("  SearchRequests: ").Append(SearchRequests).Append("\n");
            sb.Append("  SearchFailures: ").Append(SearchFailures).Append("\n");
            sb.Append("  ConnectivityRequests: ").Append(ConnectivityRequests).Append("\n");
            sb.Append("  ConnectivityErrors: ").Append(ConnectivityErrors).Append("\n");
            sb.Append("  SendRequestFailures: ").Append(SendRequestFailures).Append("\n");
            sb.Append("  ServerTimeouts: ").Append(ServerTimeouts).Append("\n");
            sb.Append("  ServerDownErrors: ").Append(ServerDownErrors).Append("\n");
            sb.Append("  OtherServerRequestErrors: ").Append(OtherServerRequestErrors).Append("\n");
            sb.Append("  MaximumConcurrentRequests: ").Append(MaximumConcurrentRequests).Append("\n");
            sb.Append("  CurrentConnections: ").Append(CurrentConnections).Append("\n");
            sb.Append("  MaxConnections: ").Append(MaxConnections).Append("\n");
            sb.Append("  MaximumSuccessfulSearchTime: ").Append(MaximumSuccessfulSearchTime).Append("\n");
            sb.Append("  MaximumUserOrGroupSearchTime: ").Append(MaximumUserOrGroupSearchTime).Append("\n");
            sb.Append("  MaxAdditionalUserGroupSearchTime: ").Append(MaxAdditionalUserGroupSearchTime).Append("\n");
            sb.Append("  LastError: ").Append(LastError).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusLdapServerStatisticsDetail);
        }

        /// <summary>
        /// Returns true if ShowStatusLdapServerStatisticsDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusLdapServerStatisticsDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusLdapServerStatisticsDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Server == input.Server ||
                    (this.Server != null &&
                    this.Server.Equals(input.Server))
                ) && 
                (
                    this.IpAddress == input.IpAddress ||
                    (this.IpAddress != null &&
                    this.IpAddress.Equals(input.IpAddress))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.AuthRequests == input.AuthRequests ||
                    (this.AuthRequests != null &&
                    this.AuthRequests.Equals(input.AuthRequests))
                ) && 
                (
                    this.AuthRequestFailures == input.AuthRequestFailures ||
                    (this.AuthRequestFailures != null &&
                    this.AuthRequestFailures.Equals(input.AuthRequestFailures))
                ) && 
                (
                    this.UserInfoRequests == input.UserInfoRequests ||
                    (this.UserInfoRequests != null &&
                    this.UserInfoRequests.Equals(input.UserInfoRequests))
                ) && 
                (
                    this.UserInfoFailures == input.UserInfoFailures ||
                    (this.UserInfoFailures != null &&
                    this.UserInfoFailures.Equals(input.UserInfoFailures))
                ) && 
                (
                    this.BindRequests == input.BindRequests ||
                    (this.BindRequests != null &&
                    this.BindRequests.Equals(input.BindRequests))
                ) && 
                (
                    this.BindFailures == input.BindFailures ||
                    (this.BindFailures != null &&
                    this.BindFailures.Equals(input.BindFailures))
                ) && 
                (
                    this.SearchRequests == input.SearchRequests ||
                    (this.SearchRequests != null &&
                    this.SearchRequests.Equals(input.SearchRequests))
                ) && 
                (
                    this.SearchFailures == input.SearchFailures ||
                    (this.SearchFailures != null &&
                    this.SearchFailures.Equals(input.SearchFailures))
                ) && 
                (
                    this.ConnectivityRequests == input.ConnectivityRequests ||
                    (this.ConnectivityRequests != null &&
                    this.ConnectivityRequests.Equals(input.ConnectivityRequests))
                ) && 
                (
                    this.ConnectivityErrors == input.ConnectivityErrors ||
                    (this.ConnectivityErrors != null &&
                    this.ConnectivityErrors.Equals(input.ConnectivityErrors))
                ) && 
                (
                    this.SendRequestFailures == input.SendRequestFailures ||
                    (this.SendRequestFailures != null &&
                    this.SendRequestFailures.Equals(input.SendRequestFailures))
                ) && 
                (
                    this.ServerTimeouts == input.ServerTimeouts ||
                    (this.ServerTimeouts != null &&
                    this.ServerTimeouts.Equals(input.ServerTimeouts))
                ) && 
                (
                    this.ServerDownErrors == input.ServerDownErrors ||
                    (this.ServerDownErrors != null &&
                    this.ServerDownErrors.Equals(input.ServerDownErrors))
                ) && 
                (
                    this.OtherServerRequestErrors == input.OtherServerRequestErrors ||
                    (this.OtherServerRequestErrors != null &&
                    this.OtherServerRequestErrors.Equals(input.OtherServerRequestErrors))
                ) && 
                (
                    this.MaximumConcurrentRequests == input.MaximumConcurrentRequests ||
                    (this.MaximumConcurrentRequests != null &&
                    this.MaximumConcurrentRequests.Equals(input.MaximumConcurrentRequests))
                ) && 
                (
                    this.CurrentConnections == input.CurrentConnections ||
                    (this.CurrentConnections != null &&
                    this.CurrentConnections.Equals(input.CurrentConnections))
                ) && 
                (
                    this.MaxConnections == input.MaxConnections ||
                    (this.MaxConnections != null &&
                    this.MaxConnections.Equals(input.MaxConnections))
                ) && 
                (
                    this.MaximumSuccessfulSearchTime == input.MaximumSuccessfulSearchTime ||
                    (this.MaximumSuccessfulSearchTime != null &&
                    this.MaximumSuccessfulSearchTime.Equals(input.MaximumSuccessfulSearchTime))
                ) && 
                (
                    this.MaximumUserOrGroupSearchTime == input.MaximumUserOrGroupSearchTime ||
                    (this.MaximumUserOrGroupSearchTime != null &&
                    this.MaximumUserOrGroupSearchTime.Equals(input.MaximumUserOrGroupSearchTime))
                ) && 
                (
                    this.MaxAdditionalUserGroupSearchTime == input.MaxAdditionalUserGroupSearchTime ||
                    (this.MaxAdditionalUserGroupSearchTime != null &&
                    this.MaxAdditionalUserGroupSearchTime.Equals(input.MaxAdditionalUserGroupSearchTime))
                ) && 
                (
                    this.LastError == input.LastError ||
                    (this.LastError != null &&
                    this.LastError.Equals(input.LastError))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Server != null)
                {
                    hashCode = (hashCode * 59) + this.Server.GetHashCode();
                }
                if (this.IpAddress != null)
                {
                    hashCode = (hashCode * 59) + this.IpAddress.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.AuthRequests != null)
                {
                    hashCode = (hashCode * 59) + this.AuthRequests.GetHashCode();
                }
                if (this.AuthRequestFailures != null)
                {
                    hashCode = (hashCode * 59) + this.AuthRequestFailures.GetHashCode();
                }
                if (this.UserInfoRequests != null)
                {
                    hashCode = (hashCode * 59) + this.UserInfoRequests.GetHashCode();
                }
                if (this.UserInfoFailures != null)
                {
                    hashCode = (hashCode * 59) + this.UserInfoFailures.GetHashCode();
                }
                if (this.BindRequests != null)
                {
                    hashCode = (hashCode * 59) + this.BindRequests.GetHashCode();
                }
                if (this.BindFailures != null)
                {
                    hashCode = (hashCode * 59) + this.BindFailures.GetHashCode();
                }
                if (this.SearchRequests != null)
                {
                    hashCode = (hashCode * 59) + this.SearchRequests.GetHashCode();
                }
                if (this.SearchFailures != null)
                {
                    hashCode = (hashCode * 59) + this.SearchFailures.GetHashCode();
                }
                if (this.ConnectivityRequests != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectivityRequests.GetHashCode();
                }
                if (this.ConnectivityErrors != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectivityErrors.GetHashCode();
                }
                if (this.SendRequestFailures != null)
                {
                    hashCode = (hashCode * 59) + this.SendRequestFailures.GetHashCode();
                }
                if (this.ServerTimeouts != null)
                {
                    hashCode = (hashCode * 59) + this.ServerTimeouts.GetHashCode();
                }
                if (this.ServerDownErrors != null)
                {
                    hashCode = (hashCode * 59) + this.ServerDownErrors.GetHashCode();
                }
                if (this.OtherServerRequestErrors != null)
                {
                    hashCode = (hashCode * 59) + this.OtherServerRequestErrors.GetHashCode();
                }
                if (this.MaximumConcurrentRequests != null)
                {
                    hashCode = (hashCode * 59) + this.MaximumConcurrentRequests.GetHashCode();
                }
                if (this.CurrentConnections != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentConnections.GetHashCode();
                }
                if (this.MaxConnections != null)
                {
                    hashCode = (hashCode * 59) + this.MaxConnections.GetHashCode();
                }
                if (this.MaximumSuccessfulSearchTime != null)
                {
                    hashCode = (hashCode * 59) + this.MaximumSuccessfulSearchTime.GetHashCode();
                }
                if (this.MaximumUserOrGroupSearchTime != null)
                {
                    hashCode = (hashCode * 59) + this.MaximumUserOrGroupSearchTime.GetHashCode();
                }
                if (this.MaxAdditionalUserGroupSearchTime != null)
                {
                    hashCode = (hashCode * 59) + this.MaxAdditionalUserGroupSearchTime.GetHashCode();
                }
                if (this.LastError != null)
                {
                    hashCode = (hashCode * 59) + this.LastError.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
