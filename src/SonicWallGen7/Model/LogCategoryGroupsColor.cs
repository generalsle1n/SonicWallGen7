/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;
using System.Reflection;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Set the color of the group to be displayed in the Log Monitor.
    /// </summary>
    [JsonConverter(typeof(LogCategoryGroupsColorJsonConverter))]
    [DataContract(Name = "log_category_groups_color")]
    public partial class LogCategoryGroupsColor : AbstractOpenAPISchema, IEquatable<LogCategoryGroupsColor>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogCategoryGroupsColor" /> class
        /// with the <see cref="LogCategoryGroupsColorLeaveUnchanged" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LogCategoryGroupsColorLeaveUnchanged.</param>
        public LogCategoryGroupsColor(LogCategoryGroupsColorLeaveUnchanged actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogCategoryGroupsColor" /> class
        /// with the <see cref="LogCategoryGroupsColorRgb" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LogCategoryGroupsColorRgb.</param>
        public LogCategoryGroupsColor(LogCategoryGroupsColorRgb actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogCategoryGroupsColor" /> class
        /// with the <see cref="LogCategoryGroupsColorHex" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LogCategoryGroupsColorHex.</param>
        public LogCategoryGroupsColor(LogCategoryGroupsColorHex actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogCategoryGroupsColor" /> class
        /// with the <see cref="LogCategoryGroupsColorBlack" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LogCategoryGroupsColorBlack.</param>
        public LogCategoryGroupsColor(LogCategoryGroupsColorBlack actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogCategoryGroupsColor" /> class
        /// with the <see cref="LogCategoryGroupsColorRed" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LogCategoryGroupsColorRed.</param>
        public LogCategoryGroupsColor(LogCategoryGroupsColorRed actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogCategoryGroupsColor" /> class
        /// with the <see cref="LogCategoryGroupsColorYellow" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LogCategoryGroupsColorYellow.</param>
        public LogCategoryGroupsColor(LogCategoryGroupsColorYellow actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogCategoryGroupsColor" /> class
        /// with the <see cref="LogCategoryGroupsColorBlue" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LogCategoryGroupsColorBlue.</param>
        public LogCategoryGroupsColor(LogCategoryGroupsColorBlue actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogCategoryGroupsColor" /> class
        /// with the <see cref="LogCategoryGroupsColorGreen" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LogCategoryGroupsColorGreen.</param>
        public LogCategoryGroupsColor(LogCategoryGroupsColorGreen actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogCategoryGroupsColor" /> class
        /// with the <see cref="LogCategoryGroupsColorOrange" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LogCategoryGroupsColorOrange.</param>
        public LogCategoryGroupsColor(LogCategoryGroupsColorOrange actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogCategoryGroupsColor" /> class
        /// with the <see cref="LogCategoryGroupsColorPurple" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LogCategoryGroupsColorPurple.</param>
        public LogCategoryGroupsColor(LogCategoryGroupsColorPurple actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(LogCategoryGroupsColorBlack))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(LogCategoryGroupsColorBlue))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(LogCategoryGroupsColorGreen))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(LogCategoryGroupsColorHex))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(LogCategoryGroupsColorLeaveUnchanged))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(LogCategoryGroupsColorOrange))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(LogCategoryGroupsColorPurple))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(LogCategoryGroupsColorRed))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(LogCategoryGroupsColorRgb))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(LogCategoryGroupsColorYellow))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: LogCategoryGroupsColorBlack, LogCategoryGroupsColorBlue, LogCategoryGroupsColorGreen, LogCategoryGroupsColorHex, LogCategoryGroupsColorLeaveUnchanged, LogCategoryGroupsColorOrange, LogCategoryGroupsColorPurple, LogCategoryGroupsColorRed, LogCategoryGroupsColorRgb, LogCategoryGroupsColorYellow");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `LogCategoryGroupsColorLeaveUnchanged`. If the actual instance is not `LogCategoryGroupsColorLeaveUnchanged`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LogCategoryGroupsColorLeaveUnchanged</returns>
        public LogCategoryGroupsColorLeaveUnchanged GetLogCategoryGroupsColorLeaveUnchanged()
        {
            return (LogCategoryGroupsColorLeaveUnchanged)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LogCategoryGroupsColorRgb`. If the actual instance is not `LogCategoryGroupsColorRgb`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LogCategoryGroupsColorRgb</returns>
        public LogCategoryGroupsColorRgb GetLogCategoryGroupsColorRgb()
        {
            return (LogCategoryGroupsColorRgb)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LogCategoryGroupsColorHex`. If the actual instance is not `LogCategoryGroupsColorHex`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LogCategoryGroupsColorHex</returns>
        public LogCategoryGroupsColorHex GetLogCategoryGroupsColorHex()
        {
            return (LogCategoryGroupsColorHex)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LogCategoryGroupsColorBlack`. If the actual instance is not `LogCategoryGroupsColorBlack`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LogCategoryGroupsColorBlack</returns>
        public LogCategoryGroupsColorBlack GetLogCategoryGroupsColorBlack()
        {
            return (LogCategoryGroupsColorBlack)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LogCategoryGroupsColorRed`. If the actual instance is not `LogCategoryGroupsColorRed`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LogCategoryGroupsColorRed</returns>
        public LogCategoryGroupsColorRed GetLogCategoryGroupsColorRed()
        {
            return (LogCategoryGroupsColorRed)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LogCategoryGroupsColorYellow`. If the actual instance is not `LogCategoryGroupsColorYellow`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LogCategoryGroupsColorYellow</returns>
        public LogCategoryGroupsColorYellow GetLogCategoryGroupsColorYellow()
        {
            return (LogCategoryGroupsColorYellow)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LogCategoryGroupsColorBlue`. If the actual instance is not `LogCategoryGroupsColorBlue`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LogCategoryGroupsColorBlue</returns>
        public LogCategoryGroupsColorBlue GetLogCategoryGroupsColorBlue()
        {
            return (LogCategoryGroupsColorBlue)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LogCategoryGroupsColorGreen`. If the actual instance is not `LogCategoryGroupsColorGreen`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LogCategoryGroupsColorGreen</returns>
        public LogCategoryGroupsColorGreen GetLogCategoryGroupsColorGreen()
        {
            return (LogCategoryGroupsColorGreen)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LogCategoryGroupsColorOrange`. If the actual instance is not `LogCategoryGroupsColorOrange`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LogCategoryGroupsColorOrange</returns>
        public LogCategoryGroupsColorOrange GetLogCategoryGroupsColorOrange()
        {
            return (LogCategoryGroupsColorOrange)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LogCategoryGroupsColorPurple`. If the actual instance is not `LogCategoryGroupsColorPurple`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LogCategoryGroupsColorPurple</returns>
        public LogCategoryGroupsColorPurple GetLogCategoryGroupsColorPurple()
        {
            return (LogCategoryGroupsColorPurple)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LogCategoryGroupsColor {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, LogCategoryGroupsColor.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of LogCategoryGroupsColor
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of LogCategoryGroupsColor</returns>
        public static LogCategoryGroupsColor FromJson(string jsonString)
        {
            LogCategoryGroupsColor newLogCategoryGroupsColor = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newLogCategoryGroupsColor;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LogCategoryGroupsColorBlack).GetProperty("AdditionalProperties") == null)
                {
                    newLogCategoryGroupsColor = new LogCategoryGroupsColor(JsonConvert.DeserializeObject<LogCategoryGroupsColorBlack>(jsonString, LogCategoryGroupsColor.SerializerSettings));
                }
                else
                {
                    newLogCategoryGroupsColor = new LogCategoryGroupsColor(JsonConvert.DeserializeObject<LogCategoryGroupsColorBlack>(jsonString, LogCategoryGroupsColor.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LogCategoryGroupsColorBlack");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LogCategoryGroupsColorBlack: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LogCategoryGroupsColorBlue).GetProperty("AdditionalProperties") == null)
                {
                    newLogCategoryGroupsColor = new LogCategoryGroupsColor(JsonConvert.DeserializeObject<LogCategoryGroupsColorBlue>(jsonString, LogCategoryGroupsColor.SerializerSettings));
                }
                else
                {
                    newLogCategoryGroupsColor = new LogCategoryGroupsColor(JsonConvert.DeserializeObject<LogCategoryGroupsColorBlue>(jsonString, LogCategoryGroupsColor.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LogCategoryGroupsColorBlue");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LogCategoryGroupsColorBlue: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LogCategoryGroupsColorGreen).GetProperty("AdditionalProperties") == null)
                {
                    newLogCategoryGroupsColor = new LogCategoryGroupsColor(JsonConvert.DeserializeObject<LogCategoryGroupsColorGreen>(jsonString, LogCategoryGroupsColor.SerializerSettings));
                }
                else
                {
                    newLogCategoryGroupsColor = new LogCategoryGroupsColor(JsonConvert.DeserializeObject<LogCategoryGroupsColorGreen>(jsonString, LogCategoryGroupsColor.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LogCategoryGroupsColorGreen");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LogCategoryGroupsColorGreen: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LogCategoryGroupsColorHex).GetProperty("AdditionalProperties") == null)
                {
                    newLogCategoryGroupsColor = new LogCategoryGroupsColor(JsonConvert.DeserializeObject<LogCategoryGroupsColorHex>(jsonString, LogCategoryGroupsColor.SerializerSettings));
                }
                else
                {
                    newLogCategoryGroupsColor = new LogCategoryGroupsColor(JsonConvert.DeserializeObject<LogCategoryGroupsColorHex>(jsonString, LogCategoryGroupsColor.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LogCategoryGroupsColorHex");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LogCategoryGroupsColorHex: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LogCategoryGroupsColorLeaveUnchanged).GetProperty("AdditionalProperties") == null)
                {
                    newLogCategoryGroupsColor = new LogCategoryGroupsColor(JsonConvert.DeserializeObject<LogCategoryGroupsColorLeaveUnchanged>(jsonString, LogCategoryGroupsColor.SerializerSettings));
                }
                else
                {
                    newLogCategoryGroupsColor = new LogCategoryGroupsColor(JsonConvert.DeserializeObject<LogCategoryGroupsColorLeaveUnchanged>(jsonString, LogCategoryGroupsColor.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LogCategoryGroupsColorLeaveUnchanged");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LogCategoryGroupsColorLeaveUnchanged: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LogCategoryGroupsColorOrange).GetProperty("AdditionalProperties") == null)
                {
                    newLogCategoryGroupsColor = new LogCategoryGroupsColor(JsonConvert.DeserializeObject<LogCategoryGroupsColorOrange>(jsonString, LogCategoryGroupsColor.SerializerSettings));
                }
                else
                {
                    newLogCategoryGroupsColor = new LogCategoryGroupsColor(JsonConvert.DeserializeObject<LogCategoryGroupsColorOrange>(jsonString, LogCategoryGroupsColor.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LogCategoryGroupsColorOrange");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LogCategoryGroupsColorOrange: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LogCategoryGroupsColorPurple).GetProperty("AdditionalProperties") == null)
                {
                    newLogCategoryGroupsColor = new LogCategoryGroupsColor(JsonConvert.DeserializeObject<LogCategoryGroupsColorPurple>(jsonString, LogCategoryGroupsColor.SerializerSettings));
                }
                else
                {
                    newLogCategoryGroupsColor = new LogCategoryGroupsColor(JsonConvert.DeserializeObject<LogCategoryGroupsColorPurple>(jsonString, LogCategoryGroupsColor.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LogCategoryGroupsColorPurple");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LogCategoryGroupsColorPurple: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LogCategoryGroupsColorRed).GetProperty("AdditionalProperties") == null)
                {
                    newLogCategoryGroupsColor = new LogCategoryGroupsColor(JsonConvert.DeserializeObject<LogCategoryGroupsColorRed>(jsonString, LogCategoryGroupsColor.SerializerSettings));
                }
                else
                {
                    newLogCategoryGroupsColor = new LogCategoryGroupsColor(JsonConvert.DeserializeObject<LogCategoryGroupsColorRed>(jsonString, LogCategoryGroupsColor.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LogCategoryGroupsColorRed");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LogCategoryGroupsColorRed: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LogCategoryGroupsColorRgb).GetProperty("AdditionalProperties") == null)
                {
                    newLogCategoryGroupsColor = new LogCategoryGroupsColor(JsonConvert.DeserializeObject<LogCategoryGroupsColorRgb>(jsonString, LogCategoryGroupsColor.SerializerSettings));
                }
                else
                {
                    newLogCategoryGroupsColor = new LogCategoryGroupsColor(JsonConvert.DeserializeObject<LogCategoryGroupsColorRgb>(jsonString, LogCategoryGroupsColor.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LogCategoryGroupsColorRgb");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LogCategoryGroupsColorRgb: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LogCategoryGroupsColorYellow).GetProperty("AdditionalProperties") == null)
                {
                    newLogCategoryGroupsColor = new LogCategoryGroupsColor(JsonConvert.DeserializeObject<LogCategoryGroupsColorYellow>(jsonString, LogCategoryGroupsColor.SerializerSettings));
                }
                else
                {
                    newLogCategoryGroupsColor = new LogCategoryGroupsColor(JsonConvert.DeserializeObject<LogCategoryGroupsColorYellow>(jsonString, LogCategoryGroupsColor.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LogCategoryGroupsColorYellow");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LogCategoryGroupsColorYellow: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newLogCategoryGroupsColor;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogCategoryGroupsColor);
        }

        /// <summary>
        /// Returns true if LogCategoryGroupsColor instances are equal
        /// </summary>
        /// <param name="input">Instance of LogCategoryGroupsColor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogCategoryGroupsColor input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for LogCategoryGroupsColor
    /// </summary>
    public class LogCategoryGroupsColorJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(LogCategoryGroupsColor).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return LogCategoryGroupsColor.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
