/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Assign an IPv6 address object to group.
    /// </summary>
    [DataContract(Name = "address_group_ipv4_ipv4_address_object")]
    public partial class AddressGroupIpv4Ipv4AddressObject : IEquatable<AddressGroupIpv4Ipv4AddressObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressGroupIpv4Ipv4AddressObject" /> class.
        /// </summary>
        /// <param name="ipv4">IPV4 address object..</param>
        /// <param name="ipv6">IPV6 address object..</param>
        /// <param name="mac">MAC address object..</param>
        /// <param name="fqdn">FQDN address object..</param>
        public AddressGroupIpv4Ipv4AddressObject(List<AddressGroupIpv4Ipv4AddressGroupIpv4Inner> ipv4 = default(List<AddressGroupIpv4Ipv4AddressGroupIpv4Inner>), List<AddressGroupIpv4Ipv4AddressGroupIpv4Inner> ipv6 = default(List<AddressGroupIpv4Ipv4AddressGroupIpv4Inner>), List<AddressGroupIpv4Ipv4AddressGroupIpv4Inner> mac = default(List<AddressGroupIpv4Ipv4AddressGroupIpv4Inner>), List<AddressGroupIpv4Ipv4AddressGroupIpv4Inner> fqdn = default(List<AddressGroupIpv4Ipv4AddressGroupIpv4Inner>))
        {
            this.Ipv4 = ipv4;
            this.Ipv6 = ipv6;
            this.Mac = mac;
            this.Fqdn = fqdn;
        }

        /// <summary>
        /// IPV4 address object.
        /// </summary>
        /// <value>IPV4 address object.</value>
        [DataMember(Name = "ipv4", EmitDefaultValue = false)]
        public List<AddressGroupIpv4Ipv4AddressGroupIpv4Inner> Ipv4 { get; set; }

        /// <summary>
        /// IPV6 address object.
        /// </summary>
        /// <value>IPV6 address object.</value>
        [DataMember(Name = "ipv6", EmitDefaultValue = false)]
        public List<AddressGroupIpv4Ipv4AddressGroupIpv4Inner> Ipv6 { get; set; }

        /// <summary>
        /// MAC address object.
        /// </summary>
        /// <value>MAC address object.</value>
        [DataMember(Name = "mac", EmitDefaultValue = false)]
        public List<AddressGroupIpv4Ipv4AddressGroupIpv4Inner> Mac { get; set; }

        /// <summary>
        /// FQDN address object.
        /// </summary>
        /// <value>FQDN address object.</value>
        [DataMember(Name = "fqdn", EmitDefaultValue = false)]
        public List<AddressGroupIpv4Ipv4AddressGroupIpv4Inner> Fqdn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddressGroupIpv4Ipv4AddressObject {\n");
            sb.Append("  Ipv4: ").Append(Ipv4).Append("\n");
            sb.Append("  Ipv6: ").Append(Ipv6).Append("\n");
            sb.Append("  Mac: ").Append(Mac).Append("\n");
            sb.Append("  Fqdn: ").Append(Fqdn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddressGroupIpv4Ipv4AddressObject);
        }

        /// <summary>
        /// Returns true if AddressGroupIpv4Ipv4AddressObject instances are equal
        /// </summary>
        /// <param name="input">Instance of AddressGroupIpv4Ipv4AddressObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressGroupIpv4Ipv4AddressObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Ipv4 == input.Ipv4 ||
                    this.Ipv4 != null &&
                    input.Ipv4 != null &&
                    this.Ipv4.SequenceEqual(input.Ipv4)
                ) && 
                (
                    this.Ipv6 == input.Ipv6 ||
                    this.Ipv6 != null &&
                    input.Ipv6 != null &&
                    this.Ipv6.SequenceEqual(input.Ipv6)
                ) && 
                (
                    this.Mac == input.Mac ||
                    this.Mac != null &&
                    input.Mac != null &&
                    this.Mac.SequenceEqual(input.Mac)
                ) && 
                (
                    this.Fqdn == input.Fqdn ||
                    this.Fqdn != null &&
                    input.Fqdn != null &&
                    this.Fqdn.SequenceEqual(input.Fqdn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ipv4 != null)
                {
                    hashCode = (hashCode * 59) + this.Ipv4.GetHashCode();
                }
                if (this.Ipv6 != null)
                {
                    hashCode = (hashCode * 59) + this.Ipv6.GetHashCode();
                }
                if (this.Mac != null)
                {
                    hashCode = (hashCode * 59) + this.Mac.GetHashCode();
                }
                if (this.Fqdn != null)
                {
                    hashCode = (hashCode * 59) + this.Fqdn.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
