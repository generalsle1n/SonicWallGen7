/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// ServiceObjectPim
    /// </summary>
    [DataContract(Name = "service_object_pim")]
    public partial class ServiceObjectPim : IEquatable<ServiceObjectPim>, IValidatableObject
    {
        /// <summary>
        /// Service object PIM.
        /// </summary>
        /// <value>Service object PIM.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PimEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum Hello for value: hello
            /// </summary>
            [EnumMember(Value = "hello")]
            Hello = 2,

            /// <summary>
            /// Enum Register for value: register
            /// </summary>
            [EnumMember(Value = "register")]
            Register = 3,

            /// <summary>
            /// Enum RegisterStop for value: register-stop
            /// </summary>
            [EnumMember(Value = "register-stop")]
            RegisterStop = 4,

            /// <summary>
            /// Enum JoinPrune for value: join-prune
            /// </summary>
            [EnumMember(Value = "join-prune")]
            JoinPrune = 5,

            /// <summary>
            /// Enum Bootstrap for value: bootstrap
            /// </summary>
            [EnumMember(Value = "bootstrap")]
            Bootstrap = 6,

            /// <summary>
            /// Enum Assert for value: assert
            /// </summary>
            [EnumMember(Value = "assert")]
            Assert = 7,

            /// <summary>
            /// Enum Graft for value: graft
            /// </summary>
            [EnumMember(Value = "graft")]
            Graft = 8,

            /// <summary>
            /// Enum GraftAcknowledge for value: graft-acknowledge
            /// </summary>
            [EnumMember(Value = "graft-acknowledge")]
            GraftAcknowledge = 9,

            /// <summary>
            /// Enum CandidateRp for value: candidate-rp
            /// </summary>
            [EnumMember(Value = "candidate-rp")]
            CandidateRp = 10,

            /// <summary>
            /// Enum StateRefresh for value: state-refresh
            /// </summary>
            [EnumMember(Value = "state-refresh")]
            StateRefresh = 11
        }


        /// <summary>
        /// Service object PIM.
        /// </summary>
        /// <value>Service object PIM.</value>
        [DataMember(Name = "pim", EmitDefaultValue = false)]
        public PimEnum? Pim { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceObjectPim" /> class.
        /// </summary>
        /// <param name="pim">Service object PIM..</param>
        public ServiceObjectPim(PimEnum? pim = default(PimEnum?))
        {
            this.Pim = pim;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServiceObjectPim {\n");
            sb.Append("  Pim: ").Append(Pim).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServiceObjectPim);
        }

        /// <summary>
        /// Returns true if ServiceObjectPim instances are equal
        /// </summary>
        /// <param name="input">Instance of ServiceObjectPim to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceObjectPim input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Pim == input.Pim ||
                    this.Pim.Equals(input.Pim)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Pim.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
