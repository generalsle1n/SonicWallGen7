/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// IP helper protocols configuration schema.
    /// </summary>
    [DataContract(Name = "iph_protocol")]
    public partial class IphProtocol : IEquatable<IphProtocol>, IValidatableObject
    {
        /// <summary>
        /// Specify IP helper relay protocol timeout.
        /// </summary>
        /// <value>Specify IP helper relay protocol timeout.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TimeoutEnum
        {
            /// <summary>
            /// Enum _10 for value: 10
            /// </summary>
            [EnumMember(Value = "10")]
            _10 = 1,

            /// <summary>
            /// Enum _20 for value: 20
            /// </summary>
            [EnumMember(Value = "20")]
            _20 = 2,

            /// <summary>
            /// Enum _30 for value: 30
            /// </summary>
            [EnumMember(Value = "30")]
            _30 = 3,

            /// <summary>
            /// Enum _40 for value: 40
            /// </summary>
            [EnumMember(Value = "40")]
            _40 = 4,

            /// <summary>
            /// Enum _50 for value: 50
            /// </summary>
            [EnumMember(Value = "50")]
            _50 = 5,

            /// <summary>
            /// Enum _60 for value: 60
            /// </summary>
            [EnumMember(Value = "60")]
            _60 = 6
        }


        /// <summary>
        /// Specify IP helper relay protocol timeout.
        /// </summary>
        /// <value>Specify IP helper relay protocol timeout.</value>
        [DataMember(Name = "timeout", EmitDefaultValue = false)]
        public TimeoutEnum? Timeout { get; set; }
        /// <summary>
        /// Specify IP helper relay protocol mode.
        /// </summary>
        /// <value>Specify IP helper relay protocol mode.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModeEnum
        {
            /// <summary>
            /// Enum Broadcast for value: broadcast
            /// </summary>
            [EnumMember(Value = "broadcast")]
            Broadcast = 1,

            /// <summary>
            /// Enum Multicast for value: multicast
            /// </summary>
            [EnumMember(Value = "multicast")]
            Multicast = 2,

            /// <summary>
            /// Enum Both for value: both
            /// </summary>
            [EnumMember(Value = "both")]
            Both = 3
        }


        /// <summary>
        /// Specify IP helper relay protocol mode.
        /// </summary>
        /// <value>Specify IP helper relay protocol mode.</value>
        [DataMember(Name = "mode", EmitDefaultValue = false)]
        public ModeEnum? Mode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IphProtocol" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IphProtocol() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IphProtocol" /> class.
        /// </summary>
        /// <param name="name">Specify IP Helper relay protocol name. (required).</param>
        /// <param name="enable">Enable IP helper relay protocol..</param>
        /// <param name="port1">port1.</param>
        /// <param name="port2">port2.</param>
        /// <param name="timeout">Specify IP helper relay protocol timeout..</param>
        /// <param name="mode">Specify IP helper relay protocol mode..</param>
        /// <param name="multicastIp">multicastIp.</param>
        /// <param name="multicastIpv6">multicastIpv6.</param>
        /// <param name="sourceTranslation">Configure IP source translation for IP helper relay protocol..</param>
        /// <param name="raw">Enable raw mode for IP helper relay protocol..</param>
        public IphProtocol(string name = default(string), bool enable = default(bool), IphProtocolPort1 port1 = default(IphProtocolPort1), IphProtocolPort2 port2 = default(IphProtocolPort2), TimeoutEnum? timeout = default(TimeoutEnum?), ModeEnum? mode = default(ModeEnum?), IphProtocolMulticastIp multicastIp = default(IphProtocolMulticastIp), IphProtocolMulticastIpv6 multicastIpv6 = default(IphProtocolMulticastIpv6), bool sourceTranslation = default(bool), bool raw = default(bool))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for IphProtocol and cannot be null");
            }
            this.Name = name;
            this.Enable = enable;
            this.Port1 = port1;
            this.Port2 = port2;
            this.Timeout = timeout;
            this.Mode = mode;
            this.MulticastIp = multicastIp;
            this.MulticastIpv6 = multicastIpv6;
            this.SourceTranslation = sourceTranslation;
            this.Raw = raw;
        }

        /// <summary>
        /// Specify IP Helper relay protocol name.
        /// </summary>
        /// <value>Specify IP Helper relay protocol name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Enable IP helper relay protocol.
        /// </summary>
        /// <value>Enable IP helper relay protocol.</value>
        [DataMember(Name = "enable", EmitDefaultValue = true)]
        public bool Enable { get; set; }

        /// <summary>
        /// Gets or Sets Port1
        /// </summary>
        [DataMember(Name = "port1", EmitDefaultValue = true)]
        public IphProtocolPort1 Port1 { get; set; }

        /// <summary>
        /// Gets or Sets Port2
        /// </summary>
        [DataMember(Name = "port2", EmitDefaultValue = true)]
        public IphProtocolPort2 Port2 { get; set; }

        /// <summary>
        /// Gets or Sets MulticastIp
        /// </summary>
        [DataMember(Name = "multicast_ip", EmitDefaultValue = true)]
        public IphProtocolMulticastIp MulticastIp { get; set; }

        /// <summary>
        /// Gets or Sets MulticastIpv6
        /// </summary>
        [DataMember(Name = "multicast_ipv6", EmitDefaultValue = false)]
        public IphProtocolMulticastIpv6 MulticastIpv6 { get; set; }

        /// <summary>
        /// Configure IP source translation for IP helper relay protocol.
        /// </summary>
        /// <value>Configure IP source translation for IP helper relay protocol.</value>
        [DataMember(Name = "source_translation", EmitDefaultValue = true)]
        public bool SourceTranslation { get; set; }

        /// <summary>
        /// Enable raw mode for IP helper relay protocol.
        /// </summary>
        /// <value>Enable raw mode for IP helper relay protocol.</value>
        [DataMember(Name = "raw", EmitDefaultValue = true)]
        public bool Raw { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IphProtocol {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  Port1: ").Append(Port1).Append("\n");
            sb.Append("  Port2: ").Append(Port2).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  MulticastIp: ").Append(MulticastIp).Append("\n");
            sb.Append("  MulticastIpv6: ").Append(MulticastIpv6).Append("\n");
            sb.Append("  SourceTranslation: ").Append(SourceTranslation).Append("\n");
            sb.Append("  Raw: ").Append(Raw).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IphProtocol);
        }

        /// <summary>
        /// Returns true if IphProtocol instances are equal
        /// </summary>
        /// <param name="input">Instance of IphProtocol to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IphProtocol input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.Port1 == input.Port1 ||
                    (this.Port1 != null &&
                    this.Port1.Equals(input.Port1))
                ) && 
                (
                    this.Port2 == input.Port2 ||
                    (this.Port2 != null &&
                    this.Port2.Equals(input.Port2))
                ) && 
                (
                    this.Timeout == input.Timeout ||
                    this.Timeout.Equals(input.Timeout)
                ) && 
                (
                    this.Mode == input.Mode ||
                    this.Mode.Equals(input.Mode)
                ) && 
                (
                    this.MulticastIp == input.MulticastIp ||
                    (this.MulticastIp != null &&
                    this.MulticastIp.Equals(input.MulticastIp))
                ) && 
                (
                    this.MulticastIpv6 == input.MulticastIpv6 ||
                    (this.MulticastIpv6 != null &&
                    this.MulticastIpv6.Equals(input.MulticastIpv6))
                ) && 
                (
                    this.SourceTranslation == input.SourceTranslation ||
                    this.SourceTranslation.Equals(input.SourceTranslation)
                ) && 
                (
                    this.Raw == input.Raw ||
                    this.Raw.Equals(input.Raw)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Enable.GetHashCode();
                if (this.Port1 != null)
                {
                    hashCode = (hashCode * 59) + this.Port1.GetHashCode();
                }
                if (this.Port2 != null)
                {
                    hashCode = (hashCode * 59) + this.Port2.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Timeout.GetHashCode();
                hashCode = (hashCode * 59) + this.Mode.GetHashCode();
                if (this.MulticastIp != null)
                {
                    hashCode = (hashCode * 59) + this.MulticastIp.GetHashCode();
                }
                if (this.MulticastIpv6 != null)
                {
                    hashCode = (hashCode * 59) + this.MulticastIpv6.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SourceTranslation.GetHashCode();
                hashCode = (hashCode * 59) + this.Raw.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
