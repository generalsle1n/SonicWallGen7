/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Set whom to apply the password constraints to. * Set to null or {} to represent  an unconfigured state.
    /// </summary>
    [DataContract(Name = "administration_administration_password_constraints_apply_to")]
    public partial class AdministrationAdministrationPasswordConstraintsApplyTo : IEquatable<AdministrationAdministrationPasswordConstraintsApplyTo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdministrationAdministrationPasswordConstraintsApplyTo" /> class.
        /// </summary>
        /// <param name="builtinAdmin">Built in administrator..</param>
        /// <param name="fullAdmins">Other full administrators..</param>
        /// <param name="limitedAdmins">Limited administrators..</param>
        /// <param name="localUsers">Other local users..</param>
        /// <param name="guestAdmins">Guest admins..</param>
        /// <param name="systemAdmins">System administrators.</param>
        /// <param name="cryptoAdmins">Crypto administrators.</param>
        /// <param name="auditAdmins">Audit administrators.</param>
        public AdministrationAdministrationPasswordConstraintsApplyTo(bool builtinAdmin = default(bool), bool fullAdmins = default(bool), bool limitedAdmins = default(bool), bool localUsers = default(bool), bool guestAdmins = default(bool), bool systemAdmins = default(bool), bool cryptoAdmins = default(bool), bool auditAdmins = default(bool))
        {
            this.BuiltinAdmin = builtinAdmin;
            this.FullAdmins = fullAdmins;
            this.LimitedAdmins = limitedAdmins;
            this.LocalUsers = localUsers;
            this.GuestAdmins = guestAdmins;
            this.SystemAdmins = systemAdmins;
            this.CryptoAdmins = cryptoAdmins;
            this.AuditAdmins = auditAdmins;
        }

        /// <summary>
        /// Built in administrator.
        /// </summary>
        /// <value>Built in administrator.</value>
        [DataMember(Name = "builtin_admin", EmitDefaultValue = true)]
        public bool BuiltinAdmin { get; set; }

        /// <summary>
        /// Other full administrators.
        /// </summary>
        /// <value>Other full administrators.</value>
        [DataMember(Name = "full_admins", EmitDefaultValue = true)]
        public bool FullAdmins { get; set; }

        /// <summary>
        /// Limited administrators.
        /// </summary>
        /// <value>Limited administrators.</value>
        [DataMember(Name = "limited_admins", EmitDefaultValue = true)]
        public bool LimitedAdmins { get; set; }

        /// <summary>
        /// Other local users.
        /// </summary>
        /// <value>Other local users.</value>
        [DataMember(Name = "local_users", EmitDefaultValue = true)]
        public bool LocalUsers { get; set; }

        /// <summary>
        /// Guest admins.
        /// </summary>
        /// <value>Guest admins.</value>
        [DataMember(Name = "guest_admins", EmitDefaultValue = true)]
        public bool GuestAdmins { get; set; }

        /// <summary>
        /// System administrators
        /// </summary>
        /// <value>System administrators</value>
        [DataMember(Name = "system_admins", EmitDefaultValue = true)]
        public bool SystemAdmins { get; set; }

        /// <summary>
        /// Crypto administrators
        /// </summary>
        /// <value>Crypto administrators</value>
        [DataMember(Name = "crypto_admins", EmitDefaultValue = true)]
        public bool CryptoAdmins { get; set; }

        /// <summary>
        /// Audit administrators
        /// </summary>
        /// <value>Audit administrators</value>
        [DataMember(Name = "audit_admins", EmitDefaultValue = true)]
        public bool AuditAdmins { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdministrationAdministrationPasswordConstraintsApplyTo {\n");
            sb.Append("  BuiltinAdmin: ").Append(BuiltinAdmin).Append("\n");
            sb.Append("  FullAdmins: ").Append(FullAdmins).Append("\n");
            sb.Append("  LimitedAdmins: ").Append(LimitedAdmins).Append("\n");
            sb.Append("  LocalUsers: ").Append(LocalUsers).Append("\n");
            sb.Append("  GuestAdmins: ").Append(GuestAdmins).Append("\n");
            sb.Append("  SystemAdmins: ").Append(SystemAdmins).Append("\n");
            sb.Append("  CryptoAdmins: ").Append(CryptoAdmins).Append("\n");
            sb.Append("  AuditAdmins: ").Append(AuditAdmins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdministrationAdministrationPasswordConstraintsApplyTo);
        }

        /// <summary>
        /// Returns true if AdministrationAdministrationPasswordConstraintsApplyTo instances are equal
        /// </summary>
        /// <param name="input">Instance of AdministrationAdministrationPasswordConstraintsApplyTo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdministrationAdministrationPasswordConstraintsApplyTo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BuiltinAdmin == input.BuiltinAdmin ||
                    this.BuiltinAdmin.Equals(input.BuiltinAdmin)
                ) && 
                (
                    this.FullAdmins == input.FullAdmins ||
                    this.FullAdmins.Equals(input.FullAdmins)
                ) && 
                (
                    this.LimitedAdmins == input.LimitedAdmins ||
                    this.LimitedAdmins.Equals(input.LimitedAdmins)
                ) && 
                (
                    this.LocalUsers == input.LocalUsers ||
                    this.LocalUsers.Equals(input.LocalUsers)
                ) && 
                (
                    this.GuestAdmins == input.GuestAdmins ||
                    this.GuestAdmins.Equals(input.GuestAdmins)
                ) && 
                (
                    this.SystemAdmins == input.SystemAdmins ||
                    this.SystemAdmins.Equals(input.SystemAdmins)
                ) && 
                (
                    this.CryptoAdmins == input.CryptoAdmins ||
                    this.CryptoAdmins.Equals(input.CryptoAdmins)
                ) && 
                (
                    this.AuditAdmins == input.AuditAdmins ||
                    this.AuditAdmins.Equals(input.AuditAdmins)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.BuiltinAdmin.GetHashCode();
                hashCode = (hashCode * 59) + this.FullAdmins.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitedAdmins.GetHashCode();
                hashCode = (hashCode * 59) + this.LocalUsers.GetHashCode();
                hashCode = (hashCode * 59) + this.GuestAdmins.GetHashCode();
                hashCode = (hashCode * 59) + this.SystemAdmins.GetHashCode();
                hashCode = (hashCode * 59) + this.CryptoAdmins.GetHashCode();
                hashCode = (hashCode * 59) + this.AuditAdmins.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
