/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enable view log application option settings.
    /// </summary>
    [DataContract(Name = "log_view_option_log_view_option_application")]
    public partial class LogViewOptionLogViewOptionApplication : IEquatable<LogViewOptionLogViewOptionApplication>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogViewOptionLogViewOptionApplication" /> class.
        /// </summary>
        /// <param name="httpOp">Http-op..</param>
        /// <param name="url">Url..</param>
        /// <param name="httpResult">Http-result..</param>
        /// <param name="blockCat">Block-cat..</param>
        /// <param name="apply">Apply..</param>
        public LogViewOptionLogViewOptionApplication(bool httpOp = default(bool), bool url = default(bool), bool httpResult = default(bool), bool blockCat = default(bool), bool apply = default(bool))
        {
            this.HttpOp = httpOp;
            this.Url = url;
            this.HttpResult = httpResult;
            this.BlockCat = blockCat;
            this.Apply = apply;
        }

        /// <summary>
        /// Http-op.
        /// </summary>
        /// <value>Http-op.</value>
        [DataMember(Name = "http_op", EmitDefaultValue = true)]
        public bool HttpOp { get; set; }

        /// <summary>
        /// Url.
        /// </summary>
        /// <value>Url.</value>
        [DataMember(Name = "url", EmitDefaultValue = true)]
        public bool Url { get; set; }

        /// <summary>
        /// Http-result.
        /// </summary>
        /// <value>Http-result.</value>
        [DataMember(Name = "http_result", EmitDefaultValue = true)]
        public bool HttpResult { get; set; }

        /// <summary>
        /// Block-cat.
        /// </summary>
        /// <value>Block-cat.</value>
        [DataMember(Name = "block_cat", EmitDefaultValue = true)]
        public bool BlockCat { get; set; }

        /// <summary>
        /// Apply.
        /// </summary>
        /// <value>Apply.</value>
        [DataMember(Name = "apply", EmitDefaultValue = true)]
        public bool Apply { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LogViewOptionLogViewOptionApplication {\n");
            sb.Append("  HttpOp: ").Append(HttpOp).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  HttpResult: ").Append(HttpResult).Append("\n");
            sb.Append("  BlockCat: ").Append(BlockCat).Append("\n");
            sb.Append("  Apply: ").Append(Apply).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogViewOptionLogViewOptionApplication);
        }

        /// <summary>
        /// Returns true if LogViewOptionLogViewOptionApplication instances are equal
        /// </summary>
        /// <param name="input">Instance of LogViewOptionLogViewOptionApplication to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogViewOptionLogViewOptionApplication input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.HttpOp == input.HttpOp ||
                    this.HttpOp.Equals(input.HttpOp)
                ) && 
                (
                    this.Url == input.Url ||
                    this.Url.Equals(input.Url)
                ) && 
                (
                    this.HttpResult == input.HttpResult ||
                    this.HttpResult.Equals(input.HttpResult)
                ) && 
                (
                    this.BlockCat == input.BlockCat ||
                    this.BlockCat.Equals(input.BlockCat)
                ) && 
                (
                    this.Apply == input.Apply ||
                    this.Apply.Equals(input.Apply)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.HttpOp.GetHashCode();
                hashCode = (hashCode * 59) + this.Url.GetHashCode();
                hashCode = (hashCode * 59) + this.HttpResult.GetHashCode();
                hashCode = (hashCode * 59) + this.BlockCat.GetHashCode();
                hashCode = (hashCode * 59) + this.Apply.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
