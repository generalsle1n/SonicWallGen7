/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure SSO settings.
    /// </summary>
    [DataContract(Name = "user_sso_base_user_sso")]
    public partial class UserSsoBaseUserSso : IEquatable<UserSsoBaseUserSso>, IValidatableObject
    {
        /// <summary>
        /// Mechanism for looking up user group memberships for RADIUS Accounting users.
        /// </summary>
        /// <value>Mechanism for looking up user group memberships for RADIUS Accounting users.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RadiusAcctLookupMechanismEnum
        {
            /// <summary>
            /// Enum SelectedOnSsoUserTab for value: selected-on-sso-user-tab
            /// </summary>
            [EnumMember(Value = "selected-on-sso-user-tab")]
            SelectedOnSsoUserTab = 1,

            /// <summary>
            /// Enum FromRadiusAcctRequests for value: from-radius-acct-requests
            /// </summary>
            [EnumMember(Value = "from-radius-acct-requests")]
            FromRadiusAcctRequests = 2
        }


        /// <summary>
        /// Mechanism for looking up user group memberships for RADIUS Accounting users.
        /// </summary>
        /// <value>Mechanism for looking up user group memberships for RADIUS Accounting users.</value>
        [DataMember(Name = "radius_acct_lookup_mechanism", EmitDefaultValue = false)]
        public RadiusAcctLookupMechanismEnum? RadiusAcctLookupMechanism { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserSsoBaseUserSso" /> class.
        /// </summary>
        /// <param name="method">method.</param>
        /// <param name="nextAgentOnNoName">Enable try next agent on getting no name from NetAPI/WMI..</param>
        /// <param name="blockTraffic">Block user traffic while waiting for SSO..</param>
        /// <param name="includingForAccessRules">includingForAccessRules.</param>
        /// <param name="syncAllAgentsUserDb">Sync all agents when agent synchronize their user databases..</param>
        /// <param name="localUsersOnly">Allow only SSO users with local accounts..</param>
        /// <param name="nonDomainLimitedAccess">Allow limited access for non-domain users..</param>
        /// <param name="probe">probe.</param>
        /// <param name="forwardLanman">Enable forward legacy LanMan in NTLM..</param>
        /// <param name="tsaServicesBypass">Terminal server services can bypass auth in rules..</param>
        /// <param name="userGroupMechanism">userGroupMechanism.</param>
        /// <param name="poll">poll.</param>
        /// <param name="holdTime">holdTime.</param>
        /// <param name="rampUp">rampUp.</param>
        /// <param name="userDomainName">userDomainName.</param>
        /// <param name="bypassPolicy">bypassPolicy.</param>
        /// <param name="logUserName">Log user name for SSO bypasses..</param>
        /// <param name="dummyUser">dummyUser.</param>
        /// <param name="radiusAccountingPort">Set the RADIUS accounting&#39;s UDP port number..</param>
        /// <param name="radiusAcctLookupMechanism">Mechanism for looking up user group memberships for RADIUS Accounting users..</param>
        /// <param name="switchOverTime">Set maximum switch-over time..</param>
        /// <param name="ignoreTransitionMessage">Ignore transition message sequence/source(s)..</param>
        /// <param name="ignoreAddr">ignoreAddr.</param>
        /// <param name="includeAddr">includeAddr.</param>
        /// <param name="retriesOnFailure">Set maximum retries to allow on authentication failure..</param>
        /// <param name="authenticationDomain">authenticationDomain.</param>
        /// <param name="redirectBrowser">redirectBrowser.</param>
        public UserSsoBaseUserSso(UserSsoBaseUserSsoMethod method = default(UserSsoBaseUserSsoMethod), bool nextAgentOnNoName = default(bool), bool blockTraffic = default(bool), UserSsoBaseUserSsoIncludingForAccessRules includingForAccessRules = default(UserSsoBaseUserSsoIncludingForAccessRules), bool syncAllAgentsUserDb = default(bool), bool localUsersOnly = default(bool), bool nonDomainLimitedAccess = default(bool), UserSsoBaseUserSsoProbe probe = default(UserSsoBaseUserSsoProbe), bool forwardLanman = default(bool), bool tsaServicesBypass = default(bool), UserSsoBaseUserSsoUserGroupMechanism userGroupMechanism = default(UserSsoBaseUserSsoUserGroupMechanism), UserSsoBaseUserSsoPoll poll = default(UserSsoBaseUserSsoPoll), UserSsoBaseUserSsoHoldTime holdTime = default(UserSsoBaseUserSsoHoldTime), UserSsoBaseUserSsoRampUp rampUp = default(UserSsoBaseUserSsoRampUp), UserSsoBaseUserSsoUserDomainName userDomainName = default(UserSsoBaseUserSsoUserDomainName), UserSsoBaseUserSsoBypassPolicy bypassPolicy = default(UserSsoBaseUserSsoBypassPolicy), string logUserName = default(string), UserSsoBaseUserSsoDummyUser dummyUser = default(UserSsoBaseUserSsoDummyUser), decimal radiusAccountingPort = default(decimal), RadiusAcctLookupMechanismEnum? radiusAcctLookupMechanism = default(RadiusAcctLookupMechanismEnum?), decimal switchOverTime = default(decimal), bool ignoreTransitionMessage = default(bool), UserSsoBaseUserSsoIgnoreAddr ignoreAddr = default(UserSsoBaseUserSsoIgnoreAddr), UserSsoBaseUserSsoIncludeAddr includeAddr = default(UserSsoBaseUserSsoIncludeAddr), decimal retriesOnFailure = default(decimal), UserSsoBaseUserSsoAuthenticationDomain authenticationDomain = default(UserSsoBaseUserSsoAuthenticationDomain), UserSsoBaseUserSsoRedirectBrowser redirectBrowser = default(UserSsoBaseUserSsoRedirectBrowser))
        {
            this.Method = method;
            this.NextAgentOnNoName = nextAgentOnNoName;
            this.BlockTraffic = blockTraffic;
            this.IncludingForAccessRules = includingForAccessRules;
            this.SyncAllAgentsUserDb = syncAllAgentsUserDb;
            this.LocalUsersOnly = localUsersOnly;
            this.NonDomainLimitedAccess = nonDomainLimitedAccess;
            this.Probe = probe;
            this.ForwardLanman = forwardLanman;
            this.TsaServicesBypass = tsaServicesBypass;
            this.UserGroupMechanism = userGroupMechanism;
            this.Poll = poll;
            this.HoldTime = holdTime;
            this.RampUp = rampUp;
            this.UserDomainName = userDomainName;
            this.BypassPolicy = bypassPolicy;
            this.LogUserName = logUserName;
            this.DummyUser = dummyUser;
            this.RadiusAccountingPort = radiusAccountingPort;
            this.RadiusAcctLookupMechanism = radiusAcctLookupMechanism;
            this.SwitchOverTime = switchOverTime;
            this.IgnoreTransitionMessage = ignoreTransitionMessage;
            this.IgnoreAddr = ignoreAddr;
            this.IncludeAddr = includeAddr;
            this.RetriesOnFailure = retriesOnFailure;
            this.AuthenticationDomain = authenticationDomain;
            this.RedirectBrowser = redirectBrowser;
        }

        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [DataMember(Name = "method", EmitDefaultValue = false)]
        public UserSsoBaseUserSsoMethod Method { get; set; }

        /// <summary>
        /// Enable try next agent on getting no name from NetAPI/WMI.
        /// </summary>
        /// <value>Enable try next agent on getting no name from NetAPI/WMI.</value>
        [DataMember(Name = "next_agent_on_no_name", EmitDefaultValue = true)]
        public bool NextAgentOnNoName { get; set; }

        /// <summary>
        /// Block user traffic while waiting for SSO.
        /// </summary>
        /// <value>Block user traffic while waiting for SSO.</value>
        [DataMember(Name = "block_traffic", EmitDefaultValue = true)]
        public bool BlockTraffic { get; set; }

        /// <summary>
        /// Gets or Sets IncludingForAccessRules
        /// </summary>
        [DataMember(Name = "including_for_access_rules", EmitDefaultValue = false)]
        public UserSsoBaseUserSsoIncludingForAccessRules IncludingForAccessRules { get; set; }

        /// <summary>
        /// Sync all agents when agent synchronize their user databases.
        /// </summary>
        /// <value>Sync all agents when agent synchronize their user databases.</value>
        [DataMember(Name = "sync_all_agents_user_db", EmitDefaultValue = true)]
        public bool SyncAllAgentsUserDb { get; set; }

        /// <summary>
        /// Allow only SSO users with local accounts.
        /// </summary>
        /// <value>Allow only SSO users with local accounts.</value>
        [DataMember(Name = "local_users_only", EmitDefaultValue = true)]
        public bool LocalUsersOnly { get; set; }

        /// <summary>
        /// Allow limited access for non-domain users.
        /// </summary>
        /// <value>Allow limited access for non-domain users.</value>
        [DataMember(Name = "non_domain_limited_access", EmitDefaultValue = true)]
        public bool NonDomainLimitedAccess { get; set; }

        /// <summary>
        /// Gets or Sets Probe
        /// </summary>
        [DataMember(Name = "probe", EmitDefaultValue = true)]
        public UserSsoBaseUserSsoProbe Probe { get; set; }

        /// <summary>
        /// Enable forward legacy LanMan in NTLM.
        /// </summary>
        /// <value>Enable forward legacy LanMan in NTLM.</value>
        [DataMember(Name = "forward_lanman", EmitDefaultValue = true)]
        public bool ForwardLanman { get; set; }

        /// <summary>
        /// Terminal server services can bypass auth in rules.
        /// </summary>
        /// <value>Terminal server services can bypass auth in rules.</value>
        [DataMember(Name = "tsa_services_bypass", EmitDefaultValue = true)]
        public bool TsaServicesBypass { get; set; }

        /// <summary>
        /// Gets or Sets UserGroupMechanism
        /// </summary>
        [DataMember(Name = "user_group_mechanism", EmitDefaultValue = false)]
        public UserSsoBaseUserSsoUserGroupMechanism UserGroupMechanism { get; set; }

        /// <summary>
        /// Gets or Sets Poll
        /// </summary>
        [DataMember(Name = "poll", EmitDefaultValue = false)]
        public UserSsoBaseUserSsoPoll Poll { get; set; }

        /// <summary>
        /// Gets or Sets HoldTime
        /// </summary>
        [DataMember(Name = "hold_time", EmitDefaultValue = false)]
        public UserSsoBaseUserSsoHoldTime HoldTime { get; set; }

        /// <summary>
        /// Gets or Sets RampUp
        /// </summary>
        [DataMember(Name = "ramp_up", EmitDefaultValue = true)]
        public UserSsoBaseUserSsoRampUp RampUp { get; set; }

        /// <summary>
        /// Gets or Sets UserDomainName
        /// </summary>
        [DataMember(Name = "user_domain_name", EmitDefaultValue = false)]
        public UserSsoBaseUserSsoUserDomainName UserDomainName { get; set; }

        /// <summary>
        /// Gets or Sets BypassPolicy
        /// </summary>
        [DataMember(Name = "bypass_policy", EmitDefaultValue = false)]
        public UserSsoBaseUserSsoBypassPolicy BypassPolicy { get; set; }

        /// <summary>
        /// Log user name for SSO bypasses.
        /// </summary>
        /// <value>Log user name for SSO bypasses.</value>
        [DataMember(Name = "log_user_name", EmitDefaultValue = false)]
        public string LogUserName { get; set; }

        /// <summary>
        /// Gets or Sets DummyUser
        /// </summary>
        [DataMember(Name = "dummy_user", EmitDefaultValue = false)]
        public UserSsoBaseUserSsoDummyUser DummyUser { get; set; }

        /// <summary>
        /// Set the RADIUS accounting&#39;s UDP port number.
        /// </summary>
        /// <value>Set the RADIUS accounting&#39;s UDP port number.</value>
        [DataMember(Name = "radius_accounting_port", EmitDefaultValue = false)]
        public decimal RadiusAccountingPort { get; set; }

        /// <summary>
        /// Set maximum switch-over time.
        /// </summary>
        /// <value>Set maximum switch-over time.</value>
        [DataMember(Name = "switch_over_time", EmitDefaultValue = false)]
        public decimal SwitchOverTime { get; set; }

        /// <summary>
        /// Ignore transition message sequence/source(s).
        /// </summary>
        /// <value>Ignore transition message sequence/source(s).</value>
        [DataMember(Name = "ignore_transition_message", EmitDefaultValue = true)]
        public bool IgnoreTransitionMessage { get; set; }

        /// <summary>
        /// Gets or Sets IgnoreAddr
        /// </summary>
        [DataMember(Name = "ignore_addr", EmitDefaultValue = false)]
        public UserSsoBaseUserSsoIgnoreAddr IgnoreAddr { get; set; }

        /// <summary>
        /// Gets or Sets IncludeAddr
        /// </summary>
        [DataMember(Name = "include_addr", EmitDefaultValue = false)]
        public UserSsoBaseUserSsoIncludeAddr IncludeAddr { get; set; }

        /// <summary>
        /// Set maximum retries to allow on authentication failure.
        /// </summary>
        /// <value>Set maximum retries to allow on authentication failure.</value>
        [DataMember(Name = "retries_on_failure", EmitDefaultValue = false)]
        public decimal RetriesOnFailure { get; set; }

        /// <summary>
        /// Gets or Sets AuthenticationDomain
        /// </summary>
        [DataMember(Name = "authentication_domain", EmitDefaultValue = false)]
        public UserSsoBaseUserSsoAuthenticationDomain AuthenticationDomain { get; set; }

        /// <summary>
        /// Gets or Sets RedirectBrowser
        /// </summary>
        [DataMember(Name = "redirect_browser", EmitDefaultValue = false)]
        public UserSsoBaseUserSsoRedirectBrowser RedirectBrowser { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserSsoBaseUserSso {\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  NextAgentOnNoName: ").Append(NextAgentOnNoName).Append("\n");
            sb.Append("  BlockTraffic: ").Append(BlockTraffic).Append("\n");
            sb.Append("  IncludingForAccessRules: ").Append(IncludingForAccessRules).Append("\n");
            sb.Append("  SyncAllAgentsUserDb: ").Append(SyncAllAgentsUserDb).Append("\n");
            sb.Append("  LocalUsersOnly: ").Append(LocalUsersOnly).Append("\n");
            sb.Append("  NonDomainLimitedAccess: ").Append(NonDomainLimitedAccess).Append("\n");
            sb.Append("  Probe: ").Append(Probe).Append("\n");
            sb.Append("  ForwardLanman: ").Append(ForwardLanman).Append("\n");
            sb.Append("  TsaServicesBypass: ").Append(TsaServicesBypass).Append("\n");
            sb.Append("  UserGroupMechanism: ").Append(UserGroupMechanism).Append("\n");
            sb.Append("  Poll: ").Append(Poll).Append("\n");
            sb.Append("  HoldTime: ").Append(HoldTime).Append("\n");
            sb.Append("  RampUp: ").Append(RampUp).Append("\n");
            sb.Append("  UserDomainName: ").Append(UserDomainName).Append("\n");
            sb.Append("  BypassPolicy: ").Append(BypassPolicy).Append("\n");
            sb.Append("  LogUserName: ").Append(LogUserName).Append("\n");
            sb.Append("  DummyUser: ").Append(DummyUser).Append("\n");
            sb.Append("  RadiusAccountingPort: ").Append(RadiusAccountingPort).Append("\n");
            sb.Append("  RadiusAcctLookupMechanism: ").Append(RadiusAcctLookupMechanism).Append("\n");
            sb.Append("  SwitchOverTime: ").Append(SwitchOverTime).Append("\n");
            sb.Append("  IgnoreTransitionMessage: ").Append(IgnoreTransitionMessage).Append("\n");
            sb.Append("  IgnoreAddr: ").Append(IgnoreAddr).Append("\n");
            sb.Append("  IncludeAddr: ").Append(IncludeAddr).Append("\n");
            sb.Append("  RetriesOnFailure: ").Append(RetriesOnFailure).Append("\n");
            sb.Append("  AuthenticationDomain: ").Append(AuthenticationDomain).Append("\n");
            sb.Append("  RedirectBrowser: ").Append(RedirectBrowser).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserSsoBaseUserSso);
        }

        /// <summary>
        /// Returns true if UserSsoBaseUserSso instances are equal
        /// </summary>
        /// <param name="input">Instance of UserSsoBaseUserSso to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserSsoBaseUserSso input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.NextAgentOnNoName == input.NextAgentOnNoName ||
                    this.NextAgentOnNoName.Equals(input.NextAgentOnNoName)
                ) && 
                (
                    this.BlockTraffic == input.BlockTraffic ||
                    this.BlockTraffic.Equals(input.BlockTraffic)
                ) && 
                (
                    this.IncludingForAccessRules == input.IncludingForAccessRules ||
                    (this.IncludingForAccessRules != null &&
                    this.IncludingForAccessRules.Equals(input.IncludingForAccessRules))
                ) && 
                (
                    this.SyncAllAgentsUserDb == input.SyncAllAgentsUserDb ||
                    this.SyncAllAgentsUserDb.Equals(input.SyncAllAgentsUserDb)
                ) && 
                (
                    this.LocalUsersOnly == input.LocalUsersOnly ||
                    this.LocalUsersOnly.Equals(input.LocalUsersOnly)
                ) && 
                (
                    this.NonDomainLimitedAccess == input.NonDomainLimitedAccess ||
                    this.NonDomainLimitedAccess.Equals(input.NonDomainLimitedAccess)
                ) && 
                (
                    this.Probe == input.Probe ||
                    (this.Probe != null &&
                    this.Probe.Equals(input.Probe))
                ) && 
                (
                    this.ForwardLanman == input.ForwardLanman ||
                    this.ForwardLanman.Equals(input.ForwardLanman)
                ) && 
                (
                    this.TsaServicesBypass == input.TsaServicesBypass ||
                    this.TsaServicesBypass.Equals(input.TsaServicesBypass)
                ) && 
                (
                    this.UserGroupMechanism == input.UserGroupMechanism ||
                    (this.UserGroupMechanism != null &&
                    this.UserGroupMechanism.Equals(input.UserGroupMechanism))
                ) && 
                (
                    this.Poll == input.Poll ||
                    (this.Poll != null &&
                    this.Poll.Equals(input.Poll))
                ) && 
                (
                    this.HoldTime == input.HoldTime ||
                    (this.HoldTime != null &&
                    this.HoldTime.Equals(input.HoldTime))
                ) && 
                (
                    this.RampUp == input.RampUp ||
                    (this.RampUp != null &&
                    this.RampUp.Equals(input.RampUp))
                ) && 
                (
                    this.UserDomainName == input.UserDomainName ||
                    (this.UserDomainName != null &&
                    this.UserDomainName.Equals(input.UserDomainName))
                ) && 
                (
                    this.BypassPolicy == input.BypassPolicy ||
                    (this.BypassPolicy != null &&
                    this.BypassPolicy.Equals(input.BypassPolicy))
                ) && 
                (
                    this.LogUserName == input.LogUserName ||
                    (this.LogUserName != null &&
                    this.LogUserName.Equals(input.LogUserName))
                ) && 
                (
                    this.DummyUser == input.DummyUser ||
                    (this.DummyUser != null &&
                    this.DummyUser.Equals(input.DummyUser))
                ) && 
                (
                    this.RadiusAccountingPort == input.RadiusAccountingPort ||
                    this.RadiusAccountingPort.Equals(input.RadiusAccountingPort)
                ) && 
                (
                    this.RadiusAcctLookupMechanism == input.RadiusAcctLookupMechanism ||
                    this.RadiusAcctLookupMechanism.Equals(input.RadiusAcctLookupMechanism)
                ) && 
                (
                    this.SwitchOverTime == input.SwitchOverTime ||
                    this.SwitchOverTime.Equals(input.SwitchOverTime)
                ) && 
                (
                    this.IgnoreTransitionMessage == input.IgnoreTransitionMessage ||
                    this.IgnoreTransitionMessage.Equals(input.IgnoreTransitionMessage)
                ) && 
                (
                    this.IgnoreAddr == input.IgnoreAddr ||
                    (this.IgnoreAddr != null &&
                    this.IgnoreAddr.Equals(input.IgnoreAddr))
                ) && 
                (
                    this.IncludeAddr == input.IncludeAddr ||
                    (this.IncludeAddr != null &&
                    this.IncludeAddr.Equals(input.IncludeAddr))
                ) && 
                (
                    this.RetriesOnFailure == input.RetriesOnFailure ||
                    this.RetriesOnFailure.Equals(input.RetriesOnFailure)
                ) && 
                (
                    this.AuthenticationDomain == input.AuthenticationDomain ||
                    (this.AuthenticationDomain != null &&
                    this.AuthenticationDomain.Equals(input.AuthenticationDomain))
                ) && 
                (
                    this.RedirectBrowser == input.RedirectBrowser ||
                    (this.RedirectBrowser != null &&
                    this.RedirectBrowser.Equals(input.RedirectBrowser))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Method != null)
                {
                    hashCode = (hashCode * 59) + this.Method.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NextAgentOnNoName.GetHashCode();
                hashCode = (hashCode * 59) + this.BlockTraffic.GetHashCode();
                if (this.IncludingForAccessRules != null)
                {
                    hashCode = (hashCode * 59) + this.IncludingForAccessRules.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SyncAllAgentsUserDb.GetHashCode();
                hashCode = (hashCode * 59) + this.LocalUsersOnly.GetHashCode();
                hashCode = (hashCode * 59) + this.NonDomainLimitedAccess.GetHashCode();
                if (this.Probe != null)
                {
                    hashCode = (hashCode * 59) + this.Probe.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ForwardLanman.GetHashCode();
                hashCode = (hashCode * 59) + this.TsaServicesBypass.GetHashCode();
                if (this.UserGroupMechanism != null)
                {
                    hashCode = (hashCode * 59) + this.UserGroupMechanism.GetHashCode();
                }
                if (this.Poll != null)
                {
                    hashCode = (hashCode * 59) + this.Poll.GetHashCode();
                }
                if (this.HoldTime != null)
                {
                    hashCode = (hashCode * 59) + this.HoldTime.GetHashCode();
                }
                if (this.RampUp != null)
                {
                    hashCode = (hashCode * 59) + this.RampUp.GetHashCode();
                }
                if (this.UserDomainName != null)
                {
                    hashCode = (hashCode * 59) + this.UserDomainName.GetHashCode();
                }
                if (this.BypassPolicy != null)
                {
                    hashCode = (hashCode * 59) + this.BypassPolicy.GetHashCode();
                }
                if (this.LogUserName != null)
                {
                    hashCode = (hashCode * 59) + this.LogUserName.GetHashCode();
                }
                if (this.DummyUser != null)
                {
                    hashCode = (hashCode * 59) + this.DummyUser.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RadiusAccountingPort.GetHashCode();
                hashCode = (hashCode * 59) + this.RadiusAcctLookupMechanism.GetHashCode();
                hashCode = (hashCode * 59) + this.SwitchOverTime.GetHashCode();
                hashCode = (hashCode * 59) + this.IgnoreTransitionMessage.GetHashCode();
                if (this.IgnoreAddr != null)
                {
                    hashCode = (hashCode * 59) + this.IgnoreAddr.GetHashCode();
                }
                if (this.IncludeAddr != null)
                {
                    hashCode = (hashCode * 59) + this.IncludeAddr.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RetriesOnFailure.GetHashCode();
                if (this.AuthenticationDomain != null)
                {
                    hashCode = (hashCode * 59) + this.AuthenticationDomain.GetHashCode();
                }
                if (this.RedirectBrowser != null)
                {
                    hashCode = (hashCode * 59) + this.RedirectBrowser.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
