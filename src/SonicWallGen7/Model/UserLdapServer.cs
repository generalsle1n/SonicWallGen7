/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// user LDAP server configuration.
    /// </summary>
    [DataContract(Name = "user_ldap_server")]
    public partial class UserLdapServer : IEquatable<UserLdapServer>, IValidatableObject
    {
        /// <summary>
        /// Configure the LDAP schema.
        /// </summary>
        /// <value>Configure the LDAP schema.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SchemaEnum
        {
            /// <summary>
            /// Enum MicrosoftActiveDirectory for value: microsoft-active-directory
            /// </summary>
            [EnumMember(Value = "microsoft-active-directory")]
            MicrosoftActiveDirectory = 1,

            /// <summary>
            /// Enum NovellEdirectory for value: novell-edirectory
            /// </summary>
            [EnumMember(Value = "novell-edirectory")]
            NovellEdirectory = 2,

            /// <summary>
            /// Enum SambaSmb for value: samba-smb
            /// </summary>
            [EnumMember(Value = "samba-smb")]
            SambaSmb = 3,

            /// <summary>
            /// Enum InetOrgPerson for value: inet-org-person
            /// </summary>
            [EnumMember(Value = "inet-org-person")]
            InetOrgPerson = 4,

            /// <summary>
            /// Enum NetworkInformationService for value: network-information-service
            /// </summary>
            [EnumMember(Value = "network-information-service")]
            NetworkInformationService = 5,

            /// <summary>
            /// Enum Custom for value: custom
            /// </summary>
            [EnumMember(Value = "custom")]
            Custom = 6
        }


        /// <summary>
        /// Configure the LDAP schema.
        /// </summary>
        /// <value>Configure the LDAP schema.</value>
        [DataMember(Name = "schema", EmitDefaultValue = false)]
        public SchemaEnum? Schema { get; set; }
        /// <summary>
        /// Set the bind method when referred to other servers.
        /// </summary>
        /// <value>Set the bind method when referred to other servers.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReferredBindWithAccountEnum
        {
            /// <summary>
            /// Enum Local for value: local
            /// </summary>
            [EnumMember(Value = "local")]
            Local = 1,

            /// <summary>
            /// Enum OtherServers for value: other-servers
            /// </summary>
            [EnumMember(Value = "other-servers")]
            OtherServers = 2
        }


        /// <summary>
        /// Set the bind method when referred to other servers.
        /// </summary>
        /// <value>Set the bind method when referred to other servers.</value>
        [DataMember(Name = "referred_bind_with_account", EmitDefaultValue = false)]
        public ReferredBindWithAccountEnum? ReferredBindWithAccount { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserLdapServer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserLdapServer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserLdapServer" /> class.
        /// </summary>
        /// <param name="host">Set the LDAP server&#39;s host name or IP address. (required).</param>
        /// <param name="enable">Enable the LDAP server..</param>
        /// <param name="role">role.</param>
        /// <param name="partition">Set the LDAP server&#39;s user partition..</param>
        /// <param name="timeout">timeout.</param>
        /// <param name="useTls">Enable use transport layer security (TLS) when log in to the                LDAP server..</param>
        /// <param name="sendStartTlsRequest">Enable send LDAP &#39;Start TLS&#39; request..</param>
        /// <param name="backupFor">Set the LDAP server for which this is the backup for..</param>
        /// <param name="sameBindCredentials">Enable using same bind credentials as the server that this is the backup for..</param>
        /// <param name="port">Set the LDAP server&#39;s UDP port number..</param>
        /// <param name="schema">Configure the LDAP schema..</param>
        /// <param name="userClass">Set the class name of user objects..</param>
        /// <param name="userAttribute">userAttribute.</param>
        /// <param name="userGroupClass">Set the class name of user group objects..</param>
        /// <param name="userGroupAttribute">userGroupAttribute.</param>
        /// <param name="directory">directory.</param>
        /// <param name="bind">bind.</param>
        /// <param name="bindPassword">Set the password for binding to the LDAP server. * Set to null to represent an unconfigured state..</param>
        /// <param name="referredBindWithAccount">Set the bind method when referred to other servers..</param>
        public UserLdapServer(string host = default(string), bool enable = default(bool), UserLdapServerRole role = default(UserLdapServerRole), string partition = default(string), UserLdapServerTimeout timeout = default(UserLdapServerTimeout), bool useTls = default(bool), bool sendStartTlsRequest = default(bool), string backupFor = default(string), bool sameBindCredentials = default(bool), decimal port = default(decimal), SchemaEnum? schema = default(SchemaEnum?), string userClass = default(string), UserLdapServerUserAttribute userAttribute = default(UserLdapServerUserAttribute), string userGroupClass = default(string), UserLdapServerUserGroupAttribute userGroupAttribute = default(UserLdapServerUserGroupAttribute), UserLdapServerDirectory directory = default(UserLdapServerDirectory), UserLdapServerBind bind = default(UserLdapServerBind), string bindPassword = default(string), ReferredBindWithAccountEnum? referredBindWithAccount = default(ReferredBindWithAccountEnum?))
        {
            // to ensure "host" is required (not null)
            if (host == null)
            {
                throw new ArgumentNullException("host is a required property for UserLdapServer and cannot be null");
            }
            this.Host = host;
            this.Enable = enable;
            this.Role = role;
            this.Partition = partition;
            this.Timeout = timeout;
            this.UseTls = useTls;
            this.SendStartTlsRequest = sendStartTlsRequest;
            this.BackupFor = backupFor;
            this.SameBindCredentials = sameBindCredentials;
            this.Port = port;
            this.Schema = schema;
            this.UserClass = userClass;
            this.UserAttribute = userAttribute;
            this.UserGroupClass = userGroupClass;
            this.UserGroupAttribute = userGroupAttribute;
            this.Directory = directory;
            this.Bind = bind;
            this.BindPassword = bindPassword;
            this.ReferredBindWithAccount = referredBindWithAccount;
        }

        /// <summary>
        /// Set the LDAP server&#39;s host name or IP address.
        /// </summary>
        /// <value>Set the LDAP server&#39;s host name or IP address.</value>
        [DataMember(Name = "host", IsRequired = true, EmitDefaultValue = true)]
        public string Host { get; set; }

        /// <summary>
        /// Enable the LDAP server.
        /// </summary>
        /// <value>Enable the LDAP server.</value>
        [DataMember(Name = "enable", EmitDefaultValue = true)]
        public bool Enable { get; set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [DataMember(Name = "role", EmitDefaultValue = false)]
        public UserLdapServerRole Role { get; set; }

        /// <summary>
        /// Set the LDAP server&#39;s user partition.
        /// </summary>
        /// <value>Set the LDAP server&#39;s user partition.</value>
        [DataMember(Name = "partition", EmitDefaultValue = false)]
        public string Partition { get; set; }

        /// <summary>
        /// Gets or Sets Timeout
        /// </summary>
        [DataMember(Name = "timeout", EmitDefaultValue = false)]
        public UserLdapServerTimeout Timeout { get; set; }

        /// <summary>
        /// Enable use transport layer security (TLS) when log in to the                LDAP server.
        /// </summary>
        /// <value>Enable use transport layer security (TLS) when log in to the                LDAP server.</value>
        [DataMember(Name = "use_tls", EmitDefaultValue = true)]
        public bool UseTls { get; set; }

        /// <summary>
        /// Enable send LDAP &#39;Start TLS&#39; request.
        /// </summary>
        /// <value>Enable send LDAP &#39;Start TLS&#39; request.</value>
        [DataMember(Name = "send_start_tls_request", EmitDefaultValue = true)]
        public bool SendStartTlsRequest { get; set; }

        /// <summary>
        /// Set the LDAP server for which this is the backup for.
        /// </summary>
        /// <value>Set the LDAP server for which this is the backup for.</value>
        [DataMember(Name = "backup_for", EmitDefaultValue = false)]
        public string BackupFor { get; set; }

        /// <summary>
        /// Enable using same bind credentials as the server that this is the backup for.
        /// </summary>
        /// <value>Enable using same bind credentials as the server that this is the backup for.</value>
        [DataMember(Name = "same_bind_credentials", EmitDefaultValue = true)]
        public bool SameBindCredentials { get; set; }

        /// <summary>
        /// Set the LDAP server&#39;s UDP port number.
        /// </summary>
        /// <value>Set the LDAP server&#39;s UDP port number.</value>
        [DataMember(Name = "port", EmitDefaultValue = false)]
        public decimal Port { get; set; }

        /// <summary>
        /// Set the class name of user objects.
        /// </summary>
        /// <value>Set the class name of user objects.</value>
        [DataMember(Name = "user_class", EmitDefaultValue = false)]
        public string UserClass { get; set; }

        /// <summary>
        /// Gets or Sets UserAttribute
        /// </summary>
        [DataMember(Name = "user_attribute", EmitDefaultValue = false)]
        public UserLdapServerUserAttribute UserAttribute { get; set; }

        /// <summary>
        /// Set the class name of user group objects.
        /// </summary>
        /// <value>Set the class name of user group objects.</value>
        [DataMember(Name = "user_group_class", EmitDefaultValue = false)]
        public string UserGroupClass { get; set; }

        /// <summary>
        /// Gets or Sets UserGroupAttribute
        /// </summary>
        [DataMember(Name = "user_group_attribute", EmitDefaultValue = false)]
        public UserLdapServerUserGroupAttribute UserGroupAttribute { get; set; }

        /// <summary>
        /// Gets or Sets Directory
        /// </summary>
        [DataMember(Name = "directory", EmitDefaultValue = false)]
        public UserLdapServerDirectory Directory { get; set; }

        /// <summary>
        /// Gets or Sets Bind
        /// </summary>
        [DataMember(Name = "bind", EmitDefaultValue = false)]
        public UserLdapServerBind Bind { get; set; }

        /// <summary>
        /// Set the password for binding to the LDAP server. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Set the password for binding to the LDAP server. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "bind_password", EmitDefaultValue = true)]
        public string BindPassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserLdapServer {\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Partition: ").Append(Partition).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  UseTls: ").Append(UseTls).Append("\n");
            sb.Append("  SendStartTlsRequest: ").Append(SendStartTlsRequest).Append("\n");
            sb.Append("  BackupFor: ").Append(BackupFor).Append("\n");
            sb.Append("  SameBindCredentials: ").Append(SameBindCredentials).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("  UserClass: ").Append(UserClass).Append("\n");
            sb.Append("  UserAttribute: ").Append(UserAttribute).Append("\n");
            sb.Append("  UserGroupClass: ").Append(UserGroupClass).Append("\n");
            sb.Append("  UserGroupAttribute: ").Append(UserGroupAttribute).Append("\n");
            sb.Append("  Directory: ").Append(Directory).Append("\n");
            sb.Append("  Bind: ").Append(Bind).Append("\n");
            sb.Append("  BindPassword: ").Append(BindPassword).Append("\n");
            sb.Append("  ReferredBindWithAccount: ").Append(ReferredBindWithAccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserLdapServer);
        }

        /// <summary>
        /// Returns true if UserLdapServer instances are equal
        /// </summary>
        /// <param name="input">Instance of UserLdapServer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserLdapServer input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Host == input.Host ||
                    (this.Host != null &&
                    this.Host.Equals(input.Host))
                ) && 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                ) && 
                (
                    this.Partition == input.Partition ||
                    (this.Partition != null &&
                    this.Partition.Equals(input.Partition))
                ) && 
                (
                    this.Timeout == input.Timeout ||
                    (this.Timeout != null &&
                    this.Timeout.Equals(input.Timeout))
                ) && 
                (
                    this.UseTls == input.UseTls ||
                    this.UseTls.Equals(input.UseTls)
                ) && 
                (
                    this.SendStartTlsRequest == input.SendStartTlsRequest ||
                    this.SendStartTlsRequest.Equals(input.SendStartTlsRequest)
                ) && 
                (
                    this.BackupFor == input.BackupFor ||
                    (this.BackupFor != null &&
                    this.BackupFor.Equals(input.BackupFor))
                ) && 
                (
                    this.SameBindCredentials == input.SameBindCredentials ||
                    this.SameBindCredentials.Equals(input.SameBindCredentials)
                ) && 
                (
                    this.Port == input.Port ||
                    this.Port.Equals(input.Port)
                ) && 
                (
                    this.Schema == input.Schema ||
                    this.Schema.Equals(input.Schema)
                ) && 
                (
                    this.UserClass == input.UserClass ||
                    (this.UserClass != null &&
                    this.UserClass.Equals(input.UserClass))
                ) && 
                (
                    this.UserAttribute == input.UserAttribute ||
                    (this.UserAttribute != null &&
                    this.UserAttribute.Equals(input.UserAttribute))
                ) && 
                (
                    this.UserGroupClass == input.UserGroupClass ||
                    (this.UserGroupClass != null &&
                    this.UserGroupClass.Equals(input.UserGroupClass))
                ) && 
                (
                    this.UserGroupAttribute == input.UserGroupAttribute ||
                    (this.UserGroupAttribute != null &&
                    this.UserGroupAttribute.Equals(input.UserGroupAttribute))
                ) && 
                (
                    this.Directory == input.Directory ||
                    (this.Directory != null &&
                    this.Directory.Equals(input.Directory))
                ) && 
                (
                    this.Bind == input.Bind ||
                    (this.Bind != null &&
                    this.Bind.Equals(input.Bind))
                ) && 
                (
                    this.BindPassword == input.BindPassword ||
                    (this.BindPassword != null &&
                    this.BindPassword.Equals(input.BindPassword))
                ) && 
                (
                    this.ReferredBindWithAccount == input.ReferredBindWithAccount ||
                    this.ReferredBindWithAccount.Equals(input.ReferredBindWithAccount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Host != null)
                {
                    hashCode = (hashCode * 59) + this.Host.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Enable.GetHashCode();
                if (this.Role != null)
                {
                    hashCode = (hashCode * 59) + this.Role.GetHashCode();
                }
                if (this.Partition != null)
                {
                    hashCode = (hashCode * 59) + this.Partition.GetHashCode();
                }
                if (this.Timeout != null)
                {
                    hashCode = (hashCode * 59) + this.Timeout.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UseTls.GetHashCode();
                hashCode = (hashCode * 59) + this.SendStartTlsRequest.GetHashCode();
                if (this.BackupFor != null)
                {
                    hashCode = (hashCode * 59) + this.BackupFor.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SameBindCredentials.GetHashCode();
                hashCode = (hashCode * 59) + this.Port.GetHashCode();
                hashCode = (hashCode * 59) + this.Schema.GetHashCode();
                if (this.UserClass != null)
                {
                    hashCode = (hashCode * 59) + this.UserClass.GetHashCode();
                }
                if (this.UserAttribute != null)
                {
                    hashCode = (hashCode * 59) + this.UserAttribute.GetHashCode();
                }
                if (this.UserGroupClass != null)
                {
                    hashCode = (hashCode * 59) + this.UserGroupClass.GetHashCode();
                }
                if (this.UserGroupAttribute != null)
                {
                    hashCode = (hashCode * 59) + this.UserGroupAttribute.GetHashCode();
                }
                if (this.Directory != null)
                {
                    hashCode = (hashCode * 59) + this.Directory.GetHashCode();
                }
                if (this.Bind != null)
                {
                    hashCode = (hashCode * 59) + this.Bind.GetHashCode();
                }
                if (this.BindPassword != null)
                {
                    hashCode = (hashCode * 59) + this.BindPassword.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReferredBindWithAccount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
