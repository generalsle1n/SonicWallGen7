/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure advanced diag security services settings.
    /// </summary>
    [DataContract(Name = "diag_advanced_security_service_diag_advanced_security_service")]
    public partial class DiagAdvancedSecurityServiceDiagAdvancedSecurityService : IEquatable<DiagAdvancedSecurityServiceDiagAdvancedSecurityService>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagAdvancedSecurityServiceDiagAdvancedSecurityService" /> class.
        /// </summary>
        /// <param name="dpiEngine">Enable DPI engine..</param>
        /// <param name="bidirectionalIps">Enable applying IPS signatures bidirectionally..</param>
        /// <param name="dpiIpFragmentReassembly">Enable IP fragment reassembly in DPI..</param>
        /// <param name="devDebug">Enable extra dev debug info..</param>
        /// <param name="tcpSequenceAdjustment">Enable TCP expected sequence adjustment in DPI..</param>
        /// <param name="proxyEmailPackets">Enable proxy email packets in DPI..</param>
        /// <param name="smtpChunkingModification">Enable App-Firewall SMTP CHUNKING modification..</param>
        /// <param name="pop3AutoDeletion">Enable gateway AV POP3 auto deletion..</param>
        /// <param name="pop3UidlRewriting">Enable gateway AV POP3 UIDL rewriting..</param>
        /// <param name="smbReadWriteEnforcement">Enable gateway AV SMB read/write ordering enforcement..</param>
        /// <param name="keepHttpAcceptRangeBytes">Keep HTTP header Accept-range: bytes..</param>
        /// <param name="logVirusUri">Enable log virus URI..</param>
        /// <param name="offsetQualifierSignature">Enable apply signatures containing file offset qualifiers..</param>
        /// <param name="minimumHttpHeaderLength">Set minimum HTTP header length (0 to disable)..</param>
        /// <param name="incrementalSignatureUpdates">Enable incremental updates to IDP, GAV and SPY signature databases..</param>
        /// <param name="handleHttp2">Enable handle HTTP/2..</param>
        /// <param name="forceUtmOffload">Enable force UTM offload..</param>
        /// <param name="utmTrafficOffload">Set Active/Active UTM traffic Offload percentage..</param>
        /// <param name="limitDpiTcpWindowAdvertisement">limitDpiTcpWindowAdvertisement.</param>
        /// <param name="thresholdLimit">Threshold above which size limits are enforced on regex automaton..</param>
        /// <param name="maximumRegexAutomatonSize">Maximum allowed size for regex automaton..</param>
        /// <param name="signatureDatabaseReload">Enable signature database reload..</param>
        /// <param name="processIpsSignatures">Enable processing of IPS signatures..</param>
        /// <param name="processGavSignatures">Enable processing of GAV signatures..</param>
        /// <param name="processAntiSpywareSignatures">Enable processing of Anti-Spyware signatures..</param>
        /// <param name="processAppSignatures">Enable processing of App signatures..</param>
        /// <param name="optimalValue">optimalValue.</param>
        /// <param name="limitIpsCftScan">Enable limit IPS CFT scan..</param>
        /// <param name="enforceCfsHostTagSearch">Enable enforcement of host tag search for CFS..</param>
        /// <param name="localCfsServer">localCfsServer.</param>
        /// <param name="cloudAvServer">cloudAvServer.</param>
        public DiagAdvancedSecurityServiceDiagAdvancedSecurityService(bool dpiEngine = default(bool), bool bidirectionalIps = default(bool), bool dpiIpFragmentReassembly = default(bool), bool devDebug = default(bool), bool tcpSequenceAdjustment = default(bool), bool proxyEmailPackets = default(bool), bool smtpChunkingModification = default(bool), bool pop3AutoDeletion = default(bool), bool pop3UidlRewriting = default(bool), bool smbReadWriteEnforcement = default(bool), bool keepHttpAcceptRangeBytes = default(bool), bool logVirusUri = default(bool), bool offsetQualifierSignature = default(bool), decimal minimumHttpHeaderLength = default(decimal), bool incrementalSignatureUpdates = default(bool), bool handleHttp2 = default(bool), bool forceUtmOffload = default(bool), decimal utmTrafficOffload = default(decimal), DiagAdvancedSecurityServiceDiagAdvancedSecurityServiceLimitDpiTcpWindowAdvertisement limitDpiTcpWindowAdvertisement = default(DiagAdvancedSecurityServiceDiagAdvancedSecurityServiceLimitDpiTcpWindowAdvertisement), decimal thresholdLimit = default(decimal), decimal maximumRegexAutomatonSize = default(decimal), bool signatureDatabaseReload = default(bool), bool processIpsSignatures = default(bool), bool processGavSignatures = default(bool), bool processAntiSpywareSignatures = default(bool), bool processAppSignatures = default(bool), DiagAdvancedSecurityServiceDiagAdvancedSecurityServiceOptimalValue optimalValue = default(DiagAdvancedSecurityServiceDiagAdvancedSecurityServiceOptimalValue), bool limitIpsCftScan = default(bool), bool enforceCfsHostTagSearch = default(bool), DiagAdvancedSecurityServiceDiagAdvancedSecurityServiceLocalCfsServer localCfsServer = default(DiagAdvancedSecurityServiceDiagAdvancedSecurityServiceLocalCfsServer), DiagAdvancedSecurityServiceDiagAdvancedSecurityServiceCloudAvServer cloudAvServer = default(DiagAdvancedSecurityServiceDiagAdvancedSecurityServiceCloudAvServer))
        {
            this.DpiEngine = dpiEngine;
            this.BidirectionalIps = bidirectionalIps;
            this.DpiIpFragmentReassembly = dpiIpFragmentReassembly;
            this.DevDebug = devDebug;
            this.TcpSequenceAdjustment = tcpSequenceAdjustment;
            this.ProxyEmailPackets = proxyEmailPackets;
            this.SmtpChunkingModification = smtpChunkingModification;
            this.Pop3AutoDeletion = pop3AutoDeletion;
            this.Pop3UidlRewriting = pop3UidlRewriting;
            this.SmbReadWriteEnforcement = smbReadWriteEnforcement;
            this.KeepHttpAcceptRangeBytes = keepHttpAcceptRangeBytes;
            this.LogVirusUri = logVirusUri;
            this.OffsetQualifierSignature = offsetQualifierSignature;
            this.MinimumHttpHeaderLength = minimumHttpHeaderLength;
            this.IncrementalSignatureUpdates = incrementalSignatureUpdates;
            this.HandleHttp2 = handleHttp2;
            this.ForceUtmOffload = forceUtmOffload;
            this.UtmTrafficOffload = utmTrafficOffload;
            this.LimitDpiTcpWindowAdvertisement = limitDpiTcpWindowAdvertisement;
            this.ThresholdLimit = thresholdLimit;
            this.MaximumRegexAutomatonSize = maximumRegexAutomatonSize;
            this.SignatureDatabaseReload = signatureDatabaseReload;
            this.ProcessIpsSignatures = processIpsSignatures;
            this.ProcessGavSignatures = processGavSignatures;
            this.ProcessAntiSpywareSignatures = processAntiSpywareSignatures;
            this.ProcessAppSignatures = processAppSignatures;
            this.OptimalValue = optimalValue;
            this.LimitIpsCftScan = limitIpsCftScan;
            this.EnforceCfsHostTagSearch = enforceCfsHostTagSearch;
            this.LocalCfsServer = localCfsServer;
            this.CloudAvServer = cloudAvServer;
        }

        /// <summary>
        /// Enable DPI engine.
        /// </summary>
        /// <value>Enable DPI engine.</value>
        [DataMember(Name = "dpi_engine", EmitDefaultValue = true)]
        public bool DpiEngine { get; set; }

        /// <summary>
        /// Enable applying IPS signatures bidirectionally.
        /// </summary>
        /// <value>Enable applying IPS signatures bidirectionally.</value>
        [DataMember(Name = "bidirectional_ips", EmitDefaultValue = true)]
        public bool BidirectionalIps { get; set; }

        /// <summary>
        /// Enable IP fragment reassembly in DPI.
        /// </summary>
        /// <value>Enable IP fragment reassembly in DPI.</value>
        [DataMember(Name = "dpi_ip_fragment_reassembly", EmitDefaultValue = true)]
        public bool DpiIpFragmentReassembly { get; set; }

        /// <summary>
        /// Enable extra dev debug info.
        /// </summary>
        /// <value>Enable extra dev debug info.</value>
        [DataMember(Name = "dev_debug", EmitDefaultValue = true)]
        public bool DevDebug { get; set; }

        /// <summary>
        /// Enable TCP expected sequence adjustment in DPI.
        /// </summary>
        /// <value>Enable TCP expected sequence adjustment in DPI.</value>
        [DataMember(Name = "tcp_sequence_adjustment", EmitDefaultValue = true)]
        public bool TcpSequenceAdjustment { get; set; }

        /// <summary>
        /// Enable proxy email packets in DPI.
        /// </summary>
        /// <value>Enable proxy email packets in DPI.</value>
        [DataMember(Name = "proxy_email_packets", EmitDefaultValue = true)]
        public bool ProxyEmailPackets { get; set; }

        /// <summary>
        /// Enable App-Firewall SMTP CHUNKING modification.
        /// </summary>
        /// <value>Enable App-Firewall SMTP CHUNKING modification.</value>
        [DataMember(Name = "smtp_chunking_modification", EmitDefaultValue = true)]
        public bool SmtpChunkingModification { get; set; }

        /// <summary>
        /// Enable gateway AV POP3 auto deletion.
        /// </summary>
        /// <value>Enable gateway AV POP3 auto deletion.</value>
        [DataMember(Name = "pop3_auto_deletion", EmitDefaultValue = true)]
        public bool Pop3AutoDeletion { get; set; }

        /// <summary>
        /// Enable gateway AV POP3 UIDL rewriting.
        /// </summary>
        /// <value>Enable gateway AV POP3 UIDL rewriting.</value>
        [DataMember(Name = "pop3_uidl_rewriting", EmitDefaultValue = true)]
        public bool Pop3UidlRewriting { get; set; }

        /// <summary>
        /// Enable gateway AV SMB read/write ordering enforcement.
        /// </summary>
        /// <value>Enable gateway AV SMB read/write ordering enforcement.</value>
        [DataMember(Name = "smb_read_write_enforcement", EmitDefaultValue = true)]
        public bool SmbReadWriteEnforcement { get; set; }

        /// <summary>
        /// Keep HTTP header Accept-range: bytes.
        /// </summary>
        /// <value>Keep HTTP header Accept-range: bytes.</value>
        [DataMember(Name = "keep_http_accept_range_bytes", EmitDefaultValue = true)]
        public bool KeepHttpAcceptRangeBytes { get; set; }

        /// <summary>
        /// Enable log virus URI.
        /// </summary>
        /// <value>Enable log virus URI.</value>
        [DataMember(Name = "log_virus_uri", EmitDefaultValue = true)]
        public bool LogVirusUri { get; set; }

        /// <summary>
        /// Enable apply signatures containing file offset qualifiers.
        /// </summary>
        /// <value>Enable apply signatures containing file offset qualifiers.</value>
        [DataMember(Name = "offset_qualifier_signature", EmitDefaultValue = true)]
        public bool OffsetQualifierSignature { get; set; }

        /// <summary>
        /// Set minimum HTTP header length (0 to disable).
        /// </summary>
        /// <value>Set minimum HTTP header length (0 to disable).</value>
        [DataMember(Name = "minimum_http_header_length", EmitDefaultValue = false)]
        public decimal MinimumHttpHeaderLength { get; set; }

        /// <summary>
        /// Enable incremental updates to IDP, GAV and SPY signature databases.
        /// </summary>
        /// <value>Enable incremental updates to IDP, GAV and SPY signature databases.</value>
        [DataMember(Name = "incremental_signature_updates", EmitDefaultValue = true)]
        public bool IncrementalSignatureUpdates { get; set; }

        /// <summary>
        /// Enable handle HTTP/2.
        /// </summary>
        /// <value>Enable handle HTTP/2.</value>
        [DataMember(Name = "handle_http2", EmitDefaultValue = true)]
        public bool HandleHttp2 { get; set; }

        /// <summary>
        /// Enable force UTM offload.
        /// </summary>
        /// <value>Enable force UTM offload.</value>
        [DataMember(Name = "force_utm_offload", EmitDefaultValue = true)]
        public bool ForceUtmOffload { get; set; }

        /// <summary>
        /// Set Active/Active UTM traffic Offload percentage.
        /// </summary>
        /// <value>Set Active/Active UTM traffic Offload percentage.</value>
        [DataMember(Name = "utm_traffic_offload", EmitDefaultValue = false)]
        public decimal UtmTrafficOffload { get; set; }

        /// <summary>
        /// Gets or Sets LimitDpiTcpWindowAdvertisement
        /// </summary>
        [DataMember(Name = "limit_dpi_tcp_window_advertisement", EmitDefaultValue = false)]
        public DiagAdvancedSecurityServiceDiagAdvancedSecurityServiceLimitDpiTcpWindowAdvertisement LimitDpiTcpWindowAdvertisement { get; set; }

        /// <summary>
        /// Threshold above which size limits are enforced on regex automaton.
        /// </summary>
        /// <value>Threshold above which size limits are enforced on regex automaton.</value>
        [DataMember(Name = "threshold_limit", EmitDefaultValue = false)]
        public decimal ThresholdLimit { get; set; }

        /// <summary>
        /// Maximum allowed size for regex automaton.
        /// </summary>
        /// <value>Maximum allowed size for regex automaton.</value>
        [DataMember(Name = "maximum_regex_automaton_size", EmitDefaultValue = false)]
        public decimal MaximumRegexAutomatonSize { get; set; }

        /// <summary>
        /// Enable signature database reload.
        /// </summary>
        /// <value>Enable signature database reload.</value>
        [DataMember(Name = "signature_database_reload", EmitDefaultValue = true)]
        public bool SignatureDatabaseReload { get; set; }

        /// <summary>
        /// Enable processing of IPS signatures.
        /// </summary>
        /// <value>Enable processing of IPS signatures.</value>
        [DataMember(Name = "process_ips_signatures", EmitDefaultValue = true)]
        public bool ProcessIpsSignatures { get; set; }

        /// <summary>
        /// Enable processing of GAV signatures.
        /// </summary>
        /// <value>Enable processing of GAV signatures.</value>
        [DataMember(Name = "process_gav_signatures", EmitDefaultValue = true)]
        public bool ProcessGavSignatures { get; set; }

        /// <summary>
        /// Enable processing of Anti-Spyware signatures.
        /// </summary>
        /// <value>Enable processing of Anti-Spyware signatures.</value>
        [DataMember(Name = "process_anti_spyware_signatures", EmitDefaultValue = true)]
        public bool ProcessAntiSpywareSignatures { get; set; }

        /// <summary>
        /// Enable processing of App signatures.
        /// </summary>
        /// <value>Enable processing of App signatures.</value>
        [DataMember(Name = "process_app_signatures", EmitDefaultValue = true)]
        public bool ProcessAppSignatures { get; set; }

        /// <summary>
        /// Gets or Sets OptimalValue
        /// </summary>
        [DataMember(Name = "optimal_value", EmitDefaultValue = false)]
        public DiagAdvancedSecurityServiceDiagAdvancedSecurityServiceOptimalValue OptimalValue { get; set; }

        /// <summary>
        /// Enable limit IPS CFT scan.
        /// </summary>
        /// <value>Enable limit IPS CFT scan.</value>
        [DataMember(Name = "limit_ips_cft_scan", EmitDefaultValue = true)]
        public bool LimitIpsCftScan { get; set; }

        /// <summary>
        /// Enable enforcement of host tag search for CFS.
        /// </summary>
        /// <value>Enable enforcement of host tag search for CFS.</value>
        [DataMember(Name = "enforce_cfs_host_tag_search", EmitDefaultValue = true)]
        public bool EnforceCfsHostTagSearch { get; set; }

        /// <summary>
        /// Gets or Sets LocalCfsServer
        /// </summary>
        [DataMember(Name = "local_cfs_server", EmitDefaultValue = true)]
        public DiagAdvancedSecurityServiceDiagAdvancedSecurityServiceLocalCfsServer LocalCfsServer { get; set; }

        /// <summary>
        /// Gets or Sets CloudAvServer
        /// </summary>
        [DataMember(Name = "cloud_av_server", EmitDefaultValue = false)]
        public DiagAdvancedSecurityServiceDiagAdvancedSecurityServiceCloudAvServer CloudAvServer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DiagAdvancedSecurityServiceDiagAdvancedSecurityService {\n");
            sb.Append("  DpiEngine: ").Append(DpiEngine).Append("\n");
            sb.Append("  BidirectionalIps: ").Append(BidirectionalIps).Append("\n");
            sb.Append("  DpiIpFragmentReassembly: ").Append(DpiIpFragmentReassembly).Append("\n");
            sb.Append("  DevDebug: ").Append(DevDebug).Append("\n");
            sb.Append("  TcpSequenceAdjustment: ").Append(TcpSequenceAdjustment).Append("\n");
            sb.Append("  ProxyEmailPackets: ").Append(ProxyEmailPackets).Append("\n");
            sb.Append("  SmtpChunkingModification: ").Append(SmtpChunkingModification).Append("\n");
            sb.Append("  Pop3AutoDeletion: ").Append(Pop3AutoDeletion).Append("\n");
            sb.Append("  Pop3UidlRewriting: ").Append(Pop3UidlRewriting).Append("\n");
            sb.Append("  SmbReadWriteEnforcement: ").Append(SmbReadWriteEnforcement).Append("\n");
            sb.Append("  KeepHttpAcceptRangeBytes: ").Append(KeepHttpAcceptRangeBytes).Append("\n");
            sb.Append("  LogVirusUri: ").Append(LogVirusUri).Append("\n");
            sb.Append("  OffsetQualifierSignature: ").Append(OffsetQualifierSignature).Append("\n");
            sb.Append("  MinimumHttpHeaderLength: ").Append(MinimumHttpHeaderLength).Append("\n");
            sb.Append("  IncrementalSignatureUpdates: ").Append(IncrementalSignatureUpdates).Append("\n");
            sb.Append("  HandleHttp2: ").Append(HandleHttp2).Append("\n");
            sb.Append("  ForceUtmOffload: ").Append(ForceUtmOffload).Append("\n");
            sb.Append("  UtmTrafficOffload: ").Append(UtmTrafficOffload).Append("\n");
            sb.Append("  LimitDpiTcpWindowAdvertisement: ").Append(LimitDpiTcpWindowAdvertisement).Append("\n");
            sb.Append("  ThresholdLimit: ").Append(ThresholdLimit).Append("\n");
            sb.Append("  MaximumRegexAutomatonSize: ").Append(MaximumRegexAutomatonSize).Append("\n");
            sb.Append("  SignatureDatabaseReload: ").Append(SignatureDatabaseReload).Append("\n");
            sb.Append("  ProcessIpsSignatures: ").Append(ProcessIpsSignatures).Append("\n");
            sb.Append("  ProcessGavSignatures: ").Append(ProcessGavSignatures).Append("\n");
            sb.Append("  ProcessAntiSpywareSignatures: ").Append(ProcessAntiSpywareSignatures).Append("\n");
            sb.Append("  ProcessAppSignatures: ").Append(ProcessAppSignatures).Append("\n");
            sb.Append("  OptimalValue: ").Append(OptimalValue).Append("\n");
            sb.Append("  LimitIpsCftScan: ").Append(LimitIpsCftScan).Append("\n");
            sb.Append("  EnforceCfsHostTagSearch: ").Append(EnforceCfsHostTagSearch).Append("\n");
            sb.Append("  LocalCfsServer: ").Append(LocalCfsServer).Append("\n");
            sb.Append("  CloudAvServer: ").Append(CloudAvServer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiagAdvancedSecurityServiceDiagAdvancedSecurityService);
        }

        /// <summary>
        /// Returns true if DiagAdvancedSecurityServiceDiagAdvancedSecurityService instances are equal
        /// </summary>
        /// <param name="input">Instance of DiagAdvancedSecurityServiceDiagAdvancedSecurityService to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiagAdvancedSecurityServiceDiagAdvancedSecurityService input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DpiEngine == input.DpiEngine ||
                    this.DpiEngine.Equals(input.DpiEngine)
                ) && 
                (
                    this.BidirectionalIps == input.BidirectionalIps ||
                    this.BidirectionalIps.Equals(input.BidirectionalIps)
                ) && 
                (
                    this.DpiIpFragmentReassembly == input.DpiIpFragmentReassembly ||
                    this.DpiIpFragmentReassembly.Equals(input.DpiIpFragmentReassembly)
                ) && 
                (
                    this.DevDebug == input.DevDebug ||
                    this.DevDebug.Equals(input.DevDebug)
                ) && 
                (
                    this.TcpSequenceAdjustment == input.TcpSequenceAdjustment ||
                    this.TcpSequenceAdjustment.Equals(input.TcpSequenceAdjustment)
                ) && 
                (
                    this.ProxyEmailPackets == input.ProxyEmailPackets ||
                    this.ProxyEmailPackets.Equals(input.ProxyEmailPackets)
                ) && 
                (
                    this.SmtpChunkingModification == input.SmtpChunkingModification ||
                    this.SmtpChunkingModification.Equals(input.SmtpChunkingModification)
                ) && 
                (
                    this.Pop3AutoDeletion == input.Pop3AutoDeletion ||
                    this.Pop3AutoDeletion.Equals(input.Pop3AutoDeletion)
                ) && 
                (
                    this.Pop3UidlRewriting == input.Pop3UidlRewriting ||
                    this.Pop3UidlRewriting.Equals(input.Pop3UidlRewriting)
                ) && 
                (
                    this.SmbReadWriteEnforcement == input.SmbReadWriteEnforcement ||
                    this.SmbReadWriteEnforcement.Equals(input.SmbReadWriteEnforcement)
                ) && 
                (
                    this.KeepHttpAcceptRangeBytes == input.KeepHttpAcceptRangeBytes ||
                    this.KeepHttpAcceptRangeBytes.Equals(input.KeepHttpAcceptRangeBytes)
                ) && 
                (
                    this.LogVirusUri == input.LogVirusUri ||
                    this.LogVirusUri.Equals(input.LogVirusUri)
                ) && 
                (
                    this.OffsetQualifierSignature == input.OffsetQualifierSignature ||
                    this.OffsetQualifierSignature.Equals(input.OffsetQualifierSignature)
                ) && 
                (
                    this.MinimumHttpHeaderLength == input.MinimumHttpHeaderLength ||
                    this.MinimumHttpHeaderLength.Equals(input.MinimumHttpHeaderLength)
                ) && 
                (
                    this.IncrementalSignatureUpdates == input.IncrementalSignatureUpdates ||
                    this.IncrementalSignatureUpdates.Equals(input.IncrementalSignatureUpdates)
                ) && 
                (
                    this.HandleHttp2 == input.HandleHttp2 ||
                    this.HandleHttp2.Equals(input.HandleHttp2)
                ) && 
                (
                    this.ForceUtmOffload == input.ForceUtmOffload ||
                    this.ForceUtmOffload.Equals(input.ForceUtmOffload)
                ) && 
                (
                    this.UtmTrafficOffload == input.UtmTrafficOffload ||
                    this.UtmTrafficOffload.Equals(input.UtmTrafficOffload)
                ) && 
                (
                    this.LimitDpiTcpWindowAdvertisement == input.LimitDpiTcpWindowAdvertisement ||
                    (this.LimitDpiTcpWindowAdvertisement != null &&
                    this.LimitDpiTcpWindowAdvertisement.Equals(input.LimitDpiTcpWindowAdvertisement))
                ) && 
                (
                    this.ThresholdLimit == input.ThresholdLimit ||
                    this.ThresholdLimit.Equals(input.ThresholdLimit)
                ) && 
                (
                    this.MaximumRegexAutomatonSize == input.MaximumRegexAutomatonSize ||
                    this.MaximumRegexAutomatonSize.Equals(input.MaximumRegexAutomatonSize)
                ) && 
                (
                    this.SignatureDatabaseReload == input.SignatureDatabaseReload ||
                    this.SignatureDatabaseReload.Equals(input.SignatureDatabaseReload)
                ) && 
                (
                    this.ProcessIpsSignatures == input.ProcessIpsSignatures ||
                    this.ProcessIpsSignatures.Equals(input.ProcessIpsSignatures)
                ) && 
                (
                    this.ProcessGavSignatures == input.ProcessGavSignatures ||
                    this.ProcessGavSignatures.Equals(input.ProcessGavSignatures)
                ) && 
                (
                    this.ProcessAntiSpywareSignatures == input.ProcessAntiSpywareSignatures ||
                    this.ProcessAntiSpywareSignatures.Equals(input.ProcessAntiSpywareSignatures)
                ) && 
                (
                    this.ProcessAppSignatures == input.ProcessAppSignatures ||
                    this.ProcessAppSignatures.Equals(input.ProcessAppSignatures)
                ) && 
                (
                    this.OptimalValue == input.OptimalValue ||
                    (this.OptimalValue != null &&
                    this.OptimalValue.Equals(input.OptimalValue))
                ) && 
                (
                    this.LimitIpsCftScan == input.LimitIpsCftScan ||
                    this.LimitIpsCftScan.Equals(input.LimitIpsCftScan)
                ) && 
                (
                    this.EnforceCfsHostTagSearch == input.EnforceCfsHostTagSearch ||
                    this.EnforceCfsHostTagSearch.Equals(input.EnforceCfsHostTagSearch)
                ) && 
                (
                    this.LocalCfsServer == input.LocalCfsServer ||
                    (this.LocalCfsServer != null &&
                    this.LocalCfsServer.Equals(input.LocalCfsServer))
                ) && 
                (
                    this.CloudAvServer == input.CloudAvServer ||
                    (this.CloudAvServer != null &&
                    this.CloudAvServer.Equals(input.CloudAvServer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.DpiEngine.GetHashCode();
                hashCode = (hashCode * 59) + this.BidirectionalIps.GetHashCode();
                hashCode = (hashCode * 59) + this.DpiIpFragmentReassembly.GetHashCode();
                hashCode = (hashCode * 59) + this.DevDebug.GetHashCode();
                hashCode = (hashCode * 59) + this.TcpSequenceAdjustment.GetHashCode();
                hashCode = (hashCode * 59) + this.ProxyEmailPackets.GetHashCode();
                hashCode = (hashCode * 59) + this.SmtpChunkingModification.GetHashCode();
                hashCode = (hashCode * 59) + this.Pop3AutoDeletion.GetHashCode();
                hashCode = (hashCode * 59) + this.Pop3UidlRewriting.GetHashCode();
                hashCode = (hashCode * 59) + this.SmbReadWriteEnforcement.GetHashCode();
                hashCode = (hashCode * 59) + this.KeepHttpAcceptRangeBytes.GetHashCode();
                hashCode = (hashCode * 59) + this.LogVirusUri.GetHashCode();
                hashCode = (hashCode * 59) + this.OffsetQualifierSignature.GetHashCode();
                hashCode = (hashCode * 59) + this.MinimumHttpHeaderLength.GetHashCode();
                hashCode = (hashCode * 59) + this.IncrementalSignatureUpdates.GetHashCode();
                hashCode = (hashCode * 59) + this.HandleHttp2.GetHashCode();
                hashCode = (hashCode * 59) + this.ForceUtmOffload.GetHashCode();
                hashCode = (hashCode * 59) + this.UtmTrafficOffload.GetHashCode();
                if (this.LimitDpiTcpWindowAdvertisement != null)
                {
                    hashCode = (hashCode * 59) + this.LimitDpiTcpWindowAdvertisement.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ThresholdLimit.GetHashCode();
                hashCode = (hashCode * 59) + this.MaximumRegexAutomatonSize.GetHashCode();
                hashCode = (hashCode * 59) + this.SignatureDatabaseReload.GetHashCode();
                hashCode = (hashCode * 59) + this.ProcessIpsSignatures.GetHashCode();
                hashCode = (hashCode * 59) + this.ProcessGavSignatures.GetHashCode();
                hashCode = (hashCode * 59) + this.ProcessAntiSpywareSignatures.GetHashCode();
                hashCode = (hashCode * 59) + this.ProcessAppSignatures.GetHashCode();
                if (this.OptimalValue != null)
                {
                    hashCode = (hashCode * 59) + this.OptimalValue.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LimitIpsCftScan.GetHashCode();
                hashCode = (hashCode * 59) + this.EnforceCfsHostTagSearch.GetHashCode();
                if (this.LocalCfsServer != null)
                {
                    hashCode = (hashCode * 59) + this.LocalCfsServer.GetHashCode();
                }
                if (this.CloudAvServer != null)
                {
                    hashCode = (hashCode * 59) + this.CloudAvServer.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
