/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// ShowStatusIphPolicyListInner
    /// </summary>
    [DataContract(Name = "show_status_iph_policy_list_inner")]
    public partial class ShowStatusIphPolicyListInner : IEquatable<ShowStatusIphPolicyListInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusIphPolicyListInner" /> class.
        /// </summary>
        /// <param name="protocolName">protocolName.</param>
        /// <param name="policySource">policySource.</param>
        /// <param name="policyDestination">policyDestination.</param>
        /// <param name="policyEnabled">policyEnabled.</param>
        /// <param name="policyComment">policyComment.</param>
        /// <param name="defaultPolicy">defaultPolicy.</param>
        /// <param name="requestPacketsForwarded">requestPacketsForwarded.</param>
        /// <param name="requestPacketsDropped">requestPacketsDropped.</param>
        /// <param name="replyPacketsForwarded">replyPacketsForwarded.</param>
        /// <param name="replyPacketsDropped">replyPacketsDropped.</param>
        public ShowStatusIphPolicyListInner(string protocolName = default(string), string policySource = default(string), string policyDestination = default(string), string policyEnabled = default(string), string policyComment = default(string), string defaultPolicy = default(string), string requestPacketsForwarded = default(string), string requestPacketsDropped = default(string), string replyPacketsForwarded = default(string), string replyPacketsDropped = default(string))
        {
            this.ProtocolName = protocolName;
            this.PolicySource = policySource;
            this.PolicyDestination = policyDestination;
            this.PolicyEnabled = policyEnabled;
            this.PolicyComment = policyComment;
            this.DefaultPolicy = defaultPolicy;
            this.RequestPacketsForwarded = requestPacketsForwarded;
            this.RequestPacketsDropped = requestPacketsDropped;
            this.ReplyPacketsForwarded = replyPacketsForwarded;
            this.ReplyPacketsDropped = replyPacketsDropped;
        }

        /// <summary>
        /// Gets or Sets ProtocolName
        /// </summary>
        [DataMember(Name = "protocol_name", EmitDefaultValue = false)]
        public string ProtocolName { get; set; }

        /// <summary>
        /// Gets or Sets PolicySource
        /// </summary>
        [DataMember(Name = "policy_source", EmitDefaultValue = false)]
        public string PolicySource { get; set; }

        /// <summary>
        /// Gets or Sets PolicyDestination
        /// </summary>
        [DataMember(Name = "policy_destination", EmitDefaultValue = false)]
        public string PolicyDestination { get; set; }

        /// <summary>
        /// Gets or Sets PolicyEnabled
        /// </summary>
        [DataMember(Name = "policy_enabled", EmitDefaultValue = false)]
        public string PolicyEnabled { get; set; }

        /// <summary>
        /// Gets or Sets PolicyComment
        /// </summary>
        [DataMember(Name = "policy_comment", EmitDefaultValue = false)]
        public string PolicyComment { get; set; }

        /// <summary>
        /// Gets or Sets DefaultPolicy
        /// </summary>
        [DataMember(Name = "default_policy", EmitDefaultValue = false)]
        public string DefaultPolicy { get; set; }

        /// <summary>
        /// Gets or Sets RequestPacketsForwarded
        /// </summary>
        [DataMember(Name = "request_packets_forwarded", EmitDefaultValue = false)]
        public string RequestPacketsForwarded { get; set; }

        /// <summary>
        /// Gets or Sets RequestPacketsDropped
        /// </summary>
        [DataMember(Name = "request_packets_dropped", EmitDefaultValue = false)]
        public string RequestPacketsDropped { get; set; }

        /// <summary>
        /// Gets or Sets ReplyPacketsForwarded
        /// </summary>
        [DataMember(Name = "reply_packets_forwarded", EmitDefaultValue = false)]
        public string ReplyPacketsForwarded { get; set; }

        /// <summary>
        /// Gets or Sets ReplyPacketsDropped
        /// </summary>
        [DataMember(Name = "reply_packets_dropped", EmitDefaultValue = false)]
        public string ReplyPacketsDropped { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusIphPolicyListInner {\n");
            sb.Append("  ProtocolName: ").Append(ProtocolName).Append("\n");
            sb.Append("  PolicySource: ").Append(PolicySource).Append("\n");
            sb.Append("  PolicyDestination: ").Append(PolicyDestination).Append("\n");
            sb.Append("  PolicyEnabled: ").Append(PolicyEnabled).Append("\n");
            sb.Append("  PolicyComment: ").Append(PolicyComment).Append("\n");
            sb.Append("  DefaultPolicy: ").Append(DefaultPolicy).Append("\n");
            sb.Append("  RequestPacketsForwarded: ").Append(RequestPacketsForwarded).Append("\n");
            sb.Append("  RequestPacketsDropped: ").Append(RequestPacketsDropped).Append("\n");
            sb.Append("  ReplyPacketsForwarded: ").Append(ReplyPacketsForwarded).Append("\n");
            sb.Append("  ReplyPacketsDropped: ").Append(ReplyPacketsDropped).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusIphPolicyListInner);
        }

        /// <summary>
        /// Returns true if ShowStatusIphPolicyListInner instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusIphPolicyListInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusIphPolicyListInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ProtocolName == input.ProtocolName ||
                    (this.ProtocolName != null &&
                    this.ProtocolName.Equals(input.ProtocolName))
                ) && 
                (
                    this.PolicySource == input.PolicySource ||
                    (this.PolicySource != null &&
                    this.PolicySource.Equals(input.PolicySource))
                ) && 
                (
                    this.PolicyDestination == input.PolicyDestination ||
                    (this.PolicyDestination != null &&
                    this.PolicyDestination.Equals(input.PolicyDestination))
                ) && 
                (
                    this.PolicyEnabled == input.PolicyEnabled ||
                    (this.PolicyEnabled != null &&
                    this.PolicyEnabled.Equals(input.PolicyEnabled))
                ) && 
                (
                    this.PolicyComment == input.PolicyComment ||
                    (this.PolicyComment != null &&
                    this.PolicyComment.Equals(input.PolicyComment))
                ) && 
                (
                    this.DefaultPolicy == input.DefaultPolicy ||
                    (this.DefaultPolicy != null &&
                    this.DefaultPolicy.Equals(input.DefaultPolicy))
                ) && 
                (
                    this.RequestPacketsForwarded == input.RequestPacketsForwarded ||
                    (this.RequestPacketsForwarded != null &&
                    this.RequestPacketsForwarded.Equals(input.RequestPacketsForwarded))
                ) && 
                (
                    this.RequestPacketsDropped == input.RequestPacketsDropped ||
                    (this.RequestPacketsDropped != null &&
                    this.RequestPacketsDropped.Equals(input.RequestPacketsDropped))
                ) && 
                (
                    this.ReplyPacketsForwarded == input.ReplyPacketsForwarded ||
                    (this.ReplyPacketsForwarded != null &&
                    this.ReplyPacketsForwarded.Equals(input.ReplyPacketsForwarded))
                ) && 
                (
                    this.ReplyPacketsDropped == input.ReplyPacketsDropped ||
                    (this.ReplyPacketsDropped != null &&
                    this.ReplyPacketsDropped.Equals(input.ReplyPacketsDropped))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProtocolName != null)
                {
                    hashCode = (hashCode * 59) + this.ProtocolName.GetHashCode();
                }
                if (this.PolicySource != null)
                {
                    hashCode = (hashCode * 59) + this.PolicySource.GetHashCode();
                }
                if (this.PolicyDestination != null)
                {
                    hashCode = (hashCode * 59) + this.PolicyDestination.GetHashCode();
                }
                if (this.PolicyEnabled != null)
                {
                    hashCode = (hashCode * 59) + this.PolicyEnabled.GetHashCode();
                }
                if (this.PolicyComment != null)
                {
                    hashCode = (hashCode * 59) + this.PolicyComment.GetHashCode();
                }
                if (this.DefaultPolicy != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultPolicy.GetHashCode();
                }
                if (this.RequestPacketsForwarded != null)
                {
                    hashCode = (hashCode * 59) + this.RequestPacketsForwarded.GetHashCode();
                }
                if (this.RequestPacketsDropped != null)
                {
                    hashCode = (hashCode * 59) + this.RequestPacketsDropped.GetHashCode();
                }
                if (this.ReplyPacketsForwarded != null)
                {
                    hashCode = (hashCode * 59) + this.ReplyPacketsForwarded.GetHashCode();
                }
                if (this.ReplyPacketsDropped != null)
                {
                    hashCode = (hashCode * 59) + this.ReplyPacketsDropped.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
