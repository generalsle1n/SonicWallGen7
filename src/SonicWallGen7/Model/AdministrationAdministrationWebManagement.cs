/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure web management.
    /// </summary>
    [DataContract(Name = "administration_administration_web_management")]
    public partial class AdministrationAdministrationWebManagement : IEquatable<AdministrationAdministrationWebManagement>, IValidatableObject
    {
        /// <summary>
        /// Set user-name-field.
        /// </summary>
        /// <value>Set user-name-field.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UserNameFieldEnum
        {
            /// <summary>
            /// Enum CommonName for value: common-name
            /// </summary>
            [EnumMember(Value = "common-name")]
            CommonName = 1,

            /// <summary>
            /// Enum Email for value: email
            /// </summary>
            [EnumMember(Value = "email")]
            Email = 2,

            /// <summary>
            /// Enum PrincipalName for value: principal-name
            /// </summary>
            [EnumMember(Value = "principal-name")]
            PrincipalName = 3
        }


        /// <summary>
        /// Set user-name-field.
        /// </summary>
        /// <value>Set user-name-field.</value>
        [DataMember(Name = "user_name_field", EmitDefaultValue = false)]
        public UserNameFieldEnum? UserNameField { get; set; }
        /// <summary>
        /// Set user-name-field.
        /// </summary>
        /// <value>Set user-name-field.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CacUserGroupRetrieveEnum
        {
            /// <summary>
            /// Enum LocalConfigured for value: local-configured
            /// </summary>
            [EnumMember(Value = "local-configured")]
            LocalConfigured = 1,

            /// <summary>
            /// Enum FromLdap for value: from-ldap
            /// </summary>
            [EnumMember(Value = "from-ldap")]
            FromLdap = 2
        }


        /// <summary>
        /// Set user-name-field.
        /// </summary>
        /// <value>Set user-name-field.</value>
        [DataMember(Name = "cac_user_group_retrieve", EmitDefaultValue = false)]
        public CacUserGroupRetrieveEnum? CacUserGroupRetrieve { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdministrationAdministrationWebManagement" /> class.
        /// </summary>
        /// <param name="allowHttp">Allow HTTP management (it is less secure than using HTTPS)..</param>
        /// <param name="certificate">certificate.</param>
        /// <param name="certCommonName">Set the self signed certificate common name..</param>
        /// <param name="clientCertificateCheck">Enable client certificate check..</param>
        /// <param name="clientCertificateCache">Enable client certificate cache..</param>
        /// <param name="userNameField">Set user-name-field..</param>
        /// <param name="clientCertificateIssuer">Set client certificate issuer..</param>
        /// <param name="cacUserGroupRetrieve">Set user-name-field..</param>
        /// <param name="ocspCheck">ocspCheck.</param>
        /// <param name="ocspPeriodicCheck">ocspPeriodicCheck.</param>
        /// <param name="ocspCheckInterval">OCSP-check_interval in web management  configure..</param>
        /// <param name="defaultTableSize">Set default size of tables within the web management user interface..</param>
        /// <param name="refreshInterval">Set auto-update refresh interval of tables within the web management user interface..</param>
        /// <param name="tooltip">tooltip.</param>
        /// <param name="certificationPeriodicExpirationCheck">Enable certificate Expiration Periodic check..</param>
        /// <param name="certificationExpirationInterval">Set default certification expiration interval..</param>
        public AdministrationAdministrationWebManagement(bool allowHttp = default(bool), AdministrationAdministrationWebManagementCertificate certificate = default(AdministrationAdministrationWebManagementCertificate), string certCommonName = default(string), bool clientCertificateCheck = default(bool), bool clientCertificateCache = default(bool), UserNameFieldEnum? userNameField = default(UserNameFieldEnum?), string clientCertificateIssuer = default(string), CacUserGroupRetrieveEnum? cacUserGroupRetrieve = default(CacUserGroupRetrieveEnum?), AdministrationAdministrationWebManagementOcspCheck ocspCheck = default(AdministrationAdministrationWebManagementOcspCheck), AdministrationAdministrationWebManagementOcspPeriodicCheck ocspPeriodicCheck = default(AdministrationAdministrationWebManagementOcspPeriodicCheck), decimal ocspCheckInterval = default(decimal), decimal defaultTableSize = default(decimal), decimal refreshInterval = default(decimal), AdministrationAdministrationWebManagementTooltip tooltip = default(AdministrationAdministrationWebManagementTooltip), bool certificationPeriodicExpirationCheck = default(bool), decimal certificationExpirationInterval = default(decimal))
        {
            this.AllowHttp = allowHttp;
            this.Certificate = certificate;
            this.CertCommonName = certCommonName;
            this.ClientCertificateCheck = clientCertificateCheck;
            this.ClientCertificateCache = clientCertificateCache;
            this.UserNameField = userNameField;
            this.ClientCertificateIssuer = clientCertificateIssuer;
            this.CacUserGroupRetrieve = cacUserGroupRetrieve;
            this.OcspCheck = ocspCheck;
            this.OcspPeriodicCheck = ocspPeriodicCheck;
            this.OcspCheckInterval = ocspCheckInterval;
            this.DefaultTableSize = defaultTableSize;
            this.RefreshInterval = refreshInterval;
            this.Tooltip = tooltip;
            this.CertificationPeriodicExpirationCheck = certificationPeriodicExpirationCheck;
            this.CertificationExpirationInterval = certificationExpirationInterval;
        }

        /// <summary>
        /// Allow HTTP management (it is less secure than using HTTPS).
        /// </summary>
        /// <value>Allow HTTP management (it is less secure than using HTTPS).</value>
        [DataMember(Name = "allow_http", EmitDefaultValue = true)]
        public bool AllowHttp { get; set; }

        /// <summary>
        /// Gets or Sets Certificate
        /// </summary>
        [DataMember(Name = "certificate", EmitDefaultValue = false)]
        public AdministrationAdministrationWebManagementCertificate Certificate { get; set; }

        /// <summary>
        /// Set the self signed certificate common name.
        /// </summary>
        /// <value>Set the self signed certificate common name.</value>
        [DataMember(Name = "cert_common_name", EmitDefaultValue = false)]
        public string CertCommonName { get; set; }

        /// <summary>
        /// Enable client certificate check.
        /// </summary>
        /// <value>Enable client certificate check.</value>
        [DataMember(Name = "client_certificate_check", EmitDefaultValue = true)]
        public bool ClientCertificateCheck { get; set; }

        /// <summary>
        /// Enable client certificate cache.
        /// </summary>
        /// <value>Enable client certificate cache.</value>
        [DataMember(Name = "client_certificate_cache", EmitDefaultValue = true)]
        public bool ClientCertificateCache { get; set; }

        /// <summary>
        /// Set client certificate issuer.
        /// </summary>
        /// <value>Set client certificate issuer.</value>
        [DataMember(Name = "client_certificate_issuer", EmitDefaultValue = false)]
        public string ClientCertificateIssuer { get; set; }

        /// <summary>
        /// Gets or Sets OcspCheck
        /// </summary>
        [DataMember(Name = "ocsp_check", EmitDefaultValue = true)]
        public AdministrationAdministrationWebManagementOcspCheck OcspCheck { get; set; }

        /// <summary>
        /// Gets or Sets OcspPeriodicCheck
        /// </summary>
        [DataMember(Name = "ocsp_periodic_check", EmitDefaultValue = false)]
        public AdministrationAdministrationWebManagementOcspPeriodicCheck OcspPeriodicCheck { get; set; }

        /// <summary>
        /// OCSP-check_interval in web management  configure.
        /// </summary>
        /// <value>OCSP-check_interval in web management  configure.</value>
        [DataMember(Name = "ocsp_check_interval", EmitDefaultValue = false)]
        public decimal OcspCheckInterval { get; set; }

        /// <summary>
        /// Set default size of tables within the web management user interface.
        /// </summary>
        /// <value>Set default size of tables within the web management user interface.</value>
        [DataMember(Name = "default_table_size", EmitDefaultValue = false)]
        public decimal DefaultTableSize { get; set; }

        /// <summary>
        /// Set auto-update refresh interval of tables within the web management user interface.
        /// </summary>
        /// <value>Set auto-update refresh interval of tables within the web management user interface.</value>
        [DataMember(Name = "refresh_interval", EmitDefaultValue = false)]
        public decimal RefreshInterval { get; set; }

        /// <summary>
        /// Gets or Sets Tooltip
        /// </summary>
        [DataMember(Name = "tooltip", EmitDefaultValue = false)]
        public AdministrationAdministrationWebManagementTooltip Tooltip { get; set; }

        /// <summary>
        /// Enable certificate Expiration Periodic check.
        /// </summary>
        /// <value>Enable certificate Expiration Periodic check.</value>
        [DataMember(Name = "certification_periodic_expiration_check", EmitDefaultValue = true)]
        public bool CertificationPeriodicExpirationCheck { get; set; }

        /// <summary>
        /// Set default certification expiration interval.
        /// </summary>
        /// <value>Set default certification expiration interval.</value>
        [DataMember(Name = "certification_expiration_interval", EmitDefaultValue = false)]
        public decimal CertificationExpirationInterval { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdministrationAdministrationWebManagement {\n");
            sb.Append("  AllowHttp: ").Append(AllowHttp).Append("\n");
            sb.Append("  Certificate: ").Append(Certificate).Append("\n");
            sb.Append("  CertCommonName: ").Append(CertCommonName).Append("\n");
            sb.Append("  ClientCertificateCheck: ").Append(ClientCertificateCheck).Append("\n");
            sb.Append("  ClientCertificateCache: ").Append(ClientCertificateCache).Append("\n");
            sb.Append("  UserNameField: ").Append(UserNameField).Append("\n");
            sb.Append("  ClientCertificateIssuer: ").Append(ClientCertificateIssuer).Append("\n");
            sb.Append("  CacUserGroupRetrieve: ").Append(CacUserGroupRetrieve).Append("\n");
            sb.Append("  OcspCheck: ").Append(OcspCheck).Append("\n");
            sb.Append("  OcspPeriodicCheck: ").Append(OcspPeriodicCheck).Append("\n");
            sb.Append("  OcspCheckInterval: ").Append(OcspCheckInterval).Append("\n");
            sb.Append("  DefaultTableSize: ").Append(DefaultTableSize).Append("\n");
            sb.Append("  RefreshInterval: ").Append(RefreshInterval).Append("\n");
            sb.Append("  Tooltip: ").Append(Tooltip).Append("\n");
            sb.Append("  CertificationPeriodicExpirationCheck: ").Append(CertificationPeriodicExpirationCheck).Append("\n");
            sb.Append("  CertificationExpirationInterval: ").Append(CertificationExpirationInterval).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdministrationAdministrationWebManagement);
        }

        /// <summary>
        /// Returns true if AdministrationAdministrationWebManagement instances are equal
        /// </summary>
        /// <param name="input">Instance of AdministrationAdministrationWebManagement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdministrationAdministrationWebManagement input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AllowHttp == input.AllowHttp ||
                    this.AllowHttp.Equals(input.AllowHttp)
                ) && 
                (
                    this.Certificate == input.Certificate ||
                    (this.Certificate != null &&
                    this.Certificate.Equals(input.Certificate))
                ) && 
                (
                    this.CertCommonName == input.CertCommonName ||
                    (this.CertCommonName != null &&
                    this.CertCommonName.Equals(input.CertCommonName))
                ) && 
                (
                    this.ClientCertificateCheck == input.ClientCertificateCheck ||
                    this.ClientCertificateCheck.Equals(input.ClientCertificateCheck)
                ) && 
                (
                    this.ClientCertificateCache == input.ClientCertificateCache ||
                    this.ClientCertificateCache.Equals(input.ClientCertificateCache)
                ) && 
                (
                    this.UserNameField == input.UserNameField ||
                    this.UserNameField.Equals(input.UserNameField)
                ) && 
                (
                    this.ClientCertificateIssuer == input.ClientCertificateIssuer ||
                    (this.ClientCertificateIssuer != null &&
                    this.ClientCertificateIssuer.Equals(input.ClientCertificateIssuer))
                ) && 
                (
                    this.CacUserGroupRetrieve == input.CacUserGroupRetrieve ||
                    this.CacUserGroupRetrieve.Equals(input.CacUserGroupRetrieve)
                ) && 
                (
                    this.OcspCheck == input.OcspCheck ||
                    (this.OcspCheck != null &&
                    this.OcspCheck.Equals(input.OcspCheck))
                ) && 
                (
                    this.OcspPeriodicCheck == input.OcspPeriodicCheck ||
                    (this.OcspPeriodicCheck != null &&
                    this.OcspPeriodicCheck.Equals(input.OcspPeriodicCheck))
                ) && 
                (
                    this.OcspCheckInterval == input.OcspCheckInterval ||
                    this.OcspCheckInterval.Equals(input.OcspCheckInterval)
                ) && 
                (
                    this.DefaultTableSize == input.DefaultTableSize ||
                    this.DefaultTableSize.Equals(input.DefaultTableSize)
                ) && 
                (
                    this.RefreshInterval == input.RefreshInterval ||
                    this.RefreshInterval.Equals(input.RefreshInterval)
                ) && 
                (
                    this.Tooltip == input.Tooltip ||
                    (this.Tooltip != null &&
                    this.Tooltip.Equals(input.Tooltip))
                ) && 
                (
                    this.CertificationPeriodicExpirationCheck == input.CertificationPeriodicExpirationCheck ||
                    this.CertificationPeriodicExpirationCheck.Equals(input.CertificationPeriodicExpirationCheck)
                ) && 
                (
                    this.CertificationExpirationInterval == input.CertificationExpirationInterval ||
                    this.CertificationExpirationInterval.Equals(input.CertificationExpirationInterval)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AllowHttp.GetHashCode();
                if (this.Certificate != null)
                {
                    hashCode = (hashCode * 59) + this.Certificate.GetHashCode();
                }
                if (this.CertCommonName != null)
                {
                    hashCode = (hashCode * 59) + this.CertCommonName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ClientCertificateCheck.GetHashCode();
                hashCode = (hashCode * 59) + this.ClientCertificateCache.GetHashCode();
                hashCode = (hashCode * 59) + this.UserNameField.GetHashCode();
                if (this.ClientCertificateIssuer != null)
                {
                    hashCode = (hashCode * 59) + this.ClientCertificateIssuer.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CacUserGroupRetrieve.GetHashCode();
                if (this.OcspCheck != null)
                {
                    hashCode = (hashCode * 59) + this.OcspCheck.GetHashCode();
                }
                if (this.OcspPeriodicCheck != null)
                {
                    hashCode = (hashCode * 59) + this.OcspPeriodicCheck.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OcspCheckInterval.GetHashCode();
                hashCode = (hashCode * 59) + this.DefaultTableSize.GetHashCode();
                hashCode = (hashCode * 59) + this.RefreshInterval.GetHashCode();
                if (this.Tooltip != null)
                {
                    hashCode = (hashCode * 59) + this.Tooltip.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CertificationPeriodicExpirationCheck.GetHashCode();
                hashCode = (hashCode * 59) + this.CertificationExpirationInterval.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
