/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enable ssh public key algorithm.
    /// </summary>
    [DataContract(Name = "cipher_control_ssh_cipher_control_ssh_public_key")]
    public partial class CipherControlSshCipherControlSshPublicKey : IEquatable<CipherControlSshCipherControlSshPublicKey>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CipherControlSshCipherControlSshPublicKey" /> class.
        /// </summary>
        /// <param name="sshRsa">Ssh-rsa..</param>
        /// <param name="rsaSha2256">Rsa-sha2-256..</param>
        /// <param name="rsaSha2512">Rsa-sha2-512..</param>
        public CipherControlSshCipherControlSshPublicKey(bool sshRsa = default(bool), bool rsaSha2256 = default(bool), bool rsaSha2512 = default(bool))
        {
            this.SshRsa = sshRsa;
            this.RsaSha2256 = rsaSha2256;
            this.RsaSha2512 = rsaSha2512;
        }

        /// <summary>
        /// Ssh-rsa.
        /// </summary>
        /// <value>Ssh-rsa.</value>
        [DataMember(Name = "ssh_rsa", EmitDefaultValue = true)]
        public bool SshRsa { get; set; }

        /// <summary>
        /// Rsa-sha2-256.
        /// </summary>
        /// <value>Rsa-sha2-256.</value>
        [DataMember(Name = "rsa_sha2_256", EmitDefaultValue = true)]
        public bool RsaSha2256 { get; set; }

        /// <summary>
        /// Rsa-sha2-512.
        /// </summary>
        /// <value>Rsa-sha2-512.</value>
        [DataMember(Name = "rsa_sha2_512", EmitDefaultValue = true)]
        public bool RsaSha2512 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CipherControlSshCipherControlSshPublicKey {\n");
            sb.Append("  SshRsa: ").Append(SshRsa).Append("\n");
            sb.Append("  RsaSha2256: ").Append(RsaSha2256).Append("\n");
            sb.Append("  RsaSha2512: ").Append(RsaSha2512).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CipherControlSshCipherControlSshPublicKey);
        }

        /// <summary>
        /// Returns true if CipherControlSshCipherControlSshPublicKey instances are equal
        /// </summary>
        /// <param name="input">Instance of CipherControlSshCipherControlSshPublicKey to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CipherControlSshCipherControlSshPublicKey input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SshRsa == input.SshRsa ||
                    this.SshRsa.Equals(input.SshRsa)
                ) && 
                (
                    this.RsaSha2256 == input.RsaSha2256 ||
                    this.RsaSha2256.Equals(input.RsaSha2256)
                ) && 
                (
                    this.RsaSha2512 == input.RsaSha2512 ||
                    this.RsaSha2512.Equals(input.RsaSha2512)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SshRsa.GetHashCode();
                hashCode = (hashCode * 59) + this.RsaSha2256.GetHashCode();
                hashCode = (hashCode * 59) + this.RsaSha2512.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
