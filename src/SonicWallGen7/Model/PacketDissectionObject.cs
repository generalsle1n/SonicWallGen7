/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Packet dissection object configuration.
    /// </summary>
    [DataContract(Name = "packet_dissection_object")]
    public partial class PacketDissectionObject : IEquatable<PacketDissectionObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PacketDissectionObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PacketDissectionObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PacketDissectionObject" /> class.
        /// </summary>
        /// <param name="name">Set packet dissection object name. (required).</param>
        /// <param name="negativeMatching">Enable negative matching..</param>
        /// <param name="family">family.</param>
        /// <param name="dataType">dataType.</param>
        public PacketDissectionObject(string name = default(string), bool negativeMatching = default(bool), PacketDissectionObjectFamily family = default(PacketDissectionObjectFamily), PacketDissectionObjectDataType dataType = default(PacketDissectionObjectDataType))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for PacketDissectionObject and cannot be null");
            }
            this.Name = name;
            this.NegativeMatching = negativeMatching;
            this.Family = family;
            this.DataType = dataType;
        }

        /// <summary>
        /// Set packet dissection object name.
        /// </summary>
        /// <value>Set packet dissection object name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Enable negative matching.
        /// </summary>
        /// <value>Enable negative matching.</value>
        [DataMember(Name = "negative_matching", EmitDefaultValue = true)]
        public bool NegativeMatching { get; set; }

        /// <summary>
        /// Gets or Sets Family
        /// </summary>
        [DataMember(Name = "family", EmitDefaultValue = false)]
        public PacketDissectionObjectFamily Family { get; set; }

        /// <summary>
        /// Gets or Sets DataType
        /// </summary>
        [DataMember(Name = "data_type", EmitDefaultValue = false)]
        public PacketDissectionObjectDataType DataType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PacketDissectionObject {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NegativeMatching: ").Append(NegativeMatching).Append("\n");
            sb.Append("  Family: ").Append(Family).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PacketDissectionObject);
        }

        /// <summary>
        /// Returns true if PacketDissectionObject instances are equal
        /// </summary>
        /// <param name="input">Instance of PacketDissectionObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PacketDissectionObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NegativeMatching == input.NegativeMatching ||
                    this.NegativeMatching.Equals(input.NegativeMatching)
                ) && 
                (
                    this.Family == input.Family ||
                    (this.Family != null &&
                    this.Family.Equals(input.Family))
                ) && 
                (
                    this.DataType == input.DataType ||
                    (this.DataType != null &&
                    this.DataType.Equals(input.DataType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NegativeMatching.GetHashCode();
                if (this.Family != null)
                {
                    hashCode = (hashCode * 59) + this.Family.GetHashCode();
                }
                if (this.DataType != null)
                {
                    hashCode = (hashCode * 59) + this.DataType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
