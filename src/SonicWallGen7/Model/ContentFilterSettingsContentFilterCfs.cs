/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enter CFS configuration mode..
    /// </summary>
    [DataContract(Name = "content_filter_settings_content_filter_cfs")]
    public partial class ContentFilterSettingsContentFilterCfs : IEquatable<ContentFilterSettingsContentFilterCfs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentFilterSettingsContentFilterCfs" /> class.
        /// </summary>
        /// <param name="maxUrlCaches">Set CFS max URL caches number..</param>
        /// <param name="enable">Enable CFS..</param>
        /// <param name="blockIfServerUnavailable">Enable block if CFS server is unavailable..</param>
        /// <param name="serverTimeout">Set CFS server timeout..</param>
        /// <param name="localServer">localServer.</param>
        /// <param name="exclude">exclude.</param>
        public ContentFilterSettingsContentFilterCfs(decimal maxUrlCaches = default(decimal), bool enable = default(bool), bool blockIfServerUnavailable = default(bool), decimal serverTimeout = default(decimal), ContentFilterCfsContentFilterCfsLocalServer localServer = default(ContentFilterCfsContentFilterCfsLocalServer), ContentFilterSettingsContentFilterCfsExclude exclude = default(ContentFilterSettingsContentFilterCfsExclude))
        {
            this.MaxUrlCaches = maxUrlCaches;
            this.Enable = enable;
            this.BlockIfServerUnavailable = blockIfServerUnavailable;
            this.ServerTimeout = serverTimeout;
            this.LocalServer = localServer;
            this.Exclude = exclude;
        }

        /// <summary>
        /// Set CFS max URL caches number.
        /// </summary>
        /// <value>Set CFS max URL caches number.</value>
        [DataMember(Name = "max_url_caches", EmitDefaultValue = false)]
        public decimal MaxUrlCaches { get; set; }

        /// <summary>
        /// Enable CFS.
        /// </summary>
        /// <value>Enable CFS.</value>
        [DataMember(Name = "enable", EmitDefaultValue = true)]
        public bool Enable { get; set; }

        /// <summary>
        /// Enable block if CFS server is unavailable.
        /// </summary>
        /// <value>Enable block if CFS server is unavailable.</value>
        [DataMember(Name = "block_if_server_unavailable", EmitDefaultValue = true)]
        public bool BlockIfServerUnavailable { get; set; }

        /// <summary>
        /// Set CFS server timeout.
        /// </summary>
        /// <value>Set CFS server timeout.</value>
        [DataMember(Name = "server_timeout", EmitDefaultValue = false)]
        public decimal ServerTimeout { get; set; }

        /// <summary>
        /// Gets or Sets LocalServer
        /// </summary>
        [DataMember(Name = "local_server", EmitDefaultValue = false)]
        public ContentFilterCfsContentFilterCfsLocalServer LocalServer { get; set; }

        /// <summary>
        /// Gets or Sets Exclude
        /// </summary>
        [DataMember(Name = "exclude", EmitDefaultValue = false)]
        public ContentFilterSettingsContentFilterCfsExclude Exclude { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContentFilterSettingsContentFilterCfs {\n");
            sb.Append("  MaxUrlCaches: ").Append(MaxUrlCaches).Append("\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  BlockIfServerUnavailable: ").Append(BlockIfServerUnavailable).Append("\n");
            sb.Append("  ServerTimeout: ").Append(ServerTimeout).Append("\n");
            sb.Append("  LocalServer: ").Append(LocalServer).Append("\n");
            sb.Append("  Exclude: ").Append(Exclude).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContentFilterSettingsContentFilterCfs);
        }

        /// <summary>
        /// Returns true if ContentFilterSettingsContentFilterCfs instances are equal
        /// </summary>
        /// <param name="input">Instance of ContentFilterSettingsContentFilterCfs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContentFilterSettingsContentFilterCfs input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MaxUrlCaches == input.MaxUrlCaches ||
                    this.MaxUrlCaches.Equals(input.MaxUrlCaches)
                ) && 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.BlockIfServerUnavailable == input.BlockIfServerUnavailable ||
                    this.BlockIfServerUnavailable.Equals(input.BlockIfServerUnavailable)
                ) && 
                (
                    this.ServerTimeout == input.ServerTimeout ||
                    this.ServerTimeout.Equals(input.ServerTimeout)
                ) && 
                (
                    this.LocalServer == input.LocalServer ||
                    (this.LocalServer != null &&
                    this.LocalServer.Equals(input.LocalServer))
                ) && 
                (
                    this.Exclude == input.Exclude ||
                    (this.Exclude != null &&
                    this.Exclude.Equals(input.Exclude))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.MaxUrlCaches.GetHashCode();
                hashCode = (hashCode * 59) + this.Enable.GetHashCode();
                hashCode = (hashCode * 59) + this.BlockIfServerUnavailable.GetHashCode();
                hashCode = (hashCode * 59) + this.ServerTimeout.GetHashCode();
                if (this.LocalServer != null)
                {
                    hashCode = (hashCode * 59) + this.LocalServer.GetHashCode();
                }
                if (this.Exclude != null)
                {
                    hashCode = (hashCode * 59) + this.Exclude.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
