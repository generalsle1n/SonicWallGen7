/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure the detection type.
    /// </summary>
    [DataContract(Name = "ssl_control_base_ssl_control_detect")]
    public partial class SslControlBaseSslControlDetect : IEquatable<SslControlBaseSslControlDetect>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SslControlBaseSslControlDetect" /> class.
        /// </summary>
        /// <param name="sslV2">Enable detection of SSLv2..</param>
        /// <param name="sslV3">Enable detection of SSLv3..</param>
        /// <param name="weakCiphers">Enable detection of weak ciphers..</param>
        /// <param name="selfSigned">Enable detection of self-signed certificates..</param>
        /// <param name="weakDigestCert">Enable detection of weak digest certificates..</param>
        /// <param name="expired">Enable detection of expired certificates..</param>
        /// <param name="untrustedCa">Enable detection of certificate signed by an untrusted CA..</param>
        /// <param name="tlsV1">Enable detection of TLSv1..</param>
        public SslControlBaseSslControlDetect(bool sslV2 = default(bool), bool sslV3 = default(bool), bool weakCiphers = default(bool), bool selfSigned = default(bool), bool weakDigestCert = default(bool), bool expired = default(bool), bool untrustedCa = default(bool), bool tlsV1 = default(bool))
        {
            this.SslV2 = sslV2;
            this.SslV3 = sslV3;
            this.WeakCiphers = weakCiphers;
            this.SelfSigned = selfSigned;
            this.WeakDigestCert = weakDigestCert;
            this.Expired = expired;
            this.UntrustedCa = untrustedCa;
            this.TlsV1 = tlsV1;
        }

        /// <summary>
        /// Enable detection of SSLv2.
        /// </summary>
        /// <value>Enable detection of SSLv2.</value>
        [DataMember(Name = "ssl_v2", EmitDefaultValue = true)]
        public bool SslV2 { get; set; }

        /// <summary>
        /// Enable detection of SSLv3.
        /// </summary>
        /// <value>Enable detection of SSLv3.</value>
        [DataMember(Name = "ssl_v3", EmitDefaultValue = true)]
        public bool SslV3 { get; set; }

        /// <summary>
        /// Enable detection of weak ciphers.
        /// </summary>
        /// <value>Enable detection of weak ciphers.</value>
        [DataMember(Name = "weak_ciphers", EmitDefaultValue = true)]
        public bool WeakCiphers { get; set; }

        /// <summary>
        /// Enable detection of self-signed certificates.
        /// </summary>
        /// <value>Enable detection of self-signed certificates.</value>
        [DataMember(Name = "self_signed", EmitDefaultValue = true)]
        public bool SelfSigned { get; set; }

        /// <summary>
        /// Enable detection of weak digest certificates.
        /// </summary>
        /// <value>Enable detection of weak digest certificates.</value>
        [DataMember(Name = "weak_digest_cert", EmitDefaultValue = true)]
        public bool WeakDigestCert { get; set; }

        /// <summary>
        /// Enable detection of expired certificates.
        /// </summary>
        /// <value>Enable detection of expired certificates.</value>
        [DataMember(Name = "expired", EmitDefaultValue = true)]
        public bool Expired { get; set; }

        /// <summary>
        /// Enable detection of certificate signed by an untrusted CA.
        /// </summary>
        /// <value>Enable detection of certificate signed by an untrusted CA.</value>
        [DataMember(Name = "untrusted_ca", EmitDefaultValue = true)]
        public bool UntrustedCa { get; set; }

        /// <summary>
        /// Enable detection of TLSv1.
        /// </summary>
        /// <value>Enable detection of TLSv1.</value>
        [DataMember(Name = "tls_v1", EmitDefaultValue = true)]
        public bool TlsV1 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SslControlBaseSslControlDetect {\n");
            sb.Append("  SslV2: ").Append(SslV2).Append("\n");
            sb.Append("  SslV3: ").Append(SslV3).Append("\n");
            sb.Append("  WeakCiphers: ").Append(WeakCiphers).Append("\n");
            sb.Append("  SelfSigned: ").Append(SelfSigned).Append("\n");
            sb.Append("  WeakDigestCert: ").Append(WeakDigestCert).Append("\n");
            sb.Append("  Expired: ").Append(Expired).Append("\n");
            sb.Append("  UntrustedCa: ").Append(UntrustedCa).Append("\n");
            sb.Append("  TlsV1: ").Append(TlsV1).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SslControlBaseSslControlDetect);
        }

        /// <summary>
        /// Returns true if SslControlBaseSslControlDetect instances are equal
        /// </summary>
        /// <param name="input">Instance of SslControlBaseSslControlDetect to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SslControlBaseSslControlDetect input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SslV2 == input.SslV2 ||
                    this.SslV2.Equals(input.SslV2)
                ) && 
                (
                    this.SslV3 == input.SslV3 ||
                    this.SslV3.Equals(input.SslV3)
                ) && 
                (
                    this.WeakCiphers == input.WeakCiphers ||
                    this.WeakCiphers.Equals(input.WeakCiphers)
                ) && 
                (
                    this.SelfSigned == input.SelfSigned ||
                    this.SelfSigned.Equals(input.SelfSigned)
                ) && 
                (
                    this.WeakDigestCert == input.WeakDigestCert ||
                    this.WeakDigestCert.Equals(input.WeakDigestCert)
                ) && 
                (
                    this.Expired == input.Expired ||
                    this.Expired.Equals(input.Expired)
                ) && 
                (
                    this.UntrustedCa == input.UntrustedCa ||
                    this.UntrustedCa.Equals(input.UntrustedCa)
                ) && 
                (
                    this.TlsV1 == input.TlsV1 ||
                    this.TlsV1.Equals(input.TlsV1)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SslV2.GetHashCode();
                hashCode = (hashCode * 59) + this.SslV3.GetHashCode();
                hashCode = (hashCode * 59) + this.WeakCiphers.GetHashCode();
                hashCode = (hashCode * 59) + this.SelfSigned.GetHashCode();
                hashCode = (hashCode * 59) + this.WeakDigestCert.GetHashCode();
                hashCode = (hashCode * 59) + this.Expired.GetHashCode();
                hashCode = (hashCode * 59) + this.UntrustedCa.GetHashCode();
                hashCode = (hashCode * 59) + this.TlsV1.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
