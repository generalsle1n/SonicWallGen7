/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// IP address obtained by DHCP.
    /// </summary>
    [DataContract(Name = "interface_ipv4_ip_assignment_mode_dhcp_dhcp")]
    public partial class InterfaceIpv4IpAssignmentModeDhcpDhcp : IEquatable<InterfaceIpv4IpAssignmentModeDhcpDhcp>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InterfaceIpv4IpAssignmentModeDhcpDhcp" /> class.
        /// </summary>
        /// <param name="hostname">Set DHCP hostname..</param>
        /// <param name="renewOnStartup">Enable request renew of previous IP on startup..</param>
        /// <param name="renewOnLinkUp">Enable renew DHCP lease on any link up occurrence..</param>
        /// <param name="initiateRenewalsWithDiscover">Enable initiate renewals with a discover when using DHCP..</param>
        /// <param name="forceDiscoverInterval">Set the DHCP discovers interval during lease acquisition..</param>
        public InterfaceIpv4IpAssignmentModeDhcpDhcp(string hostname = default(string), bool renewOnStartup = default(bool), bool renewOnLinkUp = default(bool), bool initiateRenewalsWithDiscover = default(bool), decimal forceDiscoverInterval = default(decimal))
        {
            this.Hostname = hostname;
            this.RenewOnStartup = renewOnStartup;
            this.RenewOnLinkUp = renewOnLinkUp;
            this.InitiateRenewalsWithDiscover = initiateRenewalsWithDiscover;
            this.ForceDiscoverInterval = forceDiscoverInterval;
        }

        /// <summary>
        /// Set DHCP hostname.
        /// </summary>
        /// <value>Set DHCP hostname.</value>
        [DataMember(Name = "hostname", EmitDefaultValue = false)]
        public string Hostname { get; set; }

        /// <summary>
        /// Enable request renew of previous IP on startup.
        /// </summary>
        /// <value>Enable request renew of previous IP on startup.</value>
        [DataMember(Name = "renew_on_startup", EmitDefaultValue = true)]
        public bool RenewOnStartup { get; set; }

        /// <summary>
        /// Enable renew DHCP lease on any link up occurrence.
        /// </summary>
        /// <value>Enable renew DHCP lease on any link up occurrence.</value>
        [DataMember(Name = "renew_on_link_up", EmitDefaultValue = true)]
        public bool RenewOnLinkUp { get; set; }

        /// <summary>
        /// Enable initiate renewals with a discover when using DHCP.
        /// </summary>
        /// <value>Enable initiate renewals with a discover when using DHCP.</value>
        [DataMember(Name = "initiate_renewals_with_discover", EmitDefaultValue = true)]
        public bool InitiateRenewalsWithDiscover { get; set; }

        /// <summary>
        /// Set the DHCP discovers interval during lease acquisition.
        /// </summary>
        /// <value>Set the DHCP discovers interval during lease acquisition.</value>
        [DataMember(Name = "force_discover_interval", EmitDefaultValue = false)]
        public decimal ForceDiscoverInterval { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InterfaceIpv4IpAssignmentModeDhcpDhcp {\n");
            sb.Append("  Hostname: ").Append(Hostname).Append("\n");
            sb.Append("  RenewOnStartup: ").Append(RenewOnStartup).Append("\n");
            sb.Append("  RenewOnLinkUp: ").Append(RenewOnLinkUp).Append("\n");
            sb.Append("  InitiateRenewalsWithDiscover: ").Append(InitiateRenewalsWithDiscover).Append("\n");
            sb.Append("  ForceDiscoverInterval: ").Append(ForceDiscoverInterval).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InterfaceIpv4IpAssignmentModeDhcpDhcp);
        }

        /// <summary>
        /// Returns true if InterfaceIpv4IpAssignmentModeDhcpDhcp instances are equal
        /// </summary>
        /// <param name="input">Instance of InterfaceIpv4IpAssignmentModeDhcpDhcp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InterfaceIpv4IpAssignmentModeDhcpDhcp input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Hostname == input.Hostname ||
                    (this.Hostname != null &&
                    this.Hostname.Equals(input.Hostname))
                ) && 
                (
                    this.RenewOnStartup == input.RenewOnStartup ||
                    this.RenewOnStartup.Equals(input.RenewOnStartup)
                ) && 
                (
                    this.RenewOnLinkUp == input.RenewOnLinkUp ||
                    this.RenewOnLinkUp.Equals(input.RenewOnLinkUp)
                ) && 
                (
                    this.InitiateRenewalsWithDiscover == input.InitiateRenewalsWithDiscover ||
                    this.InitiateRenewalsWithDiscover.Equals(input.InitiateRenewalsWithDiscover)
                ) && 
                (
                    this.ForceDiscoverInterval == input.ForceDiscoverInterval ||
                    this.ForceDiscoverInterval.Equals(input.ForceDiscoverInterval)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Hostname != null)
                {
                    hashCode = (hashCode * 59) + this.Hostname.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RenewOnStartup.GetHashCode();
                hashCode = (hashCode * 59) + this.RenewOnLinkUp.GetHashCode();
                hashCode = (hashCode * 59) + this.InitiateRenewalsWithDiscover.GetHashCode();
                hashCode = (hashCode * 59) + this.ForceDiscoverInterval.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
