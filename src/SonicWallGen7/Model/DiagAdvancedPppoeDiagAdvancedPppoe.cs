/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure advanced diag PPPoE settings.
    /// </summary>
    [DataContract(Name = "diag_advanced_pppoe_diag_advanced_pppoe")]
    public partial class DiagAdvancedPppoeDiagAdvancedPppoe : IEquatable<DiagAdvancedPppoeDiagAdvancedPppoe>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagAdvancedPppoeDiagAdvancedPppoe" /> class.
        /// </summary>
        /// <param name="endOfListTag">Enable PPPoE End-Of-List tag..</param>
        /// <param name="lcpRequests">Enable allowing LCP requests to PPPoE server..</param>
        /// <param name="logLcpEcho">Enable logging LCP echo requests and replies between client and server..</param>
        /// <param name="unumberedIpcpOption">Enable IPCP address option for PPPoE unnmbered..</param>
        /// <param name="netmask">Set PPPoE netmask..</param>
        public DiagAdvancedPppoeDiagAdvancedPppoe(bool endOfListTag = default(bool), bool lcpRequests = default(bool), bool logLcpEcho = default(bool), bool unumberedIpcpOption = default(bool), string netmask = default(string))
        {
            this.EndOfListTag = endOfListTag;
            this.LcpRequests = lcpRequests;
            this.LogLcpEcho = logLcpEcho;
            this.UnumberedIpcpOption = unumberedIpcpOption;
            this.Netmask = netmask;
        }

        /// <summary>
        /// Enable PPPoE End-Of-List tag.
        /// </summary>
        /// <value>Enable PPPoE End-Of-List tag.</value>
        [DataMember(Name = "end_of_list_tag", EmitDefaultValue = true)]
        public bool EndOfListTag { get; set; }

        /// <summary>
        /// Enable allowing LCP requests to PPPoE server.
        /// </summary>
        /// <value>Enable allowing LCP requests to PPPoE server.</value>
        [DataMember(Name = "lcp_requests", EmitDefaultValue = true)]
        public bool LcpRequests { get; set; }

        /// <summary>
        /// Enable logging LCP echo requests and replies between client and server.
        /// </summary>
        /// <value>Enable logging LCP echo requests and replies between client and server.</value>
        [DataMember(Name = "log_lcp_echo", EmitDefaultValue = true)]
        public bool LogLcpEcho { get; set; }

        /// <summary>
        /// Enable IPCP address option for PPPoE unnmbered.
        /// </summary>
        /// <value>Enable IPCP address option for PPPoE unnmbered.</value>
        [DataMember(Name = "unumbered_ipcp_option", EmitDefaultValue = true)]
        public bool UnumberedIpcpOption { get; set; }

        /// <summary>
        /// Set PPPoE netmask.
        /// </summary>
        /// <value>Set PPPoE netmask.</value>
        [DataMember(Name = "netmask", EmitDefaultValue = false)]
        public string Netmask { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DiagAdvancedPppoeDiagAdvancedPppoe {\n");
            sb.Append("  EndOfListTag: ").Append(EndOfListTag).Append("\n");
            sb.Append("  LcpRequests: ").Append(LcpRequests).Append("\n");
            sb.Append("  LogLcpEcho: ").Append(LogLcpEcho).Append("\n");
            sb.Append("  UnumberedIpcpOption: ").Append(UnumberedIpcpOption).Append("\n");
            sb.Append("  Netmask: ").Append(Netmask).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiagAdvancedPppoeDiagAdvancedPppoe);
        }

        /// <summary>
        /// Returns true if DiagAdvancedPppoeDiagAdvancedPppoe instances are equal
        /// </summary>
        /// <param name="input">Instance of DiagAdvancedPppoeDiagAdvancedPppoe to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiagAdvancedPppoeDiagAdvancedPppoe input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EndOfListTag == input.EndOfListTag ||
                    this.EndOfListTag.Equals(input.EndOfListTag)
                ) && 
                (
                    this.LcpRequests == input.LcpRequests ||
                    this.LcpRequests.Equals(input.LcpRequests)
                ) && 
                (
                    this.LogLcpEcho == input.LogLcpEcho ||
                    this.LogLcpEcho.Equals(input.LogLcpEcho)
                ) && 
                (
                    this.UnumberedIpcpOption == input.UnumberedIpcpOption ||
                    this.UnumberedIpcpOption.Equals(input.UnumberedIpcpOption)
                ) && 
                (
                    this.Netmask == input.Netmask ||
                    (this.Netmask != null &&
                    this.Netmask.Equals(input.Netmask))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.EndOfListTag.GetHashCode();
                hashCode = (hashCode * 59) + this.LcpRequests.GetHashCode();
                hashCode = (hashCode * 59) + this.LogLcpEcho.GetHashCode();
                hashCode = (hashCode * 59) + this.UnumberedIpcpOption.GetHashCode();
                if (this.Netmask != null)
                {
                    hashCode = (hashCode * 59) + this.Netmask.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
