/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure advanced diag watchdog settings.
    /// </summary>
    [DataContract(Name = "diag_advanced_watchdog_diag_advanced_watchdog")]
    public partial class DiagAdvancedWatchdogDiagAdvancedWatchdog : IEquatable<DiagAdvancedWatchdogDiagAdvancedWatchdog>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagAdvancedWatchdogDiagAdvancedWatchdog" /> class.
        /// </summary>
        /// <param name="webServerWatchdog">Enable web server watchdog..</param>
        /// <param name="restartOnWebServerHang">Enable watchdog restart on web server hang..</param>
        /// <param name="restartOnFdLeak">Enable watchdog restart on fd leak..</param>
        /// <param name="restartWhenNoPacketRx">Enable rstart when no packet Rx activity is detected..</param>
        /// <param name="waitForNoPacketRx">Set no packet Rx activity wait time in seconds..</param>
        public DiagAdvancedWatchdogDiagAdvancedWatchdog(bool webServerWatchdog = default(bool), bool restartOnWebServerHang = default(bool), bool restartOnFdLeak = default(bool), bool restartWhenNoPacketRx = default(bool), decimal waitForNoPacketRx = default(decimal))
        {
            this.WebServerWatchdog = webServerWatchdog;
            this.RestartOnWebServerHang = restartOnWebServerHang;
            this.RestartOnFdLeak = restartOnFdLeak;
            this.RestartWhenNoPacketRx = restartWhenNoPacketRx;
            this.WaitForNoPacketRx = waitForNoPacketRx;
        }

        /// <summary>
        /// Enable web server watchdog.
        /// </summary>
        /// <value>Enable web server watchdog.</value>
        [DataMember(Name = "web_server_watchdog", EmitDefaultValue = true)]
        public bool WebServerWatchdog { get; set; }

        /// <summary>
        /// Enable watchdog restart on web server hang.
        /// </summary>
        /// <value>Enable watchdog restart on web server hang.</value>
        [DataMember(Name = "restart_on_web_server_hang", EmitDefaultValue = true)]
        public bool RestartOnWebServerHang { get; set; }

        /// <summary>
        /// Enable watchdog restart on fd leak.
        /// </summary>
        /// <value>Enable watchdog restart on fd leak.</value>
        [DataMember(Name = "restart_on_fd_leak", EmitDefaultValue = true)]
        public bool RestartOnFdLeak { get; set; }

        /// <summary>
        /// Enable rstart when no packet Rx activity is detected.
        /// </summary>
        /// <value>Enable rstart when no packet Rx activity is detected.</value>
        [DataMember(Name = "restart_when_no_packet_rx", EmitDefaultValue = true)]
        public bool RestartWhenNoPacketRx { get; set; }

        /// <summary>
        /// Set no packet Rx activity wait time in seconds.
        /// </summary>
        /// <value>Set no packet Rx activity wait time in seconds.</value>
        [DataMember(Name = "wait_for_no_packet_rx", EmitDefaultValue = false)]
        public decimal WaitForNoPacketRx { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DiagAdvancedWatchdogDiagAdvancedWatchdog {\n");
            sb.Append("  WebServerWatchdog: ").Append(WebServerWatchdog).Append("\n");
            sb.Append("  RestartOnWebServerHang: ").Append(RestartOnWebServerHang).Append("\n");
            sb.Append("  RestartOnFdLeak: ").Append(RestartOnFdLeak).Append("\n");
            sb.Append("  RestartWhenNoPacketRx: ").Append(RestartWhenNoPacketRx).Append("\n");
            sb.Append("  WaitForNoPacketRx: ").Append(WaitForNoPacketRx).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiagAdvancedWatchdogDiagAdvancedWatchdog);
        }

        /// <summary>
        /// Returns true if DiagAdvancedWatchdogDiagAdvancedWatchdog instances are equal
        /// </summary>
        /// <param name="input">Instance of DiagAdvancedWatchdogDiagAdvancedWatchdog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiagAdvancedWatchdogDiagAdvancedWatchdog input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.WebServerWatchdog == input.WebServerWatchdog ||
                    this.WebServerWatchdog.Equals(input.WebServerWatchdog)
                ) && 
                (
                    this.RestartOnWebServerHang == input.RestartOnWebServerHang ||
                    this.RestartOnWebServerHang.Equals(input.RestartOnWebServerHang)
                ) && 
                (
                    this.RestartOnFdLeak == input.RestartOnFdLeak ||
                    this.RestartOnFdLeak.Equals(input.RestartOnFdLeak)
                ) && 
                (
                    this.RestartWhenNoPacketRx == input.RestartWhenNoPacketRx ||
                    this.RestartWhenNoPacketRx.Equals(input.RestartWhenNoPacketRx)
                ) && 
                (
                    this.WaitForNoPacketRx == input.WaitForNoPacketRx ||
                    this.WaitForNoPacketRx.Equals(input.WaitForNoPacketRx)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.WebServerWatchdog.GetHashCode();
                hashCode = (hashCode * 59) + this.RestartOnWebServerHang.GetHashCode();
                hashCode = (hashCode * 59) + this.RestartOnFdLeak.GetHashCode();
                hashCode = (hashCode * 59) + this.RestartWhenNoPacketRx.GetHashCode();
                hashCode = (hashCode * 59) + this.WaitForNoPacketRx.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
