/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Add a pre-defined regular expression.
    /// </summary>
    [DataContract(Name = "match_object_pre_defined_regex")]
    public partial class MatchObjectPreDefinedRegex : IEquatable<MatchObjectPreDefinedRegex>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchObjectPreDefinedRegex" /> class.
        /// </summary>
        /// <param name="visaCc">Visa credit card..</param>
        /// <param name="usSsn">United states social security number (SSN)..</param>
        /// <param name="canadianSin">Canadian social insurance number (SIN)..</param>
        /// <param name="abaRoutingNumber">American bankers association (ABA) routing number..</param>
        /// <param name="amexCc">American express credit card..</param>
        /// <param name="mastercardCc">Master card credit card..</param>
        /// <param name="discoverCc">Discover card credit card..</param>
        public MatchObjectPreDefinedRegex(bool visaCc = default(bool), bool usSsn = default(bool), bool canadianSin = default(bool), bool abaRoutingNumber = default(bool), bool amexCc = default(bool), bool mastercardCc = default(bool), bool discoverCc = default(bool))
        {
            this.VisaCc = visaCc;
            this.UsSsn = usSsn;
            this.CanadianSin = canadianSin;
            this.AbaRoutingNumber = abaRoutingNumber;
            this.AmexCc = amexCc;
            this.MastercardCc = mastercardCc;
            this.DiscoverCc = discoverCc;
        }

        /// <summary>
        /// Visa credit card.
        /// </summary>
        /// <value>Visa credit card.</value>
        [DataMember(Name = "visa_cc", EmitDefaultValue = true)]
        public bool VisaCc { get; set; }

        /// <summary>
        /// United states social security number (SSN).
        /// </summary>
        /// <value>United states social security number (SSN).</value>
        [DataMember(Name = "us_ssn", EmitDefaultValue = true)]
        public bool UsSsn { get; set; }

        /// <summary>
        /// Canadian social insurance number (SIN).
        /// </summary>
        /// <value>Canadian social insurance number (SIN).</value>
        [DataMember(Name = "canadian_sin", EmitDefaultValue = true)]
        public bool CanadianSin { get; set; }

        /// <summary>
        /// American bankers association (ABA) routing number.
        /// </summary>
        /// <value>American bankers association (ABA) routing number.</value>
        [DataMember(Name = "aba_routing_number", EmitDefaultValue = true)]
        public bool AbaRoutingNumber { get; set; }

        /// <summary>
        /// American express credit card.
        /// </summary>
        /// <value>American express credit card.</value>
        [DataMember(Name = "amex_cc", EmitDefaultValue = true)]
        public bool AmexCc { get; set; }

        /// <summary>
        /// Master card credit card.
        /// </summary>
        /// <value>Master card credit card.</value>
        [DataMember(Name = "mastercard_cc", EmitDefaultValue = true)]
        public bool MastercardCc { get; set; }

        /// <summary>
        /// Discover card credit card.
        /// </summary>
        /// <value>Discover card credit card.</value>
        [DataMember(Name = "discover_cc", EmitDefaultValue = true)]
        public bool DiscoverCc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MatchObjectPreDefinedRegex {\n");
            sb.Append("  VisaCc: ").Append(VisaCc).Append("\n");
            sb.Append("  UsSsn: ").Append(UsSsn).Append("\n");
            sb.Append("  CanadianSin: ").Append(CanadianSin).Append("\n");
            sb.Append("  AbaRoutingNumber: ").Append(AbaRoutingNumber).Append("\n");
            sb.Append("  AmexCc: ").Append(AmexCc).Append("\n");
            sb.Append("  MastercardCc: ").Append(MastercardCc).Append("\n");
            sb.Append("  DiscoverCc: ").Append(DiscoverCc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MatchObjectPreDefinedRegex);
        }

        /// <summary>
        /// Returns true if MatchObjectPreDefinedRegex instances are equal
        /// </summary>
        /// <param name="input">Instance of MatchObjectPreDefinedRegex to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MatchObjectPreDefinedRegex input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VisaCc == input.VisaCc ||
                    this.VisaCc.Equals(input.VisaCc)
                ) && 
                (
                    this.UsSsn == input.UsSsn ||
                    this.UsSsn.Equals(input.UsSsn)
                ) && 
                (
                    this.CanadianSin == input.CanadianSin ||
                    this.CanadianSin.Equals(input.CanadianSin)
                ) && 
                (
                    this.AbaRoutingNumber == input.AbaRoutingNumber ||
                    this.AbaRoutingNumber.Equals(input.AbaRoutingNumber)
                ) && 
                (
                    this.AmexCc == input.AmexCc ||
                    this.AmexCc.Equals(input.AmexCc)
                ) && 
                (
                    this.MastercardCc == input.MastercardCc ||
                    this.MastercardCc.Equals(input.MastercardCc)
                ) && 
                (
                    this.DiscoverCc == input.DiscoverCc ||
                    this.DiscoverCc.Equals(input.DiscoverCc)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.VisaCc.GetHashCode();
                hashCode = (hashCode * 59) + this.UsSsn.GetHashCode();
                hashCode = (hashCode * 59) + this.CanadianSin.GetHashCode();
                hashCode = (hashCode * 59) + this.AbaRoutingNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.AmexCc.GetHashCode();
                hashCode = (hashCode * 59) + this.MastercardCc.GetHashCode();
                hashCode = (hashCode * 59) + this.DiscoverCc.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
