/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Security action profiles settings.
    /// </summary>
    [DataContract(Name = "security_action_profiles")]
    public partial class SecurityActionProfiles : IEquatable<SecurityActionProfiles>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityActionProfiles" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SecurityActionProfiles() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityActionProfiles" /> class.
        /// </summary>
        /// <param name="name">Name of security action profile. (required).</param>
        /// <param name="bandwidthManagement">bandwidthManagement.</param>
        /// <param name="qualityOfService">qualityOfService.</param>
        /// <param name="cosOverride">Allow 802.1p marking to override DSCP values..</param>
        /// <param name="gatewayAntivirus">gatewayAntivirus.</param>
        /// <param name="threat">threat.</param>
        /// <param name="antiSpyware">antiSpyware.</param>
        /// <param name="botnet">botnet.</param>
        /// <param name="contentFilter">contentFilter.</param>
        /// <param name="reporting">reporting.</param>
        /// <param name="userActions">userActions.</param>
        /// <param name="tcp">tcp.</param>
        /// <param name="udp">udp.</param>
        /// <param name="fragments">Allow fragmented packets on this access rule..</param>
        /// <param name="bypassServerToClientInspection">Enable bypass inspection of server to client packets..</param>
        /// <param name="sip">Enable SIP transformations..</param>
        /// <param name="h323">Enable H.323 transformations..</param>
        /// <param name="unauthenticatedRedirect">Disable don&#39;t redirect unauthenticated users to log in..</param>
        /// <param name="packetDissectionFilter">packetDissectionFilter.</param>
        public SecurityActionProfiles(string name = default(string), SecurityActionProfilesBandwidthManagement bandwidthManagement = default(SecurityActionProfilesBandwidthManagement), SecurityActionProfilesQualityOfService qualityOfService = default(SecurityActionProfilesQualityOfService), bool cosOverride = default(bool), SecurityActionProfilesGatewayAntivirus gatewayAntivirus = default(SecurityActionProfilesGatewayAntivirus), SecurityActionProfilesThreat threat = default(SecurityActionProfilesThreat), SecurityActionProfilesAntiSpyware antiSpyware = default(SecurityActionProfilesAntiSpyware), SecurityActionProfilesBotnet botnet = default(SecurityActionProfilesBotnet), SecurityActionProfilesContentFilter contentFilter = default(SecurityActionProfilesContentFilter), SecurityActionProfilesReporting reporting = default(SecurityActionProfilesReporting), SecurityActionProfilesUserActions userActions = default(SecurityActionProfilesUserActions), SecurityActionProfilesTcp tcp = default(SecurityActionProfilesTcp), SecurityActionProfilesUdp udp = default(SecurityActionProfilesUdp), bool fragments = default(bool), bool bypassServerToClientInspection = default(bool), bool sip = default(bool), bool h323 = default(bool), bool unauthenticatedRedirect = default(bool), SecurityActionProfilesPacketDissectionFilter packetDissectionFilter = default(SecurityActionProfilesPacketDissectionFilter))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for SecurityActionProfiles and cannot be null");
            }
            this.Name = name;
            this.BandwidthManagement = bandwidthManagement;
            this.QualityOfService = qualityOfService;
            this.CosOverride = cosOverride;
            this.GatewayAntivirus = gatewayAntivirus;
            this.Threat = threat;
            this.AntiSpyware = antiSpyware;
            this.Botnet = botnet;
            this.ContentFilter = contentFilter;
            this.Reporting = reporting;
            this.UserActions = userActions;
            this.Tcp = tcp;
            this.Udp = udp;
            this.Fragments = fragments;
            this.BypassServerToClientInspection = bypassServerToClientInspection;
            this.Sip = sip;
            this.H323 = h323;
            this.UnauthenticatedRedirect = unauthenticatedRedirect;
            this.PacketDissectionFilter = packetDissectionFilter;
        }

        /// <summary>
        /// Name of security action profile.
        /// </summary>
        /// <value>Name of security action profile.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Security action profile UUID.
        /// </summary>
        /// <value>Security action profile UUID.</value>
        [DataMember(Name = "uuid", EmitDefaultValue = false)]
        public string Uuid { get; private set; }

        /// <summary>
        /// Returns false as Uuid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUuid()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets BandwidthManagement
        /// </summary>
        [DataMember(Name = "bandwidth_management", EmitDefaultValue = false)]
        public SecurityActionProfilesBandwidthManagement BandwidthManagement { get; set; }

        /// <summary>
        /// Gets or Sets QualityOfService
        /// </summary>
        [DataMember(Name = "quality_of_service", EmitDefaultValue = false)]
        public SecurityActionProfilesQualityOfService QualityOfService { get; set; }

        /// <summary>
        /// Allow 802.1p marking to override DSCP values.
        /// </summary>
        /// <value>Allow 802.1p marking to override DSCP values.</value>
        [DataMember(Name = "cos_override", EmitDefaultValue = true)]
        public bool CosOverride { get; set; }

        /// <summary>
        /// Gets or Sets GatewayAntivirus
        /// </summary>
        [DataMember(Name = "gateway_antivirus", EmitDefaultValue = false)]
        public SecurityActionProfilesGatewayAntivirus GatewayAntivirus { get; set; }

        /// <summary>
        /// Gets or Sets Threat
        /// </summary>
        [DataMember(Name = "threat", EmitDefaultValue = false)]
        public SecurityActionProfilesThreat Threat { get; set; }

        /// <summary>
        /// Gets or Sets AntiSpyware
        /// </summary>
        [DataMember(Name = "anti_spyware", EmitDefaultValue = false)]
        public SecurityActionProfilesAntiSpyware AntiSpyware { get; set; }

        /// <summary>
        /// Gets or Sets Botnet
        /// </summary>
        [DataMember(Name = "botnet", EmitDefaultValue = false)]
        public SecurityActionProfilesBotnet Botnet { get; set; }

        /// <summary>
        /// Gets or Sets ContentFilter
        /// </summary>
        [DataMember(Name = "content_filter", EmitDefaultValue = false)]
        public SecurityActionProfilesContentFilter ContentFilter { get; set; }

        /// <summary>
        /// Gets or Sets Reporting
        /// </summary>
        [DataMember(Name = "reporting", EmitDefaultValue = false)]
        public SecurityActionProfilesReporting Reporting { get; set; }

        /// <summary>
        /// Gets or Sets UserActions
        /// </summary>
        [DataMember(Name = "user_actions", EmitDefaultValue = false)]
        public SecurityActionProfilesUserActions UserActions { get; set; }

        /// <summary>
        /// Gets or Sets Tcp
        /// </summary>
        [DataMember(Name = "tcp", EmitDefaultValue = false)]
        public SecurityActionProfilesTcp Tcp { get; set; }

        /// <summary>
        /// Gets or Sets Udp
        /// </summary>
        [DataMember(Name = "udp", EmitDefaultValue = false)]
        public SecurityActionProfilesUdp Udp { get; set; }

        /// <summary>
        /// Allow fragmented packets on this access rule.
        /// </summary>
        /// <value>Allow fragmented packets on this access rule.</value>
        [DataMember(Name = "fragments", EmitDefaultValue = true)]
        public bool Fragments { get; set; }

        /// <summary>
        /// Enable bypass inspection of server to client packets.
        /// </summary>
        /// <value>Enable bypass inspection of server to client packets.</value>
        [DataMember(Name = "bypass_server_to_client_inspection", EmitDefaultValue = true)]
        public bool BypassServerToClientInspection { get; set; }

        /// <summary>
        /// Enable SIP transformations.
        /// </summary>
        /// <value>Enable SIP transformations.</value>
        [DataMember(Name = "sip", EmitDefaultValue = true)]
        public bool Sip { get; set; }

        /// <summary>
        /// Enable H.323 transformations.
        /// </summary>
        /// <value>Enable H.323 transformations.</value>
        [DataMember(Name = "h323", EmitDefaultValue = true)]
        public bool H323 { get; set; }

        /// <summary>
        /// Disable don&#39;t redirect unauthenticated users to log in.
        /// </summary>
        /// <value>Disable don&#39;t redirect unauthenticated users to log in.</value>
        [DataMember(Name = "unauthenticated_redirect", EmitDefaultValue = true)]
        public bool UnauthenticatedRedirect { get; set; }

        /// <summary>
        /// Gets or Sets PacketDissectionFilter
        /// </summary>
        [DataMember(Name = "packet_dissection_filter", EmitDefaultValue = false)]
        public SecurityActionProfilesPacketDissectionFilter PacketDissectionFilter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SecurityActionProfiles {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  BandwidthManagement: ").Append(BandwidthManagement).Append("\n");
            sb.Append("  QualityOfService: ").Append(QualityOfService).Append("\n");
            sb.Append("  CosOverride: ").Append(CosOverride).Append("\n");
            sb.Append("  GatewayAntivirus: ").Append(GatewayAntivirus).Append("\n");
            sb.Append("  Threat: ").Append(Threat).Append("\n");
            sb.Append("  AntiSpyware: ").Append(AntiSpyware).Append("\n");
            sb.Append("  Botnet: ").Append(Botnet).Append("\n");
            sb.Append("  ContentFilter: ").Append(ContentFilter).Append("\n");
            sb.Append("  Reporting: ").Append(Reporting).Append("\n");
            sb.Append("  UserActions: ").Append(UserActions).Append("\n");
            sb.Append("  Tcp: ").Append(Tcp).Append("\n");
            sb.Append("  Udp: ").Append(Udp).Append("\n");
            sb.Append("  Fragments: ").Append(Fragments).Append("\n");
            sb.Append("  BypassServerToClientInspection: ").Append(BypassServerToClientInspection).Append("\n");
            sb.Append("  Sip: ").Append(Sip).Append("\n");
            sb.Append("  H323: ").Append(H323).Append("\n");
            sb.Append("  UnauthenticatedRedirect: ").Append(UnauthenticatedRedirect).Append("\n");
            sb.Append("  PacketDissectionFilter: ").Append(PacketDissectionFilter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecurityActionProfiles);
        }

        /// <summary>
        /// Returns true if SecurityActionProfiles instances are equal
        /// </summary>
        /// <param name="input">Instance of SecurityActionProfiles to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecurityActionProfiles input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.BandwidthManagement == input.BandwidthManagement ||
                    (this.BandwidthManagement != null &&
                    this.BandwidthManagement.Equals(input.BandwidthManagement))
                ) && 
                (
                    this.QualityOfService == input.QualityOfService ||
                    (this.QualityOfService != null &&
                    this.QualityOfService.Equals(input.QualityOfService))
                ) && 
                (
                    this.CosOverride == input.CosOverride ||
                    this.CosOverride.Equals(input.CosOverride)
                ) && 
                (
                    this.GatewayAntivirus == input.GatewayAntivirus ||
                    (this.GatewayAntivirus != null &&
                    this.GatewayAntivirus.Equals(input.GatewayAntivirus))
                ) && 
                (
                    this.Threat == input.Threat ||
                    (this.Threat != null &&
                    this.Threat.Equals(input.Threat))
                ) && 
                (
                    this.AntiSpyware == input.AntiSpyware ||
                    (this.AntiSpyware != null &&
                    this.AntiSpyware.Equals(input.AntiSpyware))
                ) && 
                (
                    this.Botnet == input.Botnet ||
                    (this.Botnet != null &&
                    this.Botnet.Equals(input.Botnet))
                ) && 
                (
                    this.ContentFilter == input.ContentFilter ||
                    (this.ContentFilter != null &&
                    this.ContentFilter.Equals(input.ContentFilter))
                ) && 
                (
                    this.Reporting == input.Reporting ||
                    (this.Reporting != null &&
                    this.Reporting.Equals(input.Reporting))
                ) && 
                (
                    this.UserActions == input.UserActions ||
                    (this.UserActions != null &&
                    this.UserActions.Equals(input.UserActions))
                ) && 
                (
                    this.Tcp == input.Tcp ||
                    (this.Tcp != null &&
                    this.Tcp.Equals(input.Tcp))
                ) && 
                (
                    this.Udp == input.Udp ||
                    (this.Udp != null &&
                    this.Udp.Equals(input.Udp))
                ) && 
                (
                    this.Fragments == input.Fragments ||
                    this.Fragments.Equals(input.Fragments)
                ) && 
                (
                    this.BypassServerToClientInspection == input.BypassServerToClientInspection ||
                    this.BypassServerToClientInspection.Equals(input.BypassServerToClientInspection)
                ) && 
                (
                    this.Sip == input.Sip ||
                    this.Sip.Equals(input.Sip)
                ) && 
                (
                    this.H323 == input.H323 ||
                    this.H323.Equals(input.H323)
                ) && 
                (
                    this.UnauthenticatedRedirect == input.UnauthenticatedRedirect ||
                    this.UnauthenticatedRedirect.Equals(input.UnauthenticatedRedirect)
                ) && 
                (
                    this.PacketDissectionFilter == input.PacketDissectionFilter ||
                    (this.PacketDissectionFilter != null &&
                    this.PacketDissectionFilter.Equals(input.PacketDissectionFilter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Uuid != null)
                {
                    hashCode = (hashCode * 59) + this.Uuid.GetHashCode();
                }
                if (this.BandwidthManagement != null)
                {
                    hashCode = (hashCode * 59) + this.BandwidthManagement.GetHashCode();
                }
                if (this.QualityOfService != null)
                {
                    hashCode = (hashCode * 59) + this.QualityOfService.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CosOverride.GetHashCode();
                if (this.GatewayAntivirus != null)
                {
                    hashCode = (hashCode * 59) + this.GatewayAntivirus.GetHashCode();
                }
                if (this.Threat != null)
                {
                    hashCode = (hashCode * 59) + this.Threat.GetHashCode();
                }
                if (this.AntiSpyware != null)
                {
                    hashCode = (hashCode * 59) + this.AntiSpyware.GetHashCode();
                }
                if (this.Botnet != null)
                {
                    hashCode = (hashCode * 59) + this.Botnet.GetHashCode();
                }
                if (this.ContentFilter != null)
                {
                    hashCode = (hashCode * 59) + this.ContentFilter.GetHashCode();
                }
                if (this.Reporting != null)
                {
                    hashCode = (hashCode * 59) + this.Reporting.GetHashCode();
                }
                if (this.UserActions != null)
                {
                    hashCode = (hashCode * 59) + this.UserActions.GetHashCode();
                }
                if (this.Tcp != null)
                {
                    hashCode = (hashCode * 59) + this.Tcp.GetHashCode();
                }
                if (this.Udp != null)
                {
                    hashCode = (hashCode * 59) + this.Udp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Fragments.GetHashCode();
                hashCode = (hashCode * 59) + this.BypassServerToClientInspection.GetHashCode();
                hashCode = (hashCode * 59) + this.Sip.GetHashCode();
                hashCode = (hashCode * 59) + this.H323.GetHashCode();
                hashCode = (hashCode * 59) + this.UnauthenticatedRedirect.GetHashCode();
                if (this.PacketDissectionFilter != null)
                {
                    hashCode = (hashCode * 59) + this.PacketDissectionFilter.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
