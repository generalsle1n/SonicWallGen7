/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Dynamic external object configuration.
    /// </summary>
    [DataContract(Name = "dynamic_external_object")]
    public partial class DynamicExternalObject : IEquatable<DynamicExternalObject>, IValidatableObject
    {
        /// <summary>
        /// Set the dynamic external object download protocol.
        /// </summary>
        /// <value>Set the dynamic external object download protocol.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProtocolEnum
        {
            /// <summary>
            /// Enum Ftp for value: ftp
            /// </summary>
            [EnumMember(Value = "ftp")]
            Ftp = 1,

            /// <summary>
            /// Enum Https for value: https
            /// </summary>
            [EnumMember(Value = "https")]
            Https = 2
        }


        /// <summary>
        /// Set the dynamic external object download protocol.
        /// </summary>
        /// <value>Set the dynamic external object download protocol.</value>
        [DataMember(Name = "protocol", EmitDefaultValue = false)]
        public ProtocolEnum? Protocol { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DynamicExternalObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DynamicExternalObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DynamicExternalObject" /> class.
        /// </summary>
        /// <param name="name">Edit dynamic external object name. (required).</param>
        /// <param name="type">type.</param>
        /// <param name="zone">Set dynamic external object zon..</param>
        /// <param name="fqdn">Enable dynamic external object FQDN flag..</param>
        /// <param name="periodicDownload">periodicDownload.</param>
        /// <param name="protocol">Set the dynamic external object download protocol..</param>
        /// <param name="url">Set the external dynamic object HTTPS URL..</param>
        /// <param name="server">server.</param>
        /// <param name="login">Set the external dynamic object FTP server&#39;s login name..</param>
        /// <param name="password">Set the external dynamic object FTP server&#39;s login password. * Set to null to represent an unconfigured state..</param>
        /// <param name="directory">Set the external dynamic object FTP server&#39;s directory path. * Set to null to represent an unconfigured state..</param>
        /// <param name="filename">Set the external dynamic object FTP server&#39;s filename..</param>
        public DynamicExternalObject(string name = default(string), DynamicExternalObjectType type = default(DynamicExternalObjectType), string zone = default(string), bool fqdn = default(bool), DynamicExternalObjectPeriodicDownload periodicDownload = default(DynamicExternalObjectPeriodicDownload), ProtocolEnum? protocol = default(ProtocolEnum?), string url = default(string), DynamicExternalObjectServer server = default(DynamicExternalObjectServer), string login = default(string), string password = default(string), string directory = default(string), string filename = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for DynamicExternalObject and cannot be null");
            }
            this.Name = name;
            this.Type = type;
            this.Zone = zone;
            this.Fqdn = fqdn;
            this.PeriodicDownload = periodicDownload;
            this.Protocol = protocol;
            this.Url = url;
            this.Server = server;
            this.Login = login;
            this.Password = password;
            this.Directory = directory;
            this.Filename = filename;
        }

        /// <summary>
        /// Edit dynamic external object name.
        /// </summary>
        /// <value>Edit dynamic external object name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public DynamicExternalObjectType Type { get; set; }

        /// <summary>
        /// Set dynamic external object zon.
        /// </summary>
        /// <value>Set dynamic external object zon.</value>
        [DataMember(Name = "zone", EmitDefaultValue = false)]
        public string Zone { get; set; }

        /// <summary>
        /// Enable dynamic external object FQDN flag.
        /// </summary>
        /// <value>Enable dynamic external object FQDN flag.</value>
        [DataMember(Name = "fqdn", EmitDefaultValue = true)]
        public bool Fqdn { get; set; }

        /// <summary>
        /// Gets or Sets PeriodicDownload
        /// </summary>
        [DataMember(Name = "periodic_download", EmitDefaultValue = true)]
        public DynamicExternalObjectPeriodicDownload PeriodicDownload { get; set; }

        /// <summary>
        /// Set the external dynamic object HTTPS URL.
        /// </summary>
        /// <value>Set the external dynamic object HTTPS URL.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Server
        /// </summary>
        [DataMember(Name = "server", EmitDefaultValue = true)]
        public DynamicExternalObjectServer Server { get; set; }

        /// <summary>
        /// Set the external dynamic object FTP server&#39;s login name.
        /// </summary>
        /// <value>Set the external dynamic object FTP server&#39;s login name.</value>
        [DataMember(Name = "login", EmitDefaultValue = false)]
        public string Login { get; set; }

        /// <summary>
        /// Set the external dynamic object FTP server&#39;s login password. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Set the external dynamic object FTP server&#39;s login password. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "password", EmitDefaultValue = true)]
        public string Password { get; set; }

        /// <summary>
        /// Set the external dynamic object FTP server&#39;s directory path. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Set the external dynamic object FTP server&#39;s directory path. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "directory", EmitDefaultValue = true)]
        public string Directory { get; set; }

        /// <summary>
        /// Set the external dynamic object FTP server&#39;s filename.
        /// </summary>
        /// <value>Set the external dynamic object FTP server&#39;s filename.</value>
        [DataMember(Name = "filename", EmitDefaultValue = false)]
        public string Filename { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DynamicExternalObject {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Zone: ").Append(Zone).Append("\n");
            sb.Append("  Fqdn: ").Append(Fqdn).Append("\n");
            sb.Append("  PeriodicDownload: ").Append(PeriodicDownload).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Server: ").Append(Server).Append("\n");
            sb.Append("  Login: ").Append(Login).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Directory: ").Append(Directory).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DynamicExternalObject);
        }

        /// <summary>
        /// Returns true if DynamicExternalObject instances are equal
        /// </summary>
        /// <param name="input">Instance of DynamicExternalObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DynamicExternalObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Zone == input.Zone ||
                    (this.Zone != null &&
                    this.Zone.Equals(input.Zone))
                ) && 
                (
                    this.Fqdn == input.Fqdn ||
                    this.Fqdn.Equals(input.Fqdn)
                ) && 
                (
                    this.PeriodicDownload == input.PeriodicDownload ||
                    (this.PeriodicDownload != null &&
                    this.PeriodicDownload.Equals(input.PeriodicDownload))
                ) && 
                (
                    this.Protocol == input.Protocol ||
                    this.Protocol.Equals(input.Protocol)
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Server == input.Server ||
                    (this.Server != null &&
                    this.Server.Equals(input.Server))
                ) && 
                (
                    this.Login == input.Login ||
                    (this.Login != null &&
                    this.Login.Equals(input.Login))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Directory == input.Directory ||
                    (this.Directory != null &&
                    this.Directory.Equals(input.Directory))
                ) && 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Zone != null)
                {
                    hashCode = (hashCode * 59) + this.Zone.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Fqdn.GetHashCode();
                if (this.PeriodicDownload != null)
                {
                    hashCode = (hashCode * 59) + this.PeriodicDownload.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Protocol.GetHashCode();
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.Server != null)
                {
                    hashCode = (hashCode * 59) + this.Server.GetHashCode();
                }
                if (this.Login != null)
                {
                    hashCode = (hashCode * 59) + this.Login.GetHashCode();
                }
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                if (this.Directory != null)
                {
                    hashCode = (hashCode * 59) + this.Directory.GetHashCode();
                }
                if (this.Filename != null)
                {
                    hashCode = (hashCode * 59) + this.Filename.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
