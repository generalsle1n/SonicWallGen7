/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Terminal services (RDP-HTML5).
    /// </summary>
    [DataContract(Name = "user_local_group_bookmark_inner_service_rdp")]
    public partial class UserLocalGroupBookmarkInnerServiceRdp : IEquatable<UserLocalGroupBookmarkInnerServiceRdp>, IValidatableObject
    {
        /// <summary>
        /// Set screen size.
        /// </summary>
        /// <value>Set screen size.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScreenSizeEnum
        {
            /// <summary>
            /// Enum _640x480 for value: 640x480
            /// </summary>
            [EnumMember(Value = "640x480")]
            _640x480 = 1,

            /// <summary>
            /// Enum _800x600 for value: 800x600
            /// </summary>
            [EnumMember(Value = "800x600")]
            _800x600 = 2,

            /// <summary>
            /// Enum _1024x768 for value: 1024x768
            /// </summary>
            [EnumMember(Value = "1024x768")]
            _1024x768 = 3,

            /// <summary>
            /// Enum _1280x1024 for value: 1280x1024
            /// </summary>
            [EnumMember(Value = "1280x1024")]
            _1280x1024 = 4,

            /// <summary>
            /// Enum FullScreen for value: full-screen
            /// </summary>
            [EnumMember(Value = "full-screen")]
            FullScreen = 5
        }


        /// <summary>
        /// Set screen size.
        /// </summary>
        /// <value>Set screen size.</value>
        [DataMember(Name = "screen_size", EmitDefaultValue = false)]
        public ScreenSizeEnum? ScreenSize { get; set; }
        /// <summary>
        /// Set screen colors.
        /// </summary>
        /// <value>Set screen colors.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ColorsEnum
        {
            /// <summary>
            /// Enum _256 for value: 256
            /// </summary>
            [EnumMember(Value = "256")]
            _256 = 1,

            /// <summary>
            /// Enum _15bit for value: 15bit
            /// </summary>
            [EnumMember(Value = "15bit")]
            _15bit = 2,

            /// <summary>
            /// Enum _16bit for value: 16bit
            /// </summary>
            [EnumMember(Value = "16bit")]
            _16bit = 3,

            /// <summary>
            /// Enum _24bit for value: 24bit
            /// </summary>
            [EnumMember(Value = "24bit")]
            _24bit = 4,

            /// <summary>
            /// Enum _32bit for value: 32bit
            /// </summary>
            [EnumMember(Value = "32bit")]
            _32bit = 5
        }


        /// <summary>
        /// Set screen colors.
        /// </summary>
        /// <value>Set screen colors.</value>
        [DataMember(Name = "colors", EmitDefaultValue = false)]
        public ColorsEnum? Colors { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserLocalGroupBookmarkInnerServiceRdp" /> class.
        /// </summary>
        /// <param name="screenSize">Set screen size..</param>
        /// <param name="colors">Set screen colors..</param>
        /// <param name="applicationPath">Set application and path to launch..</param>
        /// <param name="startInFolder">Set folder to start in..</param>
        /// <param name="automaticLogin">automaticLogin.</param>
        /// <param name="redirectClipboard">Enable redirect clipboard..</param>
        /// <param name="redirectAudio">Enable redirect audio..</param>
        /// <param name="autoReconnection">Enable automatic reconnection..</param>
        /// <param name="desktopBackground">Enable desktop background..</param>
        /// <param name="windowDrag">Enable window drag..</param>
        /// <param name="animation">Enable menu / window animation..</param>
        /// <param name="displayOnMobile">Enable display bookmark to mobile connect clients..</param>
        public UserLocalGroupBookmarkInnerServiceRdp(ScreenSizeEnum? screenSize = default(ScreenSizeEnum?), ColorsEnum? colors = default(ColorsEnum?), string applicationPath = default(string), string startInFolder = default(string), UserLocalGroupBookmarkInnerServiceRdpAutomaticLogin automaticLogin = default(UserLocalGroupBookmarkInnerServiceRdpAutomaticLogin), bool redirectClipboard = default(bool), bool redirectAudio = default(bool), bool autoReconnection = default(bool), bool desktopBackground = default(bool), bool windowDrag = default(bool), bool animation = default(bool), bool displayOnMobile = default(bool))
        {
            this.ScreenSize = screenSize;
            this.Colors = colors;
            this.ApplicationPath = applicationPath;
            this.StartInFolder = startInFolder;
            this.AutomaticLogin = automaticLogin;
            this.RedirectClipboard = redirectClipboard;
            this.RedirectAudio = redirectAudio;
            this.AutoReconnection = autoReconnection;
            this.DesktopBackground = desktopBackground;
            this.WindowDrag = windowDrag;
            this.Animation = animation;
            this.DisplayOnMobile = displayOnMobile;
        }

        /// <summary>
        /// Set application and path to launch.
        /// </summary>
        /// <value>Set application and path to launch.</value>
        [DataMember(Name = "application_path", EmitDefaultValue = false)]
        public string ApplicationPath { get; set; }

        /// <summary>
        /// Set folder to start in.
        /// </summary>
        /// <value>Set folder to start in.</value>
        [DataMember(Name = "start_in_folder", EmitDefaultValue = false)]
        public string StartInFolder { get; set; }

        /// <summary>
        /// Gets or Sets AutomaticLogin
        /// </summary>
        [DataMember(Name = "automatic_login", EmitDefaultValue = false)]
        public UserLocalGroupBookmarkInnerServiceRdpAutomaticLogin AutomaticLogin { get; set; }

        /// <summary>
        /// Enable redirect clipboard.
        /// </summary>
        /// <value>Enable redirect clipboard.</value>
        [DataMember(Name = "redirect_clipboard", EmitDefaultValue = true)]
        public bool RedirectClipboard { get; set; }

        /// <summary>
        /// Enable redirect audio.
        /// </summary>
        /// <value>Enable redirect audio.</value>
        [DataMember(Name = "redirect_audio", EmitDefaultValue = true)]
        public bool RedirectAudio { get; set; }

        /// <summary>
        /// Enable automatic reconnection.
        /// </summary>
        /// <value>Enable automatic reconnection.</value>
        [DataMember(Name = "auto_reconnection", EmitDefaultValue = true)]
        public bool AutoReconnection { get; set; }

        /// <summary>
        /// Enable desktop background.
        /// </summary>
        /// <value>Enable desktop background.</value>
        [DataMember(Name = "desktop_background", EmitDefaultValue = true)]
        public bool DesktopBackground { get; set; }

        /// <summary>
        /// Enable window drag.
        /// </summary>
        /// <value>Enable window drag.</value>
        [DataMember(Name = "window_drag", EmitDefaultValue = true)]
        public bool WindowDrag { get; set; }

        /// <summary>
        /// Enable menu / window animation.
        /// </summary>
        /// <value>Enable menu / window animation.</value>
        [DataMember(Name = "animation", EmitDefaultValue = true)]
        public bool Animation { get; set; }

        /// <summary>
        /// Enable display bookmark to mobile connect clients.
        /// </summary>
        /// <value>Enable display bookmark to mobile connect clients.</value>
        [DataMember(Name = "display_on_mobile", EmitDefaultValue = true)]
        public bool DisplayOnMobile { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserLocalGroupBookmarkInnerServiceRdp {\n");
            sb.Append("  ScreenSize: ").Append(ScreenSize).Append("\n");
            sb.Append("  Colors: ").Append(Colors).Append("\n");
            sb.Append("  ApplicationPath: ").Append(ApplicationPath).Append("\n");
            sb.Append("  StartInFolder: ").Append(StartInFolder).Append("\n");
            sb.Append("  AutomaticLogin: ").Append(AutomaticLogin).Append("\n");
            sb.Append("  RedirectClipboard: ").Append(RedirectClipboard).Append("\n");
            sb.Append("  RedirectAudio: ").Append(RedirectAudio).Append("\n");
            sb.Append("  AutoReconnection: ").Append(AutoReconnection).Append("\n");
            sb.Append("  DesktopBackground: ").Append(DesktopBackground).Append("\n");
            sb.Append("  WindowDrag: ").Append(WindowDrag).Append("\n");
            sb.Append("  Animation: ").Append(Animation).Append("\n");
            sb.Append("  DisplayOnMobile: ").Append(DisplayOnMobile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserLocalGroupBookmarkInnerServiceRdp);
        }

        /// <summary>
        /// Returns true if UserLocalGroupBookmarkInnerServiceRdp instances are equal
        /// </summary>
        /// <param name="input">Instance of UserLocalGroupBookmarkInnerServiceRdp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserLocalGroupBookmarkInnerServiceRdp input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ScreenSize == input.ScreenSize ||
                    this.ScreenSize.Equals(input.ScreenSize)
                ) && 
                (
                    this.Colors == input.Colors ||
                    this.Colors.Equals(input.Colors)
                ) && 
                (
                    this.ApplicationPath == input.ApplicationPath ||
                    (this.ApplicationPath != null &&
                    this.ApplicationPath.Equals(input.ApplicationPath))
                ) && 
                (
                    this.StartInFolder == input.StartInFolder ||
                    (this.StartInFolder != null &&
                    this.StartInFolder.Equals(input.StartInFolder))
                ) && 
                (
                    this.AutomaticLogin == input.AutomaticLogin ||
                    (this.AutomaticLogin != null &&
                    this.AutomaticLogin.Equals(input.AutomaticLogin))
                ) && 
                (
                    this.RedirectClipboard == input.RedirectClipboard ||
                    this.RedirectClipboard.Equals(input.RedirectClipboard)
                ) && 
                (
                    this.RedirectAudio == input.RedirectAudio ||
                    this.RedirectAudio.Equals(input.RedirectAudio)
                ) && 
                (
                    this.AutoReconnection == input.AutoReconnection ||
                    this.AutoReconnection.Equals(input.AutoReconnection)
                ) && 
                (
                    this.DesktopBackground == input.DesktopBackground ||
                    this.DesktopBackground.Equals(input.DesktopBackground)
                ) && 
                (
                    this.WindowDrag == input.WindowDrag ||
                    this.WindowDrag.Equals(input.WindowDrag)
                ) && 
                (
                    this.Animation == input.Animation ||
                    this.Animation.Equals(input.Animation)
                ) && 
                (
                    this.DisplayOnMobile == input.DisplayOnMobile ||
                    this.DisplayOnMobile.Equals(input.DisplayOnMobile)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ScreenSize.GetHashCode();
                hashCode = (hashCode * 59) + this.Colors.GetHashCode();
                if (this.ApplicationPath != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicationPath.GetHashCode();
                }
                if (this.StartInFolder != null)
                {
                    hashCode = (hashCode * 59) + this.StartInFolder.GetHashCode();
                }
                if (this.AutomaticLogin != null)
                {
                    hashCode = (hashCode * 59) + this.AutomaticLogin.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RedirectClipboard.GetHashCode();
                hashCode = (hashCode * 59) + this.RedirectAudio.GetHashCode();
                hashCode = (hashCode * 59) + this.AutoReconnection.GetHashCode();
                hashCode = (hashCode * 59) + this.DesktopBackground.GetHashCode();
                hashCode = (hashCode * 59) + this.WindowDrag.GetHashCode();
                hashCode = (hashCode * 59) + this.Animation.GetHashCode();
                hashCode = (hashCode * 59) + this.DisplayOnMobile.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
