/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// ShowStatusVlanTranslationStatusListInner
    /// </summary>
    [DataContract(Name = "show_status_vlan_translation_status_list_inner")]
    public partial class ShowStatusVlanTranslationStatusListInner : IEquatable<ShowStatusVlanTranslationStatusListInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusVlanTranslationStatusListInner" /> class.
        /// </summary>
        /// <param name="ingressInterface">ingressInterface.</param>
        /// <param name="ingressVlan">ingressVlan.</param>
        /// <param name="egressInterface">egressInterface.</param>
        /// <param name="egressVlan">egressVlan.</param>
        /// <param name="reverseTranslation">reverseTranslation.</param>
        /// <param name="active">active.</param>
        public ShowStatusVlanTranslationStatusListInner(string ingressInterface = default(string), string ingressVlan = default(string), string egressInterface = default(string), string egressVlan = default(string), string reverseTranslation = default(string), string active = default(string))
        {
            this.IngressInterface = ingressInterface;
            this.IngressVlan = ingressVlan;
            this.EgressInterface = egressInterface;
            this.EgressVlan = egressVlan;
            this.ReverseTranslation = reverseTranslation;
            this.Active = active;
        }

        /// <summary>
        /// Gets or Sets IngressInterface
        /// </summary>
        [DataMember(Name = "ingress_interface", EmitDefaultValue = false)]
        public string IngressInterface { get; set; }

        /// <summary>
        /// Gets or Sets IngressVlan
        /// </summary>
        [DataMember(Name = "ingress_vlan", EmitDefaultValue = false)]
        public string IngressVlan { get; set; }

        /// <summary>
        /// Gets or Sets EgressInterface
        /// </summary>
        [DataMember(Name = "egress_interface", EmitDefaultValue = false)]
        public string EgressInterface { get; set; }

        /// <summary>
        /// Gets or Sets EgressVlan
        /// </summary>
        [DataMember(Name = "egress_vlan", EmitDefaultValue = false)]
        public string EgressVlan { get; set; }

        /// <summary>
        /// Gets or Sets ReverseTranslation
        /// </summary>
        [DataMember(Name = "reverse_translation", EmitDefaultValue = false)]
        public string ReverseTranslation { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = false)]
        public string Active { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusVlanTranslationStatusListInner {\n");
            sb.Append("  IngressInterface: ").Append(IngressInterface).Append("\n");
            sb.Append("  IngressVlan: ").Append(IngressVlan).Append("\n");
            sb.Append("  EgressInterface: ").Append(EgressInterface).Append("\n");
            sb.Append("  EgressVlan: ").Append(EgressVlan).Append("\n");
            sb.Append("  ReverseTranslation: ").Append(ReverseTranslation).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusVlanTranslationStatusListInner);
        }

        /// <summary>
        /// Returns true if ShowStatusVlanTranslationStatusListInner instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusVlanTranslationStatusListInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusVlanTranslationStatusListInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IngressInterface == input.IngressInterface ||
                    (this.IngressInterface != null &&
                    this.IngressInterface.Equals(input.IngressInterface))
                ) && 
                (
                    this.IngressVlan == input.IngressVlan ||
                    (this.IngressVlan != null &&
                    this.IngressVlan.Equals(input.IngressVlan))
                ) && 
                (
                    this.EgressInterface == input.EgressInterface ||
                    (this.EgressInterface != null &&
                    this.EgressInterface.Equals(input.EgressInterface))
                ) && 
                (
                    this.EgressVlan == input.EgressVlan ||
                    (this.EgressVlan != null &&
                    this.EgressVlan.Equals(input.EgressVlan))
                ) && 
                (
                    this.ReverseTranslation == input.ReverseTranslation ||
                    (this.ReverseTranslation != null &&
                    this.ReverseTranslation.Equals(input.ReverseTranslation))
                ) && 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IngressInterface != null)
                {
                    hashCode = (hashCode * 59) + this.IngressInterface.GetHashCode();
                }
                if (this.IngressVlan != null)
                {
                    hashCode = (hashCode * 59) + this.IngressVlan.GetHashCode();
                }
                if (this.EgressInterface != null)
                {
                    hashCode = (hashCode * 59) + this.EgressInterface.GetHashCode();
                }
                if (this.EgressVlan != null)
                {
                    hashCode = (hashCode * 59) + this.EgressVlan.GetHashCode();
                }
                if (this.ReverseTranslation != null)
                {
                    hashCode = (hashCode * 59) + this.ReverseTranslation.GetHashCode();
                }
                if (this.Active != null)
                {
                    hashCode = (hashCode * 59) + this.Active.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
