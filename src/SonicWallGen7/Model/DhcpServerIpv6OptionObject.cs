/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// DHCP server IPv6 option objects configuration.
    /// </summary>
    [DataContract(Name = "dhcp_server_ipv6_option_object")]
    public partial class DhcpServerIpv6OptionObject : IEquatable<DhcpServerIpv6OptionObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DhcpServerIpv6OptionObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DhcpServerIpv6OptionObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DhcpServerIpv6OptionObject" /> class.
        /// </summary>
        /// <param name="name">Set IPv6 DHCP server option object name. (required).</param>
        /// <param name="number">Set IPv6 DHCP server option object number..</param>
        /// <param name="array">Enable IPv6 DHCP server option object array..</param>
        /// <param name="value">Set IPv6 DHCP server option object value..</param>
        public DhcpServerIpv6OptionObject(string name = default(string), decimal number = default(decimal), bool array = default(bool), List<DhcpServerIpv6OptionObjectValueInner> value = default(List<DhcpServerIpv6OptionObjectValueInner>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for DhcpServerIpv6OptionObject and cannot be null");
            }
            this.Name = name;
            this.Number = number;
            this.Array = array;
            this.Value = value;
        }

        /// <summary>
        /// Set IPv6 DHCP server option object name.
        /// </summary>
        /// <value>Set IPv6 DHCP server option object name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Set IPv6 DHCP server option object number.
        /// </summary>
        /// <value>Set IPv6 DHCP server option object number.</value>
        [DataMember(Name = "number", EmitDefaultValue = false)]
        public decimal Number { get; set; }

        /// <summary>
        /// Enable IPv6 DHCP server option object array.
        /// </summary>
        /// <value>Enable IPv6 DHCP server option object array.</value>
        [DataMember(Name = "array", EmitDefaultValue = true)]
        public bool Array { get; set; }

        /// <summary>
        /// Set IPv6 DHCP server option object value.
        /// </summary>
        /// <value>Set IPv6 DHCP server option object value.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public List<DhcpServerIpv6OptionObjectValueInner> Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DhcpServerIpv6OptionObject {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Array: ").Append(Array).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DhcpServerIpv6OptionObject);
        }

        /// <summary>
        /// Returns true if DhcpServerIpv6OptionObject instances are equal
        /// </summary>
        /// <param name="input">Instance of DhcpServerIpv6OptionObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DhcpServerIpv6OptionObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Number == input.Number ||
                    this.Number.Equals(input.Number)
                ) && 
                (
                    this.Array == input.Array ||
                    this.Array.Equals(input.Array)
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value != null &&
                    input.Value != null &&
                    this.Value.SequenceEqual(input.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Number.GetHashCode();
                hashCode = (hashCode * 59) + this.Array.GetHashCode();
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
