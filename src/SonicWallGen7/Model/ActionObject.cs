/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Action object configuration.
    /// </summary>
    [DataContract(Name = "action_object")]
    public partial class ActionObject : IEquatable<ActionObject>, IValidatableObject
    {
        /// <summary>
        /// Set action.
        /// </summary>
        /// <value>Set action.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            /// <summary>
            /// Enum BlockSmtpErrorReply for value: block-smtp-error-reply
            /// </summary>
            [EnumMember(Value = "block-smtp-error-reply")]
            BlockSmtpErrorReply = 1,

            /// <summary>
            /// Enum DisableEmailAttachment for value: disable-email-attachment
            /// </summary>
            [EnumMember(Value = "disable-email-attachment")]
            DisableEmailAttachment = 2,

            /// <summary>
            /// Enum EmailAddText for value: email-add-text
            /// </summary>
            [EnumMember(Value = "email-add-text")]
            EmailAddText = 3,

            /// <summary>
            /// Enum FtpNotificationReply for value: ftp-notification-reply
            /// </summary>
            [EnumMember(Value = "ftp-notification-reply")]
            FtpNotificationReply = 4,

            /// <summary>
            /// Enum HttpBlockPage for value: http-block-page
            /// </summary>
            [EnumMember(Value = "http-block-page")]
            HttpBlockPage = 5,

            /// <summary>
            /// Enum HttpRedirect for value: http-redirect
            /// </summary>
            [EnumMember(Value = "http-redirect")]
            HttpRedirect = 6,

            /// <summary>
            /// Enum BandwidthManagement for value: bandwidth-management
            /// </summary>
            [EnumMember(Value = "bandwidth-management")]
            BandwidthManagement = 7
        }


        /// <summary>
        /// Set action.
        /// </summary>
        /// <value>Set action.</value>
        [DataMember(Name = "action", EmitDefaultValue = false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// HTTP block page color.
        /// </summary>
        /// <value>HTTP block page color.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ColorEnum
        {
            /// <summary>
            /// Enum White for value: white
            /// </summary>
            [EnumMember(Value = "white")]
            White = 1,

            /// <summary>
            /// Enum Yellow for value: yellow
            /// </summary>
            [EnumMember(Value = "yellow")]
            Yellow = 2,

            /// <summary>
            /// Enum Red for value: red
            /// </summary>
            [EnumMember(Value = "red")]
            Red = 3,

            /// <summary>
            /// Enum Blue for value: blue
            /// </summary>
            [EnumMember(Value = "blue")]
            Blue = 4
        }


        /// <summary>
        /// HTTP block page color.
        /// </summary>
        /// <value>HTTP block page color.</value>
        [DataMember(Name = "color", EmitDefaultValue = false)]
        public ColorEnum? Color { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ActionObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionObject" /> class.
        /// </summary>
        /// <param name="name">Action object name. (required).</param>
        /// <param name="action">Set action..</param>
        /// <param name="content">Action object content..</param>
        /// <param name="color">HTTP block page color..</param>
        /// <param name="bandwidthManagement">bandwidthManagement.</param>
        public ActionObject(string name = default(string), ActionEnum? action = default(ActionEnum?), string content = default(string), ColorEnum? color = default(ColorEnum?), ActionObjectBandwidthManagement bandwidthManagement = default(ActionObjectBandwidthManagement))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ActionObject and cannot be null");
            }
            this.Name = name;
            this.Action = action;
            this.Content = content;
            this.Color = color;
            this.BandwidthManagement = bandwidthManagement;
        }

        /// <summary>
        /// Action object name.
        /// </summary>
        /// <value>Action object name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Action object content.
        /// </summary>
        /// <value>Action object content.</value>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public string Content { get; set; }

        /// <summary>
        /// Gets or Sets BandwidthManagement
        /// </summary>
        [DataMember(Name = "bandwidth_management", EmitDefaultValue = false)]
        public ActionObjectBandwidthManagement BandwidthManagement { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActionObject {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  BandwidthManagement: ").Append(BandwidthManagement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActionObject);
        }

        /// <summary>
        /// Returns true if ActionObject instances are equal
        /// </summary>
        /// <param name="input">Instance of ActionObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActionObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Action == input.Action ||
                    this.Action.Equals(input.Action)
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.Color == input.Color ||
                    this.Color.Equals(input.Color)
                ) && 
                (
                    this.BandwidthManagement == input.BandwidthManagement ||
                    (this.BandwidthManagement != null &&
                    this.BandwidthManagement.Equals(input.BandwidthManagement))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Action.GetHashCode();
                if (this.Content != null)
                {
                    hashCode = (hashCode * 59) + this.Content.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Color.GetHashCode();
                if (this.BandwidthManagement != null)
                {
                    hashCode = (hashCode * 59) + this.BandwidthManagement.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
