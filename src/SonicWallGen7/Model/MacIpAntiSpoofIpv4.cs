/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// MAC IP anti-spoof IPv4 interfaces configuration schema.
    /// </summary>
    [DataContract(Name = "mac_ip_anti_spoof_ipv4")]
    public partial class MacIpAntiSpoofIpv4 : IEquatable<MacIpAntiSpoofIpv4>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MacIpAntiSpoofIpv4" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MacIpAntiSpoofIpv4() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MacIpAntiSpoofIpv4" /> class.
        /// </summary>
        /// <param name="name">Configure MAC-IP anti-spoof for the specified interface. (required).</param>
        /// <param name="enable">Enable MAC-IP based anti-spoofing on this interface..</param>
        /// <param name="staticArp">Enable population of MAC-IP anti-spoof from static ARP entries..</param>
        /// <param name="dhcpServer">Enable population of MAC-IP anti-spoof entry from DHCP lease (SonicWall&#39;s DHCP server)..</param>
        /// <param name="dhcpRelay">Enable population of MAC-IP anti-spoof entry from DHCP lease (DHCP relay - IP helper)..</param>
        /// <param name="arpLock">Enable locking of MAC-IP binding in ARP cache to prevent ARP poisoning from others..</param>
        /// <param name="arpWatch">Enable prevention of ARP poisoning of connected machines..</param>
        /// <param name="enforceIngress">Enable enforcement of ingress anti-spoof - drop packets not matching MAC-IP anti-spoof cache..</param>
        /// <param name="spoofDetection">Enable creation of MAC-IP spoof detected list for packets failing to match anti-spoof cache..</param>
        /// <param name="allowManagement">Enable all traffic destined to the box to be allowed without a valid MAC-IP anti-spoof cache..</param>
        public MacIpAntiSpoofIpv4(string name = default(string), bool enable = default(bool), bool staticArp = default(bool), bool dhcpServer = default(bool), bool dhcpRelay = default(bool), bool arpLock = default(bool), bool arpWatch = default(bool), bool enforceIngress = default(bool), bool spoofDetection = default(bool), bool allowManagement = default(bool))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for MacIpAntiSpoofIpv4 and cannot be null");
            }
            this.Name = name;
            this.Enable = enable;
            this.StaticArp = staticArp;
            this.DhcpServer = dhcpServer;
            this.DhcpRelay = dhcpRelay;
            this.ArpLock = arpLock;
            this.ArpWatch = arpWatch;
            this.EnforceIngress = enforceIngress;
            this.SpoofDetection = spoofDetection;
            this.AllowManagement = allowManagement;
        }

        /// <summary>
        /// Configure MAC-IP anti-spoof for the specified interface.
        /// </summary>
        /// <value>Configure MAC-IP anti-spoof for the specified interface.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Enable MAC-IP based anti-spoofing on this interface.
        /// </summary>
        /// <value>Enable MAC-IP based anti-spoofing on this interface.</value>
        [DataMember(Name = "enable", EmitDefaultValue = true)]
        public bool Enable { get; set; }

        /// <summary>
        /// Enable population of MAC-IP anti-spoof from static ARP entries.
        /// </summary>
        /// <value>Enable population of MAC-IP anti-spoof from static ARP entries.</value>
        [DataMember(Name = "static_arp", EmitDefaultValue = true)]
        public bool StaticArp { get; set; }

        /// <summary>
        /// Enable population of MAC-IP anti-spoof entry from DHCP lease (SonicWall&#39;s DHCP server).
        /// </summary>
        /// <value>Enable population of MAC-IP anti-spoof entry from DHCP lease (SonicWall&#39;s DHCP server).</value>
        [DataMember(Name = "dhcp_server", EmitDefaultValue = true)]
        public bool DhcpServer { get; set; }

        /// <summary>
        /// Enable population of MAC-IP anti-spoof entry from DHCP lease (DHCP relay - IP helper).
        /// </summary>
        /// <value>Enable population of MAC-IP anti-spoof entry from DHCP lease (DHCP relay - IP helper).</value>
        [DataMember(Name = "dhcp_relay", EmitDefaultValue = true)]
        public bool DhcpRelay { get; set; }

        /// <summary>
        /// Enable locking of MAC-IP binding in ARP cache to prevent ARP poisoning from others.
        /// </summary>
        /// <value>Enable locking of MAC-IP binding in ARP cache to prevent ARP poisoning from others.</value>
        [DataMember(Name = "arp_lock", EmitDefaultValue = true)]
        public bool ArpLock { get; set; }

        /// <summary>
        /// Enable prevention of ARP poisoning of connected machines.
        /// </summary>
        /// <value>Enable prevention of ARP poisoning of connected machines.</value>
        [DataMember(Name = "arp_watch", EmitDefaultValue = true)]
        public bool ArpWatch { get; set; }

        /// <summary>
        /// Enable enforcement of ingress anti-spoof - drop packets not matching MAC-IP anti-spoof cache.
        /// </summary>
        /// <value>Enable enforcement of ingress anti-spoof - drop packets not matching MAC-IP anti-spoof cache.</value>
        [DataMember(Name = "enforce_ingress", EmitDefaultValue = true)]
        public bool EnforceIngress { get; set; }

        /// <summary>
        /// Enable creation of MAC-IP spoof detected list for packets failing to match anti-spoof cache.
        /// </summary>
        /// <value>Enable creation of MAC-IP spoof detected list for packets failing to match anti-spoof cache.</value>
        [DataMember(Name = "spoof_detection", EmitDefaultValue = true)]
        public bool SpoofDetection { get; set; }

        /// <summary>
        /// Enable all traffic destined to the box to be allowed without a valid MAC-IP anti-spoof cache.
        /// </summary>
        /// <value>Enable all traffic destined to the box to be allowed without a valid MAC-IP anti-spoof cache.</value>
        [DataMember(Name = "allow_management", EmitDefaultValue = true)]
        public bool AllowManagement { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MacIpAntiSpoofIpv4 {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  StaticArp: ").Append(StaticArp).Append("\n");
            sb.Append("  DhcpServer: ").Append(DhcpServer).Append("\n");
            sb.Append("  DhcpRelay: ").Append(DhcpRelay).Append("\n");
            sb.Append("  ArpLock: ").Append(ArpLock).Append("\n");
            sb.Append("  ArpWatch: ").Append(ArpWatch).Append("\n");
            sb.Append("  EnforceIngress: ").Append(EnforceIngress).Append("\n");
            sb.Append("  SpoofDetection: ").Append(SpoofDetection).Append("\n");
            sb.Append("  AllowManagement: ").Append(AllowManagement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MacIpAntiSpoofIpv4);
        }

        /// <summary>
        /// Returns true if MacIpAntiSpoofIpv4 instances are equal
        /// </summary>
        /// <param name="input">Instance of MacIpAntiSpoofIpv4 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MacIpAntiSpoofIpv4 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.StaticArp == input.StaticArp ||
                    this.StaticArp.Equals(input.StaticArp)
                ) && 
                (
                    this.DhcpServer == input.DhcpServer ||
                    this.DhcpServer.Equals(input.DhcpServer)
                ) && 
                (
                    this.DhcpRelay == input.DhcpRelay ||
                    this.DhcpRelay.Equals(input.DhcpRelay)
                ) && 
                (
                    this.ArpLock == input.ArpLock ||
                    this.ArpLock.Equals(input.ArpLock)
                ) && 
                (
                    this.ArpWatch == input.ArpWatch ||
                    this.ArpWatch.Equals(input.ArpWatch)
                ) && 
                (
                    this.EnforceIngress == input.EnforceIngress ||
                    this.EnforceIngress.Equals(input.EnforceIngress)
                ) && 
                (
                    this.SpoofDetection == input.SpoofDetection ||
                    this.SpoofDetection.Equals(input.SpoofDetection)
                ) && 
                (
                    this.AllowManagement == input.AllowManagement ||
                    this.AllowManagement.Equals(input.AllowManagement)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Enable.GetHashCode();
                hashCode = (hashCode * 59) + this.StaticArp.GetHashCode();
                hashCode = (hashCode * 59) + this.DhcpServer.GetHashCode();
                hashCode = (hashCode * 59) + this.DhcpRelay.GetHashCode();
                hashCode = (hashCode * 59) + this.ArpLock.GetHashCode();
                hashCode = (hashCode * 59) + this.ArpWatch.GetHashCode();
                hashCode = (hashCode * 59) + this.EnforceIngress.GetHashCode();
                hashCode = (hashCode * 59) + this.SpoofDetection.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowManagement.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
