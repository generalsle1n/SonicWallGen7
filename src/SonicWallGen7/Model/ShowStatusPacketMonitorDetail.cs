/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// packet monitor detail schema.
    /// </summary>
    [DataContract(Name = "show_status_packet_monitor_detail")]
    public partial class ShowStatusPacketMonitorDetail : IEquatable<ShowStatusPacketMonitorDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusPacketMonitorDetail" /> class.
        /// </summary>
        /// <param name="traceStatus">traceStatus.</param>
        /// <param name="localMirrorStatus">localMirrorStatus.</param>
        /// <param name="remoteMirrorTxStatus">remoteMirrorTxStatus.</param>
        /// <param name="remoteMirrorRxStatus">remoteMirrorRxStatus.</param>
        /// <param name="ftpLogStatus">ftpLogStatus.</param>
        /// <param name="currentBufferStatistics">currentBufferStatistics.</param>
        /// <param name="systemTime">systemTime.</param>
        public ShowStatusPacketMonitorDetail(string traceStatus = default(string), string localMirrorStatus = default(string), string remoteMirrorTxStatus = default(string), string remoteMirrorRxStatus = default(string), string ftpLogStatus = default(string), string currentBufferStatistics = default(string), decimal systemTime = default(decimal))
        {
            this.TraceStatus = traceStatus;
            this.LocalMirrorStatus = localMirrorStatus;
            this.RemoteMirrorTxStatus = remoteMirrorTxStatus;
            this.RemoteMirrorRxStatus = remoteMirrorRxStatus;
            this.FtpLogStatus = ftpLogStatus;
            this.CurrentBufferStatistics = currentBufferStatistics;
            this.SystemTime = systemTime;
        }

        /// <summary>
        /// Gets or Sets TraceStatus
        /// </summary>
        [DataMember(Name = "trace_status", EmitDefaultValue = false)]
        public string TraceStatus { get; set; }

        /// <summary>
        /// Gets or Sets LocalMirrorStatus
        /// </summary>
        [DataMember(Name = "local_mirror_status", EmitDefaultValue = false)]
        public string LocalMirrorStatus { get; set; }

        /// <summary>
        /// Gets or Sets RemoteMirrorTxStatus
        /// </summary>
        [DataMember(Name = "remote_mirror_tx_status", EmitDefaultValue = false)]
        public string RemoteMirrorTxStatus { get; set; }

        /// <summary>
        /// Gets or Sets RemoteMirrorRxStatus
        /// </summary>
        [DataMember(Name = "remote_mirror_rx_status", EmitDefaultValue = false)]
        public string RemoteMirrorRxStatus { get; set; }

        /// <summary>
        /// Gets or Sets FtpLogStatus
        /// </summary>
        [DataMember(Name = "ftp_log_status", EmitDefaultValue = false)]
        public string FtpLogStatus { get; set; }

        /// <summary>
        /// Gets or Sets CurrentBufferStatistics
        /// </summary>
        [DataMember(Name = "current_buffer_statistics", EmitDefaultValue = false)]
        public string CurrentBufferStatistics { get; set; }

        /// <summary>
        /// Gets or Sets SystemTime
        /// </summary>
        [DataMember(Name = "system_time", EmitDefaultValue = false)]
        public decimal SystemTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusPacketMonitorDetail {\n");
            sb.Append("  TraceStatus: ").Append(TraceStatus).Append("\n");
            sb.Append("  LocalMirrorStatus: ").Append(LocalMirrorStatus).Append("\n");
            sb.Append("  RemoteMirrorTxStatus: ").Append(RemoteMirrorTxStatus).Append("\n");
            sb.Append("  RemoteMirrorRxStatus: ").Append(RemoteMirrorRxStatus).Append("\n");
            sb.Append("  FtpLogStatus: ").Append(FtpLogStatus).Append("\n");
            sb.Append("  CurrentBufferStatistics: ").Append(CurrentBufferStatistics).Append("\n");
            sb.Append("  SystemTime: ").Append(SystemTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusPacketMonitorDetail);
        }

        /// <summary>
        /// Returns true if ShowStatusPacketMonitorDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusPacketMonitorDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusPacketMonitorDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TraceStatus == input.TraceStatus ||
                    (this.TraceStatus != null &&
                    this.TraceStatus.Equals(input.TraceStatus))
                ) && 
                (
                    this.LocalMirrorStatus == input.LocalMirrorStatus ||
                    (this.LocalMirrorStatus != null &&
                    this.LocalMirrorStatus.Equals(input.LocalMirrorStatus))
                ) && 
                (
                    this.RemoteMirrorTxStatus == input.RemoteMirrorTxStatus ||
                    (this.RemoteMirrorTxStatus != null &&
                    this.RemoteMirrorTxStatus.Equals(input.RemoteMirrorTxStatus))
                ) && 
                (
                    this.RemoteMirrorRxStatus == input.RemoteMirrorRxStatus ||
                    (this.RemoteMirrorRxStatus != null &&
                    this.RemoteMirrorRxStatus.Equals(input.RemoteMirrorRxStatus))
                ) && 
                (
                    this.FtpLogStatus == input.FtpLogStatus ||
                    (this.FtpLogStatus != null &&
                    this.FtpLogStatus.Equals(input.FtpLogStatus))
                ) && 
                (
                    this.CurrentBufferStatistics == input.CurrentBufferStatistics ||
                    (this.CurrentBufferStatistics != null &&
                    this.CurrentBufferStatistics.Equals(input.CurrentBufferStatistics))
                ) && 
                (
                    this.SystemTime == input.SystemTime ||
                    this.SystemTime.Equals(input.SystemTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TraceStatus != null)
                {
                    hashCode = (hashCode * 59) + this.TraceStatus.GetHashCode();
                }
                if (this.LocalMirrorStatus != null)
                {
                    hashCode = (hashCode * 59) + this.LocalMirrorStatus.GetHashCode();
                }
                if (this.RemoteMirrorTxStatus != null)
                {
                    hashCode = (hashCode * 59) + this.RemoteMirrorTxStatus.GetHashCode();
                }
                if (this.RemoteMirrorRxStatus != null)
                {
                    hashCode = (hashCode * 59) + this.RemoteMirrorRxStatus.GetHashCode();
                }
                if (this.FtpLogStatus != null)
                {
                    hashCode = (hashCode * 59) + this.FtpLogStatus.GetHashCode();
                }
                if (this.CurrentBufferStatistics != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentBufferStatistics.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SystemTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
