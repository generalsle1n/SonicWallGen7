/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure advanced diag capture threat assessment report configuration.
    /// </summary>
    [DataContract(Name = "diag_advanced_cta_report_diag_advanced_cta_report")]
    public partial class DiagAdvancedCtaReportDiagAdvancedCtaReport : IEquatable<DiagAdvancedCtaReportDiagAdvancedCtaReport>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagAdvancedCtaReportDiagAdvancedCtaReport" /> class.
        /// </summary>
        /// <param name="serviceAddress">serviceAddress.</param>
        /// <param name="serviceHttpsPort">Set the service HTTPS port..</param>
        /// <param name="uploadToCloudService">Enable upload to cloud service..</param>
        /// <param name="uploadToYamlFormat">Enable upload to YAML format..</param>
        /// <param name="supportForCtav1Only">Enable support for CTAv1 only..</param>
        /// <param name="cscReportingCloudFqdn">Set csc reporting cloud fqdn..</param>
        public DiagAdvancedCtaReportDiagAdvancedCtaReport(DiagAdvancedCtaReportDiagAdvancedCtaReportServiceAddress serviceAddress = default(DiagAdvancedCtaReportDiagAdvancedCtaReportServiceAddress), decimal serviceHttpsPort = default(decimal), bool uploadToCloudService = default(bool), bool uploadToYamlFormat = default(bool), bool supportForCtav1Only = default(bool), string cscReportingCloudFqdn = default(string))
        {
            this.ServiceAddress = serviceAddress;
            this.ServiceHttpsPort = serviceHttpsPort;
            this.UploadToCloudService = uploadToCloudService;
            this.UploadToYamlFormat = uploadToYamlFormat;
            this.SupportForCtav1Only = supportForCtav1Only;
            this.CscReportingCloudFqdn = cscReportingCloudFqdn;
        }

        /// <summary>
        /// Gets or Sets ServiceAddress
        /// </summary>
        [DataMember(Name = "service_address", EmitDefaultValue = false)]
        public DiagAdvancedCtaReportDiagAdvancedCtaReportServiceAddress ServiceAddress { get; set; }

        /// <summary>
        /// Set the service HTTPS port.
        /// </summary>
        /// <value>Set the service HTTPS port.</value>
        [DataMember(Name = "service_https_port", EmitDefaultValue = false)]
        public decimal ServiceHttpsPort { get; set; }

        /// <summary>
        /// Enable upload to cloud service.
        /// </summary>
        /// <value>Enable upload to cloud service.</value>
        [DataMember(Name = "upload_to_cloud_service", EmitDefaultValue = true)]
        public bool UploadToCloudService { get; set; }

        /// <summary>
        /// Enable upload to YAML format.
        /// </summary>
        /// <value>Enable upload to YAML format.</value>
        [DataMember(Name = "upload_to_yaml_format", EmitDefaultValue = true)]
        public bool UploadToYamlFormat { get; set; }

        /// <summary>
        /// Enable support for CTAv1 only.
        /// </summary>
        /// <value>Enable support for CTAv1 only.</value>
        [DataMember(Name = "support_for_ctav1_only", EmitDefaultValue = true)]
        public bool SupportForCtav1Only { get; set; }

        /// <summary>
        /// Set csc reporting cloud fqdn.
        /// </summary>
        /// <value>Set csc reporting cloud fqdn.</value>
        [DataMember(Name = "csc_reporting_cloud_fqdn", EmitDefaultValue = false)]
        public string CscReportingCloudFqdn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DiagAdvancedCtaReportDiagAdvancedCtaReport {\n");
            sb.Append("  ServiceAddress: ").Append(ServiceAddress).Append("\n");
            sb.Append("  ServiceHttpsPort: ").Append(ServiceHttpsPort).Append("\n");
            sb.Append("  UploadToCloudService: ").Append(UploadToCloudService).Append("\n");
            sb.Append("  UploadToYamlFormat: ").Append(UploadToYamlFormat).Append("\n");
            sb.Append("  SupportForCtav1Only: ").Append(SupportForCtav1Only).Append("\n");
            sb.Append("  CscReportingCloudFqdn: ").Append(CscReportingCloudFqdn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiagAdvancedCtaReportDiagAdvancedCtaReport);
        }

        /// <summary>
        /// Returns true if DiagAdvancedCtaReportDiagAdvancedCtaReport instances are equal
        /// </summary>
        /// <param name="input">Instance of DiagAdvancedCtaReportDiagAdvancedCtaReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiagAdvancedCtaReportDiagAdvancedCtaReport input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ServiceAddress == input.ServiceAddress ||
                    (this.ServiceAddress != null &&
                    this.ServiceAddress.Equals(input.ServiceAddress))
                ) && 
                (
                    this.ServiceHttpsPort == input.ServiceHttpsPort ||
                    this.ServiceHttpsPort.Equals(input.ServiceHttpsPort)
                ) && 
                (
                    this.UploadToCloudService == input.UploadToCloudService ||
                    this.UploadToCloudService.Equals(input.UploadToCloudService)
                ) && 
                (
                    this.UploadToYamlFormat == input.UploadToYamlFormat ||
                    this.UploadToYamlFormat.Equals(input.UploadToYamlFormat)
                ) && 
                (
                    this.SupportForCtav1Only == input.SupportForCtav1Only ||
                    this.SupportForCtav1Only.Equals(input.SupportForCtav1Only)
                ) && 
                (
                    this.CscReportingCloudFqdn == input.CscReportingCloudFqdn ||
                    (this.CscReportingCloudFqdn != null &&
                    this.CscReportingCloudFqdn.Equals(input.CscReportingCloudFqdn))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ServiceAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceAddress.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ServiceHttpsPort.GetHashCode();
                hashCode = (hashCode * 59) + this.UploadToCloudService.GetHashCode();
                hashCode = (hashCode * 59) + this.UploadToYamlFormat.GetHashCode();
                hashCode = (hashCode * 59) + this.SupportForCtav1Only.GetHashCode();
                if (this.CscReportingCloudFqdn != null)
                {
                    hashCode = (hashCode * 59) + this.CscReportingCloudFqdn.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
