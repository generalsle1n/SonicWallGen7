/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// IP version IPv4.
    /// </summary>
    [DataContract(Name = "ha_monitoring_ipv4_ipv4")]
    public partial class HaMonitoringIpv4Ipv4 : IEquatable<HaMonitoringIpv4Ipv4>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HaMonitoringIpv4Ipv4" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HaMonitoringIpv4Ipv4() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="HaMonitoringIpv4Ipv4" /> class.
        /// </summary>
        /// <param name="name">Interface name. (required).</param>
        /// <param name="linkMonitoring">Enable physical/link monitoring..</param>
        /// <param name="primary">Set primary interface monitoring IP address..</param>
        /// <param name="secondary">Set secondary interface monitoring IP address..</param>
        /// <param name="allowManagement">Enable allow management on primary/secondary IP address..</param>
        /// <param name="logicalProbe">logicalProbe.</param>
        public HaMonitoringIpv4Ipv4(string name = default(string), bool linkMonitoring = default(bool), string primary = default(string), string secondary = default(string), bool allowManagement = default(bool), HaMonitoringIpv4Ipv4LogicalProbe logicalProbe = default(HaMonitoringIpv4Ipv4LogicalProbe))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for HaMonitoringIpv4Ipv4 and cannot be null");
            }
            this.Name = name;
            this.LinkMonitoring = linkMonitoring;
            this.Primary = primary;
            this.Secondary = secondary;
            this.AllowManagement = allowManagement;
            this.LogicalProbe = logicalProbe;
        }

        /// <summary>
        /// Interface name.
        /// </summary>
        /// <value>Interface name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Enable physical/link monitoring.
        /// </summary>
        /// <value>Enable physical/link monitoring.</value>
        [DataMember(Name = "link_monitoring", EmitDefaultValue = true)]
        public bool LinkMonitoring { get; set; }

        /// <summary>
        /// Set primary interface monitoring IP address.
        /// </summary>
        /// <value>Set primary interface monitoring IP address.</value>
        [DataMember(Name = "primary", EmitDefaultValue = false)]
        public string Primary { get; set; }

        /// <summary>
        /// Set secondary interface monitoring IP address.
        /// </summary>
        /// <value>Set secondary interface monitoring IP address.</value>
        [DataMember(Name = "secondary", EmitDefaultValue = false)]
        public string Secondary { get; set; }

        /// <summary>
        /// Enable allow management on primary/secondary IP address.
        /// </summary>
        /// <value>Enable allow management on primary/secondary IP address.</value>
        [DataMember(Name = "allow_management", EmitDefaultValue = true)]
        public bool AllowManagement { get; set; }

        /// <summary>
        /// Gets or Sets LogicalProbe
        /// </summary>
        [DataMember(Name = "logical_probe", EmitDefaultValue = false)]
        public HaMonitoringIpv4Ipv4LogicalProbe LogicalProbe { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HaMonitoringIpv4Ipv4 {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  LinkMonitoring: ").Append(LinkMonitoring).Append("\n");
            sb.Append("  Primary: ").Append(Primary).Append("\n");
            sb.Append("  Secondary: ").Append(Secondary).Append("\n");
            sb.Append("  AllowManagement: ").Append(AllowManagement).Append("\n");
            sb.Append("  LogicalProbe: ").Append(LogicalProbe).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HaMonitoringIpv4Ipv4);
        }

        /// <summary>
        /// Returns true if HaMonitoringIpv4Ipv4 instances are equal
        /// </summary>
        /// <param name="input">Instance of HaMonitoringIpv4Ipv4 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HaMonitoringIpv4Ipv4 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.LinkMonitoring == input.LinkMonitoring ||
                    this.LinkMonitoring.Equals(input.LinkMonitoring)
                ) && 
                (
                    this.Primary == input.Primary ||
                    (this.Primary != null &&
                    this.Primary.Equals(input.Primary))
                ) && 
                (
                    this.Secondary == input.Secondary ||
                    (this.Secondary != null &&
                    this.Secondary.Equals(input.Secondary))
                ) && 
                (
                    this.AllowManagement == input.AllowManagement ||
                    this.AllowManagement.Equals(input.AllowManagement)
                ) && 
                (
                    this.LogicalProbe == input.LogicalProbe ||
                    (this.LogicalProbe != null &&
                    this.LogicalProbe.Equals(input.LogicalProbe))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LinkMonitoring.GetHashCode();
                if (this.Primary != null)
                {
                    hashCode = (hashCode * 59) + this.Primary.GetHashCode();
                }
                if (this.Secondary != null)
                {
                    hashCode = (hashCode * 59) + this.Secondary.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AllowManagement.GetHashCode();
                if (this.LogicalProbe != null)
                {
                    hashCode = (hashCode * 59) + this.LogicalProbe.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
