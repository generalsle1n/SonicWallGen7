/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Log automation configuration.
    /// </summary>
    [DataContract(Name = "log_automation_log_automation")]
    public partial class LogAutomationLogAutomation : IEquatable<LogAutomationLogAutomation>, IValidatableObject
    {
        /// <summary>
        /// Specify e-mail server authentication method.
        /// </summary>
        /// <value>Specify e-mail server authentication method.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AuthenticationMethodEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum PopBeforeSmtp for value: pop-before-smtp
            /// </summary>
            [EnumMember(Value = "pop-before-smtp")]
            PopBeforeSmtp = 2
        }


        /// <summary>
        /// Specify e-mail server authentication method.
        /// </summary>
        /// <value>Specify e-mail server authentication method.</value>
        [DataMember(Name = "authentication_method", EmitDefaultValue = false)]
        public AuthenticationMethodEnum? AuthenticationMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LogAutomationLogAutomation" /> class.
        /// </summary>
        /// <param name="emailAddress">emailAddress.</param>
        /// <param name="sendLog">sendLog.</param>
        /// <param name="emailFormatLog">emailFormatLog.</param>
        /// <param name="sendAudit">sendAudit.</param>
        /// <param name="emailFormatAudit">emailFormatAudit.</param>
        /// <param name="includeAllLogInformation">Include all log information..</param>
        /// <param name="healthCheckEmail">healthCheckEmail.</param>
        /// <param name="mailServer">Set mail server IP address or hostname..</param>
        /// <param name="mailFrom">Set E-mail address to mail from..</param>
        /// <param name="authenticationMethod">Specify e-mail server authentication method..</param>
        /// <param name="pop3Server">POP3 server IP address or hostname..</param>
        /// <param name="pop3UserName">Specify username for authentication..</param>
        /// <param name="pop3Password">Specify password for authentication..</param>
        /// <param name="mailServerAdvanced">mailServerAdvanced.</param>
        /// <param name="ftpLog">ftpLog.</param>
        /// <param name="solera">solera.</param>
        public LogAutomationLogAutomation(LogAutomationLogAutomationEmailAddress emailAddress = default(LogAutomationLogAutomationEmailAddress), LogAutomationLogAutomationSendLog sendLog = default(LogAutomationLogAutomationSendLog), LogAutomationLogAutomationEmailFormatLog emailFormatLog = default(LogAutomationLogAutomationEmailFormatLog), LogAutomationLogAutomationSendAudit sendAudit = default(LogAutomationLogAutomationSendAudit), LogAutomationLogAutomationEmailFormatAudit emailFormatAudit = default(LogAutomationLogAutomationEmailFormatAudit), bool includeAllLogInformation = default(bool), LogAutomationLogAutomationHealthCheckEmail healthCheckEmail = default(LogAutomationLogAutomationHealthCheckEmail), string mailServer = default(string), string mailFrom = default(string), AuthenticationMethodEnum? authenticationMethod = default(AuthenticationMethodEnum?), string pop3Server = default(string), string pop3UserName = default(string), string pop3Password = default(string), LogAutomationLogAutomationMailServerAdvanced mailServerAdvanced = default(LogAutomationLogAutomationMailServerAdvanced), LogAutomationLogAutomationFtpLog ftpLog = default(LogAutomationLogAutomationFtpLog), LogAutomationLogAutomationSolera solera = default(LogAutomationLogAutomationSolera))
        {
            this.EmailAddress = emailAddress;
            this.SendLog = sendLog;
            this.EmailFormatLog = emailFormatLog;
            this.SendAudit = sendAudit;
            this.EmailFormatAudit = emailFormatAudit;
            this.IncludeAllLogInformation = includeAllLogInformation;
            this.HealthCheckEmail = healthCheckEmail;
            this.MailServer = mailServer;
            this.MailFrom = mailFrom;
            this.AuthenticationMethod = authenticationMethod;
            this.Pop3Server = pop3Server;
            this.Pop3UserName = pop3UserName;
            this.Pop3Password = pop3Password;
            this.MailServerAdvanced = mailServerAdvanced;
            this.FtpLog = ftpLog;
            this.Solera = solera;
        }

        /// <summary>
        /// Gets or Sets EmailAddress
        /// </summary>
        [DataMember(Name = "email_address", EmitDefaultValue = false)]
        public LogAutomationLogAutomationEmailAddress EmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets SendLog
        /// </summary>
        [DataMember(Name = "send_log", EmitDefaultValue = false)]
        public LogAutomationLogAutomationSendLog SendLog { get; set; }

        /// <summary>
        /// Gets or Sets EmailFormatLog
        /// </summary>
        [DataMember(Name = "email_format_log", EmitDefaultValue = false)]
        public LogAutomationLogAutomationEmailFormatLog EmailFormatLog { get; set; }

        /// <summary>
        /// Gets or Sets SendAudit
        /// </summary>
        [DataMember(Name = "send_audit", EmitDefaultValue = false)]
        public LogAutomationLogAutomationSendAudit SendAudit { get; set; }

        /// <summary>
        /// Gets or Sets EmailFormatAudit
        /// </summary>
        [DataMember(Name = "email_format_audit", EmitDefaultValue = false)]
        public LogAutomationLogAutomationEmailFormatAudit EmailFormatAudit { get; set; }

        /// <summary>
        /// Include all log information.
        /// </summary>
        /// <value>Include all log information.</value>
        [DataMember(Name = "include_all_log_information", EmitDefaultValue = true)]
        public bool IncludeAllLogInformation { get; set; }

        /// <summary>
        /// Gets or Sets HealthCheckEmail
        /// </summary>
        [DataMember(Name = "health_check_email", EmitDefaultValue = false)]
        public LogAutomationLogAutomationHealthCheckEmail HealthCheckEmail { get; set; }

        /// <summary>
        /// Set mail server IP address or hostname.
        /// </summary>
        /// <value>Set mail server IP address or hostname.</value>
        [DataMember(Name = "mail_server", EmitDefaultValue = false)]
        public string MailServer { get; set; }

        /// <summary>
        /// Set E-mail address to mail from.
        /// </summary>
        /// <value>Set E-mail address to mail from.</value>
        [DataMember(Name = "mail_from", EmitDefaultValue = false)]
        public string MailFrom { get; set; }

        /// <summary>
        /// POP3 server IP address or hostname.
        /// </summary>
        /// <value>POP3 server IP address or hostname.</value>
        [DataMember(Name = "pop3_server", EmitDefaultValue = false)]
        public string Pop3Server { get; set; }

        /// <summary>
        /// Specify username for authentication.
        /// </summary>
        /// <value>Specify username for authentication.</value>
        [DataMember(Name = "pop3_user_name", EmitDefaultValue = false)]
        public string Pop3UserName { get; set; }

        /// <summary>
        /// Specify password for authentication.
        /// </summary>
        /// <value>Specify password for authentication.</value>
        [DataMember(Name = "pop3_password", EmitDefaultValue = false)]
        public string Pop3Password { get; set; }

        /// <summary>
        /// Gets or Sets MailServerAdvanced
        /// </summary>
        [DataMember(Name = "mail_server_advanced", EmitDefaultValue = false)]
        public LogAutomationLogAutomationMailServerAdvanced MailServerAdvanced { get; set; }

        /// <summary>
        /// Gets or Sets FtpLog
        /// </summary>
        [DataMember(Name = "ftp_log", EmitDefaultValue = true)]
        public LogAutomationLogAutomationFtpLog FtpLog { get; set; }

        /// <summary>
        /// Gets or Sets Solera
        /// </summary>
        [DataMember(Name = "solera", EmitDefaultValue = true)]
        public LogAutomationLogAutomationSolera Solera { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LogAutomationLogAutomation {\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  SendLog: ").Append(SendLog).Append("\n");
            sb.Append("  EmailFormatLog: ").Append(EmailFormatLog).Append("\n");
            sb.Append("  SendAudit: ").Append(SendAudit).Append("\n");
            sb.Append("  EmailFormatAudit: ").Append(EmailFormatAudit).Append("\n");
            sb.Append("  IncludeAllLogInformation: ").Append(IncludeAllLogInformation).Append("\n");
            sb.Append("  HealthCheckEmail: ").Append(HealthCheckEmail).Append("\n");
            sb.Append("  MailServer: ").Append(MailServer).Append("\n");
            sb.Append("  MailFrom: ").Append(MailFrom).Append("\n");
            sb.Append("  AuthenticationMethod: ").Append(AuthenticationMethod).Append("\n");
            sb.Append("  Pop3Server: ").Append(Pop3Server).Append("\n");
            sb.Append("  Pop3UserName: ").Append(Pop3UserName).Append("\n");
            sb.Append("  Pop3Password: ").Append(Pop3Password).Append("\n");
            sb.Append("  MailServerAdvanced: ").Append(MailServerAdvanced).Append("\n");
            sb.Append("  FtpLog: ").Append(FtpLog).Append("\n");
            sb.Append("  Solera: ").Append(Solera).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogAutomationLogAutomation);
        }

        /// <summary>
        /// Returns true if LogAutomationLogAutomation instances are equal
        /// </summary>
        /// <param name="input">Instance of LogAutomationLogAutomation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogAutomationLogAutomation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.SendLog == input.SendLog ||
                    (this.SendLog != null &&
                    this.SendLog.Equals(input.SendLog))
                ) && 
                (
                    this.EmailFormatLog == input.EmailFormatLog ||
                    (this.EmailFormatLog != null &&
                    this.EmailFormatLog.Equals(input.EmailFormatLog))
                ) && 
                (
                    this.SendAudit == input.SendAudit ||
                    (this.SendAudit != null &&
                    this.SendAudit.Equals(input.SendAudit))
                ) && 
                (
                    this.EmailFormatAudit == input.EmailFormatAudit ||
                    (this.EmailFormatAudit != null &&
                    this.EmailFormatAudit.Equals(input.EmailFormatAudit))
                ) && 
                (
                    this.IncludeAllLogInformation == input.IncludeAllLogInformation ||
                    this.IncludeAllLogInformation.Equals(input.IncludeAllLogInformation)
                ) && 
                (
                    this.HealthCheckEmail == input.HealthCheckEmail ||
                    (this.HealthCheckEmail != null &&
                    this.HealthCheckEmail.Equals(input.HealthCheckEmail))
                ) && 
                (
                    this.MailServer == input.MailServer ||
                    (this.MailServer != null &&
                    this.MailServer.Equals(input.MailServer))
                ) && 
                (
                    this.MailFrom == input.MailFrom ||
                    (this.MailFrom != null &&
                    this.MailFrom.Equals(input.MailFrom))
                ) && 
                (
                    this.AuthenticationMethod == input.AuthenticationMethod ||
                    this.AuthenticationMethod.Equals(input.AuthenticationMethod)
                ) && 
                (
                    this.Pop3Server == input.Pop3Server ||
                    (this.Pop3Server != null &&
                    this.Pop3Server.Equals(input.Pop3Server))
                ) && 
                (
                    this.Pop3UserName == input.Pop3UserName ||
                    (this.Pop3UserName != null &&
                    this.Pop3UserName.Equals(input.Pop3UserName))
                ) && 
                (
                    this.Pop3Password == input.Pop3Password ||
                    (this.Pop3Password != null &&
                    this.Pop3Password.Equals(input.Pop3Password))
                ) && 
                (
                    this.MailServerAdvanced == input.MailServerAdvanced ||
                    (this.MailServerAdvanced != null &&
                    this.MailServerAdvanced.Equals(input.MailServerAdvanced))
                ) && 
                (
                    this.FtpLog == input.FtpLog ||
                    (this.FtpLog != null &&
                    this.FtpLog.Equals(input.FtpLog))
                ) && 
                (
                    this.Solera == input.Solera ||
                    (this.Solera != null &&
                    this.Solera.Equals(input.Solera))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EmailAddress != null)
                {
                    hashCode = (hashCode * 59) + this.EmailAddress.GetHashCode();
                }
                if (this.SendLog != null)
                {
                    hashCode = (hashCode * 59) + this.SendLog.GetHashCode();
                }
                if (this.EmailFormatLog != null)
                {
                    hashCode = (hashCode * 59) + this.EmailFormatLog.GetHashCode();
                }
                if (this.SendAudit != null)
                {
                    hashCode = (hashCode * 59) + this.SendAudit.GetHashCode();
                }
                if (this.EmailFormatAudit != null)
                {
                    hashCode = (hashCode * 59) + this.EmailFormatAudit.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IncludeAllLogInformation.GetHashCode();
                if (this.HealthCheckEmail != null)
                {
                    hashCode = (hashCode * 59) + this.HealthCheckEmail.GetHashCode();
                }
                if (this.MailServer != null)
                {
                    hashCode = (hashCode * 59) + this.MailServer.GetHashCode();
                }
                if (this.MailFrom != null)
                {
                    hashCode = (hashCode * 59) + this.MailFrom.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AuthenticationMethod.GetHashCode();
                if (this.Pop3Server != null)
                {
                    hashCode = (hashCode * 59) + this.Pop3Server.GetHashCode();
                }
                if (this.Pop3UserName != null)
                {
                    hashCode = (hashCode * 59) + this.Pop3UserName.GetHashCode();
                }
                if (this.Pop3Password != null)
                {
                    hashCode = (hashCode * 59) + this.Pop3Password.GetHashCode();
                }
                if (this.MailServerAdvanced != null)
                {
                    hashCode = (hashCode * 59) + this.MailServerAdvanced.GetHashCode();
                }
                if (this.FtpLog != null)
                {
                    hashCode = (hashCode * 59) + this.FtpLog.GetHashCode();
                }
                if (this.Solera != null)
                {
                    hashCode = (hashCode * 59) + this.Solera.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
