/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;
using System.Reflection;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Weekly.
    /// </summary>
    [JsonConverter(typeof(LogAutomationSendLogWeeklyWeeklyJsonConverter))]
    [DataContract(Name = "log_automation_send_log_weekly_weekly")]
    public partial class LogAutomationSendLogWeeklyWeekly : AbstractOpenAPISchema, IEquatable<LogAutomationSendLogWeeklyWeekly>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogAutomationSendLogWeeklyWeekly" /> class
        /// with the <see cref="LogAutomationSendLogWeeklySun" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LogAutomationSendLogWeeklySun.</param>
        public LogAutomationSendLogWeeklyWeekly(LogAutomationSendLogWeeklySun actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogAutomationSendLogWeeklyWeekly" /> class
        /// with the <see cref="LogAutomationSendLogWeeklyMon" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LogAutomationSendLogWeeklyMon.</param>
        public LogAutomationSendLogWeeklyWeekly(LogAutomationSendLogWeeklyMon actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogAutomationSendLogWeeklyWeekly" /> class
        /// with the <see cref="LogAutomationSendLogWeeklyTue" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LogAutomationSendLogWeeklyTue.</param>
        public LogAutomationSendLogWeeklyWeekly(LogAutomationSendLogWeeklyTue actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogAutomationSendLogWeeklyWeekly" /> class
        /// with the <see cref="LogAutomationSendLogWeeklyWed" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LogAutomationSendLogWeeklyWed.</param>
        public LogAutomationSendLogWeeklyWeekly(LogAutomationSendLogWeeklyWed actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogAutomationSendLogWeeklyWeekly" /> class
        /// with the <see cref="LogAutomationSendLogWeeklyThu" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LogAutomationSendLogWeeklyThu.</param>
        public LogAutomationSendLogWeeklyWeekly(LogAutomationSendLogWeeklyThu actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogAutomationSendLogWeeklyWeekly" /> class
        /// with the <see cref="LogAutomationSendLogWeeklyFri" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LogAutomationSendLogWeeklyFri.</param>
        public LogAutomationSendLogWeeklyWeekly(LogAutomationSendLogWeeklyFri actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogAutomationSendLogWeeklyWeekly" /> class
        /// with the <see cref="LogAutomationSendLogWeeklySat" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LogAutomationSendLogWeeklySat.</param>
        public LogAutomationSendLogWeeklyWeekly(LogAutomationSendLogWeeklySat actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(LogAutomationSendLogWeeklyFri))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(LogAutomationSendLogWeeklyMon))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(LogAutomationSendLogWeeklySat))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(LogAutomationSendLogWeeklySun))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(LogAutomationSendLogWeeklyThu))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(LogAutomationSendLogWeeklyTue))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(LogAutomationSendLogWeeklyWed))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: LogAutomationSendLogWeeklyFri, LogAutomationSendLogWeeklyMon, LogAutomationSendLogWeeklySat, LogAutomationSendLogWeeklySun, LogAutomationSendLogWeeklyThu, LogAutomationSendLogWeeklyTue, LogAutomationSendLogWeeklyWed");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `LogAutomationSendLogWeeklySun`. If the actual instance is not `LogAutomationSendLogWeeklySun`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LogAutomationSendLogWeeklySun</returns>
        public LogAutomationSendLogWeeklySun GetLogAutomationSendLogWeeklySun()
        {
            return (LogAutomationSendLogWeeklySun)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LogAutomationSendLogWeeklyMon`. If the actual instance is not `LogAutomationSendLogWeeklyMon`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LogAutomationSendLogWeeklyMon</returns>
        public LogAutomationSendLogWeeklyMon GetLogAutomationSendLogWeeklyMon()
        {
            return (LogAutomationSendLogWeeklyMon)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LogAutomationSendLogWeeklyTue`. If the actual instance is not `LogAutomationSendLogWeeklyTue`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LogAutomationSendLogWeeklyTue</returns>
        public LogAutomationSendLogWeeklyTue GetLogAutomationSendLogWeeklyTue()
        {
            return (LogAutomationSendLogWeeklyTue)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LogAutomationSendLogWeeklyWed`. If the actual instance is not `LogAutomationSendLogWeeklyWed`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LogAutomationSendLogWeeklyWed</returns>
        public LogAutomationSendLogWeeklyWed GetLogAutomationSendLogWeeklyWed()
        {
            return (LogAutomationSendLogWeeklyWed)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LogAutomationSendLogWeeklyThu`. If the actual instance is not `LogAutomationSendLogWeeklyThu`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LogAutomationSendLogWeeklyThu</returns>
        public LogAutomationSendLogWeeklyThu GetLogAutomationSendLogWeeklyThu()
        {
            return (LogAutomationSendLogWeeklyThu)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LogAutomationSendLogWeeklyFri`. If the actual instance is not `LogAutomationSendLogWeeklyFri`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LogAutomationSendLogWeeklyFri</returns>
        public LogAutomationSendLogWeeklyFri GetLogAutomationSendLogWeeklyFri()
        {
            return (LogAutomationSendLogWeeklyFri)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LogAutomationSendLogWeeklySat`. If the actual instance is not `LogAutomationSendLogWeeklySat`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LogAutomationSendLogWeeklySat</returns>
        public LogAutomationSendLogWeeklySat GetLogAutomationSendLogWeeklySat()
        {
            return (LogAutomationSendLogWeeklySat)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LogAutomationSendLogWeeklyWeekly {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, LogAutomationSendLogWeeklyWeekly.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of LogAutomationSendLogWeeklyWeekly
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of LogAutomationSendLogWeeklyWeekly</returns>
        public static LogAutomationSendLogWeeklyWeekly FromJson(string jsonString)
        {
            LogAutomationSendLogWeeklyWeekly newLogAutomationSendLogWeeklyWeekly = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newLogAutomationSendLogWeeklyWeekly;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LogAutomationSendLogWeeklyFri).GetProperty("AdditionalProperties") == null)
                {
                    newLogAutomationSendLogWeeklyWeekly = new LogAutomationSendLogWeeklyWeekly(JsonConvert.DeserializeObject<LogAutomationSendLogWeeklyFri>(jsonString, LogAutomationSendLogWeeklyWeekly.SerializerSettings));
                }
                else
                {
                    newLogAutomationSendLogWeeklyWeekly = new LogAutomationSendLogWeeklyWeekly(JsonConvert.DeserializeObject<LogAutomationSendLogWeeklyFri>(jsonString, LogAutomationSendLogWeeklyWeekly.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LogAutomationSendLogWeeklyFri");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LogAutomationSendLogWeeklyFri: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LogAutomationSendLogWeeklyMon).GetProperty("AdditionalProperties") == null)
                {
                    newLogAutomationSendLogWeeklyWeekly = new LogAutomationSendLogWeeklyWeekly(JsonConvert.DeserializeObject<LogAutomationSendLogWeeklyMon>(jsonString, LogAutomationSendLogWeeklyWeekly.SerializerSettings));
                }
                else
                {
                    newLogAutomationSendLogWeeklyWeekly = new LogAutomationSendLogWeeklyWeekly(JsonConvert.DeserializeObject<LogAutomationSendLogWeeklyMon>(jsonString, LogAutomationSendLogWeeklyWeekly.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LogAutomationSendLogWeeklyMon");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LogAutomationSendLogWeeklyMon: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LogAutomationSendLogWeeklySat).GetProperty("AdditionalProperties") == null)
                {
                    newLogAutomationSendLogWeeklyWeekly = new LogAutomationSendLogWeeklyWeekly(JsonConvert.DeserializeObject<LogAutomationSendLogWeeklySat>(jsonString, LogAutomationSendLogWeeklyWeekly.SerializerSettings));
                }
                else
                {
                    newLogAutomationSendLogWeeklyWeekly = new LogAutomationSendLogWeeklyWeekly(JsonConvert.DeserializeObject<LogAutomationSendLogWeeklySat>(jsonString, LogAutomationSendLogWeeklyWeekly.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LogAutomationSendLogWeeklySat");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LogAutomationSendLogWeeklySat: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LogAutomationSendLogWeeklySun).GetProperty("AdditionalProperties") == null)
                {
                    newLogAutomationSendLogWeeklyWeekly = new LogAutomationSendLogWeeklyWeekly(JsonConvert.DeserializeObject<LogAutomationSendLogWeeklySun>(jsonString, LogAutomationSendLogWeeklyWeekly.SerializerSettings));
                }
                else
                {
                    newLogAutomationSendLogWeeklyWeekly = new LogAutomationSendLogWeeklyWeekly(JsonConvert.DeserializeObject<LogAutomationSendLogWeeklySun>(jsonString, LogAutomationSendLogWeeklyWeekly.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LogAutomationSendLogWeeklySun");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LogAutomationSendLogWeeklySun: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LogAutomationSendLogWeeklyThu).GetProperty("AdditionalProperties") == null)
                {
                    newLogAutomationSendLogWeeklyWeekly = new LogAutomationSendLogWeeklyWeekly(JsonConvert.DeserializeObject<LogAutomationSendLogWeeklyThu>(jsonString, LogAutomationSendLogWeeklyWeekly.SerializerSettings));
                }
                else
                {
                    newLogAutomationSendLogWeeklyWeekly = new LogAutomationSendLogWeeklyWeekly(JsonConvert.DeserializeObject<LogAutomationSendLogWeeklyThu>(jsonString, LogAutomationSendLogWeeklyWeekly.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LogAutomationSendLogWeeklyThu");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LogAutomationSendLogWeeklyThu: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LogAutomationSendLogWeeklyTue).GetProperty("AdditionalProperties") == null)
                {
                    newLogAutomationSendLogWeeklyWeekly = new LogAutomationSendLogWeeklyWeekly(JsonConvert.DeserializeObject<LogAutomationSendLogWeeklyTue>(jsonString, LogAutomationSendLogWeeklyWeekly.SerializerSettings));
                }
                else
                {
                    newLogAutomationSendLogWeeklyWeekly = new LogAutomationSendLogWeeklyWeekly(JsonConvert.DeserializeObject<LogAutomationSendLogWeeklyTue>(jsonString, LogAutomationSendLogWeeklyWeekly.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LogAutomationSendLogWeeklyTue");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LogAutomationSendLogWeeklyTue: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LogAutomationSendLogWeeklyWed).GetProperty("AdditionalProperties") == null)
                {
                    newLogAutomationSendLogWeeklyWeekly = new LogAutomationSendLogWeeklyWeekly(JsonConvert.DeserializeObject<LogAutomationSendLogWeeklyWed>(jsonString, LogAutomationSendLogWeeklyWeekly.SerializerSettings));
                }
                else
                {
                    newLogAutomationSendLogWeeklyWeekly = new LogAutomationSendLogWeeklyWeekly(JsonConvert.DeserializeObject<LogAutomationSendLogWeeklyWed>(jsonString, LogAutomationSendLogWeeklyWeekly.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LogAutomationSendLogWeeklyWed");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LogAutomationSendLogWeeklyWed: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newLogAutomationSendLogWeeklyWeekly;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogAutomationSendLogWeeklyWeekly);
        }

        /// <summary>
        /// Returns true if LogAutomationSendLogWeeklyWeekly instances are equal
        /// </summary>
        /// <param name="input">Instance of LogAutomationSendLogWeeklyWeekly to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogAutomationSendLogWeeklyWeekly input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for LogAutomationSendLogWeeklyWeekly
    /// </summary>
    public class LogAutomationSendLogWeeklyWeeklyJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(LogAutomationSendLogWeeklyWeekly).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return LogAutomationSendLogWeeklyWeekly.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
