/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure certificate signing request distinguished name.
    /// </summary>
    [DataContract(Name = "certificates_generate_signing_request_distinguished_name")]
    public partial class CertificatesGenerateSigningRequestDistinguishedName : IEquatable<CertificatesGenerateSigningRequestDistinguishedName>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificatesGenerateSigningRequestDistinguishedName" /> class.
        /// </summary>
        /// <param name="element1">element1.</param>
        /// <param name="element2">element2.</param>
        /// <param name="element3">element3.</param>
        /// <param name="element4">element4.</param>
        /// <param name="element5">element5.</param>
        /// <param name="element6">element6.</param>
        /// <param name="element7">element7.</param>
        /// <param name="element8">element8.</param>
        public CertificatesGenerateSigningRequestDistinguishedName(CertificatesGenerateSigningRequestDistinguishedNameElement1 element1 = default(CertificatesGenerateSigningRequestDistinguishedNameElement1), CertificatesGenerateSigningRequestDistinguishedNameElement2 element2 = default(CertificatesGenerateSigningRequestDistinguishedNameElement2), CertificatesGenerateSigningRequestDistinguishedNameElement3 element3 = default(CertificatesGenerateSigningRequestDistinguishedNameElement3), CertificatesGenerateSigningRequestDistinguishedNameElement4 element4 = default(CertificatesGenerateSigningRequestDistinguishedNameElement4), CertificatesGenerateSigningRequestDistinguishedNameElement5 element5 = default(CertificatesGenerateSigningRequestDistinguishedNameElement5), CertificatesGenerateSigningRequestDistinguishedNameElement6 element6 = default(CertificatesGenerateSigningRequestDistinguishedNameElement6), CertificatesGenerateSigningRequestDistinguishedNameElement7 element7 = default(CertificatesGenerateSigningRequestDistinguishedNameElement7), CertificatesGenerateSigningRequestDistinguishedNameElement8 element8 = default(CertificatesGenerateSigningRequestDistinguishedNameElement8))
        {
            this.Element1 = element1;
            this.Element2 = element2;
            this.Element3 = element3;
            this.Element4 = element4;
            this.Element5 = element5;
            this.Element6 = element6;
            this.Element7 = element7;
            this.Element8 = element8;
        }

        /// <summary>
        /// Gets or Sets Element1
        /// </summary>
        [DataMember(Name = "element1", EmitDefaultValue = false)]
        public CertificatesGenerateSigningRequestDistinguishedNameElement1 Element1 { get; set; }

        /// <summary>
        /// Gets or Sets Element2
        /// </summary>
        [DataMember(Name = "element2", EmitDefaultValue = false)]
        public CertificatesGenerateSigningRequestDistinguishedNameElement2 Element2 { get; set; }

        /// <summary>
        /// Gets or Sets Element3
        /// </summary>
        [DataMember(Name = "element3", EmitDefaultValue = false)]
        public CertificatesGenerateSigningRequestDistinguishedNameElement3 Element3 { get; set; }

        /// <summary>
        /// Gets or Sets Element4
        /// </summary>
        [DataMember(Name = "element4", EmitDefaultValue = false)]
        public CertificatesGenerateSigningRequestDistinguishedNameElement4 Element4 { get; set; }

        /// <summary>
        /// Gets or Sets Element5
        /// </summary>
        [DataMember(Name = "element5", EmitDefaultValue = false)]
        public CertificatesGenerateSigningRequestDistinguishedNameElement5 Element5 { get; set; }

        /// <summary>
        /// Gets or Sets Element6
        /// </summary>
        [DataMember(Name = "element6", EmitDefaultValue = false)]
        public CertificatesGenerateSigningRequestDistinguishedNameElement6 Element6 { get; set; }

        /// <summary>
        /// Gets or Sets Element7
        /// </summary>
        [DataMember(Name = "element7", EmitDefaultValue = false)]
        public CertificatesGenerateSigningRequestDistinguishedNameElement7 Element7 { get; set; }

        /// <summary>
        /// Gets or Sets Element8
        /// </summary>
        [DataMember(Name = "element8", EmitDefaultValue = false)]
        public CertificatesGenerateSigningRequestDistinguishedNameElement8 Element8 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CertificatesGenerateSigningRequestDistinguishedName {\n");
            sb.Append("  Element1: ").Append(Element1).Append("\n");
            sb.Append("  Element2: ").Append(Element2).Append("\n");
            sb.Append("  Element3: ").Append(Element3).Append("\n");
            sb.Append("  Element4: ").Append(Element4).Append("\n");
            sb.Append("  Element5: ").Append(Element5).Append("\n");
            sb.Append("  Element6: ").Append(Element6).Append("\n");
            sb.Append("  Element7: ").Append(Element7).Append("\n");
            sb.Append("  Element8: ").Append(Element8).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CertificatesGenerateSigningRequestDistinguishedName);
        }

        /// <summary>
        /// Returns true if CertificatesGenerateSigningRequestDistinguishedName instances are equal
        /// </summary>
        /// <param name="input">Instance of CertificatesGenerateSigningRequestDistinguishedName to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CertificatesGenerateSigningRequestDistinguishedName input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Element1 == input.Element1 ||
                    (this.Element1 != null &&
                    this.Element1.Equals(input.Element1))
                ) && 
                (
                    this.Element2 == input.Element2 ||
                    (this.Element2 != null &&
                    this.Element2.Equals(input.Element2))
                ) && 
                (
                    this.Element3 == input.Element3 ||
                    (this.Element3 != null &&
                    this.Element3.Equals(input.Element3))
                ) && 
                (
                    this.Element4 == input.Element4 ||
                    (this.Element4 != null &&
                    this.Element4.Equals(input.Element4))
                ) && 
                (
                    this.Element5 == input.Element5 ||
                    (this.Element5 != null &&
                    this.Element5.Equals(input.Element5))
                ) && 
                (
                    this.Element6 == input.Element6 ||
                    (this.Element6 != null &&
                    this.Element6.Equals(input.Element6))
                ) && 
                (
                    this.Element7 == input.Element7 ||
                    (this.Element7 != null &&
                    this.Element7.Equals(input.Element7))
                ) && 
                (
                    this.Element8 == input.Element8 ||
                    (this.Element8 != null &&
                    this.Element8.Equals(input.Element8))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Element1 != null)
                {
                    hashCode = (hashCode * 59) + this.Element1.GetHashCode();
                }
                if (this.Element2 != null)
                {
                    hashCode = (hashCode * 59) + this.Element2.GetHashCode();
                }
                if (this.Element3 != null)
                {
                    hashCode = (hashCode * 59) + this.Element3.GetHashCode();
                }
                if (this.Element4 != null)
                {
                    hashCode = (hashCode * 59) + this.Element4.GetHashCode();
                }
                if (this.Element5 != null)
                {
                    hashCode = (hashCode * 59) + this.Element5.GetHashCode();
                }
                if (this.Element6 != null)
                {
                    hashCode = (hashCode * 59) + this.Element6.GetHashCode();
                }
                if (this.Element7 != null)
                {
                    hashCode = (hashCode * 59) + this.Element7.GetHashCode();
                }
                if (this.Element8 != null)
                {
                    hashCode = (hashCode * 59) + this.Element8.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
