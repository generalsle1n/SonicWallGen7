/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enable SonicOS API.
    /// </summary>
    [DataContract(Name = "administration_administration_sonicos_api")]
    public partial class AdministrationAdministrationSonicosApi : IEquatable<AdministrationAdministrationSonicosApi>, IValidatableObject
    {
        /// <summary>
        /// SonicOS API public key RSA padding type.
        /// </summary>
        /// <value>SonicOS API public key RSA padding type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RsaPaddingTypeEnum
        {
            /// <summary>
            /// Enum Pkcsv15 for value: pkcsv15
            /// </summary>
            [EnumMember(Value = "pkcsv15")]
            Pkcsv15 = 1,

            /// <summary>
            /// Enum Pkcsv20oaep for value: pkcsv20oaep
            /// </summary>
            [EnumMember(Value = "pkcsv20oaep")]
            Pkcsv20oaep = 2
        }


        /// <summary>
        /// SonicOS API public key RSA padding type.
        /// </summary>
        /// <value>SonicOS API public key RSA padding type.</value>
        [DataMember(Name = "rsa_padding_type", EmitDefaultValue = false)]
        public RsaPaddingTypeEnum? RsaPaddingType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdministrationAdministrationSonicosApi" /> class.
        /// </summary>
        /// <param name="enable">Enable SonicOS API..</param>
        /// <param name="cors">SonicOS API enable CORS Support..</param>
        /// <param name="digest">Enable SonicOS API HTTP digest access authentication..</param>
        /// <param name="md5Digest">Enable SonicOS API HTTP digest MD5..</param>
        /// <param name="sha256Digest">Enable SonicOS API HTTP digest SHA256..</param>
        /// <param name="integrityProtection">integrityProtection.</param>
        /// <param name="sessionVariant">sessionVariant.</param>
        /// <param name="chap">Enable SonicOS API CHAP authentication..</param>
        /// <param name="basic">Enable SonicOS API HTTP basic access authentication..</param>
        /// <param name="publicKey">Enable SonicOS API public key authentication..</param>
        /// <param name="rsaKeySize">SonicOS API public key RSA key size..</param>
        /// <param name="rsaPaddingType">SonicOS API public key RSA padding type..</param>
        /// <param name="oeapHashMode">SonicOS API OEAP hashmode..</param>
        /// <param name="oeapMaskMethod">SonicOS API OEAP mask (MGF1) method..</param>
        /// <param name="sessionSecurity">Enable SonicOS API session security..</param>
        /// <param name="maxNonce">SonicOS API session security max nonce..</param>
        /// <param name="twoFactorBearerToken">Enable SonicOS API two-factor and bearer token authentication..</param>
        /// <param name="autoCommit">Enable SonicOS API auto commit..</param>
        /// <param name="maxPayload">SonicOS API Max Payload Size..</param>
        public AdministrationAdministrationSonicosApi(bool enable = default(bool), bool cors = default(bool), bool digest = default(bool), bool md5Digest = default(bool), bool sha256Digest = default(bool), AdministrationAdministrationSonicosApiIntegrityProtection integrityProtection = default(AdministrationAdministrationSonicosApiIntegrityProtection), AdministrationAdministrationSonicosApiSessionVariant sessionVariant = default(AdministrationAdministrationSonicosApiSessionVariant), bool chap = default(bool), bool basic = default(bool), bool publicKey = default(bool), decimal rsaKeySize = default(decimal), RsaPaddingTypeEnum? rsaPaddingType = default(RsaPaddingTypeEnum?), string oeapHashMode = default(string), string oeapMaskMethod = default(string), bool sessionSecurity = default(bool), decimal maxNonce = default(decimal), bool twoFactorBearerToken = default(bool), bool autoCommit = default(bool), decimal maxPayload = default(decimal))
        {
            this.Enable = enable;
            this.Cors = cors;
            this.Digest = digest;
            this.Md5Digest = md5Digest;
            this.Sha256Digest = sha256Digest;
            this.IntegrityProtection = integrityProtection;
            this.SessionVariant = sessionVariant;
            this.Chap = chap;
            this.Basic = basic;
            this.PublicKey = publicKey;
            this.RsaKeySize = rsaKeySize;
            this.RsaPaddingType = rsaPaddingType;
            this.OeapHashMode = oeapHashMode;
            this.OeapMaskMethod = oeapMaskMethod;
            this.SessionSecurity = sessionSecurity;
            this.MaxNonce = maxNonce;
            this.TwoFactorBearerToken = twoFactorBearerToken;
            this.AutoCommit = autoCommit;
            this.MaxPayload = maxPayload;
        }

        /// <summary>
        /// Enable SonicOS API.
        /// </summary>
        /// <value>Enable SonicOS API.</value>
        [DataMember(Name = "enable", EmitDefaultValue = true)]
        public bool Enable { get; set; }

        /// <summary>
        /// SonicOS API enable CORS Support.
        /// </summary>
        /// <value>SonicOS API enable CORS Support.</value>
        [DataMember(Name = "cors", EmitDefaultValue = true)]
        public bool Cors { get; set; }

        /// <summary>
        /// Enable SonicOS API HTTP digest access authentication.
        /// </summary>
        /// <value>Enable SonicOS API HTTP digest access authentication.</value>
        [DataMember(Name = "digest", EmitDefaultValue = true)]
        public bool Digest { get; set; }

        /// <summary>
        /// Enable SonicOS API HTTP digest MD5.
        /// </summary>
        /// <value>Enable SonicOS API HTTP digest MD5.</value>
        [DataMember(Name = "md5_digest", EmitDefaultValue = true)]
        public bool Md5Digest { get; set; }

        /// <summary>
        /// Enable SonicOS API HTTP digest SHA256.
        /// </summary>
        /// <value>Enable SonicOS API HTTP digest SHA256.</value>
        [DataMember(Name = "sha256_digest", EmitDefaultValue = true)]
        public bool Sha256Digest { get; set; }

        /// <summary>
        /// Gets or Sets IntegrityProtection
        /// </summary>
        [DataMember(Name = "integrity_protection", EmitDefaultValue = false)]
        public AdministrationAdministrationSonicosApiIntegrityProtection IntegrityProtection { get; set; }

        /// <summary>
        /// Gets or Sets SessionVariant
        /// </summary>
        [DataMember(Name = "session_variant", EmitDefaultValue = false)]
        public AdministrationAdministrationSonicosApiSessionVariant SessionVariant { get; set; }

        /// <summary>
        /// Enable SonicOS API CHAP authentication.
        /// </summary>
        /// <value>Enable SonicOS API CHAP authentication.</value>
        [DataMember(Name = "chap", EmitDefaultValue = true)]
        public bool Chap { get; set; }

        /// <summary>
        /// Enable SonicOS API HTTP basic access authentication.
        /// </summary>
        /// <value>Enable SonicOS API HTTP basic access authentication.</value>
        [DataMember(Name = "basic", EmitDefaultValue = true)]
        public bool Basic { get; set; }

        /// <summary>
        /// Enable SonicOS API public key authentication.
        /// </summary>
        /// <value>Enable SonicOS API public key authentication.</value>
        [DataMember(Name = "public_key", EmitDefaultValue = true)]
        public bool PublicKey { get; set; }

        /// <summary>
        /// SonicOS API public key RSA key size.
        /// </summary>
        /// <value>SonicOS API public key RSA key size.</value>
        [DataMember(Name = "rsa_key_size", EmitDefaultValue = false)]
        public decimal RsaKeySize { get; set; }

        /// <summary>
        /// SonicOS API OEAP hashmode.
        /// </summary>
        /// <value>SonicOS API OEAP hashmode.</value>
        [DataMember(Name = "oeap_hash_mode", EmitDefaultValue = false)]
        public string OeapHashMode { get; set; }

        /// <summary>
        /// SonicOS API OEAP mask (MGF1) method.
        /// </summary>
        /// <value>SonicOS API OEAP mask (MGF1) method.</value>
        [DataMember(Name = "oeap_mask_method", EmitDefaultValue = false)]
        public string OeapMaskMethod { get; set; }

        /// <summary>
        /// Enable SonicOS API session security.
        /// </summary>
        /// <value>Enable SonicOS API session security.</value>
        [DataMember(Name = "session_security", EmitDefaultValue = true)]
        public bool SessionSecurity { get; set; }

        /// <summary>
        /// SonicOS API session security max nonce.
        /// </summary>
        /// <value>SonicOS API session security max nonce.</value>
        [DataMember(Name = "max_nonce", EmitDefaultValue = false)]
        public decimal MaxNonce { get; set; }

        /// <summary>
        /// Enable SonicOS API two-factor and bearer token authentication.
        /// </summary>
        /// <value>Enable SonicOS API two-factor and bearer token authentication.</value>
        [DataMember(Name = "two_factor_bearer_token", EmitDefaultValue = true)]
        public bool TwoFactorBearerToken { get; set; }

        /// <summary>
        /// Enable SonicOS API auto commit.
        /// </summary>
        /// <value>Enable SonicOS API auto commit.</value>
        [DataMember(Name = "auto_commit", EmitDefaultValue = true)]
        public bool AutoCommit { get; set; }

        /// <summary>
        /// SonicOS API Max Payload Size.
        /// </summary>
        /// <value>SonicOS API Max Payload Size.</value>
        [DataMember(Name = "max_payload", EmitDefaultValue = false)]
        public decimal MaxPayload { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdministrationAdministrationSonicosApi {\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  Cors: ").Append(Cors).Append("\n");
            sb.Append("  Digest: ").Append(Digest).Append("\n");
            sb.Append("  Md5Digest: ").Append(Md5Digest).Append("\n");
            sb.Append("  Sha256Digest: ").Append(Sha256Digest).Append("\n");
            sb.Append("  IntegrityProtection: ").Append(IntegrityProtection).Append("\n");
            sb.Append("  SessionVariant: ").Append(SessionVariant).Append("\n");
            sb.Append("  Chap: ").Append(Chap).Append("\n");
            sb.Append("  Basic: ").Append(Basic).Append("\n");
            sb.Append("  PublicKey: ").Append(PublicKey).Append("\n");
            sb.Append("  RsaKeySize: ").Append(RsaKeySize).Append("\n");
            sb.Append("  RsaPaddingType: ").Append(RsaPaddingType).Append("\n");
            sb.Append("  OeapHashMode: ").Append(OeapHashMode).Append("\n");
            sb.Append("  OeapMaskMethod: ").Append(OeapMaskMethod).Append("\n");
            sb.Append("  SessionSecurity: ").Append(SessionSecurity).Append("\n");
            sb.Append("  MaxNonce: ").Append(MaxNonce).Append("\n");
            sb.Append("  TwoFactorBearerToken: ").Append(TwoFactorBearerToken).Append("\n");
            sb.Append("  AutoCommit: ").Append(AutoCommit).Append("\n");
            sb.Append("  MaxPayload: ").Append(MaxPayload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdministrationAdministrationSonicosApi);
        }

        /// <summary>
        /// Returns true if AdministrationAdministrationSonicosApi instances are equal
        /// </summary>
        /// <param name="input">Instance of AdministrationAdministrationSonicosApi to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdministrationAdministrationSonicosApi input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.Cors == input.Cors ||
                    this.Cors.Equals(input.Cors)
                ) && 
                (
                    this.Digest == input.Digest ||
                    this.Digest.Equals(input.Digest)
                ) && 
                (
                    this.Md5Digest == input.Md5Digest ||
                    this.Md5Digest.Equals(input.Md5Digest)
                ) && 
                (
                    this.Sha256Digest == input.Sha256Digest ||
                    this.Sha256Digest.Equals(input.Sha256Digest)
                ) && 
                (
                    this.IntegrityProtection == input.IntegrityProtection ||
                    (this.IntegrityProtection != null &&
                    this.IntegrityProtection.Equals(input.IntegrityProtection))
                ) && 
                (
                    this.SessionVariant == input.SessionVariant ||
                    (this.SessionVariant != null &&
                    this.SessionVariant.Equals(input.SessionVariant))
                ) && 
                (
                    this.Chap == input.Chap ||
                    this.Chap.Equals(input.Chap)
                ) && 
                (
                    this.Basic == input.Basic ||
                    this.Basic.Equals(input.Basic)
                ) && 
                (
                    this.PublicKey == input.PublicKey ||
                    this.PublicKey.Equals(input.PublicKey)
                ) && 
                (
                    this.RsaKeySize == input.RsaKeySize ||
                    this.RsaKeySize.Equals(input.RsaKeySize)
                ) && 
                (
                    this.RsaPaddingType == input.RsaPaddingType ||
                    this.RsaPaddingType.Equals(input.RsaPaddingType)
                ) && 
                (
                    this.OeapHashMode == input.OeapHashMode ||
                    (this.OeapHashMode != null &&
                    this.OeapHashMode.Equals(input.OeapHashMode))
                ) && 
                (
                    this.OeapMaskMethod == input.OeapMaskMethod ||
                    (this.OeapMaskMethod != null &&
                    this.OeapMaskMethod.Equals(input.OeapMaskMethod))
                ) && 
                (
                    this.SessionSecurity == input.SessionSecurity ||
                    this.SessionSecurity.Equals(input.SessionSecurity)
                ) && 
                (
                    this.MaxNonce == input.MaxNonce ||
                    this.MaxNonce.Equals(input.MaxNonce)
                ) && 
                (
                    this.TwoFactorBearerToken == input.TwoFactorBearerToken ||
                    this.TwoFactorBearerToken.Equals(input.TwoFactorBearerToken)
                ) && 
                (
                    this.AutoCommit == input.AutoCommit ||
                    this.AutoCommit.Equals(input.AutoCommit)
                ) && 
                (
                    this.MaxPayload == input.MaxPayload ||
                    this.MaxPayload.Equals(input.MaxPayload)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Enable.GetHashCode();
                hashCode = (hashCode * 59) + this.Cors.GetHashCode();
                hashCode = (hashCode * 59) + this.Digest.GetHashCode();
                hashCode = (hashCode * 59) + this.Md5Digest.GetHashCode();
                hashCode = (hashCode * 59) + this.Sha256Digest.GetHashCode();
                if (this.IntegrityProtection != null)
                {
                    hashCode = (hashCode * 59) + this.IntegrityProtection.GetHashCode();
                }
                if (this.SessionVariant != null)
                {
                    hashCode = (hashCode * 59) + this.SessionVariant.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Chap.GetHashCode();
                hashCode = (hashCode * 59) + this.Basic.GetHashCode();
                hashCode = (hashCode * 59) + this.PublicKey.GetHashCode();
                hashCode = (hashCode * 59) + this.RsaKeySize.GetHashCode();
                hashCode = (hashCode * 59) + this.RsaPaddingType.GetHashCode();
                if (this.OeapHashMode != null)
                {
                    hashCode = (hashCode * 59) + this.OeapHashMode.GetHashCode();
                }
                if (this.OeapMaskMethod != null)
                {
                    hashCode = (hashCode * 59) + this.OeapMaskMethod.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SessionSecurity.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxNonce.GetHashCode();
                hashCode = (hashCode * 59) + this.TwoFactorBearerToken.GetHashCode();
                hashCode = (hashCode * 59) + this.AutoCommit.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxPayload.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
