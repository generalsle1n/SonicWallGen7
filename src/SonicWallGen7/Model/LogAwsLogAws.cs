/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// AWS logs configuration.
    /// </summary>
    [DataContract(Name = "log_aws_log_aws")]
    public partial class LogAwsLogAws : IEquatable<LogAwsLogAws>, IValidatableObject
    {
        /// <summary>
        /// Set Amazon web services region.
        /// </summary>
        /// <value>Set Amazon web services region.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RegionEnum
        {
            /// <summary>
            /// Enum NorthVirginia for value: north-virginia
            /// </summary>
            [EnumMember(Value = "north-virginia")]
            NorthVirginia = 1,

            /// <summary>
            /// Enum Ohio for value: ohio
            /// </summary>
            [EnumMember(Value = "ohio")]
            Ohio = 2,

            /// <summary>
            /// Enum NorthCalifornia for value: north-california
            /// </summary>
            [EnumMember(Value = "north-california")]
            NorthCalifornia = 3,

            /// <summary>
            /// Enum Oregon for value: oregon
            /// </summary>
            [EnumMember(Value = "oregon")]
            Oregon = 4,

            /// <summary>
            /// Enum Canada for value: canada
            /// </summary>
            [EnumMember(Value = "canada")]
            Canada = 5,

            /// <summary>
            /// Enum Mumbai for value: mumbai
            /// </summary>
            [EnumMember(Value = "mumbai")]
            Mumbai = 6,

            /// <summary>
            /// Enum Seoul for value: seoul
            /// </summary>
            [EnumMember(Value = "seoul")]
            Seoul = 7,

            /// <summary>
            /// Enum Singapore for value: singapore
            /// </summary>
            [EnumMember(Value = "singapore")]
            Singapore = 8,

            /// <summary>
            /// Enum Sydney for value: sydney
            /// </summary>
            [EnumMember(Value = "sydney")]
            Sydney = 9,

            /// <summary>
            /// Enum Tokyo for value: tokyo
            /// </summary>
            [EnumMember(Value = "tokyo")]
            Tokyo = 10,

            /// <summary>
            /// Enum Frankfurt for value: frankfurt
            /// </summary>
            [EnumMember(Value = "frankfurt")]
            Frankfurt = 11,

            /// <summary>
            /// Enum Ireland for value: ireland
            /// </summary>
            [EnumMember(Value = "ireland")]
            Ireland = 12,

            /// <summary>
            /// Enum London for value: london
            /// </summary>
            [EnumMember(Value = "london")]
            London = 13,

            /// <summary>
            /// Enum Paris for value: paris
            /// </summary>
            [EnumMember(Value = "paris")]
            Paris = 14,

            /// <summary>
            /// Enum SaoPaulo for value: sao-paulo
            /// </summary>
            [EnumMember(Value = "sao-paulo")]
            SaoPaulo = 15
        }


        /// <summary>
        /// Set Amazon web services region.
        /// </summary>
        /// <value>Set Amazon web services region.</value>
        [DataMember(Name = "region", EmitDefaultValue = false)]
        public RegionEnum? Region { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LogAwsLogAws" /> class.
        /// </summary>
        /// <param name="enable">Enable logging..</param>
        /// <param name="region">Set Amazon web services region..</param>
        /// <param name="groupName">Set log group name..</param>
        /// <param name="streamName">Set log stream name..</param>
        /// <param name="synchronizationInterval">Set synchronization interval in seconds..</param>
        /// <param name="sendLogWhenFull">Enable send log when full..</param>
        public LogAwsLogAws(bool enable = default(bool), RegionEnum? region = default(RegionEnum?), string groupName = default(string), string streamName = default(string), decimal synchronizationInterval = default(decimal), bool sendLogWhenFull = default(bool))
        {
            this.Enable = enable;
            this.Region = region;
            this.GroupName = groupName;
            this.StreamName = streamName;
            this.SynchronizationInterval = synchronizationInterval;
            this.SendLogWhenFull = sendLogWhenFull;
        }

        /// <summary>
        /// Enable logging.
        /// </summary>
        /// <value>Enable logging.</value>
        [DataMember(Name = "enable", EmitDefaultValue = true)]
        public bool Enable { get; set; }

        /// <summary>
        /// Set log group name.
        /// </summary>
        /// <value>Set log group name.</value>
        [DataMember(Name = "group_name", EmitDefaultValue = false)]
        public string GroupName { get; set; }

        /// <summary>
        /// Set log stream name.
        /// </summary>
        /// <value>Set log stream name.</value>
        [DataMember(Name = "stream_name", EmitDefaultValue = false)]
        public string StreamName { get; set; }

        /// <summary>
        /// Set synchronization interval in seconds.
        /// </summary>
        /// <value>Set synchronization interval in seconds.</value>
        [DataMember(Name = "synchronization_interval", EmitDefaultValue = false)]
        public decimal SynchronizationInterval { get; set; }

        /// <summary>
        /// Enable send log when full.
        /// </summary>
        /// <value>Enable send log when full.</value>
        [DataMember(Name = "send_log_when_full", EmitDefaultValue = true)]
        public bool SendLogWhenFull { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LogAwsLogAws {\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  StreamName: ").Append(StreamName).Append("\n");
            sb.Append("  SynchronizationInterval: ").Append(SynchronizationInterval).Append("\n");
            sb.Append("  SendLogWhenFull: ").Append(SendLogWhenFull).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogAwsLogAws);
        }

        /// <summary>
        /// Returns true if LogAwsLogAws instances are equal
        /// </summary>
        /// <param name="input">Instance of LogAwsLogAws to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogAwsLogAws input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.Region == input.Region ||
                    this.Region.Equals(input.Region)
                ) && 
                (
                    this.GroupName == input.GroupName ||
                    (this.GroupName != null &&
                    this.GroupName.Equals(input.GroupName))
                ) && 
                (
                    this.StreamName == input.StreamName ||
                    (this.StreamName != null &&
                    this.StreamName.Equals(input.StreamName))
                ) && 
                (
                    this.SynchronizationInterval == input.SynchronizationInterval ||
                    this.SynchronizationInterval.Equals(input.SynchronizationInterval)
                ) && 
                (
                    this.SendLogWhenFull == input.SendLogWhenFull ||
                    this.SendLogWhenFull.Equals(input.SendLogWhenFull)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Enable.GetHashCode();
                hashCode = (hashCode * 59) + this.Region.GetHashCode();
                if (this.GroupName != null)
                {
                    hashCode = (hashCode * 59) + this.GroupName.GetHashCode();
                }
                if (this.StreamName != null)
                {
                    hashCode = (hashCode * 59) + this.StreamName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SynchronizationInterval.GetHashCode();
                hashCode = (hashCode * 59) + this.SendLogWhenFull.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
