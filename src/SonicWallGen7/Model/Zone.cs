/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Zone Object configuration.
    /// </summary>
    [DataContract(Name = "zone")]
    public partial class Zone : IEquatable<Zone>, IValidatableObject
    {
        /// <summary>
        /// Set zone security type.
        /// </summary>
        /// <value>Set zone security type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SecurityTypeEnum
        {
            /// <summary>
            /// Enum Trusted for value: trusted
            /// </summary>
            [EnumMember(Value = "trusted")]
            Trusted = 1,

            /// <summary>
            /// Enum Public for value: public
            /// </summary>
            [EnumMember(Value = "public")]
            Public = 2,

            /// <summary>
            /// Enum Sslvpn for value: sslvpn
            /// </summary>
            [EnumMember(Value = "sslvpn")]
            Sslvpn = 3,

            /// <summary>
            /// Enum Encrypted for value: encrypted
            /// </summary>
            [EnumMember(Value = "encrypted")]
            Encrypted = 4,

            /// <summary>
            /// Enum Untrusted for value: untrusted
            /// </summary>
            [EnumMember(Value = "untrusted")]
            Untrusted = 5
        }


        /// <summary>
        /// Set zone security type.
        /// </summary>
        /// <value>Set zone security type.</value>
        [DataMember(Name = "security_type", EmitDefaultValue = false)]
        public SecurityTypeEnum? SecurityType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Zone" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Zone() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Zone" /> class.
        /// </summary>
        /// <param name="name">Zone name. (required).</param>
        /// <param name="securityType">Set zone security type..</param>
        /// <param name="interfaceTrust">Enable allow interface trust..</param>
        /// <param name="autoGenerateAccessRules">autoGenerateAccessRules.</param>
        /// <param name="websenseContentFiltering">Enable enforce websense enterprise content filtering service..</param>
        /// <param name="gatewayAntiVirus">Enable gateway anti-virus service..</param>
        /// <param name="intrusionPrevention">Enable intrusion prevention service..</param>
        /// <param name="appControl">Enable app control service..</param>
        /// <param name="antiSpyware">Enable anti-spyware service..</param>
        /// <param name="createGroupVpn">Enable automatic creation of group VPN for this zone..</param>
        /// <param name="sslControl">Enable SSL-Control on this zone..</param>
        /// <param name="sslvpnAccess">Enable SSL-VPN access this zone..</param>
        /// <param name="dpiSslClient">Enable SSL client inspection..</param>
        /// <param name="dpiSslServer">Enable SSL server inspection..</param>
        /// <param name="guestServices">guestServices.</param>
        public Zone(string name = default(string), SecurityTypeEnum? securityType = default(SecurityTypeEnum?), bool interfaceTrust = default(bool), ZoneAutoGenerateAccessRules autoGenerateAccessRules = default(ZoneAutoGenerateAccessRules), bool websenseContentFiltering = default(bool), bool gatewayAntiVirus = default(bool), bool intrusionPrevention = default(bool), bool appControl = default(bool), bool antiSpyware = default(bool), bool createGroupVpn = default(bool), bool sslControl = default(bool), bool sslvpnAccess = default(bool), bool dpiSslClient = default(bool), bool dpiSslServer = default(bool), ZoneGuestServices guestServices = default(ZoneGuestServices))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Zone and cannot be null");
            }
            this.Name = name;
            this.SecurityType = securityType;
            this.InterfaceTrust = interfaceTrust;
            this.AutoGenerateAccessRules = autoGenerateAccessRules;
            this.WebsenseContentFiltering = websenseContentFiltering;
            this.GatewayAntiVirus = gatewayAntiVirus;
            this.IntrusionPrevention = intrusionPrevention;
            this.AppControl = appControl;
            this.AntiSpyware = antiSpyware;
            this.CreateGroupVpn = createGroupVpn;
            this.SslControl = sslControl;
            this.SslvpnAccess = sslvpnAccess;
            this.DpiSslClient = dpiSslClient;
            this.DpiSslServer = dpiSslServer;
            this.GuestServices = guestServices;
        }

        /// <summary>
        /// Zone name.
        /// </summary>
        /// <value>Zone name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// zone object UUID.
        /// </summary>
        /// <value>zone object UUID.</value>
        [DataMember(Name = "uuid", EmitDefaultValue = false)]
        public string Uuid { get; private set; }

        /// <summary>
        /// Returns false as Uuid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUuid()
        {
            return false;
        }
        /// <summary>
        /// Enable allow interface trust.
        /// </summary>
        /// <value>Enable allow interface trust.</value>
        [DataMember(Name = "interface_trust", EmitDefaultValue = true)]
        public bool InterfaceTrust { get; set; }

        /// <summary>
        /// Gets or Sets AutoGenerateAccessRules
        /// </summary>
        [DataMember(Name = "auto_generate_access_rules", EmitDefaultValue = false)]
        public ZoneAutoGenerateAccessRules AutoGenerateAccessRules { get; set; }

        /// <summary>
        /// Enable enforce websense enterprise content filtering service.
        /// </summary>
        /// <value>Enable enforce websense enterprise content filtering service.</value>
        [DataMember(Name = "websense_content_filtering", EmitDefaultValue = true)]
        public bool WebsenseContentFiltering { get; set; }

        /// <summary>
        /// Enable gateway anti-virus service.
        /// </summary>
        /// <value>Enable gateway anti-virus service.</value>
        [DataMember(Name = "gateway_anti_virus", EmitDefaultValue = true)]
        public bool GatewayAntiVirus { get; set; }

        /// <summary>
        /// Enable intrusion prevention service.
        /// </summary>
        /// <value>Enable intrusion prevention service.</value>
        [DataMember(Name = "intrusion_prevention", EmitDefaultValue = true)]
        public bool IntrusionPrevention { get; set; }

        /// <summary>
        /// Enable app control service.
        /// </summary>
        /// <value>Enable app control service.</value>
        [DataMember(Name = "app_control", EmitDefaultValue = true)]
        public bool AppControl { get; set; }

        /// <summary>
        /// Enable anti-spyware service.
        /// </summary>
        /// <value>Enable anti-spyware service.</value>
        [DataMember(Name = "anti_spyware", EmitDefaultValue = true)]
        public bool AntiSpyware { get; set; }

        /// <summary>
        /// Enable automatic creation of group VPN for this zone.
        /// </summary>
        /// <value>Enable automatic creation of group VPN for this zone.</value>
        [DataMember(Name = "create_group_vpn", EmitDefaultValue = true)]
        public bool CreateGroupVpn { get; set; }

        /// <summary>
        /// Enable SSL-Control on this zone.
        /// </summary>
        /// <value>Enable SSL-Control on this zone.</value>
        [DataMember(Name = "ssl_control", EmitDefaultValue = true)]
        public bool SslControl { get; set; }

        /// <summary>
        /// Enable SSL-VPN access this zone.
        /// </summary>
        /// <value>Enable SSL-VPN access this zone.</value>
        [DataMember(Name = "sslvpn_access", EmitDefaultValue = true)]
        public bool SslvpnAccess { get; set; }

        /// <summary>
        /// Enable SSL client inspection.
        /// </summary>
        /// <value>Enable SSL client inspection.</value>
        [DataMember(Name = "dpi_ssl_client", EmitDefaultValue = true)]
        public bool DpiSslClient { get; set; }

        /// <summary>
        /// Enable SSL server inspection.
        /// </summary>
        /// <value>Enable SSL server inspection.</value>
        [DataMember(Name = "dpi_ssl_server", EmitDefaultValue = true)]
        public bool DpiSslServer { get; set; }

        /// <summary>
        /// Gets or Sets GuestServices
        /// </summary>
        [DataMember(Name = "guest_services", EmitDefaultValue = false)]
        public ZoneGuestServices GuestServices { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Zone {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  SecurityType: ").Append(SecurityType).Append("\n");
            sb.Append("  InterfaceTrust: ").Append(InterfaceTrust).Append("\n");
            sb.Append("  AutoGenerateAccessRules: ").Append(AutoGenerateAccessRules).Append("\n");
            sb.Append("  WebsenseContentFiltering: ").Append(WebsenseContentFiltering).Append("\n");
            sb.Append("  GatewayAntiVirus: ").Append(GatewayAntiVirus).Append("\n");
            sb.Append("  IntrusionPrevention: ").Append(IntrusionPrevention).Append("\n");
            sb.Append("  AppControl: ").Append(AppControl).Append("\n");
            sb.Append("  AntiSpyware: ").Append(AntiSpyware).Append("\n");
            sb.Append("  CreateGroupVpn: ").Append(CreateGroupVpn).Append("\n");
            sb.Append("  SslControl: ").Append(SslControl).Append("\n");
            sb.Append("  SslvpnAccess: ").Append(SslvpnAccess).Append("\n");
            sb.Append("  DpiSslClient: ").Append(DpiSslClient).Append("\n");
            sb.Append("  DpiSslServer: ").Append(DpiSslServer).Append("\n");
            sb.Append("  GuestServices: ").Append(GuestServices).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Zone);
        }

        /// <summary>
        /// Returns true if Zone instances are equal
        /// </summary>
        /// <param name="input">Instance of Zone to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Zone input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.SecurityType == input.SecurityType ||
                    this.SecurityType.Equals(input.SecurityType)
                ) && 
                (
                    this.InterfaceTrust == input.InterfaceTrust ||
                    this.InterfaceTrust.Equals(input.InterfaceTrust)
                ) && 
                (
                    this.AutoGenerateAccessRules == input.AutoGenerateAccessRules ||
                    (this.AutoGenerateAccessRules != null &&
                    this.AutoGenerateAccessRules.Equals(input.AutoGenerateAccessRules))
                ) && 
                (
                    this.WebsenseContentFiltering == input.WebsenseContentFiltering ||
                    this.WebsenseContentFiltering.Equals(input.WebsenseContentFiltering)
                ) && 
                (
                    this.GatewayAntiVirus == input.GatewayAntiVirus ||
                    this.GatewayAntiVirus.Equals(input.GatewayAntiVirus)
                ) && 
                (
                    this.IntrusionPrevention == input.IntrusionPrevention ||
                    this.IntrusionPrevention.Equals(input.IntrusionPrevention)
                ) && 
                (
                    this.AppControl == input.AppControl ||
                    this.AppControl.Equals(input.AppControl)
                ) && 
                (
                    this.AntiSpyware == input.AntiSpyware ||
                    this.AntiSpyware.Equals(input.AntiSpyware)
                ) && 
                (
                    this.CreateGroupVpn == input.CreateGroupVpn ||
                    this.CreateGroupVpn.Equals(input.CreateGroupVpn)
                ) && 
                (
                    this.SslControl == input.SslControl ||
                    this.SslControl.Equals(input.SslControl)
                ) && 
                (
                    this.SslvpnAccess == input.SslvpnAccess ||
                    this.SslvpnAccess.Equals(input.SslvpnAccess)
                ) && 
                (
                    this.DpiSslClient == input.DpiSslClient ||
                    this.DpiSslClient.Equals(input.DpiSslClient)
                ) && 
                (
                    this.DpiSslServer == input.DpiSslServer ||
                    this.DpiSslServer.Equals(input.DpiSslServer)
                ) && 
                (
                    this.GuestServices == input.GuestServices ||
                    (this.GuestServices != null &&
                    this.GuestServices.Equals(input.GuestServices))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Uuid != null)
                {
                    hashCode = (hashCode * 59) + this.Uuid.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SecurityType.GetHashCode();
                hashCode = (hashCode * 59) + this.InterfaceTrust.GetHashCode();
                if (this.AutoGenerateAccessRules != null)
                {
                    hashCode = (hashCode * 59) + this.AutoGenerateAccessRules.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.WebsenseContentFiltering.GetHashCode();
                hashCode = (hashCode * 59) + this.GatewayAntiVirus.GetHashCode();
                hashCode = (hashCode * 59) + this.IntrusionPrevention.GetHashCode();
                hashCode = (hashCode * 59) + this.AppControl.GetHashCode();
                hashCode = (hashCode * 59) + this.AntiSpyware.GetHashCode();
                hashCode = (hashCode * 59) + this.CreateGroupVpn.GetHashCode();
                hashCode = (hashCode * 59) + this.SslControl.GetHashCode();
                hashCode = (hashCode * 59) + this.SslvpnAccess.GetHashCode();
                hashCode = (hashCode * 59) + this.DpiSslClient.GetHashCode();
                hashCode = (hashCode * 59) + this.DpiSslServer.GetHashCode();
                if (this.GuestServices != null)
                {
                    hashCode = (hashCode * 59) + this.GuestServices.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
