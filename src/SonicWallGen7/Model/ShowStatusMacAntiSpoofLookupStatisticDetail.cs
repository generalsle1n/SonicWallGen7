/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// mac anti spoof lookup statistic detail schema.
    /// </summary>
    [DataContract(Name = "show_status_mac_anti_spoof_lookup_statistic_detail")]
    public partial class ShowStatusMacAntiSpoofLookupStatisticDetail : IEquatable<ShowStatusMacAntiSpoofLookupStatisticDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusMacAntiSpoofLookupStatisticDetail" /> class.
        /// </summary>
        /// <param name="entries">entries.</param>
        /// <param name="lookups">lookups.</param>
        /// <param name="passed">passed.</param>
        /// <param name="dropped">dropped.</param>
        /// <param name="success">success.</param>
        /// <param name="passedToUs">passedToUs.</param>
        public ShowStatusMacAntiSpoofLookupStatisticDetail(string entries = default(string), string lookups = default(string), string passed = default(string), string dropped = default(string), string success = default(string), string passedToUs = default(string))
        {
            this.Entries = entries;
            this.Lookups = lookups;
            this.Passed = passed;
            this.Dropped = dropped;
            this.Success = success;
            this.PassedToUs = passedToUs;
        }

        /// <summary>
        /// Gets or Sets Entries
        /// </summary>
        [DataMember(Name = "entries", EmitDefaultValue = false)]
        public string Entries { get; set; }

        /// <summary>
        /// Gets or Sets Lookups
        /// </summary>
        [DataMember(Name = "lookups", EmitDefaultValue = false)]
        public string Lookups { get; set; }

        /// <summary>
        /// Gets or Sets Passed
        /// </summary>
        [DataMember(Name = "passed", EmitDefaultValue = false)]
        public string Passed { get; set; }

        /// <summary>
        /// Gets or Sets Dropped
        /// </summary>
        [DataMember(Name = "dropped", EmitDefaultValue = false)]
        public string Dropped { get; set; }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [DataMember(Name = "success", EmitDefaultValue = false)]
        public string Success { get; set; }

        /// <summary>
        /// Gets or Sets PassedToUs
        /// </summary>
        [DataMember(Name = "passed_to_us", EmitDefaultValue = false)]
        public string PassedToUs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusMacAntiSpoofLookupStatisticDetail {\n");
            sb.Append("  Entries: ").Append(Entries).Append("\n");
            sb.Append("  Lookups: ").Append(Lookups).Append("\n");
            sb.Append("  Passed: ").Append(Passed).Append("\n");
            sb.Append("  Dropped: ").Append(Dropped).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  PassedToUs: ").Append(PassedToUs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusMacAntiSpoofLookupStatisticDetail);
        }

        /// <summary>
        /// Returns true if ShowStatusMacAntiSpoofLookupStatisticDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusMacAntiSpoofLookupStatisticDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusMacAntiSpoofLookupStatisticDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Entries == input.Entries ||
                    (this.Entries != null &&
                    this.Entries.Equals(input.Entries))
                ) && 
                (
                    this.Lookups == input.Lookups ||
                    (this.Lookups != null &&
                    this.Lookups.Equals(input.Lookups))
                ) && 
                (
                    this.Passed == input.Passed ||
                    (this.Passed != null &&
                    this.Passed.Equals(input.Passed))
                ) && 
                (
                    this.Dropped == input.Dropped ||
                    (this.Dropped != null &&
                    this.Dropped.Equals(input.Dropped))
                ) && 
                (
                    this.Success == input.Success ||
                    (this.Success != null &&
                    this.Success.Equals(input.Success))
                ) && 
                (
                    this.PassedToUs == input.PassedToUs ||
                    (this.PassedToUs != null &&
                    this.PassedToUs.Equals(input.PassedToUs))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Entries != null)
                {
                    hashCode = (hashCode * 59) + this.Entries.GetHashCode();
                }
                if (this.Lookups != null)
                {
                    hashCode = (hashCode * 59) + this.Lookups.GetHashCode();
                }
                if (this.Passed != null)
                {
                    hashCode = (hashCode * 59) + this.Passed.GetHashCode();
                }
                if (this.Dropped != null)
                {
                    hashCode = (hashCode * 59) + this.Dropped.GetHashCode();
                }
                if (this.Success != null)
                {
                    hashCode = (hashCode * 59) + this.Success.GetHashCode();
                }
                if (this.PassedToUs != null)
                {
                    hashCode = (hashCode * 59) + this.PassedToUs.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
