/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// PacketDissectionObjectFamilyIpv6
    /// </summary>
    [DataContract(Name = "packet_dissection_object_family_ipv6")]
    public partial class PacketDissectionObjectFamilyIpv6 : IEquatable<PacketDissectionObjectFamilyIpv6>, IValidatableObject
    {
        /// <summary>
        /// IPv6 header.
        /// </summary>
        /// <value>IPv6 header.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Ipv6Enum
        {
            /// <summary>
            /// Enum Version for value: version
            /// </summary>
            [EnumMember(Value = "version")]
            Version = 1,

            /// <summary>
            /// Enum TrafficClass for value: traffic-class
            /// </summary>
            [EnumMember(Value = "traffic-class")]
            TrafficClass = 2,

            /// <summary>
            /// Enum FlowLabel for value: flow-label
            /// </summary>
            [EnumMember(Value = "flow-label")]
            FlowLabel = 3,

            /// <summary>
            /// Enum PayloadLength for value: payload-length
            /// </summary>
            [EnumMember(Value = "payload-length")]
            PayloadLength = 4,

            /// <summary>
            /// Enum NextHeader for value: next-header
            /// </summary>
            [EnumMember(Value = "next-header")]
            NextHeader = 5,

            /// <summary>
            /// Enum HopLimit for value: hop-limit
            /// </summary>
            [EnumMember(Value = "hop-limit")]
            HopLimit = 6,

            /// <summary>
            /// Enum RoutingHeaderLength for value: routing-header-length
            /// </summary>
            [EnumMember(Value = "routing-header-length")]
            RoutingHeaderLength = 7,

            /// <summary>
            /// Enum RoutingHeaderType for value: routing-header-type
            /// </summary>
            [EnumMember(Value = "routing-header-type")]
            RoutingHeaderType = 8,

            /// <summary>
            /// Enum RoutingHeaderSegmentsLeft for value: routing-header-segments-left
            /// </summary>
            [EnumMember(Value = "routing-header-segments-left")]
            RoutingHeaderSegmentsLeft = 9,

            /// <summary>
            /// Enum HomeAddressOptions for value: home-address-options
            /// </summary>
            [EnumMember(Value = "home-address-options")]
            HomeAddressOptions = 10,

            /// <summary>
            /// Enum FragmentOffset for value: fragment-offset
            /// </summary>
            [EnumMember(Value = "fragment-offset")]
            FragmentOffset = 11
        }


        /// <summary>
        /// IPv6 header.
        /// </summary>
        /// <value>IPv6 header.</value>
        [DataMember(Name = "ipv6", EmitDefaultValue = false)]
        public Ipv6Enum? Ipv6 { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PacketDissectionObjectFamilyIpv6" /> class.
        /// </summary>
        /// <param name="ipv6">IPv6 header..</param>
        public PacketDissectionObjectFamilyIpv6(Ipv6Enum? ipv6 = default(Ipv6Enum?))
        {
            this.Ipv6 = ipv6;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PacketDissectionObjectFamilyIpv6 {\n");
            sb.Append("  Ipv6: ").Append(Ipv6).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PacketDissectionObjectFamilyIpv6);
        }

        /// <summary>
        /// Returns true if PacketDissectionObjectFamilyIpv6 instances are equal
        /// </summary>
        /// <param name="input">Instance of PacketDissectionObjectFamilyIpv6 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PacketDissectionObjectFamilyIpv6 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Ipv6 == input.Ipv6 ||
                    this.Ipv6.Equals(input.Ipv6)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Ipv6.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
