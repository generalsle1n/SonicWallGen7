/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// udpv6 detail schema.
    /// </summary>
    [DataContract(Name = "show_status_udpv6_detail")]
    public partial class ShowStatusUdpv6Detail : IEquatable<ShowStatusUdpv6Detail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusUdpv6Detail" /> class.
        /// </summary>
        /// <param name="connectionsOpened">connectionsOpened.</param>
        /// <param name="connectionsClosed">connectionsClosed.</param>
        /// <param name="totalUdpPackets">totalUdpPackets.</param>
        /// <param name="validatedPacketsPassed">validatedPacketsPassed.</param>
        /// <param name="malformedPacketsDropped">malformedPacketsDropped.</param>
        /// <param name="averageUdpPacketRate">averageUdpPacketRate.</param>
        /// <param name="udpFloodsInProgress">udpFloodsInProgress.</param>
        /// <param name="totalUdpFloodsDetected">totalUdpFloodsDetected.</param>
        /// <param name="totalUdpFloodPacketsRejected">totalUdpFloodPacketsRejected.</param>
        public ShowStatusUdpv6Detail(string connectionsOpened = default(string), string connectionsClosed = default(string), string totalUdpPackets = default(string), string validatedPacketsPassed = default(string), string malformedPacketsDropped = default(string), string averageUdpPacketRate = default(string), string udpFloodsInProgress = default(string), string totalUdpFloodsDetected = default(string), string totalUdpFloodPacketsRejected = default(string))
        {
            this.ConnectionsOpened = connectionsOpened;
            this.ConnectionsClosed = connectionsClosed;
            this.TotalUdpPackets = totalUdpPackets;
            this.ValidatedPacketsPassed = validatedPacketsPassed;
            this.MalformedPacketsDropped = malformedPacketsDropped;
            this.AverageUdpPacketRate = averageUdpPacketRate;
            this.UdpFloodsInProgress = udpFloodsInProgress;
            this.TotalUdpFloodsDetected = totalUdpFloodsDetected;
            this.TotalUdpFloodPacketsRejected = totalUdpFloodPacketsRejected;
        }

        /// <summary>
        /// Gets or Sets ConnectionsOpened
        /// </summary>
        [DataMember(Name = "connections_opened", EmitDefaultValue = false)]
        public string ConnectionsOpened { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionsClosed
        /// </summary>
        [DataMember(Name = "connections_closed", EmitDefaultValue = false)]
        public string ConnectionsClosed { get; set; }

        /// <summary>
        /// Gets or Sets TotalUdpPackets
        /// </summary>
        [DataMember(Name = "total_udp_packets", EmitDefaultValue = false)]
        public string TotalUdpPackets { get; set; }

        /// <summary>
        /// Gets or Sets ValidatedPacketsPassed
        /// </summary>
        [DataMember(Name = "validated_packets_passed", EmitDefaultValue = false)]
        public string ValidatedPacketsPassed { get; set; }

        /// <summary>
        /// Gets or Sets MalformedPacketsDropped
        /// </summary>
        [DataMember(Name = "malformed_packets_dropped", EmitDefaultValue = false)]
        public string MalformedPacketsDropped { get; set; }

        /// <summary>
        /// Gets or Sets AverageUdpPacketRate
        /// </summary>
        [DataMember(Name = "average_udp_packet_rate", EmitDefaultValue = false)]
        public string AverageUdpPacketRate { get; set; }

        /// <summary>
        /// Gets or Sets UdpFloodsInProgress
        /// </summary>
        [DataMember(Name = "udp_floods_in_progress", EmitDefaultValue = false)]
        public string UdpFloodsInProgress { get; set; }

        /// <summary>
        /// Gets or Sets TotalUdpFloodsDetected
        /// </summary>
        [DataMember(Name = "total_udp_floods_detected", EmitDefaultValue = false)]
        public string TotalUdpFloodsDetected { get; set; }

        /// <summary>
        /// Gets or Sets TotalUdpFloodPacketsRejected
        /// </summary>
        [DataMember(Name = "total_udp_flood_packets_rejected", EmitDefaultValue = false)]
        public string TotalUdpFloodPacketsRejected { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusUdpv6Detail {\n");
            sb.Append("  ConnectionsOpened: ").Append(ConnectionsOpened).Append("\n");
            sb.Append("  ConnectionsClosed: ").Append(ConnectionsClosed).Append("\n");
            sb.Append("  TotalUdpPackets: ").Append(TotalUdpPackets).Append("\n");
            sb.Append("  ValidatedPacketsPassed: ").Append(ValidatedPacketsPassed).Append("\n");
            sb.Append("  MalformedPacketsDropped: ").Append(MalformedPacketsDropped).Append("\n");
            sb.Append("  AverageUdpPacketRate: ").Append(AverageUdpPacketRate).Append("\n");
            sb.Append("  UdpFloodsInProgress: ").Append(UdpFloodsInProgress).Append("\n");
            sb.Append("  TotalUdpFloodsDetected: ").Append(TotalUdpFloodsDetected).Append("\n");
            sb.Append("  TotalUdpFloodPacketsRejected: ").Append(TotalUdpFloodPacketsRejected).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusUdpv6Detail);
        }

        /// <summary>
        /// Returns true if ShowStatusUdpv6Detail instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusUdpv6Detail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusUdpv6Detail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ConnectionsOpened == input.ConnectionsOpened ||
                    (this.ConnectionsOpened != null &&
                    this.ConnectionsOpened.Equals(input.ConnectionsOpened))
                ) && 
                (
                    this.ConnectionsClosed == input.ConnectionsClosed ||
                    (this.ConnectionsClosed != null &&
                    this.ConnectionsClosed.Equals(input.ConnectionsClosed))
                ) && 
                (
                    this.TotalUdpPackets == input.TotalUdpPackets ||
                    (this.TotalUdpPackets != null &&
                    this.TotalUdpPackets.Equals(input.TotalUdpPackets))
                ) && 
                (
                    this.ValidatedPacketsPassed == input.ValidatedPacketsPassed ||
                    (this.ValidatedPacketsPassed != null &&
                    this.ValidatedPacketsPassed.Equals(input.ValidatedPacketsPassed))
                ) && 
                (
                    this.MalformedPacketsDropped == input.MalformedPacketsDropped ||
                    (this.MalformedPacketsDropped != null &&
                    this.MalformedPacketsDropped.Equals(input.MalformedPacketsDropped))
                ) && 
                (
                    this.AverageUdpPacketRate == input.AverageUdpPacketRate ||
                    (this.AverageUdpPacketRate != null &&
                    this.AverageUdpPacketRate.Equals(input.AverageUdpPacketRate))
                ) && 
                (
                    this.UdpFloodsInProgress == input.UdpFloodsInProgress ||
                    (this.UdpFloodsInProgress != null &&
                    this.UdpFloodsInProgress.Equals(input.UdpFloodsInProgress))
                ) && 
                (
                    this.TotalUdpFloodsDetected == input.TotalUdpFloodsDetected ||
                    (this.TotalUdpFloodsDetected != null &&
                    this.TotalUdpFloodsDetected.Equals(input.TotalUdpFloodsDetected))
                ) && 
                (
                    this.TotalUdpFloodPacketsRejected == input.TotalUdpFloodPacketsRejected ||
                    (this.TotalUdpFloodPacketsRejected != null &&
                    this.TotalUdpFloodPacketsRejected.Equals(input.TotalUdpFloodPacketsRejected))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConnectionsOpened != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionsOpened.GetHashCode();
                }
                if (this.ConnectionsClosed != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionsClosed.GetHashCode();
                }
                if (this.TotalUdpPackets != null)
                {
                    hashCode = (hashCode * 59) + this.TotalUdpPackets.GetHashCode();
                }
                if (this.ValidatedPacketsPassed != null)
                {
                    hashCode = (hashCode * 59) + this.ValidatedPacketsPassed.GetHashCode();
                }
                if (this.MalformedPacketsDropped != null)
                {
                    hashCode = (hashCode * 59) + this.MalformedPacketsDropped.GetHashCode();
                }
                if (this.AverageUdpPacketRate != null)
                {
                    hashCode = (hashCode * 59) + this.AverageUdpPacketRate.GetHashCode();
                }
                if (this.UdpFloodsInProgress != null)
                {
                    hashCode = (hashCode * 59) + this.UdpFloodsInProgress.GetHashCode();
                }
                if (this.TotalUdpFloodsDetected != null)
                {
                    hashCode = (hashCode * 59) + this.TotalUdpFloodsDetected.GetHashCode();
                }
                if (this.TotalUdpFloodPacketsRejected != null)
                {
                    hashCode = (hashCode * 59) + this.TotalUdpFloodPacketsRejected.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
