/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure advanced diag VPN settings.
    /// </summary>
    [DataContract(Name = "diag_advanced_vpn_diag_advanced_vpn")]
    public partial class DiagAdvancedVpnDiagAdvancedVpn : IEquatable<DiagAdvancedVpnDiagAdvancedVpn>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagAdvancedVpnDiagAdvancedVpn" /> class.
        /// </summary>
        /// <param name="adjustTcpMss">Enable adjusting TCP MSS option for VPN traffic..</param>
        /// <param name="interoperableIkeDhExchange">Enable using interoperable IKE DH exchange ..</param>
        /// <param name="fragmentAfterEsp">Enable fragmenting VPN packets after applying ESP..</param>
        /// <param name="spiCpiParameterIndex">Enable using SPI/CPI parameter index for IPsec/IPcomp passthru connections..</param>
        /// <param name="trustBuiltInCa">Enable trust built-in CA certificates for IKE authentication and local certificate import..</param>
        /// <param name="preserveIkePort">Enable preserve IKE port for pass through connections..</param>
        /// <param name="quickModeAcceptReservedId">Accept reserved ID type in quick mode..</param>
        /// <param name="tunnelRemovalNoIkeResponse">Remove VPN tunnel when IKEv2 peer has no response..</param>
        /// <param name="android40Compatibility">Enable compatibility with Android 4.0 client..</param>
        /// <param name="autoAddedManagementRules">Enable auto-added VPN management rules..</param>
        /// <param name="peerNotificationOnValidationFailure">Send notification to peer when fail to validate or verify received IKEv1 payload..</param>
        /// <param name="maxNegotiatePerSec">Set threshold for max negotiation could start per second (0 for unlimited)..</param>
        public DiagAdvancedVpnDiagAdvancedVpn(bool adjustTcpMss = default(bool), bool interoperableIkeDhExchange = default(bool), bool fragmentAfterEsp = default(bool), bool spiCpiParameterIndex = default(bool), bool trustBuiltInCa = default(bool), bool preserveIkePort = default(bool), bool quickModeAcceptReservedId = default(bool), bool tunnelRemovalNoIkeResponse = default(bool), bool android40Compatibility = default(bool), bool autoAddedManagementRules = default(bool), bool peerNotificationOnValidationFailure = default(bool), decimal maxNegotiatePerSec = default(decimal))
        {
            this.AdjustTcpMss = adjustTcpMss;
            this.InteroperableIkeDhExchange = interoperableIkeDhExchange;
            this.FragmentAfterEsp = fragmentAfterEsp;
            this.SpiCpiParameterIndex = spiCpiParameterIndex;
            this.TrustBuiltInCa = trustBuiltInCa;
            this.PreserveIkePort = preserveIkePort;
            this.QuickModeAcceptReservedId = quickModeAcceptReservedId;
            this.TunnelRemovalNoIkeResponse = tunnelRemovalNoIkeResponse;
            this.Android40Compatibility = android40Compatibility;
            this.AutoAddedManagementRules = autoAddedManagementRules;
            this.PeerNotificationOnValidationFailure = peerNotificationOnValidationFailure;
            this.MaxNegotiatePerSec = maxNegotiatePerSec;
        }

        /// <summary>
        /// Enable adjusting TCP MSS option for VPN traffic.
        /// </summary>
        /// <value>Enable adjusting TCP MSS option for VPN traffic.</value>
        [DataMember(Name = "adjust_tcp_mss", EmitDefaultValue = true)]
        public bool AdjustTcpMss { get; set; }

        /// <summary>
        /// Enable using interoperable IKE DH exchange .
        /// </summary>
        /// <value>Enable using interoperable IKE DH exchange .</value>
        [DataMember(Name = "interoperable_ike_dh_exchange", EmitDefaultValue = true)]
        public bool InteroperableIkeDhExchange { get; set; }

        /// <summary>
        /// Enable fragmenting VPN packets after applying ESP.
        /// </summary>
        /// <value>Enable fragmenting VPN packets after applying ESP.</value>
        [DataMember(Name = "fragment_after_esp", EmitDefaultValue = true)]
        public bool FragmentAfterEsp { get; set; }

        /// <summary>
        /// Enable using SPI/CPI parameter index for IPsec/IPcomp passthru connections.
        /// </summary>
        /// <value>Enable using SPI/CPI parameter index for IPsec/IPcomp passthru connections.</value>
        [DataMember(Name = "spi_cpi_parameter_index", EmitDefaultValue = true)]
        public bool SpiCpiParameterIndex { get; set; }

        /// <summary>
        /// Enable trust built-in CA certificates for IKE authentication and local certificate import.
        /// </summary>
        /// <value>Enable trust built-in CA certificates for IKE authentication and local certificate import.</value>
        [DataMember(Name = "trust_built_in_ca", EmitDefaultValue = true)]
        public bool TrustBuiltInCa { get; set; }

        /// <summary>
        /// Enable preserve IKE port for pass through connections.
        /// </summary>
        /// <value>Enable preserve IKE port for pass through connections.</value>
        [DataMember(Name = "preserve_ike_port", EmitDefaultValue = true)]
        public bool PreserveIkePort { get; set; }

        /// <summary>
        /// Accept reserved ID type in quick mode.
        /// </summary>
        /// <value>Accept reserved ID type in quick mode.</value>
        [DataMember(Name = "quick_mode_accept_reserved_id", EmitDefaultValue = true)]
        public bool QuickModeAcceptReservedId { get; set; }

        /// <summary>
        /// Remove VPN tunnel when IKEv2 peer has no response.
        /// </summary>
        /// <value>Remove VPN tunnel when IKEv2 peer has no response.</value>
        [DataMember(Name = "tunnel_removal_no_ike_response", EmitDefaultValue = true)]
        public bool TunnelRemovalNoIkeResponse { get; set; }

        /// <summary>
        /// Enable compatibility with Android 4.0 client.
        /// </summary>
        /// <value>Enable compatibility with Android 4.0 client.</value>
        [DataMember(Name = "android4_0_compatibility", EmitDefaultValue = true)]
        public bool Android40Compatibility { get; set; }

        /// <summary>
        /// Enable auto-added VPN management rules.
        /// </summary>
        /// <value>Enable auto-added VPN management rules.</value>
        [DataMember(Name = "auto_added_management_rules", EmitDefaultValue = true)]
        public bool AutoAddedManagementRules { get; set; }

        /// <summary>
        /// Send notification to peer when fail to validate or verify received IKEv1 payload.
        /// </summary>
        /// <value>Send notification to peer when fail to validate or verify received IKEv1 payload.</value>
        [DataMember(Name = "peer_notification_on_validation_failure", EmitDefaultValue = true)]
        public bool PeerNotificationOnValidationFailure { get; set; }

        /// <summary>
        /// Set threshold for max negotiation could start per second (0 for unlimited).
        /// </summary>
        /// <value>Set threshold for max negotiation could start per second (0 for unlimited).</value>
        [DataMember(Name = "max_negotiate_per_sec", EmitDefaultValue = false)]
        public decimal MaxNegotiatePerSec { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DiagAdvancedVpnDiagAdvancedVpn {\n");
            sb.Append("  AdjustTcpMss: ").Append(AdjustTcpMss).Append("\n");
            sb.Append("  InteroperableIkeDhExchange: ").Append(InteroperableIkeDhExchange).Append("\n");
            sb.Append("  FragmentAfterEsp: ").Append(FragmentAfterEsp).Append("\n");
            sb.Append("  SpiCpiParameterIndex: ").Append(SpiCpiParameterIndex).Append("\n");
            sb.Append("  TrustBuiltInCa: ").Append(TrustBuiltInCa).Append("\n");
            sb.Append("  PreserveIkePort: ").Append(PreserveIkePort).Append("\n");
            sb.Append("  QuickModeAcceptReservedId: ").Append(QuickModeAcceptReservedId).Append("\n");
            sb.Append("  TunnelRemovalNoIkeResponse: ").Append(TunnelRemovalNoIkeResponse).Append("\n");
            sb.Append("  Android40Compatibility: ").Append(Android40Compatibility).Append("\n");
            sb.Append("  AutoAddedManagementRules: ").Append(AutoAddedManagementRules).Append("\n");
            sb.Append("  PeerNotificationOnValidationFailure: ").Append(PeerNotificationOnValidationFailure).Append("\n");
            sb.Append("  MaxNegotiatePerSec: ").Append(MaxNegotiatePerSec).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiagAdvancedVpnDiagAdvancedVpn);
        }

        /// <summary>
        /// Returns true if DiagAdvancedVpnDiagAdvancedVpn instances are equal
        /// </summary>
        /// <param name="input">Instance of DiagAdvancedVpnDiagAdvancedVpn to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiagAdvancedVpnDiagAdvancedVpn input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AdjustTcpMss == input.AdjustTcpMss ||
                    this.AdjustTcpMss.Equals(input.AdjustTcpMss)
                ) && 
                (
                    this.InteroperableIkeDhExchange == input.InteroperableIkeDhExchange ||
                    this.InteroperableIkeDhExchange.Equals(input.InteroperableIkeDhExchange)
                ) && 
                (
                    this.FragmentAfterEsp == input.FragmentAfterEsp ||
                    this.FragmentAfterEsp.Equals(input.FragmentAfterEsp)
                ) && 
                (
                    this.SpiCpiParameterIndex == input.SpiCpiParameterIndex ||
                    this.SpiCpiParameterIndex.Equals(input.SpiCpiParameterIndex)
                ) && 
                (
                    this.TrustBuiltInCa == input.TrustBuiltInCa ||
                    this.TrustBuiltInCa.Equals(input.TrustBuiltInCa)
                ) && 
                (
                    this.PreserveIkePort == input.PreserveIkePort ||
                    this.PreserveIkePort.Equals(input.PreserveIkePort)
                ) && 
                (
                    this.QuickModeAcceptReservedId == input.QuickModeAcceptReservedId ||
                    this.QuickModeAcceptReservedId.Equals(input.QuickModeAcceptReservedId)
                ) && 
                (
                    this.TunnelRemovalNoIkeResponse == input.TunnelRemovalNoIkeResponse ||
                    this.TunnelRemovalNoIkeResponse.Equals(input.TunnelRemovalNoIkeResponse)
                ) && 
                (
                    this.Android40Compatibility == input.Android40Compatibility ||
                    this.Android40Compatibility.Equals(input.Android40Compatibility)
                ) && 
                (
                    this.AutoAddedManagementRules == input.AutoAddedManagementRules ||
                    this.AutoAddedManagementRules.Equals(input.AutoAddedManagementRules)
                ) && 
                (
                    this.PeerNotificationOnValidationFailure == input.PeerNotificationOnValidationFailure ||
                    this.PeerNotificationOnValidationFailure.Equals(input.PeerNotificationOnValidationFailure)
                ) && 
                (
                    this.MaxNegotiatePerSec == input.MaxNegotiatePerSec ||
                    this.MaxNegotiatePerSec.Equals(input.MaxNegotiatePerSec)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AdjustTcpMss.GetHashCode();
                hashCode = (hashCode * 59) + this.InteroperableIkeDhExchange.GetHashCode();
                hashCode = (hashCode * 59) + this.FragmentAfterEsp.GetHashCode();
                hashCode = (hashCode * 59) + this.SpiCpiParameterIndex.GetHashCode();
                hashCode = (hashCode * 59) + this.TrustBuiltInCa.GetHashCode();
                hashCode = (hashCode * 59) + this.PreserveIkePort.GetHashCode();
                hashCode = (hashCode * 59) + this.QuickModeAcceptReservedId.GetHashCode();
                hashCode = (hashCode * 59) + this.TunnelRemovalNoIkeResponse.GetHashCode();
                hashCode = (hashCode * 59) + this.Android40Compatibility.GetHashCode();
                hashCode = (hashCode * 59) + this.AutoAddedManagementRules.GetHashCode();
                hashCode = (hashCode * 59) + this.PeerNotificationOnValidationFailure.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxNegotiatePerSec.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
