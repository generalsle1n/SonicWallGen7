/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure advanced diag management settings.
    /// </summary>
    [DataContract(Name = "diag_advanced_management_diag_advanced_management")]
    public partial class DiagAdvancedManagementDiagAdvancedManagement : IEquatable<DiagAdvancedManagementDiagAdvancedManagement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagAdvancedManagementDiagAdvancedManagement" /> class.
        /// </summary>
        /// <param name="sonicui7AsDefault">Enable SonicUI7 as default management GUI..</param>
        /// <param name="newLicensePageFormat">Enable use new license page format..</param>
        /// <param name="standbyManagementSa">Enable using standby management SA..</param>
        /// <param name="gmsPreemptsAdmin">Enable allowing SGMS to preempt a logged in administrator..</param>
        /// <param name="httpManagement">Allow management via HTTP..</param>
        /// <param name="classicView">Show classic address Objects, services and NAT polcies view pages..</param>
        /// <param name="onlineHelpUrl">onlineHelpUrl.</param>
        public DiagAdvancedManagementDiagAdvancedManagement(bool sonicui7AsDefault = default(bool), bool newLicensePageFormat = default(bool), bool standbyManagementSa = default(bool), bool gmsPreemptsAdmin = default(bool), bool httpManagement = default(bool), bool classicView = default(bool), DiagAdvancedManagementDiagAdvancedManagementOnlineHelpUrl onlineHelpUrl = default(DiagAdvancedManagementDiagAdvancedManagementOnlineHelpUrl))
        {
            this.Sonicui7AsDefault = sonicui7AsDefault;
            this.NewLicensePageFormat = newLicensePageFormat;
            this.StandbyManagementSa = standbyManagementSa;
            this.GmsPreemptsAdmin = gmsPreemptsAdmin;
            this.HttpManagement = httpManagement;
            this.ClassicView = classicView;
            this.OnlineHelpUrl = onlineHelpUrl;
        }

        /// <summary>
        /// Enable SonicUI7 as default management GUI.
        /// </summary>
        /// <value>Enable SonicUI7 as default management GUI.</value>
        [DataMember(Name = "sonicui7_as_default", EmitDefaultValue = true)]
        public bool Sonicui7AsDefault { get; set; }

        /// <summary>
        /// Enable use new license page format.
        /// </summary>
        /// <value>Enable use new license page format.</value>
        [DataMember(Name = "new_license_page_format", EmitDefaultValue = true)]
        public bool NewLicensePageFormat { get; set; }

        /// <summary>
        /// Enable using standby management SA.
        /// </summary>
        /// <value>Enable using standby management SA.</value>
        [DataMember(Name = "standby_management_sa", EmitDefaultValue = true)]
        public bool StandbyManagementSa { get; set; }

        /// <summary>
        /// Enable allowing SGMS to preempt a logged in administrator.
        /// </summary>
        /// <value>Enable allowing SGMS to preempt a logged in administrator.</value>
        [DataMember(Name = "gms_preempts_admin", EmitDefaultValue = true)]
        public bool GmsPreemptsAdmin { get; set; }

        /// <summary>
        /// Allow management via HTTP.
        /// </summary>
        /// <value>Allow management via HTTP.</value>
        [DataMember(Name = "http_management", EmitDefaultValue = true)]
        public bool HttpManagement { get; set; }

        /// <summary>
        /// Show classic address Objects, services and NAT polcies view pages.
        /// </summary>
        /// <value>Show classic address Objects, services and NAT polcies view pages.</value>
        [DataMember(Name = "classic_view", EmitDefaultValue = true)]
        public bool ClassicView { get; set; }

        /// <summary>
        /// Gets or Sets OnlineHelpUrl
        /// </summary>
        [DataMember(Name = "online_help_url", EmitDefaultValue = false)]
        public DiagAdvancedManagementDiagAdvancedManagementOnlineHelpUrl OnlineHelpUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DiagAdvancedManagementDiagAdvancedManagement {\n");
            sb.Append("  Sonicui7AsDefault: ").Append(Sonicui7AsDefault).Append("\n");
            sb.Append("  NewLicensePageFormat: ").Append(NewLicensePageFormat).Append("\n");
            sb.Append("  StandbyManagementSa: ").Append(StandbyManagementSa).Append("\n");
            sb.Append("  GmsPreemptsAdmin: ").Append(GmsPreemptsAdmin).Append("\n");
            sb.Append("  HttpManagement: ").Append(HttpManagement).Append("\n");
            sb.Append("  ClassicView: ").Append(ClassicView).Append("\n");
            sb.Append("  OnlineHelpUrl: ").Append(OnlineHelpUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiagAdvancedManagementDiagAdvancedManagement);
        }

        /// <summary>
        /// Returns true if DiagAdvancedManagementDiagAdvancedManagement instances are equal
        /// </summary>
        /// <param name="input">Instance of DiagAdvancedManagementDiagAdvancedManagement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiagAdvancedManagementDiagAdvancedManagement input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Sonicui7AsDefault == input.Sonicui7AsDefault ||
                    this.Sonicui7AsDefault.Equals(input.Sonicui7AsDefault)
                ) && 
                (
                    this.NewLicensePageFormat == input.NewLicensePageFormat ||
                    this.NewLicensePageFormat.Equals(input.NewLicensePageFormat)
                ) && 
                (
                    this.StandbyManagementSa == input.StandbyManagementSa ||
                    this.StandbyManagementSa.Equals(input.StandbyManagementSa)
                ) && 
                (
                    this.GmsPreemptsAdmin == input.GmsPreemptsAdmin ||
                    this.GmsPreemptsAdmin.Equals(input.GmsPreemptsAdmin)
                ) && 
                (
                    this.HttpManagement == input.HttpManagement ||
                    this.HttpManagement.Equals(input.HttpManagement)
                ) && 
                (
                    this.ClassicView == input.ClassicView ||
                    this.ClassicView.Equals(input.ClassicView)
                ) && 
                (
                    this.OnlineHelpUrl == input.OnlineHelpUrl ||
                    (this.OnlineHelpUrl != null &&
                    this.OnlineHelpUrl.Equals(input.OnlineHelpUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Sonicui7AsDefault.GetHashCode();
                hashCode = (hashCode * 59) + this.NewLicensePageFormat.GetHashCode();
                hashCode = (hashCode * 59) + this.StandbyManagementSa.GetHashCode();
                hashCode = (hashCode * 59) + this.GmsPreemptsAdmin.GetHashCode();
                hashCode = (hashCode * 59) + this.HttpManagement.GetHashCode();
                hashCode = (hashCode * 59) + this.ClassicView.GetHashCode();
                if (this.OnlineHelpUrl != null)
                {
                    hashCode = (hashCode * 59) + this.OnlineHelpUrl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
