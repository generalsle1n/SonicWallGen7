/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// ServiceObjectIcmpv6
    /// </summary>
    [DataContract(Name = "service_object_icmpv6")]
    public partial class ServiceObjectIcmpv6 : IEquatable<ServiceObjectIcmpv6>, IValidatableObject
    {
        /// <summary>
        /// Service object ICMPV6
        /// </summary>
        /// <value>Service object ICMPV6</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Icmpv6Enum
        {
            /// <summary>
            /// Enum DestinationUnreachable for value: destination-unreachable
            /// </summary>
            [EnumMember(Value = "destination-unreachable")]
            DestinationUnreachable = 1,

            /// <summary>
            /// Enum PacketTooBig for value: packet-too-big
            /// </summary>
            [EnumMember(Value = "packet-too-big")]
            PacketTooBig = 2,

            /// <summary>
            /// Enum TimeExceeded for value: time-exceeded
            /// </summary>
            [EnumMember(Value = "time-exceeded")]
            TimeExceeded = 3,

            /// <summary>
            /// Enum ParameterProblem for value: parameter-problem
            /// </summary>
            [EnumMember(Value = "parameter-problem")]
            ParameterProblem = 4,

            /// <summary>
            /// Enum EchoRequest for value: echo-request
            /// </summary>
            [EnumMember(Value = "echo-request")]
            EchoRequest = 5,

            /// <summary>
            /// Enum EchoReply for value: echo-reply
            /// </summary>
            [EnumMember(Value = "echo-reply")]
            EchoReply = 6,

            /// <summary>
            /// Enum MulticastListenerQuery for value: multicast-listener-query
            /// </summary>
            [EnumMember(Value = "multicast-listener-query")]
            MulticastListenerQuery = 7,

            /// <summary>
            /// Enum MulticastListenerReport for value: multicast-listener-report
            /// </summary>
            [EnumMember(Value = "multicast-listener-report")]
            MulticastListenerReport = 8,

            /// <summary>
            /// Enum MulticastListenerDone for value: multicast-listener-done
            /// </summary>
            [EnumMember(Value = "multicast-listener-done")]
            MulticastListenerDone = 9,

            /// <summary>
            /// Enum RouterSolicitation for value: router-solicitation
            /// </summary>
            [EnumMember(Value = "router-solicitation")]
            RouterSolicitation = 10,

            /// <summary>
            /// Enum RouterAdvertisement for value: router-advertisement
            /// </summary>
            [EnumMember(Value = "router-advertisement")]
            RouterAdvertisement = 11,

            /// <summary>
            /// Enum NeighbourSolicitation for value: neighbour-solicitation
            /// </summary>
            [EnumMember(Value = "neighbour-solicitation")]
            NeighbourSolicitation = 12,

            /// <summary>
            /// Enum NeighbourAdvertisement for value: neighbour-advertisement
            /// </summary>
            [EnumMember(Value = "neighbour-advertisement")]
            NeighbourAdvertisement = 13,

            /// <summary>
            /// Enum Redirect for value: redirect
            /// </summary>
            [EnumMember(Value = "redirect")]
            Redirect = 14,

            /// <summary>
            /// Enum RouterRenumbering for value: router-renumbering
            /// </summary>
            [EnumMember(Value = "router-renumbering")]
            RouterRenumbering = 15,

            /// <summary>
            /// Enum NodeQuery for value: node-query
            /// </summary>
            [EnumMember(Value = "node-query")]
            NodeQuery = 16,

            /// <summary>
            /// Enum NodeResponse for value: node-response
            /// </summary>
            [EnumMember(Value = "node-response")]
            NodeResponse = 17,

            /// <summary>
            /// Enum InverseNdSolicitation for value: inverse-nd-solicitation
            /// </summary>
            [EnumMember(Value = "inverse-nd-solicitation")]
            InverseNdSolicitation = 18,

            /// <summary>
            /// Enum InverseNdAdvertisement for value: inverse-nd-advertisement
            /// </summary>
            [EnumMember(Value = "inverse-nd-advertisement")]
            InverseNdAdvertisement = 19,

            /// <summary>
            /// Enum V2MulticastListernerReport for value: v2-multicast-listerner-report
            /// </summary>
            [EnumMember(Value = "v2-multicast-listerner-report")]
            V2MulticastListernerReport = 20,

            /// <summary>
            /// Enum HomeDiscoverRequest for value: home-discover-request
            /// </summary>
            [EnumMember(Value = "home-discover-request")]
            HomeDiscoverRequest = 21,

            /// <summary>
            /// Enum HomeDiscoverReply for value: home-discover-reply
            /// </summary>
            [EnumMember(Value = "home-discover-reply")]
            HomeDiscoverReply = 22,

            /// <summary>
            /// Enum MobilePrefixSolicitation for value: mobile-prefix-solicitation
            /// </summary>
            [EnumMember(Value = "mobile-prefix-solicitation")]
            MobilePrefixSolicitation = 23,

            /// <summary>
            /// Enum MobilePrefixAdvertisement for value: mobile-prefix-advertisement
            /// </summary>
            [EnumMember(Value = "mobile-prefix-advertisement")]
            MobilePrefixAdvertisement = 24,

            /// <summary>
            /// Enum CertificationPathSolicitation for value: certification-path-solicitation
            /// </summary>
            [EnumMember(Value = "certification-path-solicitation")]
            CertificationPathSolicitation = 25,

            /// <summary>
            /// Enum CertificationPathAdvertisement for value: certification-path-advertisement
            /// </summary>
            [EnumMember(Value = "certification-path-advertisement")]
            CertificationPathAdvertisement = 26,

            /// <summary>
            /// Enum MulticastRouterAdvertisement for value: multicast-router-advertisement
            /// </summary>
            [EnumMember(Value = "multicast-router-advertisement")]
            MulticastRouterAdvertisement = 27,

            /// <summary>
            /// Enum MulticastRouterSolicitation for value: multicast-router-solicitation
            /// </summary>
            [EnumMember(Value = "multicast-router-solicitation")]
            MulticastRouterSolicitation = 28,

            /// <summary>
            /// Enum MulticastRouterTermination for value: multicast-router-termination
            /// </summary>
            [EnumMember(Value = "multicast-router-termination")]
            MulticastRouterTermination = 29,

            /// <summary>
            /// Enum Fmipv6 for value: fmipv6
            /// </summary>
            [EnumMember(Value = "fmipv6")]
            Fmipv6 = 30,

            /// <summary>
            /// Enum RplControl for value: rpl-control
            /// </summary>
            [EnumMember(Value = "rpl-control")]
            RplControl = 31
        }


        /// <summary>
        /// Service object ICMPV6
        /// </summary>
        /// <value>Service object ICMPV6</value>
        [DataMember(Name = "icmpv6", EmitDefaultValue = false)]
        public Icmpv6Enum? Icmpv6 { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceObjectIcmpv6" /> class.
        /// </summary>
        /// <param name="icmpv6">Service object ICMPV6.</param>
        public ServiceObjectIcmpv6(Icmpv6Enum? icmpv6 = default(Icmpv6Enum?))
        {
            this.Icmpv6 = icmpv6;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServiceObjectIcmpv6 {\n");
            sb.Append("  Icmpv6: ").Append(Icmpv6).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServiceObjectIcmpv6);
        }

        /// <summary>
        /// Returns true if ServiceObjectIcmpv6 instances are equal
        /// </summary>
        /// <param name="input">Instance of ServiceObjectIcmpv6 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceObjectIcmpv6 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Icmpv6 == input.Icmpv6 ||
                    this.Icmpv6.Equals(input.Icmpv6)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Icmpv6.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
