/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// WAN DDOS protection.
    /// </summary>
    [DataContract(Name = "dos_action_profile_ddos")]
    public partial class DosActionProfileDdos : IEquatable<DosActionProfileDdos>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DosActionProfileDdos" /> class.
        /// </summary>
        /// <param name="protection">Enable DDoS Protection..</param>
        /// <param name="threshold">threshold.</param>
        /// <param name="fliterBypassRate">fliterBypassRate.</param>
        /// <param name="allowListTimeout">allowListTimeout.</param>
        /// <param name="onWanInterfaces">Enable DDOS protection on WAN interfaces..</param>
        /// <param name="management">Enable always allow SonicWall management traffic (non-tcp floods)..</param>
        public DosActionProfileDdos(bool protection = default(bool), DosActionProfileDdosThreshold threshold = default(DosActionProfileDdosThreshold), DosActionProfileDdosFliterBypassRate fliterBypassRate = default(DosActionProfileDdosFliterBypassRate), DosActionProfileDdosAllowListTimeout allowListTimeout = default(DosActionProfileDdosAllowListTimeout), bool onWanInterfaces = default(bool), bool management = default(bool))
        {
            this.Protection = protection;
            this.Threshold = threshold;
            this.FliterBypassRate = fliterBypassRate;
            this.AllowListTimeout = allowListTimeout;
            this.OnWanInterfaces = onWanInterfaces;
            this.Management = management;
        }

        /// <summary>
        /// Enable DDoS Protection.
        /// </summary>
        /// <value>Enable DDoS Protection.</value>
        [DataMember(Name = "protection", EmitDefaultValue = true)]
        public bool Protection { get; set; }

        /// <summary>
        /// Gets or Sets Threshold
        /// </summary>
        [DataMember(Name = "threshold", EmitDefaultValue = true)]
        public DosActionProfileDdosThreshold Threshold { get; set; }

        /// <summary>
        /// Gets or Sets FliterBypassRate
        /// </summary>
        [DataMember(Name = "fliter_bypass_rate", EmitDefaultValue = true)]
        public DosActionProfileDdosFliterBypassRate FliterBypassRate { get; set; }

        /// <summary>
        /// Gets or Sets AllowListTimeout
        /// </summary>
        [DataMember(Name = "allow_list_timeout", EmitDefaultValue = true)]
        public DosActionProfileDdosAllowListTimeout AllowListTimeout { get; set; }

        /// <summary>
        /// Enable DDOS protection on WAN interfaces.
        /// </summary>
        /// <value>Enable DDOS protection on WAN interfaces.</value>
        [DataMember(Name = "on_wan_interfaces", EmitDefaultValue = true)]
        public bool OnWanInterfaces { get; set; }

        /// <summary>
        /// Enable always allow SonicWall management traffic (non-tcp floods).
        /// </summary>
        /// <value>Enable always allow SonicWall management traffic (non-tcp floods).</value>
        [DataMember(Name = "management", EmitDefaultValue = true)]
        public bool Management { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DosActionProfileDdos {\n");
            sb.Append("  Protection: ").Append(Protection).Append("\n");
            sb.Append("  Threshold: ").Append(Threshold).Append("\n");
            sb.Append("  FliterBypassRate: ").Append(FliterBypassRate).Append("\n");
            sb.Append("  AllowListTimeout: ").Append(AllowListTimeout).Append("\n");
            sb.Append("  OnWanInterfaces: ").Append(OnWanInterfaces).Append("\n");
            sb.Append("  Management: ").Append(Management).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DosActionProfileDdos);
        }

        /// <summary>
        /// Returns true if DosActionProfileDdos instances are equal
        /// </summary>
        /// <param name="input">Instance of DosActionProfileDdos to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DosActionProfileDdos input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Protection == input.Protection ||
                    this.Protection.Equals(input.Protection)
                ) && 
                (
                    this.Threshold == input.Threshold ||
                    (this.Threshold != null &&
                    this.Threshold.Equals(input.Threshold))
                ) && 
                (
                    this.FliterBypassRate == input.FliterBypassRate ||
                    (this.FliterBypassRate != null &&
                    this.FliterBypassRate.Equals(input.FliterBypassRate))
                ) && 
                (
                    this.AllowListTimeout == input.AllowListTimeout ||
                    (this.AllowListTimeout != null &&
                    this.AllowListTimeout.Equals(input.AllowListTimeout))
                ) && 
                (
                    this.OnWanInterfaces == input.OnWanInterfaces ||
                    this.OnWanInterfaces.Equals(input.OnWanInterfaces)
                ) && 
                (
                    this.Management == input.Management ||
                    this.Management.Equals(input.Management)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Protection.GetHashCode();
                if (this.Threshold != null)
                {
                    hashCode = (hashCode * 59) + this.Threshold.GetHashCode();
                }
                if (this.FliterBypassRate != null)
                {
                    hashCode = (hashCode * 59) + this.FliterBypassRate.GetHashCode();
                }
                if (this.AllowListTimeout != null)
                {
                    hashCode = (hashCode * 59) + this.AllowListTimeout.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OnWanInterfaces.GetHashCode();
                hashCode = (hashCode * 59) + this.Management.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
