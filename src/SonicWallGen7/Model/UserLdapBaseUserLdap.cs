/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Configure LDAP settings.
    /// </summary>
    [DataContract(Name = "user_ldap_base_user_ldap")]
    public partial class UserLdapBaseUserLdap : IEquatable<UserLdapBaseUserLdap>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserLdapBaseUserLdap" /> class.
        /// </summary>
        /// <param name="protocolVersion">Set protocol version of LDAP server..</param>
        /// <param name="requireValidCertificate">Enable validate the certificate presented by the server during                the TLS exchange..</param>
        /// <param name="localTlsCertificate">Select a local certificate for TLS. * Set to null to represent an unconfigured state..</param>
        /// <param name="allowReferrals">Allow following referrals to other LDAP servers..</param>
        /// <param name="allowReferences">allowReferences.</param>
        /// <param name="localUsersOnly">Allow only LDAP users with local accounts..</param>
        /// <param name="defaultUserGroup">Select a default user group for LDAP users. * Set to null to represent an unconfigured state..</param>
        /// <param name="checkDeletedGroupsMethod">checkDeletedGroupsMethod.</param>
        /// <param name="mirrorUserGroups">mirrorUserGroups.</param>
        /// <param name="delMirroredUserGroups">Delete the mirrored user groups..</param>
        /// <param name="relay">relay.</param>
        public UserLdapBaseUserLdap(decimal protocolVersion = default(decimal), bool requireValidCertificate = default(bool), string localTlsCertificate = default(string), bool allowReferrals = default(bool), UserLdapBaseUserLdapAllowReferences allowReferences = default(UserLdapBaseUserLdapAllowReferences), bool localUsersOnly = default(bool), string defaultUserGroup = default(string), UserLdapBaseUserLdapCheckDeletedGroupsMethod checkDeletedGroupsMethod = default(UserLdapBaseUserLdapCheckDeletedGroupsMethod), UserLdapBaseUserLdapMirrorUserGroups mirrorUserGroups = default(UserLdapBaseUserLdapMirrorUserGroups), bool delMirroredUserGroups = default(bool), UserLdapBaseUserLdapRelay relay = default(UserLdapBaseUserLdapRelay))
        {
            this.ProtocolVersion = protocolVersion;
            this.RequireValidCertificate = requireValidCertificate;
            this.LocalTlsCertificate = localTlsCertificate;
            this.AllowReferrals = allowReferrals;
            this.AllowReferences = allowReferences;
            this.LocalUsersOnly = localUsersOnly;
            this.DefaultUserGroup = defaultUserGroup;
            this.CheckDeletedGroupsMethod = checkDeletedGroupsMethod;
            this.MirrorUserGroups = mirrorUserGroups;
            this.DelMirroredUserGroups = delMirroredUserGroups;
            this.Relay = relay;
        }

        /// <summary>
        /// Set protocol version of LDAP server.
        /// </summary>
        /// <value>Set protocol version of LDAP server.</value>
        [DataMember(Name = "protocol_version", EmitDefaultValue = false)]
        public decimal ProtocolVersion { get; set; }

        /// <summary>
        /// Enable validate the certificate presented by the server during                the TLS exchange.
        /// </summary>
        /// <value>Enable validate the certificate presented by the server during                the TLS exchange.</value>
        [DataMember(Name = "require_valid_certificate", EmitDefaultValue = true)]
        public bool RequireValidCertificate { get; set; }

        /// <summary>
        /// Select a local certificate for TLS. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Select a local certificate for TLS. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "local_tls_certificate", EmitDefaultValue = true)]
        public string LocalTlsCertificate { get; set; }

        /// <summary>
        /// Allow following referrals to other LDAP servers.
        /// </summary>
        /// <value>Allow following referrals to other LDAP servers.</value>
        [DataMember(Name = "allow_referrals", EmitDefaultValue = true)]
        public bool AllowReferrals { get; set; }

        /// <summary>
        /// Gets or Sets AllowReferences
        /// </summary>
        [DataMember(Name = "allow_references", EmitDefaultValue = false)]
        public UserLdapBaseUserLdapAllowReferences AllowReferences { get; set; }

        /// <summary>
        /// Allow only LDAP users with local accounts.
        /// </summary>
        /// <value>Allow only LDAP users with local accounts.</value>
        [DataMember(Name = "local_users_only", EmitDefaultValue = true)]
        public bool LocalUsersOnly { get; set; }

        /// <summary>
        /// Select a default user group for LDAP users. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Select a default user group for LDAP users. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "default_user_group", EmitDefaultValue = true)]
        public string DefaultUserGroup { get; set; }

        /// <summary>
        /// Gets or Sets CheckDeletedGroupsMethod
        /// </summary>
        [DataMember(Name = "check_deleted_groups_method", EmitDefaultValue = false)]
        public UserLdapBaseUserLdapCheckDeletedGroupsMethod CheckDeletedGroupsMethod { get; set; }

        /// <summary>
        /// Gets or Sets MirrorUserGroups
        /// </summary>
        [DataMember(Name = "mirror_user_groups", EmitDefaultValue = true)]
        public UserLdapBaseUserLdapMirrorUserGroups MirrorUserGroups { get; set; }

        /// <summary>
        /// Delete the mirrored user groups.
        /// </summary>
        /// <value>Delete the mirrored user groups.</value>
        [DataMember(Name = "del_mirrored_user_groups", EmitDefaultValue = true)]
        public bool DelMirroredUserGroups { get; set; }

        /// <summary>
        /// Gets or Sets Relay
        /// </summary>
        [DataMember(Name = "relay", EmitDefaultValue = false)]
        public UserLdapBaseUserLdapRelay Relay { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserLdapBaseUserLdap {\n");
            sb.Append("  ProtocolVersion: ").Append(ProtocolVersion).Append("\n");
            sb.Append("  RequireValidCertificate: ").Append(RequireValidCertificate).Append("\n");
            sb.Append("  LocalTlsCertificate: ").Append(LocalTlsCertificate).Append("\n");
            sb.Append("  AllowReferrals: ").Append(AllowReferrals).Append("\n");
            sb.Append("  AllowReferences: ").Append(AllowReferences).Append("\n");
            sb.Append("  LocalUsersOnly: ").Append(LocalUsersOnly).Append("\n");
            sb.Append("  DefaultUserGroup: ").Append(DefaultUserGroup).Append("\n");
            sb.Append("  CheckDeletedGroupsMethod: ").Append(CheckDeletedGroupsMethod).Append("\n");
            sb.Append("  MirrorUserGroups: ").Append(MirrorUserGroups).Append("\n");
            sb.Append("  DelMirroredUserGroups: ").Append(DelMirroredUserGroups).Append("\n");
            sb.Append("  Relay: ").Append(Relay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserLdapBaseUserLdap);
        }

        /// <summary>
        /// Returns true if UserLdapBaseUserLdap instances are equal
        /// </summary>
        /// <param name="input">Instance of UserLdapBaseUserLdap to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserLdapBaseUserLdap input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ProtocolVersion == input.ProtocolVersion ||
                    this.ProtocolVersion.Equals(input.ProtocolVersion)
                ) && 
                (
                    this.RequireValidCertificate == input.RequireValidCertificate ||
                    this.RequireValidCertificate.Equals(input.RequireValidCertificate)
                ) && 
                (
                    this.LocalTlsCertificate == input.LocalTlsCertificate ||
                    (this.LocalTlsCertificate != null &&
                    this.LocalTlsCertificate.Equals(input.LocalTlsCertificate))
                ) && 
                (
                    this.AllowReferrals == input.AllowReferrals ||
                    this.AllowReferrals.Equals(input.AllowReferrals)
                ) && 
                (
                    this.AllowReferences == input.AllowReferences ||
                    (this.AllowReferences != null &&
                    this.AllowReferences.Equals(input.AllowReferences))
                ) && 
                (
                    this.LocalUsersOnly == input.LocalUsersOnly ||
                    this.LocalUsersOnly.Equals(input.LocalUsersOnly)
                ) && 
                (
                    this.DefaultUserGroup == input.DefaultUserGroup ||
                    (this.DefaultUserGroup != null &&
                    this.DefaultUserGroup.Equals(input.DefaultUserGroup))
                ) && 
                (
                    this.CheckDeletedGroupsMethod == input.CheckDeletedGroupsMethod ||
                    (this.CheckDeletedGroupsMethod != null &&
                    this.CheckDeletedGroupsMethod.Equals(input.CheckDeletedGroupsMethod))
                ) && 
                (
                    this.MirrorUserGroups == input.MirrorUserGroups ||
                    (this.MirrorUserGroups != null &&
                    this.MirrorUserGroups.Equals(input.MirrorUserGroups))
                ) && 
                (
                    this.DelMirroredUserGroups == input.DelMirroredUserGroups ||
                    this.DelMirroredUserGroups.Equals(input.DelMirroredUserGroups)
                ) && 
                (
                    this.Relay == input.Relay ||
                    (this.Relay != null &&
                    this.Relay.Equals(input.Relay))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ProtocolVersion.GetHashCode();
                hashCode = (hashCode * 59) + this.RequireValidCertificate.GetHashCode();
                if (this.LocalTlsCertificate != null)
                {
                    hashCode = (hashCode * 59) + this.LocalTlsCertificate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AllowReferrals.GetHashCode();
                if (this.AllowReferences != null)
                {
                    hashCode = (hashCode * 59) + this.AllowReferences.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LocalUsersOnly.GetHashCode();
                if (this.DefaultUserGroup != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultUserGroup.GetHashCode();
                }
                if (this.CheckDeletedGroupsMethod != null)
                {
                    hashCode = (hashCode * 59) + this.CheckDeletedGroupsMethod.GetHashCode();
                }
                if (this.MirrorUserGroups != null)
                {
                    hashCode = (hashCode * 59) + this.MirrorUserGroups.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DelMirroredUserGroups.GetHashCode();
                if (this.Relay != null)
                {
                    hashCode = (hashCode * 59) + this.Relay.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
