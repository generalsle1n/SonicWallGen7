/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// geo ip custom countries statistics detail schema.
    /// </summary>
    [DataContract(Name = "show_status_geo_ip_custom_countries_statistics_detail")]
    public partial class ShowStatusGeoIpCustomCountriesStatisticsDetail : IEquatable<ShowStatusGeoIpCustomCountriesStatisticsDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowStatusGeoIpCustomCountriesStatisticsDetail" /> class.
        /// </summary>
        /// <param name="noOfEntries">noOfEntries.</param>
        /// <param name="noOfTimesCalled">noOfTimesCalled.</param>
        /// <param name="noOfTimesNotLookedUp">noOfTimesNotLookedUp.</param>
        /// <param name="noOfTimesResolved">noOfTimesResolved.</param>
        public ShowStatusGeoIpCustomCountriesStatisticsDetail(string noOfEntries = default(string), string noOfTimesCalled = default(string), string noOfTimesNotLookedUp = default(string), string noOfTimesResolved = default(string))
        {
            this.NoOfEntries = noOfEntries;
            this.NoOfTimesCalled = noOfTimesCalled;
            this.NoOfTimesNotLookedUp = noOfTimesNotLookedUp;
            this.NoOfTimesResolved = noOfTimesResolved;
        }

        /// <summary>
        /// Gets or Sets NoOfEntries
        /// </summary>
        [DataMember(Name = "no_of_entries", EmitDefaultValue = false)]
        public string NoOfEntries { get; set; }

        /// <summary>
        /// Gets or Sets NoOfTimesCalled
        /// </summary>
        [DataMember(Name = "no_of_times_called", EmitDefaultValue = false)]
        public string NoOfTimesCalled { get; set; }

        /// <summary>
        /// Gets or Sets NoOfTimesNotLookedUp
        /// </summary>
        [DataMember(Name = "no_of_times_not_looked_up", EmitDefaultValue = false)]
        public string NoOfTimesNotLookedUp { get; set; }

        /// <summary>
        /// Gets or Sets NoOfTimesResolved
        /// </summary>
        [DataMember(Name = "no_of_times_resolved", EmitDefaultValue = false)]
        public string NoOfTimesResolved { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowStatusGeoIpCustomCountriesStatisticsDetail {\n");
            sb.Append("  NoOfEntries: ").Append(NoOfEntries).Append("\n");
            sb.Append("  NoOfTimesCalled: ").Append(NoOfTimesCalled).Append("\n");
            sb.Append("  NoOfTimesNotLookedUp: ").Append(NoOfTimesNotLookedUp).Append("\n");
            sb.Append("  NoOfTimesResolved: ").Append(NoOfTimesResolved).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowStatusGeoIpCustomCountriesStatisticsDetail);
        }

        /// <summary>
        /// Returns true if ShowStatusGeoIpCustomCountriesStatisticsDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowStatusGeoIpCustomCountriesStatisticsDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowStatusGeoIpCustomCountriesStatisticsDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.NoOfEntries == input.NoOfEntries ||
                    (this.NoOfEntries != null &&
                    this.NoOfEntries.Equals(input.NoOfEntries))
                ) && 
                (
                    this.NoOfTimesCalled == input.NoOfTimesCalled ||
                    (this.NoOfTimesCalled != null &&
                    this.NoOfTimesCalled.Equals(input.NoOfTimesCalled))
                ) && 
                (
                    this.NoOfTimesNotLookedUp == input.NoOfTimesNotLookedUp ||
                    (this.NoOfTimesNotLookedUp != null &&
                    this.NoOfTimesNotLookedUp.Equals(input.NoOfTimesNotLookedUp))
                ) && 
                (
                    this.NoOfTimesResolved == input.NoOfTimesResolved ||
                    (this.NoOfTimesResolved != null &&
                    this.NoOfTimesResolved.Equals(input.NoOfTimesResolved))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NoOfEntries != null)
                {
                    hashCode = (hashCode * 59) + this.NoOfEntries.GetHashCode();
                }
                if (this.NoOfTimesCalled != null)
                {
                    hashCode = (hashCode * 59) + this.NoOfTimesCalled.GetHashCode();
                }
                if (this.NoOfTimesNotLookedUp != null)
                {
                    hashCode = (hashCode * 59) + this.NoOfTimesNotLookedUp.GetHashCode();
                }
                if (this.NoOfTimesResolved != null)
                {
                    hashCode = (hashCode * 59) + this.NoOfTimesResolved.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
