/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Enter time configuration mode.
    /// </summary>
    [DataContract(Name = "time_time")]
    public partial class TimeTime : IEquatable<TimeTime>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeTime" /> class.
        /// </summary>
        /// <param name="useNtp">Enable use of NTP servers to obtain time..</param>
        /// <param name="time">Specify time..</param>
        /// <param name="date">Specify date..</param>
        /// <param name="varTimeZone">Specify time zone..</param>
        /// <param name="daylightSavings">Enable automatic adjust of clock for daylight saving time..</param>
        /// <param name="universal">Enable display of UTC in logs (instead of local time)..</param>
        /// <param name="internationalFormat">Enable display of date in international format..</param>
        /// <param name="onlyCustomNtp">Enable only use custom NTP servers..</param>
        /// <param name="ntpUpdateInterval">Set the NTP Update Interval..</param>
        public TimeTime(bool useNtp = default(bool), string time = default(string), string date = default(string), string varTimeZone = default(string), bool daylightSavings = default(bool), bool universal = default(bool), bool internationalFormat = default(bool), bool onlyCustomNtp = default(bool), decimal ntpUpdateInterval = default(decimal))
        {
            this.UseNtp = useNtp;
            this.Time = time;
            this.Date = date;
            this.VarTimeZone = varTimeZone;
            this.DaylightSavings = daylightSavings;
            this.Universal = universal;
            this.InternationalFormat = internationalFormat;
            this.OnlyCustomNtp = onlyCustomNtp;
            this.NtpUpdateInterval = ntpUpdateInterval;
        }

        /// <summary>
        /// Enable use of NTP servers to obtain time.
        /// </summary>
        /// <value>Enable use of NTP servers to obtain time.</value>
        [DataMember(Name = "use_ntp", EmitDefaultValue = true)]
        public bool UseNtp { get; set; }

        /// <summary>
        /// Specify time.
        /// </summary>
        /// <value>Specify time.</value>
        [DataMember(Name = "time", EmitDefaultValue = false)]
        public string Time { get; set; }

        /// <summary>
        /// Specify date.
        /// </summary>
        /// <value>Specify date.</value>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public string Date { get; set; }

        /// <summary>
        /// Specify time zone.
        /// </summary>
        /// <value>Specify time zone.</value>
        [DataMember(Name = "time_zone", EmitDefaultValue = false)]
        public string VarTimeZone { get; set; }

        /// <summary>
        /// Enable automatic adjust of clock for daylight saving time.
        /// </summary>
        /// <value>Enable automatic adjust of clock for daylight saving time.</value>
        [DataMember(Name = "daylight_savings", EmitDefaultValue = true)]
        public bool DaylightSavings { get; set; }

        /// <summary>
        /// Enable display of UTC in logs (instead of local time).
        /// </summary>
        /// <value>Enable display of UTC in logs (instead of local time).</value>
        [DataMember(Name = "universal", EmitDefaultValue = true)]
        public bool Universal { get; set; }

        /// <summary>
        /// Enable display of date in international format.
        /// </summary>
        /// <value>Enable display of date in international format.</value>
        [DataMember(Name = "international_format", EmitDefaultValue = true)]
        public bool InternationalFormat { get; set; }

        /// <summary>
        /// Enable only use custom NTP servers.
        /// </summary>
        /// <value>Enable only use custom NTP servers.</value>
        [DataMember(Name = "only_custom_ntp", EmitDefaultValue = true)]
        public bool OnlyCustomNtp { get; set; }

        /// <summary>
        /// Set the NTP Update Interval.
        /// </summary>
        /// <value>Set the NTP Update Interval.</value>
        [DataMember(Name = "ntp_update_interval", EmitDefaultValue = false)]
        public decimal NtpUpdateInterval { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TimeTime {\n");
            sb.Append("  UseNtp: ").Append(UseNtp).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  VarTimeZone: ").Append(VarTimeZone).Append("\n");
            sb.Append("  DaylightSavings: ").Append(DaylightSavings).Append("\n");
            sb.Append("  Universal: ").Append(Universal).Append("\n");
            sb.Append("  InternationalFormat: ").Append(InternationalFormat).Append("\n");
            sb.Append("  OnlyCustomNtp: ").Append(OnlyCustomNtp).Append("\n");
            sb.Append("  NtpUpdateInterval: ").Append(NtpUpdateInterval).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimeTime);
        }

        /// <summary>
        /// Returns true if TimeTime instances are equal
        /// </summary>
        /// <param name="input">Instance of TimeTime to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeTime input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UseNtp == input.UseNtp ||
                    this.UseNtp.Equals(input.UseNtp)
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.VarTimeZone == input.VarTimeZone ||
                    (this.VarTimeZone != null &&
                    this.VarTimeZone.Equals(input.VarTimeZone))
                ) && 
                (
                    this.DaylightSavings == input.DaylightSavings ||
                    this.DaylightSavings.Equals(input.DaylightSavings)
                ) && 
                (
                    this.Universal == input.Universal ||
                    this.Universal.Equals(input.Universal)
                ) && 
                (
                    this.InternationalFormat == input.InternationalFormat ||
                    this.InternationalFormat.Equals(input.InternationalFormat)
                ) && 
                (
                    this.OnlyCustomNtp == input.OnlyCustomNtp ||
                    this.OnlyCustomNtp.Equals(input.OnlyCustomNtp)
                ) && 
                (
                    this.NtpUpdateInterval == input.NtpUpdateInterval ||
                    this.NtpUpdateInterval.Equals(input.NtpUpdateInterval)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.UseNtp.GetHashCode();
                if (this.Time != null)
                {
                    hashCode = (hashCode * 59) + this.Time.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.VarTimeZone != null)
                {
                    hashCode = (hashCode * 59) + this.VarTimeZone.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DaylightSavings.GetHashCode();
                hashCode = (hashCode * 59) + this.Universal.GetHashCode();
                hashCode = (hashCode * 59) + this.InternationalFormat.GetHashCode();
                hashCode = (hashCode * 59) + this.OnlyCustomNtp.GetHashCode();
                hashCode = (hashCode * 59) + this.NtpUpdateInterval.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
