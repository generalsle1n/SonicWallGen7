/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Entering solera capture mode * Set to null or {} to represent  an unconfigured state.
    /// </summary>
    [DataContract(Name = "log_automation_log_automation_solera")]
    public partial class LogAutomationLogAutomationSolera : IEquatable<LogAutomationLogAutomationSolera>, IValidatableObject
    {
        /// <summary>
        /// Set solera server protocol.
        /// </summary>
        /// <value>Set solera server protocol.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProtocolEnum
        {
            /// <summary>
            /// Enum Http for value: http
            /// </summary>
            [EnumMember(Value = "http")]
            Http = 1,

            /// <summary>
            /// Enum Https for value: https
            /// </summary>
            [EnumMember(Value = "https")]
            Https = 2
        }


        /// <summary>
        /// Set solera server protocol.
        /// </summary>
        /// <value>Set solera server protocol.</value>
        [DataMember(Name = "protocol", EmitDefaultValue = false)]
        public ProtocolEnum? Protocol { get; set; }
        /// <summary>
        /// Set default zone for address to link from email alerts.
        /// </summary>
        /// <value>Set default zone for address to link from email alerts.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AddressToLinkEnum
        {
            /// <summary>
            /// Enum Lan for value: lan
            /// </summary>
            [EnumMember(Value = "lan")]
            Lan = 1,

            /// <summary>
            /// Enum Wan for value: wan
            /// </summary>
            [EnumMember(Value = "wan")]
            Wan = 2
        }


        /// <summary>
        /// Set default zone for address to link from email alerts.
        /// </summary>
        /// <value>Set default zone for address to link from email alerts.</value>
        [DataMember(Name = "address_to_link", EmitDefaultValue = false)]
        public AddressToLinkEnum? AddressToLink { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LogAutomationLogAutomationSolera" /> class.
        /// </summary>
        /// <param name="soleraCaptureStackIntegration">Enable solera capture stack integration and enter configuration mode..</param>
        /// <param name="server">server.</param>
        /// <param name="protocol">Set solera server protocol..</param>
        /// <param name="port">Set solera port..</param>
        /// <param name="deepseeBaseUrl">Set deepsee base URL..</param>
        /// <param name="pcapBaseUrl">Set PCAP base URL..</param>
        /// <param name="linkIcon">Set base64-encoded link icon..</param>
        /// <param name="addressToLink">Set default zone for address to link from email alerts..</param>
        public LogAutomationLogAutomationSolera(bool soleraCaptureStackIntegration = default(bool), LogAutomationLogAutomationSoleraServer server = default(LogAutomationLogAutomationSoleraServer), ProtocolEnum? protocol = default(ProtocolEnum?), decimal port = default(decimal), string deepseeBaseUrl = default(string), string pcapBaseUrl = default(string), string linkIcon = default(string), AddressToLinkEnum? addressToLink = default(AddressToLinkEnum?))
        {
            this.SoleraCaptureStackIntegration = soleraCaptureStackIntegration;
            this.Server = server;
            this.Protocol = protocol;
            this.Port = port;
            this.DeepseeBaseUrl = deepseeBaseUrl;
            this.PcapBaseUrl = pcapBaseUrl;
            this.LinkIcon = linkIcon;
            this.AddressToLink = addressToLink;
        }

        /// <summary>
        /// Enable solera capture stack integration and enter configuration mode.
        /// </summary>
        /// <value>Enable solera capture stack integration and enter configuration mode.</value>
        [DataMember(Name = "solera_capture_stack_integration", EmitDefaultValue = true)]
        public bool SoleraCaptureStackIntegration { get; set; }

        /// <summary>
        /// Gets or Sets Server
        /// </summary>
        [DataMember(Name = "server", EmitDefaultValue = false)]
        public LogAutomationLogAutomationSoleraServer Server { get; set; }

        /// <summary>
        /// Set solera port.
        /// </summary>
        /// <value>Set solera port.</value>
        [DataMember(Name = "port", EmitDefaultValue = false)]
        public decimal Port { get; set; }

        /// <summary>
        /// Set deepsee base URL.
        /// </summary>
        /// <value>Set deepsee base URL.</value>
        [DataMember(Name = "deepsee_base_url", EmitDefaultValue = false)]
        public string DeepseeBaseUrl { get; set; }

        /// <summary>
        /// Set PCAP base URL.
        /// </summary>
        /// <value>Set PCAP base URL.</value>
        [DataMember(Name = "pcap_base_url", EmitDefaultValue = false)]
        public string PcapBaseUrl { get; set; }

        /// <summary>
        /// Set base64-encoded link icon.
        /// </summary>
        /// <value>Set base64-encoded link icon.</value>
        [DataMember(Name = "link_icon", EmitDefaultValue = false)]
        public string LinkIcon { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LogAutomationLogAutomationSolera {\n");
            sb.Append("  SoleraCaptureStackIntegration: ").Append(SoleraCaptureStackIntegration).Append("\n");
            sb.Append("  Server: ").Append(Server).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  DeepseeBaseUrl: ").Append(DeepseeBaseUrl).Append("\n");
            sb.Append("  PcapBaseUrl: ").Append(PcapBaseUrl).Append("\n");
            sb.Append("  LinkIcon: ").Append(LinkIcon).Append("\n");
            sb.Append("  AddressToLink: ").Append(AddressToLink).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogAutomationLogAutomationSolera);
        }

        /// <summary>
        /// Returns true if LogAutomationLogAutomationSolera instances are equal
        /// </summary>
        /// <param name="input">Instance of LogAutomationLogAutomationSolera to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogAutomationLogAutomationSolera input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SoleraCaptureStackIntegration == input.SoleraCaptureStackIntegration ||
                    this.SoleraCaptureStackIntegration.Equals(input.SoleraCaptureStackIntegration)
                ) && 
                (
                    this.Server == input.Server ||
                    (this.Server != null &&
                    this.Server.Equals(input.Server))
                ) && 
                (
                    this.Protocol == input.Protocol ||
                    this.Protocol.Equals(input.Protocol)
                ) && 
                (
                    this.Port == input.Port ||
                    this.Port.Equals(input.Port)
                ) && 
                (
                    this.DeepseeBaseUrl == input.DeepseeBaseUrl ||
                    (this.DeepseeBaseUrl != null &&
                    this.DeepseeBaseUrl.Equals(input.DeepseeBaseUrl))
                ) && 
                (
                    this.PcapBaseUrl == input.PcapBaseUrl ||
                    (this.PcapBaseUrl != null &&
                    this.PcapBaseUrl.Equals(input.PcapBaseUrl))
                ) && 
                (
                    this.LinkIcon == input.LinkIcon ||
                    (this.LinkIcon != null &&
                    this.LinkIcon.Equals(input.LinkIcon))
                ) && 
                (
                    this.AddressToLink == input.AddressToLink ||
                    this.AddressToLink.Equals(input.AddressToLink)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SoleraCaptureStackIntegration.GetHashCode();
                if (this.Server != null)
                {
                    hashCode = (hashCode * 59) + this.Server.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Protocol.GetHashCode();
                hashCode = (hashCode * 59) + this.Port.GetHashCode();
                if (this.DeepseeBaseUrl != null)
                {
                    hashCode = (hashCode * 59) + this.DeepseeBaseUrl.GetHashCode();
                }
                if (this.PcapBaseUrl != null)
                {
                    hashCode = (hashCode * 59) + this.PcapBaseUrl.GetHashCode();
                }
                if (this.LinkIcon != null)
                {
                    hashCode = (hashCode * 59) + this.LinkIcon.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AddressToLink.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
