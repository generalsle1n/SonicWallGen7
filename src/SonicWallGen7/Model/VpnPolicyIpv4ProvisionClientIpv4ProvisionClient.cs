/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// SonicWALL auto provisoning client VPN policy.
    /// </summary>
    [DataContract(Name = "vpn_policy_ipv4_provision_client_ipv4_provision_client")]
    public partial class VpnPolicyIpv4ProvisionClientIpv4ProvisionClient : IEquatable<VpnPolicyIpv4ProvisionClientIpv4ProvisionClient>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VpnPolicyIpv4ProvisionClientIpv4ProvisionClient" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VpnPolicyIpv4ProvisionClientIpv4ProvisionClient() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VpnPolicyIpv4ProvisionClientIpv4ProvisionClient" /> class.
        /// </summary>
        /// <param name="name">Policy name. (required).</param>
        /// <param name="enable">Enable VPN policy..</param>
        /// <param name="authMethod">authMethod.</param>
        /// <param name="gateway">gateway.</param>
        /// <param name="userName">User name.</param>
        /// <param name="userPassword">User password.</param>
        public VpnPolicyIpv4ProvisionClientIpv4ProvisionClient(string name = default(string), bool enable = default(bool), VpnPolicyIpv4ProvisionClientIpv4ProvisionClientAuthMethod authMethod = default(VpnPolicyIpv4ProvisionClientIpv4ProvisionClientAuthMethod), VpnPolicyIpv4TunnelInterfaceIpv4TunnelInterfaceGateway gateway = default(VpnPolicyIpv4TunnelInterfaceIpv4TunnelInterfaceGateway), string userName = default(string), string userPassword = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for VpnPolicyIpv4ProvisionClientIpv4ProvisionClient and cannot be null");
            }
            this.Name = name;
            this.Enable = enable;
            this.AuthMethod = authMethod;
            this.Gateway = gateway;
            this.UserName = userName;
            this.UserPassword = userPassword;
        }

        /// <summary>
        /// Policy name.
        /// </summary>
        /// <value>Policy name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Enable VPN policy.
        /// </summary>
        /// <value>Enable VPN policy.</value>
        [DataMember(Name = "enable", EmitDefaultValue = true)]
        public bool Enable { get; set; }

        /// <summary>
        /// Gets or Sets AuthMethod
        /// </summary>
        [DataMember(Name = "auth_method", EmitDefaultValue = false)]
        public VpnPolicyIpv4ProvisionClientIpv4ProvisionClientAuthMethod AuthMethod { get; set; }

        /// <summary>
        /// Gets or Sets Gateway
        /// </summary>
        [DataMember(Name = "gateway", EmitDefaultValue = false)]
        public VpnPolicyIpv4TunnelInterfaceIpv4TunnelInterfaceGateway Gateway { get; set; }

        /// <summary>
        /// User name
        /// </summary>
        /// <value>User name</value>
        [DataMember(Name = "user_name", EmitDefaultValue = false)]
        public string UserName { get; set; }

        /// <summary>
        /// User password
        /// </summary>
        /// <value>User password</value>
        [DataMember(Name = "user_password", EmitDefaultValue = false)]
        public string UserPassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VpnPolicyIpv4ProvisionClientIpv4ProvisionClient {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  AuthMethod: ").Append(AuthMethod).Append("\n");
            sb.Append("  Gateway: ").Append(Gateway).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  UserPassword: ").Append(UserPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VpnPolicyIpv4ProvisionClientIpv4ProvisionClient);
        }

        /// <summary>
        /// Returns true if VpnPolicyIpv4ProvisionClientIpv4ProvisionClient instances are equal
        /// </summary>
        /// <param name="input">Instance of VpnPolicyIpv4ProvisionClientIpv4ProvisionClient to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VpnPolicyIpv4ProvisionClientIpv4ProvisionClient input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.AuthMethod == input.AuthMethod ||
                    (this.AuthMethod != null &&
                    this.AuthMethod.Equals(input.AuthMethod))
                ) && 
                (
                    this.Gateway == input.Gateway ||
                    (this.Gateway != null &&
                    this.Gateway.Equals(input.Gateway))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.UserPassword == input.UserPassword ||
                    (this.UserPassword != null &&
                    this.UserPassword.Equals(input.UserPassword))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Enable.GetHashCode();
                if (this.AuthMethod != null)
                {
                    hashCode = (hashCode * 59) + this.AuthMethod.GetHashCode();
                }
                if (this.Gateway != null)
                {
                    hashCode = (hashCode * 59) + this.Gateway.GetHashCode();
                }
                if (this.UserName != null)
                {
                    hashCode = (hashCode * 59) + this.UserName.GetHashCode();
                }
                if (this.UserPassword != null)
                {
                    hashCode = (hashCode * 59) + this.UserPassword.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
