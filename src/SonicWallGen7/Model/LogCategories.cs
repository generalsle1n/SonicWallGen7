/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// Log categories congifuration.
    /// </summary>
    [DataContract(Name = "log_categories")]
    public partial class LogCategories : IEquatable<LogCategories>, IValidatableObject
    {
        /// <summary>
        /// Set priority level.
        /// </summary>
        /// <value>Set priority level.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PriorityLevelEnum
        {
            /// <summary>
            /// Enum Mixed for value: mixed
            /// </summary>
            [EnumMember(Value = "mixed")]
            Mixed = 1,

            /// <summary>
            /// Enum Emergency for value: emergency
            /// </summary>
            [EnumMember(Value = "emergency")]
            Emergency = 2,

            /// <summary>
            /// Enum Alert for value: alert
            /// </summary>
            [EnumMember(Value = "alert")]
            Alert = 3,

            /// <summary>
            /// Enum Critical for value: critical
            /// </summary>
            [EnumMember(Value = "critical")]
            Critical = 4,

            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")]
            Error = 5,

            /// <summary>
            /// Enum Warning for value: warning
            /// </summary>
            [EnumMember(Value = "warning")]
            Warning = 6,

            /// <summary>
            /// Enum Notice for value: notice
            /// </summary>
            [EnumMember(Value = "notice")]
            Notice = 7,

            /// <summary>
            /// Enum Inform for value: inform
            /// </summary>
            [EnumMember(Value = "inform")]
            Inform = 8,

            /// <summary>
            /// Enum Debug for value: debug
            /// </summary>
            [EnumMember(Value = "debug")]
            Debug = 9
        }


        /// <summary>
        /// Set priority level.
        /// </summary>
        /// <value>Set priority level.</value>
        [DataMember(Name = "priority_level", EmitDefaultValue = false)]
        public PriorityLevelEnum? PriorityLevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LogCategories" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LogCategories() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LogCategories" /> class.
        /// </summary>
        /// <param name="name">Name. (required).</param>
        /// <param name="id">ID..</param>
        /// <param name="priorityLevel">Set priority level..</param>
        /// <param name="logMonitor">logMonitor.</param>
        /// <param name="emailAlert">emailAlert.</param>
        /// <param name="syslog">syslog.</param>
        /// <param name="trap">trap.</param>
        /// <param name="ipfix">ipfix.</param>
        /// <param name="eventProfile">eventProfile.</param>
        /// <param name="logDigest">logDigest.</param>
        /// <param name="color">color.</param>
        /// <param name="alertEmail">alertEmail.</param>
        /// <param name="logEmail">Set e-mail address to send log of this category to..</param>
        public LogCategories(string name = default(string), decimal id = default(decimal), PriorityLevelEnum? priorityLevel = default(PriorityLevelEnum?), LogGlobalCategoriesLogCategoriesGlobalCategoryAttributeLogMonitor logMonitor = default(LogGlobalCategoriesLogCategoriesGlobalCategoryAttributeLogMonitor), LogGlobalCategoriesLogCategoriesGlobalCategoryAttributeEmailAlert emailAlert = default(LogGlobalCategoriesLogCategoriesGlobalCategoryAttributeEmailAlert), LogGlobalCategoriesLogCategoriesGlobalCategoryAttributeSyslog syslog = default(LogGlobalCategoriesLogCategoriesGlobalCategoryAttributeSyslog), LogCategoriesTrap trap = default(LogCategoriesTrap), LogCategoriesIpfix ipfix = default(LogCategoriesIpfix), LogCategoriesEventProfile eventProfile = default(LogCategoriesEventProfile), LogCategoriesLogDigest logDigest = default(LogCategoriesLogDigest), LogCategoriesColor color = default(LogCategoriesColor), LogCategoriesAlertEmail alertEmail = default(LogCategoriesAlertEmail), string logEmail = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for LogCategories and cannot be null");
            }
            this.Name = name;
            this.Id = id;
            this.PriorityLevel = priorityLevel;
            this.LogMonitor = logMonitor;
            this.EmailAlert = emailAlert;
            this.Syslog = syslog;
            this.Trap = trap;
            this.Ipfix = ipfix;
            this.EventProfile = eventProfile;
            this.LogDigest = logDigest;
            this.Color = color;
            this.AlertEmail = alertEmail;
            this.LogEmail = logEmail;
        }

        /// <summary>
        /// Name.
        /// </summary>
        /// <value>Name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// ID.
        /// </summary>
        /// <value>ID.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public decimal Id { get; set; }

        /// <summary>
        /// Gets or Sets LogMonitor
        /// </summary>
        [DataMember(Name = "log_monitor", EmitDefaultValue = true)]
        public LogGlobalCategoriesLogCategoriesGlobalCategoryAttributeLogMonitor LogMonitor { get; set; }

        /// <summary>
        /// Gets or Sets EmailAlert
        /// </summary>
        [DataMember(Name = "email_alert", EmitDefaultValue = true)]
        public LogGlobalCategoriesLogCategoriesGlobalCategoryAttributeEmailAlert EmailAlert { get; set; }

        /// <summary>
        /// Gets or Sets Syslog
        /// </summary>
        [DataMember(Name = "syslog", EmitDefaultValue = true)]
        public LogGlobalCategoriesLogCategoriesGlobalCategoryAttributeSyslog Syslog { get; set; }

        /// <summary>
        /// Gets or Sets Trap
        /// </summary>
        [DataMember(Name = "trap", EmitDefaultValue = true)]
        public LogCategoriesTrap Trap { get; set; }

        /// <summary>
        /// Gets or Sets Ipfix
        /// </summary>
        [DataMember(Name = "ipfix", EmitDefaultValue = true)]
        public LogCategoriesIpfix Ipfix { get; set; }

        /// <summary>
        /// Gets or Sets EventProfile
        /// </summary>
        [DataMember(Name = "event_profile", EmitDefaultValue = false)]
        public LogCategoriesEventProfile EventProfile { get; set; }

        /// <summary>
        /// Gets or Sets LogDigest
        /// </summary>
        [DataMember(Name = "log_digest", EmitDefaultValue = false)]
        public LogCategoriesLogDigest LogDigest { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name = "color", EmitDefaultValue = false)]
        public LogCategoriesColor Color { get; set; }

        /// <summary>
        /// Gets or Sets AlertEmail
        /// </summary>
        [DataMember(Name = "alert_email", EmitDefaultValue = false)]
        public LogCategoriesAlertEmail AlertEmail { get; set; }

        /// <summary>
        /// Set e-mail address to send log of this category to.
        /// </summary>
        /// <value>Set e-mail address to send log of this category to.</value>
        [DataMember(Name = "log_email", EmitDefaultValue = false)]
        public string LogEmail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LogCategories {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PriorityLevel: ").Append(PriorityLevel).Append("\n");
            sb.Append("  LogMonitor: ").Append(LogMonitor).Append("\n");
            sb.Append("  EmailAlert: ").Append(EmailAlert).Append("\n");
            sb.Append("  Syslog: ").Append(Syslog).Append("\n");
            sb.Append("  Trap: ").Append(Trap).Append("\n");
            sb.Append("  Ipfix: ").Append(Ipfix).Append("\n");
            sb.Append("  EventProfile: ").Append(EventProfile).Append("\n");
            sb.Append("  LogDigest: ").Append(LogDigest).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  AlertEmail: ").Append(AlertEmail).Append("\n");
            sb.Append("  LogEmail: ").Append(LogEmail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogCategories);
        }

        /// <summary>
        /// Returns true if LogCategories instances are equal
        /// </summary>
        /// <param name="input">Instance of LogCategories to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogCategories input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.PriorityLevel == input.PriorityLevel ||
                    this.PriorityLevel.Equals(input.PriorityLevel)
                ) && 
                (
                    this.LogMonitor == input.LogMonitor ||
                    (this.LogMonitor != null &&
                    this.LogMonitor.Equals(input.LogMonitor))
                ) && 
                (
                    this.EmailAlert == input.EmailAlert ||
                    (this.EmailAlert != null &&
                    this.EmailAlert.Equals(input.EmailAlert))
                ) && 
                (
                    this.Syslog == input.Syslog ||
                    (this.Syslog != null &&
                    this.Syslog.Equals(input.Syslog))
                ) && 
                (
                    this.Trap == input.Trap ||
                    (this.Trap != null &&
                    this.Trap.Equals(input.Trap))
                ) && 
                (
                    this.Ipfix == input.Ipfix ||
                    (this.Ipfix != null &&
                    this.Ipfix.Equals(input.Ipfix))
                ) && 
                (
                    this.EventProfile == input.EventProfile ||
                    (this.EventProfile != null &&
                    this.EventProfile.Equals(input.EventProfile))
                ) && 
                (
                    this.LogDigest == input.LogDigest ||
                    (this.LogDigest != null &&
                    this.LogDigest.Equals(input.LogDigest))
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.AlertEmail == input.AlertEmail ||
                    (this.AlertEmail != null &&
                    this.AlertEmail.Equals(input.AlertEmail))
                ) && 
                (
                    this.LogEmail == input.LogEmail ||
                    (this.LogEmail != null &&
                    this.LogEmail.Equals(input.LogEmail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.PriorityLevel.GetHashCode();
                if (this.LogMonitor != null)
                {
                    hashCode = (hashCode * 59) + this.LogMonitor.GetHashCode();
                }
                if (this.EmailAlert != null)
                {
                    hashCode = (hashCode * 59) + this.EmailAlert.GetHashCode();
                }
                if (this.Syslog != null)
                {
                    hashCode = (hashCode * 59) + this.Syslog.GetHashCode();
                }
                if (this.Trap != null)
                {
                    hashCode = (hashCode * 59) + this.Trap.GetHashCode();
                }
                if (this.Ipfix != null)
                {
                    hashCode = (hashCode * 59) + this.Ipfix.GetHashCode();
                }
                if (this.EventProfile != null)
                {
                    hashCode = (hashCode * 59) + this.EventProfile.GetHashCode();
                }
                if (this.LogDigest != null)
                {
                    hashCode = (hashCode * 59) + this.LogDigest.GetHashCode();
                }
                if (this.Color != null)
                {
                    hashCode = (hashCode * 59) + this.Color.GetHashCode();
                }
                if (this.AlertEmail != null)
                {
                    hashCode = (hashCode * 59) + this.AlertEmail.GetHashCode();
                }
                if (this.LogEmail != null)
                {
                    hashCode = (hashCode * 59) + this.LogEmail.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
