/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SonicWallGen7.Client.OpenAPIDateConverter;

namespace SonicWallGen7.Model
{
    /// <summary>
    /// action-val for replaying individual packets.
    /// </summary>
    [DataContract(Name = "packet_replay_individual_replay_packet_replay_individual_replay_action_val")]
    public partial class PacketReplayIndividualReplayPacketReplayIndividualReplayActionVal : IEquatable<PacketReplayIndividualReplayPacketReplayIndividualReplayActionVal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PacketReplayIndividualReplayPacketReplayIndividualReplayActionVal" /> class.
        /// </summary>
        /// <param name="packetReplayMode">Enter Packet Replay Mode. * Set to null to represent an unconfigured state..</param>
        /// <param name="destIface">Enter Recieving Interface. * Set to null to represent an unconfigured state..</param>
        /// <param name="packetId">Enter Packet ID. * Set to null to represent an unconfigured state..</param>
        /// <param name="flowId">Enter flow id. * Set to null to represent an unconfigured state..</param>
        /// <param name="timestamp">Enter timestamp. * Set to null to represent an unconfigured state..</param>
        public PacketReplayIndividualReplayPacketReplayIndividualReplayActionVal(decimal? packetReplayMode = default(decimal?), decimal? destIface = default(decimal?), decimal? packetId = default(decimal?), decimal? flowId = default(decimal?), decimal? timestamp = default(decimal?))
        {
            this.PacketReplayMode = packetReplayMode;
            this.DestIface = destIface;
            this.PacketId = packetId;
            this.FlowId = flowId;
            this.Timestamp = timestamp;
        }

        /// <summary>
        /// Enter Packet Replay Mode. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Enter Packet Replay Mode. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "packet_replay_mode", EmitDefaultValue = true)]
        public decimal? PacketReplayMode { get; set; }

        /// <summary>
        /// Enter Recieving Interface. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Enter Recieving Interface. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "dest_iface", EmitDefaultValue = true)]
        public decimal? DestIface { get; set; }

        /// <summary>
        /// Enter Packet ID. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Enter Packet ID. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "packet_id", EmitDefaultValue = true)]
        public decimal? PacketId { get; set; }

        /// <summary>
        /// Enter flow id. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Enter flow id. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "flow_id", EmitDefaultValue = true)]
        public decimal? FlowId { get; set; }

        /// <summary>
        /// Enter timestamp. * Set to null to represent an unconfigured state.
        /// </summary>
        /// <value>Enter timestamp. * Set to null to represent an unconfigured state.</value>
        [DataMember(Name = "timestamp", EmitDefaultValue = true)]
        public decimal? Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PacketReplayIndividualReplayPacketReplayIndividualReplayActionVal {\n");
            sb.Append("  PacketReplayMode: ").Append(PacketReplayMode).Append("\n");
            sb.Append("  DestIface: ").Append(DestIface).Append("\n");
            sb.Append("  PacketId: ").Append(PacketId).Append("\n");
            sb.Append("  FlowId: ").Append(FlowId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PacketReplayIndividualReplayPacketReplayIndividualReplayActionVal);
        }

        /// <summary>
        /// Returns true if PacketReplayIndividualReplayPacketReplayIndividualReplayActionVal instances are equal
        /// </summary>
        /// <param name="input">Instance of PacketReplayIndividualReplayPacketReplayIndividualReplayActionVal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PacketReplayIndividualReplayPacketReplayIndividualReplayActionVal input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PacketReplayMode == input.PacketReplayMode ||
                    (this.PacketReplayMode != null &&
                    this.PacketReplayMode.Equals(input.PacketReplayMode))
                ) && 
                (
                    this.DestIface == input.DestIface ||
                    (this.DestIface != null &&
                    this.DestIface.Equals(input.DestIface))
                ) && 
                (
                    this.PacketId == input.PacketId ||
                    (this.PacketId != null &&
                    this.PacketId.Equals(input.PacketId))
                ) && 
                (
                    this.FlowId == input.FlowId ||
                    (this.FlowId != null &&
                    this.FlowId.Equals(input.FlowId))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PacketReplayMode != null)
                {
                    hashCode = (hashCode * 59) + this.PacketReplayMode.GetHashCode();
                }
                if (this.DestIface != null)
                {
                    hashCode = (hashCode * 59) + this.DestIface.GetHashCode();
                }
                if (this.PacketId != null)
                {
                    hashCode = (hashCode * 59) + this.PacketId.GetHashCode();
                }
                if (this.FlowId != null)
                {
                    hashCode = (hashCode * 59) + this.FlowId.GetHashCode();
                }
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
