/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using SonicWallGen7.Model;
using SonicWallGen7.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace SonicWallGen7.Test.Model
{
    /// <summary>
    ///  Class for testing DiagAdvancedFqdnDynAddrObjDiagAdvancedFqdnDynamicAddressObject
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class DiagAdvancedFqdnDynAddrObjDiagAdvancedFqdnDynamicAddressObjectTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for DiagAdvancedFqdnDynAddrObjDiagAdvancedFqdnDynamicAddressObject
        //private DiagAdvancedFqdnDynAddrObjDiagAdvancedFqdnDynamicAddressObject instance;

        public DiagAdvancedFqdnDynAddrObjDiagAdvancedFqdnDynamicAddressObjectTests()
        {
            // TODO uncomment below to create an instance of DiagAdvancedFqdnDynAddrObjDiagAdvancedFqdnDynamicAddressObject
            //instance = new DiagAdvancedFqdnDynAddrObjDiagAdvancedFqdnDynamicAddressObject();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DiagAdvancedFqdnDynAddrObjDiagAdvancedFqdnDynamicAddressObject
        /// </summary>
        [Fact]
        public void DiagAdvancedFqdnDynAddrObjDiagAdvancedFqdnDynamicAddressObjectInstanceTest()
        {
            // TODO uncomment below to test "IsType" DiagAdvancedFqdnDynAddrObjDiagAdvancedFqdnDynamicAddressObject
            //Assert.IsType<DiagAdvancedFqdnDynAddrObjDiagAdvancedFqdnDynamicAddressObject>(instance);
        }

        /// <summary>
        /// Test the property 'CacheSonicDnsReply'
        /// </summary>
        [Fact]
        public void CacheSonicDnsReplyTest()
        {
            // TODO unit test for the property 'CacheSonicDnsReply'
        }

        /// <summary>
        /// Test the property 'OffsetForFqdnObjects'
        /// </summary>
        [Fact]
        public void OffsetForFqdnObjectsTest()
        {
            // TODO unit test for the property 'OffsetForFqdnObjects'
        }

        /// <summary>
        /// Test the property 'RefreshSubDomains'
        /// </summary>
        [Fact]
        public void RefreshSubDomainsTest()
        {
            // TODO unit test for the property 'RefreshSubDomains'
        }

        /// <summary>
        /// Test the property 'ExpiredHostDeletion'
        /// </summary>
        [Fact]
        public void ExpiredHostDeletionTest()
        {
            // TODO unit test for the property 'ExpiredHostDeletion'
        }

        /// <summary>
        /// Test the property 'RetainExpiredFqdnHosts'
        /// </summary>
        [Fact]
        public void RetainExpiredFqdnHostsTest()
        {
            // TODO unit test for the property 'RetainExpiredFqdnHosts'
        }

        /// <summary>
        /// Test the property 'UnlimitedQueries'
        /// </summary>
        [Fact]
        public void UnlimitedQueriesTest()
        {
            // TODO unit test for the property 'UnlimitedQueries'
        }

        /// <summary>
        /// Test the property 'StopSonicDnsQueries'
        /// </summary>
        [Fact]
        public void StopSonicDnsQueriesTest()
        {
            // TODO unit test for the property 'StopSonicDnsQueries'
        }

        /// <summary>
        /// Test the property 'MaxRetryThreshold'
        /// </summary>
        [Fact]
        public void MaxRetryThresholdTest()
        {
            // TODO unit test for the property 'MaxRetryThreshold'
        }

        /// <summary>
        /// Test the property 'MinAllowedTtl'
        /// </summary>
        [Fact]
        public void MinAllowedTtlTest()
        {
            // TODO unit test for the property 'MinAllowedTtl'
        }
    }
}
