/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using SonicWallGen7.Model;
using SonicWallGen7.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace SonicWallGen7.Test.Model
{
    /// <summary>
    ///  Class for testing DiagAdvancedSecurityServiceDiagAdvancedSecurityService
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class DiagAdvancedSecurityServiceDiagAdvancedSecurityServiceTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for DiagAdvancedSecurityServiceDiagAdvancedSecurityService
        //private DiagAdvancedSecurityServiceDiagAdvancedSecurityService instance;

        public DiagAdvancedSecurityServiceDiagAdvancedSecurityServiceTests()
        {
            // TODO uncomment below to create an instance of DiagAdvancedSecurityServiceDiagAdvancedSecurityService
            //instance = new DiagAdvancedSecurityServiceDiagAdvancedSecurityService();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DiagAdvancedSecurityServiceDiagAdvancedSecurityService
        /// </summary>
        [Fact]
        public void DiagAdvancedSecurityServiceDiagAdvancedSecurityServiceInstanceTest()
        {
            // TODO uncomment below to test "IsType" DiagAdvancedSecurityServiceDiagAdvancedSecurityService
            //Assert.IsType<DiagAdvancedSecurityServiceDiagAdvancedSecurityService>(instance);
        }

        /// <summary>
        /// Test the property 'DpiEngine'
        /// </summary>
        [Fact]
        public void DpiEngineTest()
        {
            // TODO unit test for the property 'DpiEngine'
        }

        /// <summary>
        /// Test the property 'BidirectionalIps'
        /// </summary>
        [Fact]
        public void BidirectionalIpsTest()
        {
            // TODO unit test for the property 'BidirectionalIps'
        }

        /// <summary>
        /// Test the property 'DpiIpFragmentReassembly'
        /// </summary>
        [Fact]
        public void DpiIpFragmentReassemblyTest()
        {
            // TODO unit test for the property 'DpiIpFragmentReassembly'
        }

        /// <summary>
        /// Test the property 'DevDebug'
        /// </summary>
        [Fact]
        public void DevDebugTest()
        {
            // TODO unit test for the property 'DevDebug'
        }

        /// <summary>
        /// Test the property 'TcpSequenceAdjustment'
        /// </summary>
        [Fact]
        public void TcpSequenceAdjustmentTest()
        {
            // TODO unit test for the property 'TcpSequenceAdjustment'
        }

        /// <summary>
        /// Test the property 'ProxyEmailPackets'
        /// </summary>
        [Fact]
        public void ProxyEmailPacketsTest()
        {
            // TODO unit test for the property 'ProxyEmailPackets'
        }

        /// <summary>
        /// Test the property 'SmtpChunkingModification'
        /// </summary>
        [Fact]
        public void SmtpChunkingModificationTest()
        {
            // TODO unit test for the property 'SmtpChunkingModification'
        }

        /// <summary>
        /// Test the property 'Pop3AutoDeletion'
        /// </summary>
        [Fact]
        public void Pop3AutoDeletionTest()
        {
            // TODO unit test for the property 'Pop3AutoDeletion'
        }

        /// <summary>
        /// Test the property 'Pop3UidlRewriting'
        /// </summary>
        [Fact]
        public void Pop3UidlRewritingTest()
        {
            // TODO unit test for the property 'Pop3UidlRewriting'
        }

        /// <summary>
        /// Test the property 'SmbReadWriteEnforcement'
        /// </summary>
        [Fact]
        public void SmbReadWriteEnforcementTest()
        {
            // TODO unit test for the property 'SmbReadWriteEnforcement'
        }

        /// <summary>
        /// Test the property 'KeepHttpAcceptRangeBytes'
        /// </summary>
        [Fact]
        public void KeepHttpAcceptRangeBytesTest()
        {
            // TODO unit test for the property 'KeepHttpAcceptRangeBytes'
        }

        /// <summary>
        /// Test the property 'LogVirusUri'
        /// </summary>
        [Fact]
        public void LogVirusUriTest()
        {
            // TODO unit test for the property 'LogVirusUri'
        }

        /// <summary>
        /// Test the property 'OffsetQualifierSignature'
        /// </summary>
        [Fact]
        public void OffsetQualifierSignatureTest()
        {
            // TODO unit test for the property 'OffsetQualifierSignature'
        }

        /// <summary>
        /// Test the property 'MinimumHttpHeaderLength'
        /// </summary>
        [Fact]
        public void MinimumHttpHeaderLengthTest()
        {
            // TODO unit test for the property 'MinimumHttpHeaderLength'
        }

        /// <summary>
        /// Test the property 'IncrementalSignatureUpdates'
        /// </summary>
        [Fact]
        public void IncrementalSignatureUpdatesTest()
        {
            // TODO unit test for the property 'IncrementalSignatureUpdates'
        }

        /// <summary>
        /// Test the property 'HandleHttp2'
        /// </summary>
        [Fact]
        public void HandleHttp2Test()
        {
            // TODO unit test for the property 'HandleHttp2'
        }

        /// <summary>
        /// Test the property 'ForceUtmOffload'
        /// </summary>
        [Fact]
        public void ForceUtmOffloadTest()
        {
            // TODO unit test for the property 'ForceUtmOffload'
        }

        /// <summary>
        /// Test the property 'UtmTrafficOffload'
        /// </summary>
        [Fact]
        public void UtmTrafficOffloadTest()
        {
            // TODO unit test for the property 'UtmTrafficOffload'
        }

        /// <summary>
        /// Test the property 'LimitDpiTcpWindowAdvertisement'
        /// </summary>
        [Fact]
        public void LimitDpiTcpWindowAdvertisementTest()
        {
            // TODO unit test for the property 'LimitDpiTcpWindowAdvertisement'
        }

        /// <summary>
        /// Test the property 'ThresholdLimit'
        /// </summary>
        [Fact]
        public void ThresholdLimitTest()
        {
            // TODO unit test for the property 'ThresholdLimit'
        }

        /// <summary>
        /// Test the property 'MaximumRegexAutomatonSize'
        /// </summary>
        [Fact]
        public void MaximumRegexAutomatonSizeTest()
        {
            // TODO unit test for the property 'MaximumRegexAutomatonSize'
        }

        /// <summary>
        /// Test the property 'SignatureDatabaseReload'
        /// </summary>
        [Fact]
        public void SignatureDatabaseReloadTest()
        {
            // TODO unit test for the property 'SignatureDatabaseReload'
        }

        /// <summary>
        /// Test the property 'ProcessIpsSignatures'
        /// </summary>
        [Fact]
        public void ProcessIpsSignaturesTest()
        {
            // TODO unit test for the property 'ProcessIpsSignatures'
        }

        /// <summary>
        /// Test the property 'ProcessGavSignatures'
        /// </summary>
        [Fact]
        public void ProcessGavSignaturesTest()
        {
            // TODO unit test for the property 'ProcessGavSignatures'
        }

        /// <summary>
        /// Test the property 'ProcessAntiSpywareSignatures'
        /// </summary>
        [Fact]
        public void ProcessAntiSpywareSignaturesTest()
        {
            // TODO unit test for the property 'ProcessAntiSpywareSignatures'
        }

        /// <summary>
        /// Test the property 'ProcessAppSignatures'
        /// </summary>
        [Fact]
        public void ProcessAppSignaturesTest()
        {
            // TODO unit test for the property 'ProcessAppSignatures'
        }

        /// <summary>
        /// Test the property 'OptimalValue'
        /// </summary>
        [Fact]
        public void OptimalValueTest()
        {
            // TODO unit test for the property 'OptimalValue'
        }

        /// <summary>
        /// Test the property 'LimitIpsCftScan'
        /// </summary>
        [Fact]
        public void LimitIpsCftScanTest()
        {
            // TODO unit test for the property 'LimitIpsCftScan'
        }

        /// <summary>
        /// Test the property 'EnforceCfsHostTagSearch'
        /// </summary>
        [Fact]
        public void EnforceCfsHostTagSearchTest()
        {
            // TODO unit test for the property 'EnforceCfsHostTagSearch'
        }

        /// <summary>
        /// Test the property 'LocalCfsServer'
        /// </summary>
        [Fact]
        public void LocalCfsServerTest()
        {
            // TODO unit test for the property 'LocalCfsServer'
        }

        /// <summary>
        /// Test the property 'CloudAvServer'
        /// </summary>
        [Fact]
        public void CloudAvServerTest()
        {
            // TODO unit test for the property 'CloudAvServer'
        }
    }
}
