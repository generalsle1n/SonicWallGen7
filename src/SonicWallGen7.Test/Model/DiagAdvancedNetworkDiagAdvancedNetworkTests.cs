/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using SonicWallGen7.Model;
using SonicWallGen7.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace SonicWallGen7.Test.Model
{
    /// <summary>
    ///  Class for testing DiagAdvancedNetworkDiagAdvancedNetwork
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class DiagAdvancedNetworkDiagAdvancedNetworkTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for DiagAdvancedNetworkDiagAdvancedNetwork
        //private DiagAdvancedNetworkDiagAdvancedNetwork instance;

        public DiagAdvancedNetworkDiagAdvancedNetworkTests()
        {
            // TODO uncomment below to create an instance of DiagAdvancedNetworkDiagAdvancedNetwork
            //instance = new DiagAdvancedNetworkDiagAdvancedNetwork();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DiagAdvancedNetworkDiagAdvancedNetwork
        /// </summary>
        [Fact]
        public void DiagAdvancedNetworkDiagAdvancedNetworkInstanceTest()
        {
            // TODO uncomment below to test "IsType" DiagAdvancedNetworkDiagAdvancedNetwork
            //Assert.IsType<DiagAdvancedNetworkDiagAdvancedNetwork>(instance);
        }

        /// <summary>
        /// Test the property 'FlushAlternatePathFlows'
        /// </summary>
        [Fact]
        public void FlushAlternatePathFlowsTest()
        {
            // TODO unit test for the property 'FlushAlternatePathFlows'
        }

        /// <summary>
        /// Test the property 'UpdateRouteVersion'
        /// </summary>
        [Fact]
        public void UpdateRouteVersionTest()
        {
            // TODO unit test for the property 'UpdateRouteVersion'
        }

        /// <summary>
        /// Test the property 'TcpPacketOptionTagging'
        /// </summary>
        [Fact]
        public void TcpPacketOptionTaggingTest()
        {
            // TODO unit test for the property 'TcpPacketOptionTagging'
        }

        /// <summary>
        /// Test the property 'FixMalformedTcpHeaders'
        /// </summary>
        [Fact]
        public void FixMalformedTcpHeadersTest()
        {
            // TODO unit test for the property 'FixMalformedTcpHeaders'
        }

        /// <summary>
        /// Test the property 'SequenceNumberRandomization'
        /// </summary>
        [Fact]
        public void SequenceNumberRandomizationTest()
        {
            // TODO unit test for the property 'SequenceNumberRandomization'
        }

        /// <summary>
        /// Test the property 'SynValidation'
        /// </summary>
        [Fact]
        public void SynValidationTest()
        {
            // TODO unit test for the property 'SynValidation'
        }

        /// <summary>
        /// Test the property 'DebounceInterfaceStateChanges'
        /// </summary>
        [Fact]
        public void DebounceInterfaceStateChangesTest()
        {
            // TODO unit test for the property 'DebounceInterfaceStateChanges'
        }

        /// <summary>
        /// Test the property 'ClearDfBit'
        /// </summary>
        [Fact]
        public void ClearDfBitTest()
        {
            // TODO unit test for the property 'ClearDfBit'
        }

        /// <summary>
        /// Test the property 'SmallerFirstFragment'
        /// </summary>
        [Fact]
        public void SmallerFirstFragmentTest()
        {
            // TODO unit test for the property 'SmallerFirstFragment'
        }

        /// <summary>
        /// Test the property 'Ipv6SmallFragment'
        /// </summary>
        [Fact]
        public void Ipv6SmallFragmentTest()
        {
            // TODO unit test for the property 'Ipv6SmallFragment'
        }

        /// <summary>
        /// Test the property 'OverrideMac'
        /// </summary>
        [Fact]
        public void OverrideMacTest()
        {
            // TODO unit test for the property 'OverrideMac'
        }

        /// <summary>
        /// Test the property 'DropRecordRoute'
        /// </summary>
        [Fact]
        public void DropRecordRouteTest()
        {
            // TODO unit test for the property 'DropRecordRoute'
        }

        /// <summary>
        /// Test the property 'AdvertiseFqdnRoute'
        /// </summary>
        [Fact]
        public void AdvertiseFqdnRouteTest()
        {
            // TODO unit test for the property 'AdvertiseFqdnRoute'
        }

        /// <summary>
        /// Test the property 'GenerateInterfaceDefaultRoute'
        /// </summary>
        [Fact]
        public void GenerateInterfaceDefaultRouteTest()
        {
            // TODO unit test for the property 'GenerateInterfaceDefaultRoute'
        }

        /// <summary>
        /// Test the property 'ZebosGranularDebug'
        /// </summary>
        [Fact]
        public void ZebosGranularDebugTest()
        {
            // TODO unit test for the property 'ZebosGranularDebug'
        }

        /// <summary>
        /// Test the property 'DmzIcmpRedirect'
        /// </summary>
        [Fact]
        public void DmzIcmpRedirectTest()
        {
            // TODO unit test for the property 'DmzIcmpRedirect'
        }

        /// <summary>
        /// Test the property 'EnforceStrictTcpComplianceRfc5961'
        /// </summary>
        [Fact]
        public void EnforceStrictTcpComplianceRfc5961Test()
        {
            // TODO unit test for the property 'EnforceStrictTcpComplianceRfc5961'
        }
    }
}
