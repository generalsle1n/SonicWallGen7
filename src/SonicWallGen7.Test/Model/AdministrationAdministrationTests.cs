/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using SonicWallGen7.Model;
using SonicWallGen7.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace SonicWallGen7.Test.Model
{
    /// <summary>
    ///  Class for testing AdministrationAdministration
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class AdministrationAdministrationTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for AdministrationAdministration
        //private AdministrationAdministration instance;

        public AdministrationAdministrationTests()
        {
            // TODO uncomment below to create an instance of AdministrationAdministration
            //instance = new AdministrationAdministration();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AdministrationAdministration
        /// </summary>
        [Fact]
        public void AdministrationAdministrationInstanceTest()
        {
            // TODO uncomment below to test "IsType" AdministrationAdministration
            //Assert.IsType<AdministrationAdministration>(instance);
        }

        /// <summary>
        /// Test the property 'FirewallName'
        /// </summary>
        [Fact]
        public void FirewallNameTest()
        {
            // TODO unit test for the property 'FirewallName'
        }

        /// <summary>
        /// Test the property 'AutoAppendSuffix'
        /// </summary>
        [Fact]
        public void AutoAppendSuffixTest()
        {
            // TODO unit test for the property 'AutoAppendSuffix'
        }

        /// <summary>
        /// Test the property 'EnforceHttpHostCheck'
        /// </summary>
        [Fact]
        public void EnforceHttpHostCheckTest()
        {
            // TODO unit test for the property 'EnforceHttpHostCheck'
        }

        /// <summary>
        /// Test the property 'FirewallDomainName'
        /// </summary>
        [Fact]
        public void FirewallDomainNameTest()
        {
            // TODO unit test for the property 'FirewallDomainName'
        }

        /// <summary>
        /// Test the property 'Admin'
        /// </summary>
        [Fact]
        public void AdminTest()
        {
            // TODO unit test for the property 'Admin'
        }

        /// <summary>
        /// Test the property 'Password'
        /// </summary>
        [Fact]
        public void PasswordTest()
        {
            // TODO unit test for the property 'Password'
        }

        /// <summary>
        /// Test the property 'IdleLogoutTime'
        /// </summary>
        [Fact]
        public void IdleLogoutTimeTest()
        {
            // TODO unit test for the property 'IdleLogoutTime'
        }

        /// <summary>
        /// Test the property 'UserLockout'
        /// </summary>
        [Fact]
        public void UserLockoutTest()
        {
            // TODO unit test for the property 'UserLockout'
        }

        /// <summary>
        /// Test the property 'LocalUserLockout'
        /// </summary>
        [Fact]
        public void LocalUserLockoutTest()
        {
            // TODO unit test for the property 'LocalUserLockout'
        }

        /// <summary>
        /// Test the property 'LogWithoutLockout'
        /// </summary>
        [Fact]
        public void LogWithoutLockoutTest()
        {
            // TODO unit test for the property 'LogWithoutLockout'
        }

        /// <summary>
        /// Test the property 'MaxLoginAttemptsCli'
        /// </summary>
        [Fact]
        public void MaxLoginAttemptsCliTest()
        {
            // TODO unit test for the property 'MaxLoginAttemptsCli'
        }

        /// <summary>
        /// Test the property 'Ipv6'
        /// </summary>
        [Fact]
        public void Ipv6Test()
        {
            // TODO unit test for the property 'Ipv6'
        }

        /// <summary>
        /// Test the property 'CloudBackupEnable'
        /// </summary>
        [Fact]
        public void CloudBackupEnableTest()
        {
            // TODO unit test for the property 'CloudBackupEnable'
        }

        /// <summary>
        /// Test the property 'InterAdminMessaging'
        /// </summary>
        [Fact]
        public void InterAdminMessagingTest()
        {
            // TODO unit test for the property 'InterAdminMessaging'
        }

        /// <summary>
        /// Test the property 'MultipleAdmin'
        /// </summary>
        [Fact]
        public void MultipleAdminTest()
        {
            // TODO unit test for the property 'MultipleAdmin'
        }

        /// <summary>
        /// Test the property 'EnhancedAuditLogging'
        /// </summary>
        [Fact]
        public void EnhancedAuditLoggingTest()
        {
            // TODO unit test for the property 'EnhancedAuditLogging'
        }

        /// <summary>
        /// Test the property 'WebManagement'
        /// </summary>
        [Fact]
        public void WebManagementTest()
        {
            // TODO unit test for the property 'WebManagement'
        }

        /// <summary>
        /// Test the property 'Uuid'
        /// </summary>
        [Fact]
        public void UuidTest()
        {
            // TODO unit test for the property 'Uuid'
        }

        /// <summary>
        /// Test the property 'DashboardAsStartingPage'
        /// </summary>
        [Fact]
        public void DashboardAsStartingPageTest()
        {
            // TODO unit test for the property 'DashboardAsStartingPage'
        }

        /// <summary>
        /// Test the property 'TlsAndAbove'
        /// </summary>
        [Fact]
        public void TlsAndAboveTest()
        {
            // TODO unit test for the property 'TlsAndAbove'
        }

        /// <summary>
        /// Test the property 'OutOfBandManagement'
        /// </summary>
        [Fact]
        public void OutOfBandManagementTest()
        {
            // TODO unit test for the property 'OutOfBandManagement'
        }

        /// <summary>
        /// Test the property 'LanguageOverride'
        /// </summary>
        [Fact]
        public void LanguageOverrideTest()
        {
            // TODO unit test for the property 'LanguageOverride'
        }

        /// <summary>
        /// Test the property 'GmsManagement'
        /// </summary>
        [Fact]
        public void GmsManagementTest()
        {
            // TODO unit test for the property 'GmsManagement'
        }

        /// <summary>
        /// Test the property 'SonicosApi'
        /// </summary>
        [Fact]
        public void SonicosApiTest()
        {
            // TODO unit test for the property 'SonicosApi'
        }

        /// <summary>
        /// Test the property 'Ssh'
        /// </summary>
        [Fact]
        public void SshTest()
        {
            // TODO unit test for the property 'Ssh'
        }

        /// <summary>
        /// Test the property 'HttpPort'
        /// </summary>
        [Fact]
        public void HttpPortTest()
        {
            // TODO unit test for the property 'HttpPort'
        }

        /// <summary>
        /// Test the property 'HttpsPort'
        /// </summary>
        [Fact]
        public void HttpsPortTest()
        {
            // TODO unit test for the property 'HttpsPort'
        }

        /// <summary>
        /// Test the property 'ForceThrough'
        /// </summary>
        [Fact]
        public void ForceThroughTest()
        {
            // TODO unit test for the property 'ForceThrough'
        }
    }
}
