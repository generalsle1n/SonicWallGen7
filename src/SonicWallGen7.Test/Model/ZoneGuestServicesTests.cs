/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using SonicWallGen7.Model;
using SonicWallGen7.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace SonicWallGen7.Test.Model
{
    /// <summary>
    ///  Class for testing ZoneGuestServices
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class ZoneGuestServicesTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for ZoneGuestServices
        //private ZoneGuestServices instance;

        public ZoneGuestServicesTests()
        {
            // TODO uncomment below to create an instance of ZoneGuestServices
            //instance = new ZoneGuestServices();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ZoneGuestServices
        /// </summary>
        [Fact]
        public void ZoneGuestServicesInstanceTest()
        {
            // TODO uncomment below to test "IsType" ZoneGuestServices
            //Assert.IsType<ZoneGuestServices>(instance);
        }

        /// <summary>
        /// Test the property 'Enable'
        /// </summary>
        [Fact]
        public void EnableTest()
        {
            // TODO unit test for the property 'Enable'
        }

        /// <summary>
        /// Test the property 'InterGuest'
        /// </summary>
        [Fact]
        public void InterGuestTest()
        {
            // TODO unit test for the property 'InterGuest'
        }

        /// <summary>
        /// Test the property 'ExternalAuth'
        /// </summary>
        [Fact]
        public void ExternalAuthTest()
        {
            // TODO unit test for the property 'ExternalAuth'
        }

        /// <summary>
        /// Test the property 'PolicyPageNonAuthentication'
        /// </summary>
        [Fact]
        public void PolicyPageNonAuthenticationTest()
        {
            // TODO unit test for the property 'PolicyPageNonAuthentication'
        }

        /// <summary>
        /// Test the property 'CustomAuthPage'
        /// </summary>
        [Fact]
        public void CustomAuthPageTest()
        {
            // TODO unit test for the property 'CustomAuthPage'
        }

        /// <summary>
        /// Test the property 'PostAuth'
        /// </summary>
        [Fact]
        public void PostAuthTest()
        {
            // TODO unit test for the property 'PostAuth'
        }

        /// <summary>
        /// Test the property 'BypassGuestAuth'
        /// </summary>
        [Fact]
        public void BypassGuestAuthTest()
        {
            // TODO unit test for the property 'BypassGuestAuth'
        }

        /// <summary>
        /// Test the property 'SmtpRedirect'
        /// </summary>
        [Fact]
        public void SmtpRedirectTest()
        {
            // TODO unit test for the property 'SmtpRedirect'
        }

        /// <summary>
        /// Test the property 'DenyNetworks'
        /// </summary>
        [Fact]
        public void DenyNetworksTest()
        {
            // TODO unit test for the property 'DenyNetworks'
        }

        /// <summary>
        /// Test the property 'PassNetworks'
        /// </summary>
        [Fact]
        public void PassNetworksTest()
        {
            // TODO unit test for the property 'PassNetworks'
        }

        /// <summary>
        /// Test the property 'MaxGuests'
        /// </summary>
        [Fact]
        public void MaxGuestsTest()
        {
            // TODO unit test for the property 'MaxGuests'
        }
    }
}
