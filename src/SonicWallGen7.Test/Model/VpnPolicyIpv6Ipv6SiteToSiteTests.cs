/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using SonicWallGen7.Model;
using SonicWallGen7.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace SonicWallGen7.Test.Model
{
    /// <summary>
    ///  Class for testing VpnPolicyIpv6Ipv6SiteToSite
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class VpnPolicyIpv6Ipv6SiteToSiteTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for VpnPolicyIpv6Ipv6SiteToSite
        //private VpnPolicyIpv6Ipv6SiteToSite instance;

        public VpnPolicyIpv6Ipv6SiteToSiteTests()
        {
            // TODO uncomment below to create an instance of VpnPolicyIpv6Ipv6SiteToSite
            //instance = new VpnPolicyIpv6Ipv6SiteToSite();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of VpnPolicyIpv6Ipv6SiteToSite
        /// </summary>
        [Fact]
        public void VpnPolicyIpv6Ipv6SiteToSiteInstanceTest()
        {
            // TODO uncomment below to test "IsType" VpnPolicyIpv6Ipv6SiteToSite
            //Assert.IsType<VpnPolicyIpv6Ipv6SiteToSite>(instance);
        }

        /// <summary>
        /// Test the property 'Name'
        /// </summary>
        [Fact]
        public void NameTest()
        {
            // TODO unit test for the property 'Name'
        }

        /// <summary>
        /// Test the property 'Enable'
        /// </summary>
        [Fact]
        public void EnableTest()
        {
            // TODO unit test for the property 'Enable'
        }

        /// <summary>
        /// Test the property 'AuthMethod'
        /// </summary>
        [Fact]
        public void AuthMethodTest()
        {
            // TODO unit test for the property 'AuthMethod'
        }

        /// <summary>
        /// Test the property 'Gateway'
        /// </summary>
        [Fact]
        public void GatewayTest()
        {
            // TODO unit test for the property 'Gateway'
        }

        /// <summary>
        /// Test the property 'Network'
        /// </summary>
        [Fact]
        public void NetworkTest()
        {
            // TODO unit test for the property 'Network'
        }

        /// <summary>
        /// Test the property 'Proposal'
        /// </summary>
        [Fact]
        public void ProposalTest()
        {
            // TODO unit test for the property 'Proposal'
        }

        /// <summary>
        /// Test the property 'KeepAlive'
        /// </summary>
        [Fact]
        public void KeepAliveTest()
        {
            // TODO unit test for the property 'KeepAlive'
        }

        /// <summary>
        /// Test the property 'AntiReplay'
        /// </summary>
        [Fact]
        public void AntiReplayTest()
        {
            // TODO unit test for the property 'AntiReplay'
        }

        /// <summary>
        /// Test the property 'Management'
        /// </summary>
        [Fact]
        public void ManagementTest()
        {
            // TODO unit test for the property 'Management'
        }

        /// <summary>
        /// Test the property 'BoundTo'
        /// </summary>
        [Fact]
        public void BoundToTest()
        {
            // TODO unit test for the property 'BoundTo'
        }

        /// <summary>
        /// Test the property 'LocalIp'
        /// </summary>
        [Fact]
        public void LocalIpTest()
        {
            // TODO unit test for the property 'LocalIp'
        }

        /// <summary>
        /// Test the property 'PreemptSecondaryGateway'
        /// </summary>
        [Fact]
        public void PreemptSecondaryGatewayTest()
        {
            // TODO unit test for the property 'PreemptSecondaryGateway'
        }

        /// <summary>
        /// Test the property 'SuppressTriggerPacket'
        /// </summary>
        [Fact]
        public void SuppressTriggerPacketTest()
        {
            // TODO unit test for the property 'SuppressTriggerPacket'
        }

        /// <summary>
        /// Test the property 'AcceptHash'
        /// </summary>
        [Fact]
        public void AcceptHashTest()
        {
            // TODO unit test for the property 'AcceptHash'
        }

        /// <summary>
        /// Test the property 'SendHash'
        /// </summary>
        [Fact]
        public void SendHashTest()
        {
            // TODO unit test for the property 'SendHash'
        }
    }
}
