/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using SonicWallGen7.Client;
using SonicWallGen7.Api;
// uncomment below to import models
//using SonicWallGen7.Model;

namespace SonicWallGen7.Test.Api
{
    /// <summary>
    ///  Class for testing UserLdapServerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UserLdapServerApiTests : IDisposable
    {
        private UserLdapServerApi instance;

        public UserLdapServerApiTests()
        {
            instance = new UserLdapServerApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UserLdapServerApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' UserLdapServerApi
            //Assert.IsType<UserLdapServerApi>(instance);
        }

        /// <summary>
        /// Test UserLdapServersGet
        /// </summary>
        [Fact]
        public void UserLdapServersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UserLdapServersGet();
            //Assert.IsType<UserLdapServerCollection>(response);
        }

        /// <summary>
        /// Test UserLdapServersNameNAMEDelete
        /// </summary>
        [Fact]
        public void UserLdapServersNameNAMEDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string NAME = null;
            //var response = instance.UserLdapServersNameNAMEDelete(NAME);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test UserLdapServersNameNAMEGet
        /// </summary>
        [Fact]
        public void UserLdapServersNameNAMEGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string NAME = null;
            //var response = instance.UserLdapServersNameNAMEGet(NAME);
            //Assert.IsType<UserLdapServerCollection>(response);
        }

        /// <summary>
        /// Test UserLdapServersNameNAMEPatch
        /// </summary>
        [Fact]
        public void UserLdapServersNameNAMEPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string NAME = null;
            //UserLdapServerCollection? userLdapServerCollection = null;
            //var response = instance.UserLdapServersNameNAMEPatch(NAME, userLdapServerCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test UserLdapServersNameNAMEPut
        /// </summary>
        [Fact]
        public void UserLdapServersNameNAMEPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string NAME = null;
            //UserLdapServerCollection? userLdapServerCollection = null;
            //var response = instance.UserLdapServersNameNAMEPut(NAME, userLdapServerCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test UserLdapServersPatch
        /// </summary>
        [Fact]
        public void UserLdapServersPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserLdapServerCollection? userLdapServerCollection = null;
            //var response = instance.UserLdapServersPatch(userLdapServerCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test UserLdapServersPost
        /// </summary>
        [Fact]
        public void UserLdapServersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserLdapServerCollection? userLdapServerCollection = null;
            //var response = instance.UserLdapServersPost(userLdapServerCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test UserLdapServersPut
        /// </summary>
        [Fact]
        public void UserLdapServersPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserLdapServerCollection? userLdapServerCollection = null;
            //var response = instance.UserLdapServersPut(userLdapServerCollection);
            //Assert.IsType<ApiStatus>(response);
        }
    }
}
