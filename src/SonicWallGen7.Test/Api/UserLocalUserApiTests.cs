/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using SonicWallGen7.Client;
using SonicWallGen7.Api;
// uncomment below to import models
//using SonicWallGen7.Model;

namespace SonicWallGen7.Test.Api
{
    /// <summary>
    ///  Class for testing UserLocalUserApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UserLocalUserApiTests : IDisposable
    {
        private UserLocalUserApi instance;

        public UserLocalUserApiTests()
        {
            instance = new UserLocalUserApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UserLocalUserApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' UserLocalUserApi
            //Assert.IsType<UserLocalUserApi>(instance);
        }

        /// <summary>
        /// Test UserLocalUsersGet
        /// </summary>
        [Fact]
        public void UserLocalUsersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UserLocalUsersGet();
            //Assert.IsType<UserLocalUserCollection>(response);
        }

        /// <summary>
        /// Test UserLocalUsersNameUNAMEDomainDNAMEDelete
        /// </summary>
        [Fact]
        public void UserLocalUsersNameUNAMEDomainDNAMEDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string UNAME = null;
            //string DNAME = null;
            //var response = instance.UserLocalUsersNameUNAMEDomainDNAMEDelete(UNAME, DNAME);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test UserLocalUsersNameUNAMEDomainDNAMEGet
        /// </summary>
        [Fact]
        public void UserLocalUsersNameUNAMEDomainDNAMEGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string UNAME = null;
            //string DNAME = null;
            //var response = instance.UserLocalUsersNameUNAMEDomainDNAMEGet(UNAME, DNAME);
            //Assert.IsType<UserLocalUserCollection>(response);
        }

        /// <summary>
        /// Test UserLocalUsersNameUNAMEDomainDNAMEPatch
        /// </summary>
        [Fact]
        public void UserLocalUsersNameUNAMEDomainDNAMEPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string UNAME = null;
            //string DNAME = null;
            //UserLocalUserCollection? userLocalUserCollection = null;
            //var response = instance.UserLocalUsersNameUNAMEDomainDNAMEPatch(UNAME, DNAME, userLocalUserCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test UserLocalUsersNameUNAMEDomainDNAMEPut
        /// </summary>
        [Fact]
        public void UserLocalUsersNameUNAMEDomainDNAMEPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string UNAME = null;
            //string DNAME = null;
            //UserLocalUserCollection? userLocalUserCollection = null;
            //var response = instance.UserLocalUsersNameUNAMEDomainDNAMEPut(UNAME, DNAME, userLocalUserCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test UserLocalUsersPatch
        /// </summary>
        [Fact]
        public void UserLocalUsersPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserLocalUserCollection? userLocalUserCollection = null;
            //var response = instance.UserLocalUsersPatch(userLocalUserCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test UserLocalUsersPost
        /// </summary>
        [Fact]
        public void UserLocalUsersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserLocalUserCollection? userLocalUserCollection = null;
            //var response = instance.UserLocalUsersPost(userLocalUserCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test UserLocalUsersPut
        /// </summary>
        [Fact]
        public void UserLocalUsersPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserLocalUserCollection? userLocalUserCollection = null;
            //var response = instance.UserLocalUsersPut(userLocalUserCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test UserLocalUsersUuidUUIDDelete
        /// </summary>
        [Fact]
        public void UserLocalUsersUuidUUIDDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string UUID = null;
            //var response = instance.UserLocalUsersUuidUUIDDelete(UUID);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test UserLocalUsersUuidUUIDGet
        /// </summary>
        [Fact]
        public void UserLocalUsersUuidUUIDGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string UUID = null;
            //var response = instance.UserLocalUsersUuidUUIDGet(UUID);
            //Assert.IsType<UserLocalUserCollection>(response);
        }

        /// <summary>
        /// Test UserLocalUsersUuidUUIDPatch
        /// </summary>
        [Fact]
        public void UserLocalUsersUuidUUIDPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string UUID = null;
            //UserLocalUserCollection? userLocalUserCollection = null;
            //var response = instance.UserLocalUsersUuidUUIDPatch(UUID, userLocalUserCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test UserLocalUsersUuidUUIDPut
        /// </summary>
        [Fact]
        public void UserLocalUsersUuidUUIDPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string UUID = null;
            //UserLocalUserCollection? userLocalUserCollection = null;
            //var response = instance.UserLocalUsersUuidUUIDPut(UUID, userLocalUserCollection);
            //Assert.IsType<ApiStatus>(response);
        }
    }
}
