/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using SonicWallGen7.Client;
using SonicWallGen7.Api;
// uncomment below to import models
//using SonicWallGen7.Model;

namespace SonicWallGen7.Test.Api
{
    /// <summary>
    ///  Class for testing IphPolicyApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class IphPolicyApiTests : IDisposable
    {
        private IphPolicyApi instance;

        public IphPolicyApiTests()
        {
            instance = new IphPolicyApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of IphPolicyApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' IphPolicyApi
            //Assert.IsType<IphPolicyApi>(instance);
        }

        /// <summary>
        /// Test IpHelperPoliciesGet
        /// </summary>
        [Fact]
        public void IpHelperPoliciesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.IpHelperPoliciesGet();
            //Assert.IsType<IphPolicyCollection>(response);
        }

        /// <summary>
        /// Test IpHelperPoliciesPatch
        /// </summary>
        [Fact]
        public void IpHelperPoliciesPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //IphPolicyCollection? iphPolicyCollection = null;
            //var response = instance.IpHelperPoliciesPatch(iphPolicyCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test IpHelperPoliciesPost
        /// </summary>
        [Fact]
        public void IpHelperPoliciesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //IphPolicyCollection? iphPolicyCollection = null;
            //var response = instance.IpHelperPoliciesPost(iphPolicyCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test IpHelperPoliciesProtocolPROTOCOLSourceDelete
        /// </summary>
        [Fact]
        public void IpHelperPoliciesProtocolPROTOCOLSourceDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string PROTOCOL = null;
            //var response = instance.IpHelperPoliciesProtocolPROTOCOLSourceDelete(PROTOCOL);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test IpHelperPoliciesProtocolPROTOCOLSourceGet
        /// </summary>
        [Fact]
        public void IpHelperPoliciesProtocolPROTOCOLSourceGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string PROTOCOL = null;
            //var response = instance.IpHelperPoliciesProtocolPROTOCOLSourceGet(PROTOCOL);
            //Assert.IsType<IphPolicyCollection>(response);
        }

        /// <summary>
        /// Test IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEDelete
        /// </summary>
        [Fact]
        public void IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string PROTOCOL = null;
            //string GROUPNAME = null;
            //var response = instance.IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEDelete(PROTOCOL, GROUPNAME);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEGet
        /// </summary>
        [Fact]
        public void IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string PROTOCOL = null;
            //string GROUPNAME = null;
            //var response = instance.IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEGet(PROTOCOL, GROUPNAME);
            //Assert.IsType<IphPolicyCollection>(response);
        }

        /// <summary>
        /// Test IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPatch
        /// </summary>
        [Fact]
        public void IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string PROTOCOL = null;
            //string GROUPNAME = null;
            //IphPolicyCollection? iphPolicyCollection = null;
            //var response = instance.IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPatch(PROTOCOL, GROUPNAME, iphPolicyCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPut
        /// </summary>
        [Fact]
        public void IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string PROTOCOL = null;
            //string GROUPNAME = null;
            //IphPolicyCollection? iphPolicyCollection = null;
            //var response = instance.IpHelperPoliciesProtocolPROTOCOLSourceGroupGROUPNAMEPut(PROTOCOL, GROUPNAME, iphPolicyCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEDelete
        /// </summary>
        [Fact]
        public void IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string PROTOCOL = null;
            //string IFNAME = null;
            //var response = instance.IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEDelete(PROTOCOL, IFNAME);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEGet
        /// </summary>
        [Fact]
        public void IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string PROTOCOL = null;
            //string IFNAME = null;
            //var response = instance.IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEGet(PROTOCOL, IFNAME);
            //Assert.IsType<IphPolicyCollection>(response);
        }

        /// <summary>
        /// Test IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPatch
        /// </summary>
        [Fact]
        public void IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string PROTOCOL = null;
            //string IFNAME = null;
            //IphPolicyCollection? iphPolicyCollection = null;
            //var response = instance.IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPatch(PROTOCOL, IFNAME, iphPolicyCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPut
        /// </summary>
        [Fact]
        public void IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string PROTOCOL = null;
            //string IFNAME = null;
            //IphPolicyCollection? iphPolicyCollection = null;
            //var response = instance.IpHelperPoliciesProtocolPROTOCOLSourceInterfaceIFNAMEPut(PROTOCOL, IFNAME, iphPolicyCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEDelete
        /// </summary>
        [Fact]
        public void IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string PROTOCOL = null;
            //string NETWORKNAME = null;
            //var response = instance.IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEDelete(PROTOCOL, NETWORKNAME);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEGet
        /// </summary>
        [Fact]
        public void IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string PROTOCOL = null;
            //string NETWORKNAME = null;
            //var response = instance.IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEGet(PROTOCOL, NETWORKNAME);
            //Assert.IsType<IphPolicyCollection>(response);
        }

        /// <summary>
        /// Test IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPatch
        /// </summary>
        [Fact]
        public void IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string PROTOCOL = null;
            //string NETWORKNAME = null;
            //IphPolicyCollection? iphPolicyCollection = null;
            //var response = instance.IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPatch(PROTOCOL, NETWORKNAME, iphPolicyCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPut
        /// </summary>
        [Fact]
        public void IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string PROTOCOL = null;
            //string NETWORKNAME = null;
            //IphPolicyCollection? iphPolicyCollection = null;
            //var response = instance.IpHelperPoliciesProtocolPROTOCOLSourceNameNETWORKNAMEPut(PROTOCOL, NETWORKNAME, iphPolicyCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test IpHelperPoliciesProtocolPROTOCOLSourcePatch
        /// </summary>
        [Fact]
        public void IpHelperPoliciesProtocolPROTOCOLSourcePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string PROTOCOL = null;
            //IphPolicyCollection? iphPolicyCollection = null;
            //var response = instance.IpHelperPoliciesProtocolPROTOCOLSourcePatch(PROTOCOL, iphPolicyCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test IpHelperPoliciesProtocolPROTOCOLSourcePut
        /// </summary>
        [Fact]
        public void IpHelperPoliciesProtocolPROTOCOLSourcePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string PROTOCOL = null;
            //IphPolicyCollection? iphPolicyCollection = null;
            //var response = instance.IpHelperPoliciesProtocolPROTOCOLSourcePut(PROTOCOL, iphPolicyCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEDelete
        /// </summary>
        [Fact]
        public void IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string PROTOCOL = null;
            //string ZONENAME = null;
            //var response = instance.IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEDelete(PROTOCOL, ZONENAME);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEGet
        /// </summary>
        [Fact]
        public void IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string PROTOCOL = null;
            //string ZONENAME = null;
            //var response = instance.IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEGet(PROTOCOL, ZONENAME);
            //Assert.IsType<IphPolicyCollection>(response);
        }

        /// <summary>
        /// Test IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPatch
        /// </summary>
        [Fact]
        public void IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string PROTOCOL = null;
            //string ZONENAME = null;
            //IphPolicyCollection? iphPolicyCollection = null;
            //var response = instance.IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPatch(PROTOCOL, ZONENAME, iphPolicyCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPut
        /// </summary>
        [Fact]
        public void IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string PROTOCOL = null;
            //string ZONENAME = null;
            //IphPolicyCollection? iphPolicyCollection = null;
            //var response = instance.IpHelperPoliciesProtocolPROTOCOLSourceZoneZONENAMEPut(PROTOCOL, ZONENAME, iphPolicyCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test IpHelperPoliciesPut
        /// </summary>
        [Fact]
        public void IpHelperPoliciesPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //IphPolicyCollection? iphPolicyCollection = null;
            //var response = instance.IpHelperPoliciesPut(iphPolicyCollection);
            //Assert.IsType<ApiStatus>(response);
        }
    }
}
