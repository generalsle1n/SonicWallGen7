/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using SonicWallGen7.Client;
using SonicWallGen7.Api;
// uncomment below to import models
//using SonicWallGen7.Model;

namespace SonicWallGen7.Test.Api
{
    /// <summary>
    ///  Class for testing ContentFilterActionApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ContentFilterActionApiTests : IDisposable
    {
        private ContentFilterActionApi instance;

        public ContentFilterActionApiTests()
        {
            instance = new ContentFilterActionApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ContentFilterActionApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ContentFilterActionApi
            //Assert.IsType<ContentFilterActionApi>(instance);
        }

        /// <summary>
        /// Test ContentFilterActionsGet
        /// </summary>
        [Fact]
        public void ContentFilterActionsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ContentFilterActionsGet();
            //Assert.IsType<ContentFilterActionCollection>(response);
        }

        /// <summary>
        /// Test ContentFilterActionsNameNAMEDelete
        /// </summary>
        [Fact]
        public void ContentFilterActionsNameNAMEDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string NAME = null;
            //var response = instance.ContentFilterActionsNameNAMEDelete(NAME);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test ContentFilterActionsNameNAMEGet
        /// </summary>
        [Fact]
        public void ContentFilterActionsNameNAMEGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string NAME = null;
            //var response = instance.ContentFilterActionsNameNAMEGet(NAME);
            //Assert.IsType<ContentFilterActionCollection>(response);
        }

        /// <summary>
        /// Test ContentFilterActionsNameNAMEPatch
        /// </summary>
        [Fact]
        public void ContentFilterActionsNameNAMEPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string NAME = null;
            //ContentFilterActionCollection? contentFilterActionCollection = null;
            //var response = instance.ContentFilterActionsNameNAMEPatch(NAME, contentFilterActionCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test ContentFilterActionsNameNAMEPut
        /// </summary>
        [Fact]
        public void ContentFilterActionsNameNAMEPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string NAME = null;
            //ContentFilterActionCollection? contentFilterActionCollection = null;
            //var response = instance.ContentFilterActionsNameNAMEPut(NAME, contentFilterActionCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test ContentFilterActionsPatch
        /// </summary>
        [Fact]
        public void ContentFilterActionsPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ContentFilterActionCollection? contentFilterActionCollection = null;
            //var response = instance.ContentFilterActionsPatch(contentFilterActionCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test ContentFilterActionsPost
        /// </summary>
        [Fact]
        public void ContentFilterActionsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ContentFilterActionCollection? contentFilterActionCollection = null;
            //var response = instance.ContentFilterActionsPost(contentFilterActionCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test ContentFilterActionsPut
        /// </summary>
        [Fact]
        public void ContentFilterActionsPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ContentFilterActionCollection? contentFilterActionCollection = null;
            //var response = instance.ContentFilterActionsPut(contentFilterActionCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test ContentFilterActionsUuidUUIDDelete
        /// </summary>
        [Fact]
        public void ContentFilterActionsUuidUUIDDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string UUID = null;
            //var response = instance.ContentFilterActionsUuidUUIDDelete(UUID);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test ContentFilterActionsUuidUUIDGet
        /// </summary>
        [Fact]
        public void ContentFilterActionsUuidUUIDGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string UUID = null;
            //var response = instance.ContentFilterActionsUuidUUIDGet(UUID);
            //Assert.IsType<ContentFilterActionCollection>(response);
        }

        /// <summary>
        /// Test ContentFilterActionsUuidUUIDPatch
        /// </summary>
        [Fact]
        public void ContentFilterActionsUuidUUIDPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string UUID = null;
            //ContentFilterActionCollection? contentFilterActionCollection = null;
            //var response = instance.ContentFilterActionsUuidUUIDPatch(UUID, contentFilterActionCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test ContentFilterActionsUuidUUIDPut
        /// </summary>
        [Fact]
        public void ContentFilterActionsUuidUUIDPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string UUID = null;
            //ContentFilterActionCollection? contentFilterActionCollection = null;
            //var response = instance.ContentFilterActionsUuidUUIDPut(UUID, contentFilterActionCollection);
            //Assert.IsType<ApiStatus>(response);
        }
    }
}
