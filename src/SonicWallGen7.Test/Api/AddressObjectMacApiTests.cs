/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using SonicWallGen7.Client;
using SonicWallGen7.Api;
// uncomment below to import models
//using SonicWallGen7.Model;

namespace SonicWallGen7.Test.Api
{
    /// <summary>
    ///  Class for testing AddressObjectMacApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AddressObjectMacApiTests : IDisposable
    {
        private AddressObjectMacApi instance;

        public AddressObjectMacApiTests()
        {
            instance = new AddressObjectMacApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AddressObjectMacApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' AddressObjectMacApi
            //Assert.IsType<AddressObjectMacApi>(instance);
        }

        /// <summary>
        /// Test AddressObjectsMacGet
        /// </summary>
        [Fact]
        public void AddressObjectsMacGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.AddressObjectsMacGet();
            //Assert.IsType<AddressObjectMacCollection>(response);
        }

        /// <summary>
        /// Test AddressObjectsMacNameNAMEDelete
        /// </summary>
        [Fact]
        public void AddressObjectsMacNameNAMEDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string NAME = null;
            //var response = instance.AddressObjectsMacNameNAMEDelete(NAME);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test AddressObjectsMacNameNAMEGet
        /// </summary>
        [Fact]
        public void AddressObjectsMacNameNAMEGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string NAME = null;
            //var response = instance.AddressObjectsMacNameNAMEGet(NAME);
            //Assert.IsType<AddressObjectMacCollection>(response);
        }

        /// <summary>
        /// Test AddressObjectsMacNameNAMEPatch
        /// </summary>
        [Fact]
        public void AddressObjectsMacNameNAMEPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string NAME = null;
            //AddressObjectMacCollection? addressObjectMacCollection = null;
            //var response = instance.AddressObjectsMacNameNAMEPatch(NAME, addressObjectMacCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test AddressObjectsMacNameNAMEPut
        /// </summary>
        [Fact]
        public void AddressObjectsMacNameNAMEPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string NAME = null;
            //AddressObjectMacCollection? addressObjectMacCollection = null;
            //var response = instance.AddressObjectsMacNameNAMEPut(NAME, addressObjectMacCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test AddressObjectsMacPatch
        /// </summary>
        [Fact]
        public void AddressObjectsMacPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AddressObjectMacCollection? addressObjectMacCollection = null;
            //var response = instance.AddressObjectsMacPatch(addressObjectMacCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test AddressObjectsMacPost
        /// </summary>
        [Fact]
        public void AddressObjectsMacPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AddressObjectMacCollection? addressObjectMacCollection = null;
            //var response = instance.AddressObjectsMacPost(addressObjectMacCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test AddressObjectsMacPut
        /// </summary>
        [Fact]
        public void AddressObjectsMacPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AddressObjectMacCollection? addressObjectMacCollection = null;
            //var response = instance.AddressObjectsMacPut(addressObjectMacCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test AddressObjectsMacUuidUUIDDelete
        /// </summary>
        [Fact]
        public void AddressObjectsMacUuidUUIDDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string UUID = null;
            //var response = instance.AddressObjectsMacUuidUUIDDelete(UUID);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test AddressObjectsMacUuidUUIDGet
        /// </summary>
        [Fact]
        public void AddressObjectsMacUuidUUIDGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string UUID = null;
            //var response = instance.AddressObjectsMacUuidUUIDGet(UUID);
            //Assert.IsType<AddressObjectMacCollection>(response);
        }

        /// <summary>
        /// Test AddressObjectsMacUuidUUIDPatch
        /// </summary>
        [Fact]
        public void AddressObjectsMacUuidUUIDPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string UUID = null;
            //AddressObjectMacCollection? addressObjectMacCollection = null;
            //var response = instance.AddressObjectsMacUuidUUIDPatch(UUID, addressObjectMacCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test AddressObjectsMacUuidUUIDPut
        /// </summary>
        [Fact]
        public void AddressObjectsMacUuidUUIDPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string UUID = null;
            //AddressObjectMacCollection? addressObjectMacCollection = null;
            //var response = instance.AddressObjectsMacUuidUUIDPut(UUID, addressObjectMacCollection);
            //Assert.IsType<ApiStatus>(response);
        }
    }
}
