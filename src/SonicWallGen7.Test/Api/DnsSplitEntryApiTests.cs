/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using SonicWallGen7.Client;
using SonicWallGen7.Api;
// uncomment below to import models
//using SonicWallGen7.Model;

namespace SonicWallGen7.Test.Api
{
    /// <summary>
    ///  Class for testing SonicDnsSplitEntryApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SonicDnsSplitEntryApiTests : IDisposable
    {
        private SonicDnsSplitEntryApi instance;

        public SonicDnsSplitEntryApiTests()
        {
            instance = new SonicDnsSplitEntryApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SonicDnsSplitEntryApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' SonicDnsSplitEntryApi
            //Assert.IsType<SonicDnsSplitEntryApi>(instance);
        }

        /// <summary>
        /// Test SonicDnsSplitEntriesDomainNAMEDelete
        /// </summary>
        [Fact]
        public void SonicDnsSplitEntriesDomainNAMEDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string NAME = null;
            //var response = instance.SonicDnsSplitEntriesDomainNAMEDelete(NAME);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test SonicDnsSplitEntriesDomainNAMEGet
        /// </summary>
        [Fact]
        public void SonicDnsSplitEntriesDomainNAMEGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string NAME = null;
            //var response = instance.SonicDnsSplitEntriesDomainNAMEGet(NAME);
            //Assert.IsType<SonicDnsSplitEntryCollection>(response);
        }

        /// <summary>
        /// Test SonicDnsSplitEntriesDomainNAMEPatch
        /// </summary>
        [Fact]
        public void SonicDnsSplitEntriesDomainNAMEPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string NAME = null;
            //SonicDnsSplitEntryCollection? SonicDnsSplitEntryCollection = null;
            //var response = instance.SonicDnsSplitEntriesDomainNAMEPatch(NAME, SonicDnsSplitEntryCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test SonicDnsSplitEntriesDomainNAMEPut
        /// </summary>
        [Fact]
        public void SonicDnsSplitEntriesDomainNAMEPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string NAME = null;
            //SonicDnsSplitEntryCollection? SonicDnsSplitEntryCollection = null;
            //var response = instance.SonicDnsSplitEntriesDomainNAMEPut(NAME, SonicDnsSplitEntryCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test SonicDnsSplitEntriesGet
        /// </summary>
        [Fact]
        public void SonicDnsSplitEntriesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.SonicDnsSplitEntriesGet();
            //Assert.IsType<SonicDnsSplitEntryCollection>(response);
        }

        /// <summary>
        /// Test SonicDnsSplitEntriesPatch
        /// </summary>
        [Fact]
        public void SonicDnsSplitEntriesPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SonicDnsSplitEntryCollection? SonicDnsSplitEntryCollection = null;
            //var response = instance.SonicDnsSplitEntriesPatch(SonicDnsSplitEntryCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test SonicDnsSplitEntriesPost
        /// </summary>
        [Fact]
        public void SonicDnsSplitEntriesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SonicDnsSplitEntryCollection? SonicDnsSplitEntryCollection = null;
            //var response = instance.SonicDnsSplitEntriesPost(SonicDnsSplitEntryCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test SonicDnsSplitEntriesPut
        /// </summary>
        [Fact]
        public void SonicDnsSplitEntriesPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SonicDnsSplitEntryCollection? SonicDnsSplitEntryCollection = null;
            //var response = instance.SonicDnsSplitEntriesPut(SonicDnsSplitEntryCollection);
            //Assert.IsType<ApiStatus>(response);
        }
    }
}
