/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using SonicWallGen7.Client;
using SonicWallGen7.Api;
// uncomment below to import models
//using SonicWallGen7.Model;

namespace SonicWallGen7.Test.Api
{
    /// <summary>
    ///  Class for testing UserSsoSecurityServiceBypassApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UserSsoSecurityServiceBypassApiTests : IDisposable
    {
        private UserSsoSecurityServiceBypassApi instance;

        public UserSsoSecurityServiceBypassApiTests()
        {
            instance = new UserSsoSecurityServiceBypassApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UserSsoSecurityServiceBypassApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' UserSsoSecurityServiceBypassApi
            //Assert.IsType<UserSsoSecurityServiceBypassApi>(instance);
        }

        /// <summary>
        /// Test UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEDelete
        /// </summary>
        [Fact]
        public void UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ADDRGRPNAME = null;
            //var response = instance.UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEDelete(ADDRGRPNAME);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEGet
        /// </summary>
        [Fact]
        public void UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ADDRGRPNAME = null;
            //var response = instance.UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEGet(ADDRGRPNAME);
            //Assert.IsType<UserSsoSecurityServiceBypassCollection>(response);
        }

        /// <summary>
        /// Test UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEPut
        /// </summary>
        [Fact]
        public void UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ADDRGRPNAME = null;
            //UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = null;
            //var response = instance.UserSsoSecurityServicesBypassAddressGroupADDRGRPNAMEPut(ADDRGRPNAME, userSsoSecurityServiceBypassCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test UserSsoSecurityServicesBypassAddressNameADDROBJNAMEDelete
        /// </summary>
        [Fact]
        public void UserSsoSecurityServicesBypassAddressNameADDROBJNAMEDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ADDROBJNAME = null;
            //var response = instance.UserSsoSecurityServicesBypassAddressNameADDROBJNAMEDelete(ADDROBJNAME);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test UserSsoSecurityServicesBypassAddressNameADDROBJNAMEGet
        /// </summary>
        [Fact]
        public void UserSsoSecurityServicesBypassAddressNameADDROBJNAMEGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ADDROBJNAME = null;
            //var response = instance.UserSsoSecurityServicesBypassAddressNameADDROBJNAMEGet(ADDROBJNAME);
            //Assert.IsType<UserSsoSecurityServiceBypassCollection>(response);
        }

        /// <summary>
        /// Test UserSsoSecurityServicesBypassAddressNameADDROBJNAMEPut
        /// </summary>
        [Fact]
        public void UserSsoSecurityServicesBypassAddressNameADDROBJNAMEPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ADDROBJNAME = null;
            //UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = null;
            //var response = instance.UserSsoSecurityServicesBypassAddressNameADDROBJNAMEPut(ADDROBJNAME, userSsoSecurityServiceBypassCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test UserSsoSecurityServicesBypassGet
        /// </summary>
        [Fact]
        public void UserSsoSecurityServicesBypassGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UserSsoSecurityServicesBypassGet();
            //Assert.IsType<UserSsoSecurityServiceBypassCollection>(response);
        }

        /// <summary>
        /// Test UserSsoSecurityServicesBypassPost
        /// </summary>
        [Fact]
        public void UserSsoSecurityServicesBypassPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = null;
            //var response = instance.UserSsoSecurityServicesBypassPost(userSsoSecurityServiceBypassCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test UserSsoSecurityServicesBypassPut
        /// </summary>
        [Fact]
        public void UserSsoSecurityServicesBypassPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = null;
            //var response = instance.UserSsoSecurityServicesBypassPut(userSsoSecurityServiceBypassCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEDelete
        /// </summary>
        [Fact]
        public void UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string BLTNAME = null;
            //var response = instance.UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEDelete(BLTNAME);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEGet
        /// </summary>
        [Fact]
        public void UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string BLTNAME = null;
            //var response = instance.UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEGet(BLTNAME);
            //Assert.IsType<UserSsoSecurityServiceBypassCollection>(response);
        }

        /// <summary>
        /// Test UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEPut
        /// </summary>
        [Fact]
        public void UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string BLTNAME = null;
            //UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = null;
            //var response = instance.UserSsoSecurityServicesBypassServiceBuiltInBLTNAMEPut(BLTNAME, userSsoSecurityServiceBypassCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test UserSsoSecurityServicesBypassServiceGroupGRPNAMEDelete
        /// </summary>
        [Fact]
        public void UserSsoSecurityServicesBypassServiceGroupGRPNAMEDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string GRPNAME = null;
            //var response = instance.UserSsoSecurityServicesBypassServiceGroupGRPNAMEDelete(GRPNAME);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test UserSsoSecurityServicesBypassServiceGroupGRPNAMEGet
        /// </summary>
        [Fact]
        public void UserSsoSecurityServicesBypassServiceGroupGRPNAMEGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string GRPNAME = null;
            //var response = instance.UserSsoSecurityServicesBypassServiceGroupGRPNAMEGet(GRPNAME);
            //Assert.IsType<UserSsoSecurityServiceBypassCollection>(response);
        }

        /// <summary>
        /// Test UserSsoSecurityServicesBypassServiceGroupGRPNAMEPut
        /// </summary>
        [Fact]
        public void UserSsoSecurityServicesBypassServiceGroupGRPNAMEPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string GRPNAME = null;
            //UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = null;
            //var response = instance.UserSsoSecurityServicesBypassServiceGroupGRPNAMEPut(GRPNAME, userSsoSecurityServiceBypassCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test UserSsoSecurityServicesBypassServiceNameOBJNAMEDelete
        /// </summary>
        [Fact]
        public void UserSsoSecurityServicesBypassServiceNameOBJNAMEDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string OBJNAME = null;
            //var response = instance.UserSsoSecurityServicesBypassServiceNameOBJNAMEDelete(OBJNAME);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test UserSsoSecurityServicesBypassServiceNameOBJNAMEGet
        /// </summary>
        [Fact]
        public void UserSsoSecurityServicesBypassServiceNameOBJNAMEGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string OBJNAME = null;
            //var response = instance.UserSsoSecurityServicesBypassServiceNameOBJNAMEGet(OBJNAME);
            //Assert.IsType<UserSsoSecurityServiceBypassCollection>(response);
        }

        /// <summary>
        /// Test UserSsoSecurityServicesBypassServiceNameOBJNAMEPut
        /// </summary>
        [Fact]
        public void UserSsoSecurityServicesBypassServiceNameOBJNAMEPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string OBJNAME = null;
            //UserSsoSecurityServiceBypassCollection? userSsoSecurityServiceBypassCollection = null;
            //var response = instance.UserSsoSecurityServicesBypassServiceNameOBJNAMEPut(OBJNAME, userSsoSecurityServiceBypassCollection);
            //Assert.IsType<ApiStatus>(response);
        }
    }
}
