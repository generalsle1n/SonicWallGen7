/*
 * SonicOS API
 *
 * __Swagger Specification for SonicOS APIs__  ___SonicOS support two-factor and bearer token login from SWAGGER only.___  Please follow the following steps to login. > 1. POST \"tfa\" with your username, password, and two-factor code to the firewall. If you are authenticating a username for the first time, please login to GUI and scan the QR code to activate two-factor authentication. > 2. The Bearer Token is returned in response to the \"tfa\" message. Copy the Bearer Token to the \"Authorize\" button. > 3. DELETE \"auth\" to logout of the current session. 
 *
 * The version of the OpenAPI document: 7.0.1
 * Contact: sonicOsApiSupport@SonicWall.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using SonicWallGen7.Client;
using SonicWallGen7.Api;
// uncomment below to import models
//using SonicWallGen7.Model;

namespace SonicWallGen7.Test.Api
{
    /// <summary>
    ///  Class for testing DhcpOverVpnStaticDevicesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DhcpOverVpnStaticDevicesApiTests : IDisposable
    {
        private DhcpOverVpnStaticDevicesApi instance;

        public DhcpOverVpnStaticDevicesApiTests()
        {
            instance = new DhcpOverVpnStaticDevicesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DhcpOverVpnStaticDevicesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' DhcpOverVpnStaticDevicesApi
            //Assert.IsType<DhcpOverVpnStaticDevicesApi>(instance);
        }

        /// <summary>
        /// Test VpnDhcpOverVpnStaticDevicesGet
        /// </summary>
        [Fact]
        public void VpnDhcpOverVpnStaticDevicesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.VpnDhcpOverVpnStaticDevicesGet();
            //Assert.IsType<DhcpOverVpnStaticDevicesCollection>(response);
        }

        /// <summary>
        /// Test VpnDhcpOverVpnStaticDevicesIpHOSTIPDelete
        /// </summary>
        [Fact]
        public void VpnDhcpOverVpnStaticDevicesIpHOSTIPDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string HOSTIP = null;
            //var response = instance.VpnDhcpOverVpnStaticDevicesIpHOSTIPDelete(HOSTIP);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test VpnDhcpOverVpnStaticDevicesIpHOSTIPGet
        /// </summary>
        [Fact]
        public void VpnDhcpOverVpnStaticDevicesIpHOSTIPGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string HOSTIP = null;
            //var response = instance.VpnDhcpOverVpnStaticDevicesIpHOSTIPGet(HOSTIP);
            //Assert.IsType<DhcpOverVpnStaticDevicesCollection>(response);
        }

        /// <summary>
        /// Test VpnDhcpOverVpnStaticDevicesIpHOSTIPPut
        /// </summary>
        [Fact]
        public void VpnDhcpOverVpnStaticDevicesIpHOSTIPPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string HOSTIP = null;
            //DhcpOverVpnStaticDevicesCollection? dhcpOverVpnStaticDevicesCollection = null;
            //var response = instance.VpnDhcpOverVpnStaticDevicesIpHOSTIPPut(HOSTIP, dhcpOverVpnStaticDevicesCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test VpnDhcpOverVpnStaticDevicesPost
        /// </summary>
        [Fact]
        public void VpnDhcpOverVpnStaticDevicesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DhcpOverVpnStaticDevicesCollection? dhcpOverVpnStaticDevicesCollection = null;
            //var response = instance.VpnDhcpOverVpnStaticDevicesPost(dhcpOverVpnStaticDevicesCollection);
            //Assert.IsType<ApiStatus>(response);
        }

        /// <summary>
        /// Test VpnDhcpOverVpnStaticDevicesPut
        /// </summary>
        [Fact]
        public void VpnDhcpOverVpnStaticDevicesPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DhcpOverVpnStaticDevicesCollection? dhcpOverVpnStaticDevicesCollection = null;
            //var response = instance.VpnDhcpOverVpnStaticDevicesPut(dhcpOverVpnStaticDevicesCollection);
            //Assert.IsType<ApiStatus>(response);
        }
    }
}
